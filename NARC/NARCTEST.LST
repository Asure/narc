TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .FILE   "NARCTEST.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    **************************************************************************
       7                    *                                                                        *
       8                    *          NARC (R)                                                      *
       9                    *                                                                        *
      10                    *          Copyright 1988 Williams Electronics Games Inc.                *
      11                    *          All Rights Reserved                                           *
      12                    *                                                                        *
      13                    **************************************************************************
      14                    *                                                                        *
      15                    *          Narc Test Program                                             *
      16                    *                                                                        *
      17                    *          Larry DeMar    November 22, 1988                              *
      18                    *                                                                        *
      19                    **************************************************************************
      20                    
      21                            .INCLUDE        "\video\MPROCEQU.ASM"   ;MPROC equates
      22                            .INCLUDE        "\video\DISPEQU.ASM"
      23                            .INCLUDE        "\video\GSP.INC"          ;GSP assembler equates
      24                            .INCLUDE        "\video\SYS.INC"    ;Zunit system equates
      25                            .INCLUDE        "\video\MACROS.HDR" ;Macros, Yeah!
      26                            .INCLUDE        "IMGTBL.GLO"              ;GLOBALS
      27                    *       LOCAL STUFF
      28                            .INCLUDE        "NARCEQU.ASM"           ;NARC Equates
      29                             .INCLUDE        "NARCLEQU.ASM"      ;LINKY EQUATES
      30                             .INCLUDE        "NARCMEQU.ASM"      ;MENU EQUATES
      31                    *
      32                    *        IN THIS MODULE
      33                    *
      34                             .GLOBAL         DIAG,CHK_CMOS
      35                             .GLOBAL         GEN_MENU,B_MENU
      36                             .GLOBAL         TOP_BOX,WT_ADV
      37                             .GLOBAL         WW_ADV
      38                             .GLOBAL         MAIN_RET,GMENULEV
      39                             .GLOBAL         CK_DOOR
      40                             .GLOBAL         AREUSURE
      41                             .GLOBAL         F_TITLE
      42                             .GLOBAL         ST_STICK
      43                             .GLOBAL         GETSTICK
      44                             .GLOBAL         SUR_MESS
      45                             .GLOBAL         SURE_BOX
      46                             .GLOBAL         RT_RET,ROM_RET
      47                             .GLOBAL         GET_FAC
      48                             .GLOBAL         MENU_TOP
      49                             .GLOBAL         CYAN_BOX
      50                             .GLOBAL         BLNKHELP,H_SLAVE
      51                             .GLOBAL         DOBORDER
      52                             .GLOBAL         COL_INST
      53                             .GLOBAL         STD_BORD
      54                             .GLOBAL         DIAG_EX
      55                             .GLOBAL         WAIT_BUT
      56                             .GLOBAL         DIGSRT
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    2

      57                             .GLOBAL         GET_ADV
      58                             .GLOBAL         SND_MADE
      59                             .GLOBAL         NO_CLEAR
      60                             .GLOBAL         LAST_BUT
      61                             .GLOBAL         G_BORDER
      62                             .GLOBAL         FORM_SWS
      63                    *
      64                    *        IN NARCHELP
      65                    *
      66                             .GLOBAL         CMOS_VAL,L_MESS,DISPDUMP
      67                             .GLOBAL         LM_SETUP,LM_FINIS
      68                             .GLOBAL         FORM_ADC
      69                             .GLOBAL         F_ADC_S
      70                             .GLOBAL         GET_AUD
      71                             .GLOBAL         FAC_SET
      72                             .GLOBAL         CRED_P
      73                             .GLOBAL         BAD_AUD
      74                             .GLOBAL         CLR_AUD
      75                             .GLOBAL         ADJ_PAGE
      76                             .GLOBAL                COIN_PAG
      77                             .GLOBAL         ROM_NAME
      78                    *
      79                    *        IN NARCHSTD
      80                    *
      81                             .GLOBAL         ALL_TAB,INIT_TB,TOD_TAB,RES_SCRL
      82                             .GLOBAL         INIT_TAB
      83                             .GLOBAL         E_GAME,HSTDTAB,VAL_TAB
      84                             .GLOBAL         P_FORK
      85                             .GLOBAL         RC_BYTEI
      86                             .GLOBAL         RC_BYTE
      87                             .GLOBAL         RC_WORD
      88                             .GLOBAL         RC_LONG
      89                             .GLOBAL         RC_LONGI
      90                             .GLOBAL         WC_BYTE
      91                             .GLOBAL         WC_BYTEI
      92                             .GLOBAL         WC_WORD
      93                             .GLOBAL         WC_WORDI
      94                             .GLOBAL         WC_LONG
      95                             .GLOBAL         WC_LONGI
      96                    *
      97                    *        IN NARCMENU
      98                    *
      99                             .GLOBAL         MEN_MAIN,ANY_BUT,MEN_YN
     100                             .GLOBAL         MESS_FAC
     101                             .GLOBAL         GO_DIAG           ;ROUTINE FOR DIAGNOSTIC MENU
     102                             .GLOBAL         RTR_LEV,ROM_LEV
     103                    *         .GLOBAL         CK_PUSS
     104                             .GLOBAL         FAC_STUF
     105                             .GLOBAL         SCODE             ;SYNTH CODE CURRENTLY BEING MADE
     106                             .GLOBAL         DCODE             ;DIG CODE CURRENTLY BEING MADE
     107                    *
     108                    *        NARCADJ
     109                    *
     110                             .GLOBAL DO_ADJH
     111                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    3

     112                    *        OTHERS
     113                    *
     114                             .GLOBAL                SETUP, WARMSET
     115                             .GLOBAL         QSNDRST
     116                             .GLOBAL         FILLAREA
     117                             .GLOBAL         STRNGLEN
     118                    *
     119                    *        MAIN_RET
     120                    *
     121                    *        POSITIVE NUMBER HERE SAYS RETURN (UPWARD) TO MAIN MENU (GEN_MENU ONLY)
     122                    *        NEGATIVE NUMBER HERE SAYS SETUP RESTORE AFTER RAM TEST. (GEN_MENU)
     123                    *
     124 00000000                    .BSS            MAIN_RET,16          ;FLAG SAYS RETURN TO MAIN MENU
     125 00000010                    .BSS            GMENULEV,16          ;HOW DEEP INTO GEN_MENU WE ARE
     126 00000020                    .BSS            SND_MADE,16          ;SOUND TEST FLAG
     127 00000030                    .BSS            NO_CLEAR,16          ;FLAG TELLS GET_MENU NOT TO CLEAR!
     128 00000040                    .BSS            LAST_BUT,32
     129                    
     130 00000000                    .TEXT
     131                    
     132                             .IF      LINKMACH
     133                    
     134                             .GLOBAL         LINKY
     135                    
     136                    LINKY:
     137                    *AMODUS ZYKLEN
     138                    AMODE    MOVE    @GAMSTATE,A0,W
     139                             CMPI    INDIAG,A0
     140                             JRNZ    DO_AMODE
     141                             JAUC    SUCIDE
     142                    
     143                    DO_AMODE
     144                             MOVI    1,A0
     145                             MOVE    A0,@DISPLAYON,W      ;TURN DISPLAY SYSTEM ON!
     146                    *
     147                    *        NOW GO INTO ATTRACT MODE
     148                    *
     149                             MOVI    0,A0                 ;PATCHABLE WAY TO RESET HIGHEST
     150                             MOVE    A0,A0
     151                             JRZ     DONT_CLEAR
     152                    
     153                             MOVI    ALL_TAB,A8           
     154                             CALLA   INIT_TB
     155                    
     156                    DONT_CLEAR
     157                             MOVI    TOD_TAB,A8           ;ALWAYS CLEAR OUT TODAYS TABLE
     158                             CALLA   INIT_TAB             ;THIS IS THE POWER UP ENTRYPOINT
     159                    
     160                             MOVI    12345678H,A0         ;GIVE THE "PLAYERS" HIGH SCORES
     161                             MOVE    A0,@P1DATA+PSCORE,L
     162                             MOVI    23456789H,A0
     163                             MOVE    A0,@P2DATA+PSCORE,L
     164                    
     165                             MOVI    4,A3                 ;START THE RAP!
     166                             MOVI    3,A5
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    4

     167                             CALLA   SNDSND               ;SEND IT!
     168                    
     169                             CALLA   CLR_SCRN                  ;CLEAR OUT THE SCREEN
     170                    
     171                    *          A4 = UPPER LEFT Y,X                                           *
     172                    *          A5 = LOWER RIGHT Y,X                                          *
     173                    *          A6 = NUMBER OF SLICES GOING IN.                               *
     174                    
     175                    
     176                             MOVI    100010H,A4
     177                             MOVI    6001E0H,A5
     178                             MOVI    16,A6
     179                             CALLR   G_BORDER
     180                    
     181                             JSRP    E_GAME
     182                    *
     183                    *        NOW DISPLAY THE HIGH SCORE TABLE!
     184                    *
     185                    *        LET THE COLOR CYCLERS GO!
     186                    *
     187                    *        THIS IS THE ONLY APPROVED WAY TO SHUT OFF THE 
     188                    *        INTERRUPT DRIVEN SCROLLER!
     189                    *
     190                    DO_HSTD_TABLE
     191                             CALLA   RES_SCRL
     192                             CLR     A0
     193                             MOVE    A0,@DISPLAYON,W    ; TURN OFF DMA
     194                             CALLA   DMAQWAIT           ; WAIT FOR DMA TO BE DONE (IF IN MOTION)
     195                    
     196                    **************************************************************************
     197                    *                                                                        *
     198                    *          MOVI    1FH,A0                                                *
     199                    *          MOVE    A0,@COLRAM,W        ;BACKGROUND OF BLUE               *
     200                    *                                                                        *
     201                    **************************************************************************
     202                             JSRP    HSTDTAB
     203                             JRUC    AMODE
     204                    
     205                             .ENDIF
     206                    
     207                    **************************************************************************
     208                    *                                                                        *
     209                    *          RT_RET                                                        *
     210                    *                                                                        *
     211                    *          THIS IS THE RETURN POINT FROM THE RAM TEST.                   *
     212                    *                                                                        *
     213                    *          SINCE RAM TEST SMASHES RAM, THE MENU "JSRP"                   *
     214                    *          GEN_MENU TREE HAS BEEN SMASHED.  GEORGE WILL START            *
     215                    *          THIS PROCESS AFTER RAM TEST WHICH MUST GET THE                *
     216                    *          "MONITOR PATTERN" PART OF THE DIAGNOSTIC TEST                 *
     217                    *          UP TO BE SELECTED.                                            *
     218                    *                                                                        *
     219                    **************************************************************************
     220 00000000     0d3f  RT_RET   CALLR   DIAG_STATE      ;GET THE STATE RIGHT.....BUT DON'T MESS UP TILL BUTTON
         00000010     0173  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    5

     221 00000020                    JSRP    WAIT_BUT        ;NOW WAIT FOR ANY BUTTON.
     222 00000090     0d3f           CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         000000a0     0152  
     223                    
     224 000000b0     5600           CLR     A0
     225 000000c0     0580           MOVE    A0,@GMENULEV,W  ;INDICATE WE'RE AT LEVEL ZERO.
         000000d0 00000010- 
     226                    
     227 000000f0     09e0           MOVI    RTR_LEV,A0      ;THIS IS THE LEVEL TO DIVE TO
         00000100 00000000! 
     228 00000120     03a0           NEG     A0              ;NEGATE IT AS FLAG TO DIVE.
     229 00000130     0580           MOVE    A0,@MAIN_RET,W  ;INDICATE
         00000140 00000000- 
     230 00000160     c080           JAUC    DIAG_RESTART    ;NOW START IT UP....
         00000170 00000620' 
     231                    
     232                    **************************************************************************
     233                    *                                                                        *
     234                    *          ROM_RET                                                       *
     235                    *                                                                        *
     236                    *          THIS IS RETURN FROM ROM TEST.   SINCE WE NEED TO TEST         *
     237                    *          RAM BEFORE ROM, OUR STATE IS ALSO SMASHED FROM ROM TEST.      *
     238                    *                                                                        *
     239                    **************************************************************************
     240 00000190     0d3f  ROM_RET  CALLR   DIAG_STATE      ;GET THE STATE RIGHT.....BUT DON'T MESS UP TILL BUTTON
         000001a0     015a  
     241 000001b0                    JSRP    WAIT_BUT        ;NOW WAIT FOR ANY BUTTON.
     242 00000220     0d3f           CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         00000230     0139  
     243                    
     244 00000240     5600           CLR     A0
     245 00000250     0580           MOVE    A0,@GMENULEV,W  ;INDICATE WE'RE AT LEVEL ZERO.
         00000260 00000010- 
     246                    
     247 00000280     09e0           MOVI    ROM_LEV,A0      ;THIS IS THE LEVEL TO DIVE TO
         00000290 00000000! 
     248 000002b0     03a0           NEG     A0              ;NEGATE IT AS FLAG TO DIVE.
     249 000002c0     0580           MOVE    A0,@MAIN_RET,W  ;INDICATE
         000002d0 00000000- 
     250 000002f0     c080           JAUC    DIAG_RESTART    ;NOW START IT UP....
         00000300 00000620' 
     251                    
     252                    **************************************************************************
     253                    *                                                                        *
     254                    *          WAIT_BUT                                                      *
     255                    *                                                                        *
     256                    *          THIS IS CALLED ON RETURN FROM MANY OF THE "HARD"              *
     257                    *          DIAGNOSTIC TESTS TO HOLD CONTROL TILL ANY BUTTON IS           *
     258                    *          HIT.                                                          *
     259                    *                                                                        *
     260                    **************************************************************************
     261 00000320           WAIT_BUT
     262 00000320     0d3f           CALLR   FORM_SWS        ;1ST STATE DOESN'T COUNT
         00000330     04a5  
     263                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    6

     264                    *        RETURN CURRENT STATE IN A0..PREVIOUS STATE IN A1.
     265                    *
     266 00000340           WB1      SLEEP   1
     267                    
     268                    *         JSRP    CK_PUSS
     269                    
     270 00000380     0d3f           CALLR   FORM_SWS
         00000390     049f  
     271 000003a0     03e1           NOT     A1                   ;LAST = 0 AND NOW = 1 MEANS EDGE!
     272                    
     273 000003b0     5020           AND     A1,A0                ;1'S WHERE WE HAVE POSITIVE EDGE.
     274 000003c0     0b80           ANDI    BUTTONS,A0           ;IS IT A BUTTON? 
         000003d0 fcaf0f0f  
     275 000003f0     caf4           JRZ     WB1
     276 00000400                    SOUND1  BEEP_1                ;MAKE A BEEP
     277 00000460                    RETP
     278                    
     279                    **************************************************************************
     280                    *                                                                        *
     281                    *          DIAG                                                          *
     282                    *                                                                        *
     283                    *          THIS IS THE ENTRY TO THE MAIN DIAGNOSTIC MENU.                *
     284                    *                                                                        *
     285                    **************************************************************************
     286 00000490     05a0  DIAG     MOVE   @GAMSTATE,A0,W
         000004a0 00000000! 
     287 000004c0     0b40          CMPI    INDIAG,A0
         000004d0     ffbf  
     288 000004e0     cb03          JRNZ    DIAG_JUMP
     289 000004f0     c080          JAUC    SUCIDE
         00000500 00000000! 
     290                    
     291 00000520           DIAG_JUMP
     292 00000520     0d3f           CALLR   DIGSRT          ;MAKE SURE WE'RE IN TEST MODE
         00000530     0109  
     293 00000540                    JSRP    WW_ADV          ;HOLD UNTIL HE LETS GO!
     294                    
     295 000005b0     5600           CLR     A0
     296 000005c0     0580           MOVE    A0,@MAIN_RET,W  ;CLEAR THE FLOAT TO TOP FLAG.
         000005d0 00000000- 
     297 000005f0     0580           MOVE    A0,@GMENULEV,W  ;INDICATE WE'RE AT LEVEL ZERO.
         00000600 00000010- 
     298                    
     299 00000620           DIAG_RESTART
     300 00000620     09e8           MOVI    MEN_MAIN,A8
         00000630 00000000! 
     301 00000650                    JSRP    GEN_MENU             ;PROCESS THIS MENU!
     302                    *
     303                    *        HE (FINALLY) PICKED EXIT....RETURN!
     304                    *
     305 000006c0           DIAG_EX
     306 000006c0                    SLEEP   2                     ;LET DMA EMPTY OUT IF NECESSARY
     307                    
     308 00000700     0d5f           CALLA   CMOS_VAL             ;IF SETTINGS SMASHED....FIX EM.   
         00000710 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    7

     309 00000730     cb80           JANZ    SETUP                                                 
         00000740 00000000! 
     310                                                                                           
     311 00000760     c080          JAUC    WARMSET         ;BACK TO YOU GEORGE                     
         00000770 00000000! 
     312                    
     313                    **************************************************************************
     314                    *                                                                        *
     315                    *          GEN_MENU                                                      *
     316                    *                                                                        *
     317                    *          THIS IS A GENERAL MENU HANDLER.  IT POSTS THE MENU            *
     318                    *          WITH SELECTION 1 AVAILABLE.  AFTER A SELECTION IS             *
     319                    *          MADE, IF IT HAS A ROUTINE CODE OF ZERO, (EXIT)                *
     320                    *          IT RETURNS TO THE LEVEL ABOVE IT.  ELSE, IT                   *
     321                    *          JSRP'S THE NEW ROUTINE.  WHEN THE NEW ROUTINE                 *
     322                    *          RETURNS, WE RE-POST THE SAME MENU WITH THE                    *
     323                    *          BAR ON THE FOLLOWING ENTRY.                                   *
     324                    *                                                                        *
     325                    *          A8 = MENU DESCRIPTOR                                          *
     326                    *                                                                        *
     327                    **************************************************************************
     328                    *
     329                    *        MENU ROM OFFSETS
     330                    *
     331              0000  MR_FONT  EQU     0
     332              0020  MR_TCAL  EQU     MR_FONT+LONG_SIZE
     333              0040  MR_TITLE EQU     MR_TCAL+LONG_SIZE    ;POINTER TO TITLE FOR TILE BOX (IF NEC)
     334              0060  MR_TCLR  EQU     MR_TITLE+LONG_SIZE   ;COLOR OF TITLE
     335              0070  MR_WORDS EQU     MR_TCLR+WORD_SIZE    ;STREAM OF WORDS TO COPY TO PDATA STARTS HERE
     336              0070  MR_X     EQU     MR_WORDS
     337              0080  MR_Y     EQU     MR_X+WORD_SIZE
     338              0090  MR_DY    EQU     MR_Y+WORD_SIZE
     339              00a0  MR_COL   EQU     MR_DY+WORD_SIZE
     340              00b0  MR_HITE  EQU     MR_COL+WORD_SIZE
     341              00c0  MR_BDY   EQU     MR_HITE+WORD_SIZE
     342              00d0  MR_DX    EQU     MR_BDY+WORD_SIZE
     343              00e0  MR_WID   EQU     MR_DX+WORD_SIZE
     344                    
     345 00000790           GEN_MENU
     346 00000790     05a0           MOVE    @GMENULEV,A0,W            ;KICK LEVEL POINTER
         000007a0 00000010- 
     347 000007c0     1020           INC     A0
     348 000007d0     0580           MOVE    A0,@GMENULEV,W
         000007e0 00000010- 
     349                    *
     350 00000800     a30c           MOVE    A8,-*A12,L                ;SAVE MENU PTR
     351 00000810     09c8           MOVI    1,A8                      ;START WITH "FIRST" ENTRY
         00000820     0001  
     352 00000830     a10c           MOVE    A8,-*A12,W                ;PUT MENU NUMBER AS A WORD
     353                    *
     354                    *        IF WE GET HERE AND MAIN_RET IS NOT ZERO, THE WE MUST
     355                    *        RETURN TO LEVEL ABOVE US IF WE'RE NOT THE MAIN
     356                    *        MENU.
     357                    *
     358                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    8

     359 00000840     05a0  GEN_LOOP MOVE    @MAIN_RET,A0,W            ;ARE WE IN "EXIT" MODE?
         00000850 00000000- 
     360 00000870     ca0b           JRZ     NO_EXIT                   ;NO
     361                    
     362 00000880     ce44           JRN     DIVE_TO_MONITOR           ;WE'RE DIVING TO MONITOR PATTERNS.
     363                    
     364 00000890     05a0           MOVE    @GMENULEV,A0,W            ;CHECK LEVEL
         000008a0 00000010- 
     365 000008c0     0b40           CMPI    1,A0                      ;ARE WE AT LEVEL 1
         000008d0     fffe  
     366 000008e0     cb32           JRNZ    GEN_EXIT                  ;NOPE.....POP UP A LEVEL.
     367                    *
     368                    *        WE'RE AT LEVEL 1....CLEAR OUT THE FLAG THAT
     369                    *        GOT US HERE.
     370                    *
     371 000008f0           DIVE_COMPLETE
     372 000008f0     5600           CLR     A0
     373 00000900     0580           MOVE    A0,@MAIN_RET,W            ;NOW WE MAY PROCEED!
         00000910 00000000- 
     374                    
     375 00000930     05a0  NO_EXIT  MOVE    @NO_CLEAR,A0,W            ;INHIBIT CLEAR?
         00000940 00000030- 
     376 00000960     cb03           JRNZ    SKIP_CLR
     377                    
     378 00000970     0d5f           CALLA   CLR_SCRN                  ;CLEAR THE SCREEN
         00000980 00000000! 
     379                    
     380 000009a0     5600  SKIP_CLR CLR     A0
     381 000009b0     0580           MOVE    A0,@NO_CLEAR,W            ;AND RE-SET IT!
         000009c0 00000030- 
     382                    
     383 000009e0     b788           MOVE    *A12(WORD_SIZE),A8,L      ;GET MENU DESCRIPTOR
         000009f0     0010  
     384 00000a00                    JSRP    MENU_TOP
     385 00000a70                    JSRP    CYAN_BOX                  ;PUT UP MAIN MENU INSTRUCTIONS
     386                    
     387 00000ae0     8589           MOVE    *A12,A9,W                 ;GET MENU NUMBER TO USE
     388 00000af0                    JSRP    B_MENU                    ;GET RESULT
     389                    
     390 00000b60           PHONEY_MENU_RET
     391 00000b60     4d4a           MOVE    A10,A10                   ;WAS IT ADVANCE?
     392 00000b70     ca01           JRZ     NO_KICK                   ;NOPE....LEAVE WHERE HE CAME FROM
     393                    
     394 00000b80     1028           INC     A8                        ;KICK INDEX BY 1 FOR NEXT TIME
     395 00000b90     810c  NO_KICK  MOVE    A8,*A12,W                 ;AND LEAVE ON THE STACK
     396                    
     397 00000ba0     4d29           MOVE    A9,A9                     ;NOW JSRP THE ROUTINE
     398 00000bb0     ca05           JRZ     GEN_EXIT                  ;NONE THERE....ITS "EXIT"
     399                    *
     400                    *        JSRP TO A9
     401                    *
     402 00000bc0     09e7           MOVI    GEN_LOOP,A7
         00000bd0 00000840' 
     403 00000bf0     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
     404 00000c00     0169          JUMP    A9
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE    9

     405                    
     406 00000c10     0b0c  GEN_EXIT ADDI    WORD_SIZE+LONG_SIZE,A12   ;POP THE ARGUMENTS
         00000c20     0030  
     407 00000c30     05a0           MOVE    @GMENULEV,A0,W            ;KICK LEVEL POINTER
         00000c40 00000010- 
     408 00000c60     1420           DEC     A0
     409 00000c70     0580           MOVE    A0,@GMENULEV,W
         00000c80 00000010- 
     410 00000ca0                    RETP
     411                    
     412                    **************************************************************************
     413                    *                                                                        *
     414                    *          DIVE_TO_MONITOR                                               *
     415                    *                                                                        *
     416                    *          WE GET CONTROL HERE WHEN WE ARE KLUDGING THE RETURN           *
     417                    *          FROM "CPU" TEST (WHICH BLOWS AWAY RAM!)                       *
     418                    *                                                                        *
     419                    **************************************************************************
     420 00000cd0           DIVE_TO_MONITOR
     421 00000cd0     05a0           MOVE    @GMENULEV,A0,W            ;CHECK LEVEL
         00000ce0 00000010- 
     422 00000d00     0b40           CMPI    1,A0                      ;ARE WE AT LEVEL 1
         00000d10     fffe  
     423 00000d20     cb06           JRNZ    DTM1                      ;NOPE....SET "MONITOR" LEVEL
     424                    *
     425                    *        WE'RE AT LEVEL 1......."SELECT" THE DIAGNOSTIC MENU
     426                    *        A8 = 1.....A9 = ROUTINE FOR DIAGNOSTIC MENU
     427                    *
     428 00000d30     1828           MOVK    1,A8
     429 00000d40     09e9           MOVI    GO_DIAG,A9           ;ROUTINE FOR DIAGNOSTIC MENU
         00000d50 00000000! 
     430 00000d70     182a           MOVK    1,A10                ;RETURN AS IF ADVANCE WAS PRESSED
     431 00000d80     c0dd           JRUC    PHONEY_MENU_RET      ;WE'RE READY TO CALL DIAG MENU
     432                    *
     433                    *        WE'RE IN DIAGNOSTIC MENU....NOW WE JUST NEED TO MAKE
     434                    *        THE "CURRENT" SELECTION THE ONE AFTER CPU TEST
     435                    *        (MONITOR PATTERNS)
     436                    *
     437 00000d90     05a8  DTM1     MOVE    @MAIN_RET,A8,W            ;FLAG IS OPPOSITE OF ENTRY NUMBER
         00000da0 00000000- 
     438 00000dc0     03a8           NEG     A8                        ;THIS IS RETURN LEVEL!
     439                    *         MOVI    RTR_LEV,A8                ;START WITH "RETURN" ENTRY NUMBER
     440 00000dd0     810c           MOVE    A8,*A12,W                 ;PUT MENU NUMBER AS A WORD
     441 00000de0     c0b0           JRUC    DIVE_COMPLETE             ;THIS COMPLETES THE DIVE!
     442                    
     443                    **************************************************************************
     444                    *                                                                        *
     445                    *          JSRP    SCR_TITL                                              *
     446                    *          MOVI    AUDIT_TABLE,A0                                        *
     447                    *          JSRP    PRINT_AUDITS                                          *
     448                    *                                                                        *
     449                    *       JSRP    WW_ADV                                                  *
     450                    *       JSRP    WT_ADV                                                  *
     451                    *       CALLA   CLR_SCRN                                                *
     452                    *       JSRP    WW_ADV                                                  *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   10

     453                    *                                                                        *
     454                    *          JSRP    SCR_TITL                                              *
     455                    *          MOVI    PERF_TABLE,A0                                         *
     456                    *          JSRP    PRINT_AUDITS                                          *
     457                    *                                                                        *
     458                    *       JSRP    WW_ADV                                                  *
     459                    *       JSRP    WT_ADV                                                  *
     460                    *       CALLA   CLR_SCRN                                                *
     461                    *       JSRP    WW_ADV                                                  *
     462                    *                                                                        *
     463                    *          JSRP    SCR_TITL                                              *
     464                    *          MOVI    TIME_TABLE,A0                                         *
     465                    *          JSRP    PRINT_AUDITS                                          *
     466                    *                                                                        *
     467                    *       JSRP    WW_ADV                                                  *
     468                    *       JSRP    WT_ADV                                                  *
     469                    *       CALLA   CLR_SCRN                                                *
     470                    *       JSRP    WW_ADV                                                  *
     471                    *                                                                        *
     472                    *       CALLA   CLR_SCRN                                                *
     473                    *       JSRP    WW_ADV                                                  *
     474                    * *                                                                      *
     475                    * *     SEE IF SETTINGS ARE OK...                                       *
     476                    * *                                                                      *
     477                    *          CALLA   CMOS_VAL           ;IF SETTINGS SMASHED....FIX EM.   *
     478                    *          JANZ    SETUP                                                 *
     479                    *                                                                        *
     480                    *       JAUC    WARMSET         ;BACK TO YOU GEORGE                     *
     481                    *                                                                        *
     482                    **************************************************************************
     483                    *
     484                    *          FOR DOBORDER
     485                    *
     486                    *          A4 = UPPER LEFT Y,X                                           
     487                    *          A5 = LOWER RIGHT Y,X                                        
     488                    *          A0 = Y,X WIDTH OF BORDER                                     
     489                    *          A9 = COLOR OF BORDER.                                         
     490                    
     491                    **************************************************************************
     492                    *                                                                        *
     493                    *          TOP_BOX                                                       *
     494                    *                                                                        *
     495                    *          THIS DISPLAYS THE TEST BOX AT THE TOP.                        *
     496                    *                                                                        *
     497                    *          A2 POINTS AT THE STRING TO CENTER IN THE BOX.                 *
     498                    *          A3 IS COLOR TO DO IT IN.                                      *
     499                    *                                                                        *
     500                    **************************************************************************
     501 00000df0     b702  MENU_TOP MOVE    *A8(MR_TITLE),A2,L        ;GET TITLE INTO A2
         00000e00     0040  
     502 00000e10     b503           MOVE    *A8(MR_TCLR),A3,W         ;AND COLOR INTO A3
         00000e20     0060  
     503                    
     504 00000e30           TOP_BOX
     505 00000e30     a30c           MOVE    A8,-*A12,L                ;PUSH MENU PTR
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   11

     506                    *
     507                    *        FIRST MAKE THE BOX...IT BLACKS OUT THE REGION
     508                    *
     509 00000e40     0d3f           CALLR   SCR_BOX                        ;PUT UP THE TITLE BOX
         00000e50     002d  
     510                    
     511 00000e60     09e8           MOVI    MESS_TITLE,A8    ;SET PARAMETERS
         00000e70 00008230' 
     512 00000e90     0d5f           CALLA   LM_SETUP         ;PUT IT OUT.
         00000ea0 00000000! 
     513                    
     514 00000ec0     4c48           MOVE    A2,A8            ;GET STRING IN THE CORRECT REGGIE
     515 00000ed0     4c66           MOVE    A3,A6            ;MOVE COLOR TO COLOR REGGIE
     516                    *
     517 00000ee0                    JSRP    LM_FINIS         ;AND PRINT IT!
     518                    
     519 00000f50                    JSRP    SCR_REV          ;NOW ADD THE REV.
     520                    
     521 00000fc0     9788           MOVE    *A12+,A8,L       ;RESTORE THE MENU PTR
     522                    
     523 00000fd0                    RETP
     524                    
     525                    **************************************************************************
     526                    *                                                                        *
     527                    *          SCR_REV                                                       *
     528                    *                                                                        *
     529                    *          DISPLAY REV IN TITLE BOX.                                     *
     530                    *                                                                        *
     531                    **************************************************************************
     532 00001000           SCR_REV
     533 00001000     09e8           MOVI    MESS_REV,A8     ;GET READY FOR REV MESSAGE
         00001010 000082d0' 
     534 00001030     0d5f           CALLA   LM_SETUP        ;SETUP FOR REV MESSAGE
         00001040 00000000! 
     535                    
     536 00001060     09e8           MOVI    ROM_NAME,A8     ;USE ROM COPY OF REV.
         00001070 00000000! 
     537 00001090                    JSRP    LM_FINIS        ;FINISH PRINTING MESSAGE
     538 00001100                    RETP
     539                    
     540                    **************************************************************************
     541                    *                                                                        *
     542                    *          SCR_BOX                                                       *
     543                    *                                                                        *
     544                    *          THIS DISPLAYS THE TITLE BOX.                                  *
     545                    *                                                                        *
     546                    **************************************************************************
     547 00001130           SCR_BOX
     548 00001130     09e4           MOVI    TIT_ULX+(10000H*TIT_ULY),A4    ;UPPER LEFT
         00001140 000f002c  
     549 00001160     09e5           MOVI    TIT_LRX+(10000H*TIT_LRY),A5    ;UPPER LEFT
         00001170 004901cc  
     550 00001190     09e9           MOVI    NARCS_ORANGE,A9
         000011a0 0000fafa  
     551 000011c0     0d3f           CALLR   STD_BORD       ;TACO BELL HAS YOUR ORDER, MAKE A RU-UUUN......
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   12

         000011d0     0527  
     552 000011e0     0960           RETS
     553                    
     554                    **************************************************************************
     555                    *                                                                        *
     556                    *          REV_TO_PDATA                                                  *
     557                    *                                                                        *
     558                    *          THIS COPIES THE CURRENT REV. DATA TO THE                      *
     559                    *          CALLING (CONTROLLING) PROCESSES' PDATA AREA.                  *
     560                    *                                                                        *
     561                    **************************************************************************
     562                    *                                                                        *
     563                    * REV_TO_PDATA                                                           *
     564                    *          MMTM    SP,A2,A7,A6,A0                                        *
     565                    *          CALLA   ADJ_PAGE                                              *
     566                    *          MOVI    NAME_REV,A7          ;POINT AT CMOS NAME STORAGE      *
     567                    *          MOVE    A13,A6               ;POINT WITH A6                   *
     568                    *          ADDI    PDATA,A6                                              *
     569                    *          MOVI    NAME_REV_SIZE,A2     ;MAXIMUM NAME SIZE               *
     570                    *                                                                        *
     571                    * REV_XFER_LOOP                                                          *
     572                    *          CALLA   RC_BYTEI             ;FETCH A BYTE                    *
     573                    *          MOVB    A0,*A6               ;PUT IN PROCESS AREA             *
     574                    *          ADDI    BYTE_SIZE,A6         ;PUSH THIS POINTER               *
     575                    *          DSJS    A2,REV_XFER_LOOP                                      *
     576                    *                                                                        *
     577                    *          CLR     A0                   ;STORE A ZERO BEYOND IN CASE ITS *
     578                    *          MOVE    A0,*A6,W             ;2 BYTES DOESN'T HURT            *
     579                    *       MMFM    SP,A2,A7,A6,A0                                          *
     580                    *       RETS                                                            *
     581                    *                                                                        *
     582                    **************************************************************************
     583                    *
     584                    *        THIS PRINTS THE "MOVE JOYSTICK" BOX.
     585                    *
     586                    *        A8 = MENU DESCRIPTOR THAT WILL ACCOMPANY IT
     587                    *        ON SCREEN.  WE ADJUST THE BOX EDGES AND
     588                    *        MESSAGE CENTER IN "X" ONLY TO CORRESPOND
     589                    *        TO THE MENU BOX.
     590                    *
     591 000011f0           CYAN_BOX
     592 000011f0     a30c           MOVE    A8,-*A12,L                       ;PUSH THE MENU PTR
     593                    
     594 00001200     09c9           MOVI    NARCS_CYAN,A9
         00001210     2c2c  
     595 00001220     0d3f           CALLR   COL_INST             ;THIS PRINTS BOX AND STASHES 
         00001230     0018  
     596                    *                                     ;CENTER X AT *A13(PDATA),W
     597                    
     598 00001240     09e8           MOVI    MM_INST1,A8     ;POINT AT INSTRUCTIONS MESSAGE
         00001250 00007680' 
     599 00001270                    JSRP    C_PD_M
     600                    
     601 000012e0     09e8           MOVI    MM_INST2,A8     ;POINT AT INSTRUCTIONS MESSAGE
         000012f0 000077f0' 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   13

     602 00001310                    JSRP    C_PD_M
     603                    
     604 00001380     9788           MOVE    *A12+,A8,L      ;GET BACK MENU PTR.
     605 00001390                    RETP
     606                    
     607                    **************************************************************************
     608                    *                                                                        *
     609                    *          COL_INST                                                      *
     610                    *                                                                        *
     611                    *          THIS PRINTS OUT THE "CYAN" INSTRUCTION BOX                    *
     612                    *          IN THE COLOR SPECIFIED BY A9.                                 *
     613                    *                                                                        *
     614                    **************************************************************************
     615 000013c0           COL_INST
     616                    *
     617                    *        WE NEED TO DETERMINE LEFT AND RIGHT X
     618                    *
     619 000013c0     0d3f           CALLR   STUFF_MENU_PROCESS               ;MOVE DATA INTO PDATA AREA
         000013d0     028a  
     620 000013e0     0d3f           CALLR   MEN_NUMS                         ;GET THE NUMBERS FOR THIS MENU
         000013f0     000b  
     621 00001400     b0cd           MOVE    A6,*A13(PDATA),W                 ;STASH THE X CENTER
         00001410     0060  
     622 00001420     0b24           ADDI    10000H*INST_ULY,A4               ;UPPER LEFT Y
         00001430 004f0000  
     623 00001450     0b25           ADDI    10000H*INST_LRY,A5               ;UPPER LEFT X
         00001460 00770000  
     624 00001480     0d3f           CALLR   STD_BORD       ;TACO BELL HAS YOUR ORDER, MAKE A RU-UUUN......
         00001490     04fb  
     625 000014a0     0960           RETS
     626                    
     627                    **************************************************************************
     628                    *                                                                        *
     629                    *          MEN_NUMS                                                      *
     630                    *                                                                        *
     631                    *          THIS IS CALLED TO GET SOME NUMBERS ASSOCIATED                 *
     632                    *          WITH A MENU BOX.                                              *
     633                    *                                                                        *
     634                    *          THIS RETURNS:                                                 *
     635                    *                                                                        *
     636                    *          A4 = LEFT X                                                   *
     637                    *          A5 = RIGHT X                                                  *
     638                    *          A6 = CENTER X                                                 *
     639                    *                                                                        *
     640                    **************************************************************************
     641 000014b0           MEN_NUMS
     642 000014b0     0d3f           CALLR   MENU_UL_A4_A5                    ;LEFT X IN A4
         000014c0     0461  
     643 000014d0     0d3f           CALLR   MENU_LR_A6_A5                    ;RIGHT X IN A6
         000014e0     0470  
     644 000014f0     4cc5           MOVE    A6,A5                            ;COPY RIGHT X INTO A5
     645 00001500     4086           ADD     A4,A6                            ;FIND CENTER
     646 00001510     2fe6           SRL     1,A6                             ;A6 NOW HAS CENTER X (FOR LATER)
     647 00001520     0960           RETS
     648                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   14

     649                    **************************************************************************
     650                    *                                                                        *
     651                    *          C_PD_M                                                        *
     652                    *                                                                        *
     653                    *          THIS PRINTS A L_MESS MESSAGE PASSED IN A8, CENTERED           *
     654                    *          ON THE X STORED AT *A13(PDATA),W                              *
     655                    *                                                                        *
     656                    **************************************************************************
     657 00001530           C_PD_M
     658 00001530     0d5f           CALLA   LM_SETUP        ;SETUP THE MESSAGE
         00001540 00000000! 
     659 00001560     0b89           ANDI    0FFFF0000H,A9   ;REMOVE X
         00001570 0000ffff  
     660 00001590     b5a3           MOVE    *A13(PDATA),A3,W     ;GET THE X
         000015a0     0060  
     661 000015b0     4069           ADD     A3,A9                ;PUT OUR X IN
     662 000015c0     0161           JUMP    A1                   ;AND "CALL" THE ROUTINE
     663                    
     664                    **************************************************************************
     665                    *                                                                        *
     666                    *          DIGSRT                                                        *
     667                    *                                                                        *
     668                    *          THIS IS CALLED ON ENTRY TO DIAGNOSTICS.                       *
     669                    *                                                                        *
     670                    **************************************************************************
     671                    
     672 000015d0     0d3f  DIGSRT   CALLR   DIAG_STATE
         000015e0     0016  
     673 000015f0     0d5f           CALLA   WIPEOUT         ;INITIALIZE THE OBJECT LIST
         00001600 00000000! 
     674 00001620     0d5f           CALLA   COLRSTRT        ;RESTART THE COLOR PROCESSES.
         00001630 00000000! 
     675 00001650     0d5f          CALLA   QSNDRST         ;kill any sounds in progress
         00001660 00000000! 
     676                    
     677 00001680     1820           MOVK   1,A0
     678 00001690     0580          MOVE    A0,@DISPLAYON,W  ;WE NEED TO SEE THE STUFF JACK
         000016a0 00000000! 
     679                    
     680 000016c0     0d5f           CALLA   CLR_SCRN        ;CLEAR THE SCREEN!
         000016d0 00000000! 
     681                    
     682 000016f0     09c0           MOVI    LIGHT_PURPLE,A0
         00001700     701c  
     683 00001710     0580           MOVE    A0,@IRQSKYE,W  ;SET THE SKY COLOR TO PURPLE
         00001720 00000000! 
     684                    
     685 00001740     0960           RETS
     686                    
     687 00001750           DIAG_STATE 
     688 00001750     5621           CLR     A1
     689 00001760     0d5f           CALLA   KILALL          ;KILL ABSOLUTELY EVERYONE!
         00001770 00000000! 
     690                    
     691 00001790     09c1           MOVI    DIAG_PID,A1          ;SET OUR ID TO DIAGNOSTICS MAN
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   15

         000017a0     0daa  
     692 000017b0     b02d           MOVE    A1,*A13(PROCID),W    ;PASS OUR ID TO FORKED PROCESS
         000017c0     0020  
     693                    
     694 000017d0     09c0           MOVI    INDIAG,A0
         000017e0     0040  
     695 000017f0     0580           MOVE    A0,@GAMSTATE,W  ;PUT US IN TEST MODE!
         00001800 00000000! 
     696 00001820     0960           RETS
     697                    
     698                    **************************************************************************
     699                    *                                                                        *
     700                    *          CHK_CMOS                                                      *
     701                    *                                                                        *
     702                    *          This is the routine that is called at power up.               *
     703                    *                                                                        *
     704                    *          It checks to see if CMOS adjustments are in tact.             *
     705                    *          IF THE ADJUSTMENTS ARE BAD, OR SET FOR A DIFFERENT            *
     706                    *          GAME OR REVISION, we cause a factory setting to               *
     707                    *          occur.  We then try and validate the all time                 *
     708                    *          HSTD table.  If this is bad we then zero audits.              *
     709                    *          If HSTD table is ok, then we leave audits alone.              *
     710                    *                                                                        *
     711                    **************************************************************************
     712 00001830           CHK_CMOS
     713 00001830     0d3f           CALLR   DIGSRT      ;CLEAR OUT THE SCREEN...(MESSAGE WILL FOLLOW!)
         00001840     ffd8  
     714 00001850     0d5f           CALLA   CMOS_VAL
         00001860 00000000! 
     715 00001880     cb14           JRNZ    FAC_TIME
     716                    
     717                    *         MOVI    NARCS_CYAN,A9
     718                    *         CALLR   CBOX_COL
     719 00001890     09e2           MOVI    MESS_BITCHIN,A2          ;POINT AT DATA
         000018a0 000081b0' 
     720 000018c0     09e3           MOVI    NARCS_WHITE,A3
         000018d0 0000fefe  
     721 000018f0                    JSRP    TOP_BOX
     722                    
     723                    *         JSRP    L_MESS               ;DISPLAY LARRY MESSAGE
     724                    
     725 00001960                    SLEEP   18H
     726                    
     727 000019a0     c080           JAUC    WARMSET              ;CMOS IS OK....RETURN!
         000019b0 00000000! 
     728                    *
     729                    *        WE NEED TO FACTORY SET THIS THING (DUE TO BAD SETTINGS.)
     730                    *
     731 000019d0           FAC_TIME JSRP    GET_FAC                   ;GET THE GAME TO FACTORY SETTINGS!
     732 00001a40                    JSRP    WW_ADV                    ;WAIT WHILE ADVANCE IS PRESSED
     733                    
     734 00001ab0                    JSRP    WT_ADV                    ;NOW WAIT TILL ADVANCE IS PRESSED
     735                    
     736 00001b20     0d5f           CALLA   CLR_SCRN                  ;PRESSED....BLANK THE SCREEN AND
         00001b30 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   16

     737                                                               ;HOLD TILL HE LETS GO.
     738                    
     739 00001b50                    JSRP    WW_ADV                    ;HOLD CONTROL HERE TILL HE LETS GO
     740 00001bc0     c000           JRUC    DIAG_JUMP                 ;NOW INTO TEST MODE FOR ADV. BUTTON.
         00001bd0     fe94  
     741                    
     742                    **************************************************************************
     743                    *                                                                        *
     744                    *          GET_FAC                                                       *
     745                    *                                                                        *
     746                    *          THIS IS CALLED TO BRING THE GAME TO A FACTORY SETTINGS        *
     747                    *          STATE.  IT WILL STORE THE FACTORY SETTINGS OR WAIT            *
     748                    *          UNTIL THE DOOR IS OPEN.  IF IT CAN'T GET FACTORY SETTINGS     *
     749                    *          IT WILL PRINT A FAILURE MESSAGE.                              *
     750                    *                                                                        *
     751                    **************************************************************************
     752 00001be0           GET_FAC
     753                    *
     754 00001be0           FAC_LOOP
     755 00001be0     0d5f           CALLA   CLR_SCRN             ;CLEAR SCREEN IN ANTICIPATION OF MESSAGE
         00001bf0 00000000! 
     756 00001c10     0d5f           CALLA   FAC_SET              ;THIS DOES THE DEED!
         00001c20 00000000! 
     757 00001c40     0d5f           CALLA   CMOS_VAL            ;IS IT OK NOW?
         00001c50 00000000! 
     758 00001c70     ca4a           JRZ     CMOS_FIXED           ;YEP....FINISH CLEANUP!
     759                    *
     760                    *        DIDN'T WORK.....CHECK DOOR AND GIVE 1 OF 2 MESSAGES!
     761                    *
     762 00001c80     0d3f           CALLR   CK_DOOR       ;IS THE DOOR OPEN?  NZ=OPEN
         00001c90     0091  
     763 00001ca0     cb35           JRNZ    CANT_SET             ;YEP.......PRINT FAILURE MESSAGE
     764                    
     765 00001cb0           WAIT_FOR_DOOR
     766 00001cb0     09e8           MOVI    MESS_DOOR,A8          ;POINT AT DATA
         00001cc0 00007960' 
     767 00001ce0                    JSRP    L_MESS               ;DISPLAY LARRY MESSAGE
     768                    
     769 00001d50                    SLEEP   10H
     770 00001d90     0d3f           CALLR   CK_DOOR
         00001da0     0080  
     771 00001db0     cbe2           JRNZ    FAC_LOOP
     772                    
     773 00001dc0     09e8           MOVI    MESS_OPEN,A8
         00001dd0 00007ac0' 
     774 00001df0     0d5f           CALLA   LM_SETUP             ;SETUP REG'S
         00001e00 00000000! 
     775                    
     776 00001e20     56c6           CLR     A6                   ;BUT USE BLACK!
     777 00001e30                    JSRP    LM_FINIS            ;NOW PRINT THE STRING
     778                    
     779 00001ea0     09e8           MOVI    MESS_OPEN_2,A8
         00001eb0 00007c00' 
     780 00001ed0     0d5f           CALLA   LM_SETUP
         00001ee0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   17

     781                    
     782 00001f00     56c6           CLR     A6
     783 00001f10                    JSRP    LM_FINIS
     784                    
     785 00001f80                    SLEEP   10H
     786 00001fc0     0d3f           CALLR   CK_DOOR
         00001fd0     005d  
     787 00001fe0     cbbf           JRNZ    FAC_LOOP
     788                    
     789 00001ff0     c0cb           JRUC    WAIT_FOR_DOOR             ;ITS OPEN......DO THE WORK.
     790                    *
     791                    *        WASN'T ABLE FO FACTORY SET IT.....DOOR IS NOT LOCKING
     792                    *        IT OUT....1 MORE TRY, THEN CALL IT A DAY.
     793                    *
     794 00002000           CANT_SET
     795 00002000     0d5f           CALLA   FAC_SET              ;THIS DOES THE DEED!
         00002010 00000000! 
     796 00002030     0d5f           CALLA   CMOS_VAL            ;IS IT OK NOW?
         00002040 00000000! 
     797 00002060     ca0b           JRZ     CMOS_FIXED           ;YEP....FINISH CLEANUP!
     798                    
     799 00002070     09e8           MOVI    MESS_FAIL,A8         ;POINT AT DATA
         00002080 00007d80' 
     800 000020a0                    JSRP    L_MESS               ;DISPLAY LARRY MESSAGE
     801                    
     802 00002110     c00f           JRUC    WAIT_POINT           ;WE'RE DEAD.....ADVANCE TAKES US TO TEST MODE!
     803                    
     804 00002120           CMOS_FIXED
     805                    *
     806                    *        THIS IS WHERE WE ARE ONCE WE HAVE FACTORY SET....
     807                    *        MESSAGE WOULD GO HERE.
     808                    *
     809 00002120     0d3f           CALLR   CENT_BOX             ;PUT A BOX AROUND IT
         00002130     0548  
     810                    *
     811 00002140     09e8           MOVI    MESS_FAC,A8          ;POINT AT DATA
         00002150 00000000! 
     812 00002170                    JSRP    L_MESS               ;DISPLAY LARRY MESSAGE
     813                    *
     814                    *        NOW.....CLEAR HIGH SCORE TABLE
     815                    *        CLEAR OUT THE AUDITS.
     816                    *
     817 000021e0     0d5f           CALLA   FAC_STUF             ;DO REST OF FULL FACTORY STUFF!
         000021f0 00000000! 
     818                    *
     819                    *        AT THIS POINT WE HANG WAITING FOR THE ADVANCE SWITCH.
     820                    *
     821 00002210           WAIT_POINT
     822 00002210                    RETP                              ;NOW LET CALLER TAKE OVER.
     823                    
     824                    **************************************************************************
     825                    *                                                                        *
     826                    *          WT_ADV                                                        *
     827                    *                                                                        *
     828                    *          WAIT TILL ADVANCE.  THIS HOLDS CONTROL UNTIL ADVANCE          *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   18

     829                    *          BUTTON IS PRESSED.                                            *
     830                    *                                                                        *
     831                    **************************************************************************
     832 00002240           WT_ADV   SLEEP   2
     833                    
     834 00002280     0d3f  WT_A6    CALLR   GET_ADV               ;SCAN THE BUTTON
         00002290     0026  
     835 000022a0     cbf9           JRNZ    WT_ADV                ;NOT PRESSED. 
     836 000022b0                    RETP
     837                    
     838 000022e0     f3df  COINSND .WORD   0F3DFH,010H,08085H,0            ;"COIN" SOUND
     839 00002320     f3df  BEEP_1   .WORD  0F3DFH,010H,080A2H,0            ;LOW BEEP 
     840 00002360     f3df  BEEP_2   .WORD  0F3DFH,010H,080A3H,0            
     841 000023a0     f3df  BEEP_3   .WORD  0F3DFH,010H,080A4H,0            
     842 000023e0     f3df  BEEP_4   .WORD  0F3DFH,010H,080A5H,0            ;HIGH BEEP
     843 00002420     f3df  CASH     .WORD  0F3DFH,010H,08098H,0            ;CASH REGGIE
     844                    
     845                    **************************************************************************
     846                    *                                                                        *
     847                    *          WW_ADV                                                        *
     848                    *                                                                        *
     849                    *          WAIT WHILE ADVANCE.  THIS HOLDS CONTROL WHILE ADVANCE         *
     850                    *          BUTTON IS HELD (OR STUCK).                                    *
     851                    *                                                                        *
     852                    **************************************************************************
     853 00002460           WW_ADV   SLEEP   2
     854 000024a0     0d3f           CALLR   GET_ADV
         000024b0     0004  
     855 000024c0     caf9           JRZ     WW_ADV
     856 000024d0                    RETP
     857                    
     858                    **************************************************************************
     859                    *                                                                        *
     860                    *          GET_ADV                                                       *
     861                    *                                                                        *
     862                    *          THIS GETS PHYSICAL STATE OF ADVANCE BUTTON.                   *
     863                    *                                                                        *
     864                    *          .EQ.    PRESSED                                               *
     865                    *          .NE.    OPEN                                                  *
     866                    *                                                                        *
     867                    **************************************************************************
     868 00002500           GET_ADV
     869 00002500     098f           MMTM    SP,A0
         00002510     8000  
     870 00002520     05a0           MOVE    @COINS,A0,W               ;FETCH COIN SWITCHES (LOOKING FOR ADVANCE)
         00002530 01c00010  
     871 00002550     0b80           ANDI    ADV_BIT,A0                ;KEEP ADVANCE BIT.
         00002560 ffffffef  
     872 00002580     09af          MMFM    SP,A0
         00002590     0001  
     873 000025a0     0960          RETS
     874                    
     875                    **************************************************************************
     876                    *                                                                        *
     877                    *          CK_DOOR                                                *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   19

     878                    *                                                                        *
     879                    *          THIS IS CALLED TO SEE IF THE FRONT DOOR (MEMORY               *
     880                    *          PROTECT SWITCH IS OPEN.                                       *
     881                    *                                                                        *
     882                    *          .NE.    OPEN  (OK TO WRITE CMOS)                              *
     883                    *          .EQ.    CLOSED (CAN'T WRITE CMOS)                             *
     884                    *                                                                        *
     885                    **************************************************************************
     886 000025b0           CK_DOOR
     887 000025b0     098f           MMTM    SP,A0
         000025c0     8000  
     888 000025d0     05a0           MOVE    @COINS,A0,W               ;FETCH COIN SWITCHES (LOOKING FOR ADVANCE)
         000025e0 01c00010  
     889 00002600     0b80           ANDI    DOOR_BIT,A0               ;KEEP COIN DOOR MEMORY PROTECT.
         00002610 fffff7ff  
     890 00002630     09af          MMFM    SP,A0
         00002640     0001  
     891 00002650     0960          RETS
     892                    
     893                    **************************************************************************
     894                    *                                                                        *
     895                    *          GET_MENU                                                      *
     896                    *                                                                        *
     897                    *          This routine is called (via JSRP) to display a menu on        *
     898                    *          screen and receive a selection from the operator.             *
     899                    *                                                                        *
     900                    *          The menu descriptor is passed in A8.                          *
     901                    *                                                                        *
     902                    *          The selection number is returned in a8. (line 1 = 1)          *
     903                    *          The routine address is returned in a9.                        *
     904                    *          A10 is returned non-zero if advance was the button used       *
     905                    *                                                                        *
     906                    *          A menu (pointed to by A8) is defined as follows:              *
     907                    *                                                                        *
     908                    *                      FONT TO BE USED             (LONG)                *
     909                    *                      X FOR LEFT MARGIN           (WORD)                *
     910                    *                      Y FOR TOP LINE              (WORD)                *
     911                    *                      DY PER ENTRY                (WORD)                *
     912                    *                      TEXT_COLOR                  (WORD)                *
     913                    *                      HEIGHT OF SELECTION BAR     (WORD)                *
     914                    *                      DX FROM TOP OF TEXT TO SEL. BAR  (WORD)           *
     915                    *                                                                        *
     916                    *          A9 POINTS AT ENTRY TO START WITH                              *
     917                    *                                                                        *
     918                    *          Then for each entry:                                          *
     919                    *                                                                        *
     920                    *                      TEXT POINTER        (LONG)                        *
     921                    *                      ACTIVATION ROUTINE  (LONG)                        *
     922                    *                                                                        *
     923                    *          The list is terminated by a zero.                             *
     924                    *                                                                        *
     925                    *          This routine forks a separate process to do the work          *
     926                    *          for it.  Therefore the caller has full use of                 *
     927                    *          the PDATA area.                                               *
     928                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   20

     929                    **************************************************************************
     930                    *
     931                    *        Equates for GET_MENU slave process.
     932                    *
     933              0060  MEN_OFF  EQU     PDATA                ;WORD-OFFSET INTO MENU OF SELECTION
     934              0070  MEN_ROUT EQU     MEN_OFF+WORD_SIZE    ;LONG-ROUTINE FOR SELECTION
     935              0090  MEN_ROM  EQU     MEN_ROUT+LONG_SIZE   ;LONG-POINTER TO ROM STRUCTURE
     936              00b0  MEN_ULX  EQU     MEN_ROM+LONG_SIZE    ;WORD-LEFT X  (CENTER X WHEN CENTERING)
     937              00c0  MEN_ULY  EQU     MEN_ULX+WORD_SIZE    ;WORD-TOP Y
     938              00d0  MEN_DY   EQU     MEN_ULY+WORD_SIZE    ;WORD-Y UNITS PER ENTRY
     939              00e0  MEN_COLR EQU     MEN_DY+WORD_SIZE     ;WORD-COLOR FOR ENTRIES
     940              00f0  MEN_BAR  EQU     MEN_COLR+WORD_SIZE   ;WORD-HEIGHT OF SELECTION BAR
     941              0100  MEN_BDY  EQU     MEN_BAR+WORD_SIZE    ;WORD-DY FROM TOP OF TEXT TO TOP OF BAR.
     942              0110  MEN_BDX  EQU     MEN_BDY+WORD_SIZE    ;WORD-DX FROM LEFT OF WORD TO LEFT OF BAR
     943              0120  MEN_BWID EQU     MEN_BDX+WORD_SIZE    ;WORD-WIDTH OF BAR
     944              0130  MEN_SCOL EQU     MEN_BWID+WORD_SIZE   ;WORD-COLOR OF SELECTED TEXT
     945              0140  MEN_TPTR EQU     MEN_SCOL+WORD_SIZE    ;LONG-POINTER TO BEGINNING OF TEXT ENTRIES.
     946              0160  MEN_ENTS EQU     MEN_TPTR+LONG_SIZE   ;WORD-NUMBER OF ENTRIES IN MENU
     947              0170  MEN_CUR  EQU     MEN_ENTS+WORD_SIZE   ;WORD-CURRENT SELECTION (1ST IS 1)
     948              0180  MEN_WALK EQU     MEN_CUR+WORD_SIZE    ;WORD-NUMBER OF ENTRY WE'RE ON AS WE WALK
     949              0190  MEN_STIK EQU     MEN_WALK+WORD_SIZE   ;LONG-"STUCK" STATE OF SWITCHES
     950              01b0  MEN_ACT  EQU     MEN_STIK+LONG_SIZE   ;LONG-SWITCH WE'RE ACTING ON. (BIT)
     951              01d0  MEN_TYPO EQU     MEN_ACT+LONG_SIZE    ;WORD-TYPOMATIC COUNTER
     952              01e0  MEN_HITS EQU     MEN_TYPO+WORD_SIZE   ;WORD-CONSECUTIVE TYPOMATIC HITS
     953              01f0  MEN_ADV  EQU     MEN_HITS+WORD_SIZE   ;WORD-NON-ZERO IF ADVANCE WAS BUTTON USED
     954                    
     955              0009  WORD_ENTS    EQU    (MEN_TPTR-MEN_ULX)/WORD_SIZE   ;NUMBER OF WORD ENTRIES
     956                    
     957 00002660     09e7  B_MENU   MOVI    BD_SLAVE,A7
         00002670 00002910' 
     958 00002690     c003           JRUC    GMJMP
     959                    
     960 000026a0           GET_MENU
     961 000026a0     09e7           MOVI    GM_SLAVE,A7          ;THIS IS ROUTINE
         000026b0 00002930' 
     962 000026d0           GMJMP
     963 000026d0     09c1           MOVI    MENU_PID,A1          ;THIS IS ID
         000026e0     0ac1  
     964 000026f0     0d5f           CALLA   GETPRC               ;CREATE IT
         00002700 00000000! 
     965                    
     966 00002720     4c0a           MOVE    A0,A10               ;SAVE HIS POINTER
     967                    
     968 00002730           GM1      SLEEP   2
     969                    
     970 00002770     09c0           MOVI    MDUN_PID,A0
         00002780     0ac2  
     971 00002790     09e1           MOVI    0FFFFH,A1
         000027a0 0000ffff  
     972 000027c0     0d5f           CALLA   EXISTP               ;WAIT FOR ID TO CHANGE TO THIS!
         000027d0 00000000! 
     973                    
     974 000027f0     caf3           JRZ     GM1                  ;LOOP UNTIL IT EXISTS!
     975                    
     976 00002800     b548           MOVE    *A10(MEN_OFF),A8,W   ;RETURN OFFSET OF SELECTION
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   21

         00002810     0060  
     977 00002820     b749           MOVE    *A10(MEN_ROUT),A9,L  ;AND ROUTINE THAT WAS SELECTED.
         00002830     0070  
     978 00002840     b54a           MOVE    *A10(MEN_ADV),A10,W  ;INDICATE WHETHER ADVANCE WAS USED
         00002850     01f0  
     979                    
     980 00002860     09c0           MOVI    MDUN_PID,A0
         00002870     0ac2  
     981 00002880     09e1           MOVI    0FFFFH,A1
         00002890 0000ffff  
     982 000028b0     0d5f           CALLA   KILALL               ;KILL THE HANGING MENU GETTER!
         000028c0 00000000! 
     983 000028e0                    RETP                         ;AND RETURN
     984                             
     985                    **************************************************************************
     986                    *                                                                        *
     987                    *          GM_SLAVE                                                      *
     988                    *                                                                        *
     989                    *          This displays the menu.......moves the selection bar          *
     990                    *          and returns the selection information by stuffing             *
     991                    *          it in its process area and changing its ID to                 *
     992                    *          MDUN_PID once selection is made.                              *
     993                    *                                                                        *
     994                    *          On entry....A8 points at the GET_MENU data structure.         *
     995                    *                      A9 is which entry to start with selected.         *
     996                    *                                                                        *
     997                    **************************************************************************
     998 00002910     0d3f  BD_SLAVE CALLR   MENU_BORDER          ;DRAW THE BORDER FOR SELCTIONS.
         00002920     02fe  
     999                    
    1000 00002930           GM_SLAVE JSRP    ST_STICK          ;TELL STICK(S) AND BUTTONS WE'RE STARTING.
    1001                    
    1002 000029a0     0d3f           CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         000029b0     012c  
    1003                    *
    1004                    *        PLOT ENTIRE MENU
    1005                    *
    1006                    *        DO_MENU_LINE WILL RETURN CARRY SET
    1007                    *        WHEN WE GET BEYOND THE END.
    1008                    *
    1009 000029c0     1820           MOVK    1,A0                        ;SETUP FOR LINE 1.
    1010 000029d0           DO_ANOTHER_LINE
    1011 000029d0     b00d           MOVE    A0,*A13(MEN_WALK),W       ;WALK THROUGH.
         000029e0     0180  
    1012                    
    1013 000029f0                    JSRP    DO_MENU_LINE              ;PUT OUT LINE IN A0.
    1014 00002a60     b5a0           MOVE    *A13(MEN_WALK),A0,W       ;GET BACK THE COUNTER
         00002a70     0180  
    1015                    
    1016 00002a80     1020           INC     A0                        ;MOVE TO NEXT ENTRY.
    1017 00002a90     b5a1           MOVE    *A13(MEN_ENTS),A1,W       ;SEE IF WE'RE DONE.
         00002aa0     0160  
    1018 00002ab0     4820           CMP     A1,A0
    1019 00002ac0     c2f0           JRLS    DO_ANOTHER_LINE
    1020                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   22

    1021                    *        MAIN MENU PLOTTED......NOW LET THE DMA UN-LOAD BEFORE PLOTTING HELP
    1022                    *
    1023 00002ad0     0d3f           CALLR   PLOT_HELP                 ;PLOT HELP FOR 1ST IF NECESSARY
         00002ae0     024c  
    1024                    
    1025                    *         SLEEP   2                         ;NOW MAKE SURE THE HELP GETS PLOTTED
    1026                    *
    1027                    *        NOW WE JUST WANT TO UPDATE BASED ON STICK...ACT
    1028                    *        ON BUTTONS!
    1029                    *
    1030                    *        RESPONSES:   UP....DOWN....BUTTON....NOTHING....
    1031                    *
    1032                    *        NOTHING = 0
    1033                    *        UP = 1
    1034                    *        DOWN = 2
    1035                    *        BUTTON = 3
    1036                    *
    1037                    *        A0 = RESPONSE
    1038                    *        A1 = MEN_CUR VALUE.
    1039                    *
    1040 00002af0           MENU_LOOP
    1041 00002af0                    SLEEP   1
    1042 00002b30     09e5           MOVI    MENU_TYPO,A5
         00002b40 0004000e  
    1043 00002b60                    JSRP    GETSTICK                 ;ASK THE STICK HANDLER.......
    1044 00002bd0     4c00           MOVE    A0,A0                     ;SEE WHAT GET_STICK RETURNED.
    1045 00002be0     caf0           JRZ     MENU_LOOP                 ;MENU...(PAUSE)        NOTHING.
    1046                    
    1047 00002bf0     b5a1           MOVE    *A13(MEN_CUR),A1,W        ;GET CURRENT ENTRY...IN A1
         00002c00     0170  
    1048                    
    1049 00002c10     0b40           CMPI    3,A0                      ;BUTTON?
         00002c20     fffc  
    1050 00002c30     ca35           JRZ     MENU_BUTTON               ;YEP....WE'RE OUT OF HERE.
    1051                    
    1052 00002c40     0b40           CMPI    2,A0
         00002c50     fffd  
    1053 00002c60     ca0e           JRZ     MENU_DOWN                 ;ITS DOWN....
    1054                    *
    1055                    *        REQUEST TO GO UP....ARE WE AT #1
    1056                    *
    1057 00002c70     0b41           CMPI    1,A1                      ;WELL?
         00002c80     fffe  
    1058 00002c90     c2e5           JRLS    MENU_LOOP                 ;YEP....IGNORE
    1059                    
    1060 00002ca0                    JSRP    UN_SELECT                 ;PUT BACK THE OLD "CURRENT ONE
    1061 00002d10     b5a0           MOVE    *A13(MEN_CUR),A0,W        ;GET CURRENT ENTRY
         00002d20     0170  
    1062 00002d30     1420           DEC     A0                        ;MAKE ONE LESS.
    1063 00002d40     c00e           JRUC    JOIN_DOWN                 ;NOW PLOT THE NEW ONE.
    1064                    
    1065 00002d50           MENU_DOWN
    1066 00002d50     b5a2           MOVE    *A13(MEN_ENTS),A2,W       ;GET NUMBER IN MENU
         00002d60     0160  
    1067 00002d70     4841           CMP     A2,A1                     ;ARE WE AT MAX
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   23

    1068 00002d80     c9d6           JRHS    MENU_LOOP                 ;YEP...NO ACTION
    1069                    
    1070 00002d90                    JSRP    UN_SELECT                 ;PUT BACK THE OLD "CURRENT ONE
    1071                    
    1072 00002e00     b5a0           MOVE    *A13(MEN_CUR),A0,W        ;GET CURRENT ENTRY
         00002e10     0170  
    1073 00002e20     1020           INC     A0                        ;MAKE THIS THE NEXT.
    1074                    
    1075 00002e30           JOIN_DOWN
    1076 00002e30     b00d           MOVE    A0,*A13(MEN_CUR),W        ;PUT BACK
         00002e40     0170  
    1077 00002e50                    JSRP    DO_MENU_LINE              ;PUT OUT LINE IN A0.
    1078                    *
    1079                    *        MAKE THE "DINK" SOUND HERE FOR ENTRY TO ENTRY MOVEMENT 
    1080                    *
    1081 00002ec0     0d3f           CALLR   PLOT_HELP                 ;PLOT HELP NEW ONE
         00002ed0     020d  
    1082 00002ee0                    SLEEP   1                         ;DELAY BEEP 1 FRAME
    1083 00002f20                    SOUND1  BEEP_1                    ;MAKE A BEEP.
    1084 00002f80     c0b6           JRUC    MENU_LOOP                 ;AND WAIT FOR NEXT RESPONSE.
    1085                    *
    1086                    *        CONTROL COMES HERE WHEN A BUTTON IS PRESSED
    1087                    *
    1088                    *          The selection number is returned in a8. (line 1 = 1)          
    1089                    *          The routine address is returned in a9.                        
    1090                    
    1091 00002f90           MENU_BUTTON
    1092                    *
    1093                    *        A0 HAS A 3.
    1094                    *        A2 HAS THE BUTTON BIT.....IS IT ADVANCE?
    1095                    *
    1096 00002f90     0b62           CMPI    ADV_HIGH,A2               ;WAS IT ADVANCE?
         00002fa0 ffefffff  
    1097 00002fc0     ca01           JRZ     IS_ADV                    ;YEP....USE THE 3
    1098 00002fd0     5600           CLR     A0                        ;NOT ADVANCE
    1099                    
    1100 00002fe0     b00d  IS_ADV   MOVE    A0,*A13(MEN_ADV),W        ;NON ZERO IF IT WAS ADVANCE
         00002ff0     01f0  
    1101                    
    1102 00003000                    JSRP    BUTTON_STALL              ;HIGHLIGHT SELECTION AND HANG ON BUTTON
    1103                    
    1104 00003070     b5a0           MOVE    *A13(MEN_CUR),A0,W        ;GET "CURRENT" ENTRY.
         00003080     0170  
    1105 00003090     0d3f           CALLR   GET_MENU_DATA             ;A1=CURRENT_OFFSET  A2=TEXT  A3=ROUTINE
         000030a0     01d7  
    1106 000030b0     b00d           MOVE    A0,*A13(MEN_OFF),W        ;STORE THE OFFSET (CHOICE NUM)
         000030c0     0060  
    1107 000030d0     b26d           MOVE    A3,*A13(MEN_ROUT),L       ;AND THE ROUTINE POINTER
         000030e0     0070  
    1108 000030f0     09c0           MOVI    MDUN_PID,A0
         00003100     0ac2  
    1109 00003110     b00d           MOVE    A0,*A13(PROCID),W         ;CHANGE OUR ID.
         00003120     0020  
    1110                    
    1111 00003130           MENU_DONE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   24

    1112 00003130                    SLEEP   20
    1113 00003170     c0fb           JRUC    MENU_DONE                 ;NOW HANG TILL DISPATCHER SEES ID.
    1114                    
    1115                    **************************************************************************
    1116                    *                                                                        *
    1117                    *                 MENU UTILITIES                                         *
    1118                    *                                                                        *
    1119                    **************************************************************************
    1120                    **************************************************************************
    1121                    *                                                                        *
    1122                    *          BUTTON_STALL                                                  *
    1123                    *                                                                        *
    1124                    *          THIS IS CALLED WHEN THE MENU GETS A BUTTON HIT.               *
    1125                    *          A1 HAS THE BIT OF THE BUTTON.                                 *
    1126                    *                                                                        *
    1127                    *          WE PAINT THE MENU SQUARE TO FEEDBACK THE HIT.                 *
    1128                    *                                                                        *
    1129                    *          THEN WE HANG ON THE BUTTON UNTIL ITS LET GO.                  *
    1130                    *                                                                        *
    1131                    **************************************************************************
    1132 00003180           BUTTON_STALL
    1133 00003180     0782           MOVE    A2,@LAST_BUT,L       ;PUSH THE BUTTON STATE
         00003190 00000040- 
    1134                    
    1135 000031b0     05a0           MOVE    @SCODE,A0,W          ;NO CASH FOR REPEAT SOUND CODES
         000031c0 00000000! 
    1136 000031e0     05a1           MOVE    @DCODE,A1,W
         000031f0 00000000! 
    1137 00003210     5401           OR      A0,A1
    1138 00003220     cb38           JRNZ    DONT_WAIT            ;ITS A SOUND REPEAT....DON'T HOLD EITHER!
    1139                    
    1140 00003230                    SOUND1  CASH                 ;MAKE THE CASH SOUND
    1141                    
    1142 00003290     b5a0           MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         000032a0     0170  
    1143 000032b0     09e1           MOVI    NARCS_ORANGE,A1
         000032c0 0000fafa  
    1144 000032e0     0d3f           CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         000032f0     00f0  
    1145                    
    1146 00003300     0d3f           CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00003310     01b0  
    1147 00003320     09e1           MOVI    NARCS_WHITE,A1            ;WHITE ON ORANGE DURING HOT MOMENT
         00003330 0000fefe  
    1148 00003350                    JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
    1149                    
    1150 000033c0     07a8           MOVE    @LAST_BUT,A8,L            ;GET BUTTON BACK
         000033d0 00000040- 
    1151 000033f0     09c9           MOVI    08H,A9                    ;MINIMUM TIME FOR BUTTON HIGHLITE
         00003400     0008  
    1152                    
    1153 00003410     09ca           MOVI    2AH,A10              ;.5 SECONDS OF ADVANCE HOLD-DOWN
         00003420     002a  
    1154                    *                                     ;WILL EXIT TEST MODE.
    1155 00003430           WAIT_FOR_RELEASE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   25

    1156 00003430     0b68           CMPI    ADV_HIGH,A8               ;IS IT ADVANCE BUTTON?
         00003440 ffefffff  
    1157 00003460     cb03           JRNZ    NOT_ADV                   ;NOPE.....NEVER MIND
    1158                    
    1159 00003470     142a           DEC     A10                  ;1 LESS TIME UNIT
    1160 00003480     ca00           JRZ     DIAG_EX            ;IF HE HOLDS ADVANCE...WE'RE GONE!
         00003490     fd22  
    1161                    
    1162 000034a0           NOT_ADV  SLEEP   1
    1163                             
    1164 000034e0     4d29           MOVE    A9,A9                ;REDUCE FOR HELD TIME
    1165 000034f0     ca01           JRZ     WAIT_1               ;ZEROED OUT ALREADY.
    1166 00003500     1429           DEC     A9
    1167                    
    1168 00003510           WAIT_1
    1169 00003510     0d3f           CALLR   FORM_SWS        ;WAIT FOR THIS ONE TO GO TO ZERO
         00003520     0186  
    1170 00003530     5100           AND     A8,A0                ;IS OUR BUTTON STILL DOWN?
    1171 00003540     cbee           JRNZ    WAIT_FOR_RELEASE
    1172                    *
    1173                    *        ITS RELEASED...NOW SHOW ORANGE BAR FOR MINIMUM TIME
    1174                    
    1175 00003550     1029           INC     A9                   ;MAKE SURE A9 HAS 1 OR MORE
    1176 00003560           WAIT_2
    1177 00003560                    SLEEP   1
    1178 000035a0     3ca9           DSJS    A9,WAIT_2
    1179                    
    1180 000035b0           DONT_WAIT
    1181 000035b0     b5a0           MOVE    *A13(MEN_CUR),A0,W   ;GET CURRENT SELECTION
         000035c0     0170  
    1182 000035d0     5621           CLR     A1                   ;ERASE BAR
    1183 000035e0     0d3f           CALLR   MENU_BAR             ;CHANGE THE BAR COLOR.
         000035f0     00c0  
    1184                    
    1185 00003600     0d3f           CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00003610     0180  
    1186 00003620     b5a1           MOVE    *A13(MEN_COLR),A1,W       ;RE-PLOT THE NORMAL TEXT
         00003630     00e0  
    1187 00003640                    JSRP    MENU_TEXT                 
    1188                    
    1189 000036b0                    SLEEP   2                    ;NOW GIVE SOME BOUNCE PROTECTION.
    1190                    
    1191 000036f0                    RETP
    1192                    
    1193 00003720       20           .STRING         " NARC - COPYRIGHT 1988 WILLIAMS ELECTRONICS GAMES INC. "
    1194 000038d8       20           .STRING         " ALL RIGHTS RESERVED "
    1195 00003980       20           .STRING         " -EPJ -GNP -TRA -LED -JEH -JRN -ML -GWS -LIN -AL -BLS"
    1196 00003b28       20           .STRING         " -ML -TJE -DTW -RMG -WBD -JB -JRH -DP -JP "
    1197 00003c80                    .EVEN
    1198                    
    1199                    **************************************************************************
    1200                    *                                                                        *
    1201                    *          STUFF_MENU_PROCESS                                            *
    1202                    *                                                                        *
    1203                    *          THIS IS CALLED TO STUFF THE MENU ROM DATA INTO THE            *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   26

    1204                    *          CURRENT PROCESSES PDATA AREA.                                 *
    1205                    *                                                                        *
    1206                    **************************************************************************
    1207 00003c80           STUFF_MENU_PROCESS
    1208 00003c80     098f           MMTM    SP,A0,A1,A2,A3,A8
         00003c90     f080  
    1209 00003ca0     4da0           MOVE    A13,A0               ;POINT IN PROCESS AREA
    1210 00003cb0     0b00           ADDI    MEN_ROM,A0           ;THIS IS WHERE 1ST TIDBIT GOES
         00003cc0     0090  
    1211 00003cd0     9300           MOVE    A8,*A0+,L            ;STORE OUR BASE POINTER IN STRUCTURE
    1212 00003ce0     0b08           ADDI    MR_WORDS,A8          ;MOVE TO WORD LIST
         00003cf0     0070  
    1213                    
    1214 00003d00     09c2           MOVI    WORD_ENTS,A2         ;NOW THIS MANY MORE WORDS.
         00003d10     0009  
    1215                    
    1216 00003d20     9501  GMS1     MOVE    *A8+,A1,W
    1217 00003d30     9020           MOVE    A1,*A0+,W
    1218 00003d40     3c62           DSJS    A2,GMS1
    1219                    *
    1220                    *        ALL THE MENU PARAMETERS ARE NOW IN THE PDATA AREA.
    1221                    *        A8 POINTS AT THE FIRST ITEM TO DISPLAY.
    1222                    *
    1223 00003d50     b30d           MOVE    A8,*A13(MEN_TPTR),L  ;STORE IN PROCESS AREA.
         00003d60     0140  
    1224                    *
    1225                    *        NOW WE WANT TO FIND THE NUMBER OF ENTRIES IN THE MENU
    1226                    *
    1227 00003d70     5600           CLR     A0                        ;START AT #1.
    1228 00003d80           HOW_MANY
    1229 00003d80     1020           INC     A0                        ;MOVE TO NEXT ENTRY.
    1230 00003d90     0d3f           CALLR   GET_MENU_DATA             ;GET THE PARAMETERS FOR THIS ENTRY
         00003da0     0107  
    1231 00003db0     4c42           MOVE    A2,A2                     ;AND SEE IF A2=0
    1232 00003dc0     cbfb           JRNZ    HOW_MANY                  ;ITS REAL.....PUT IT UP.
    1233                    
    1234 00003dd0     1420           DEC     A0                        ;PREVIOUS LINE WAS THE LAST.
    1235 00003de0     b00d           MOVE    A0,*A13(MEN_ENTS),W       ;STUFF NUMBER IN MENU.
         00003df0     0160  
    1236                    
    1237 00003e00     4d29           MOVE    A9,A9                     ;DID BOZO PASS ZERO AS CURRENT?
    1238 00003e10     ca03           JRZ     USE_LAST
    1239 00003e20     4809           CMP     A0,A9                     ;MAKE SURE ITS NOT TOO HIGH
    1240 00003e30     c301           JRHI    USE_LAST                  ;A9 IS TOO HIGH
    1241 00003e40     4d20           MOVE    A9,A0                     ;USE THE ONE PAST
    1242                    
    1243 00003e50     b00d  USE_LAST MOVE    A0,*A13(MEN_CUR),W   ;MAKE ENTRY "1" CURRENT.
         00003e60     0170  
    1244                    
    1245 00003e70     09af          MMFM    SP,A0,A1,A2,A3,A8
         00003e80     010f  
    1246 00003e90     0960          RETS
    1247                    
    1248                    **************************************************************************
    1249                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   27

    1250                    *          DO_MENU_LINE                                                  *
    1251                    *                                                                        *
    1252                    *          A0 HAS THE LINE TO DO. (1 THROUGH N).                         *
    1253                    *          PRINT TEXT NORMAL IF NOT "MEN_CUR".                           *
    1254                    *          PRINT INVERT BAR FOLLOWED BY BLACK TEXT IF                    *
    1255                    *          ITS THE CURRENT ENTRY.                                        *
    1256                    *                                                                        *
    1257                    **************************************************************************
    1258 00003ea0           DO_MENU_LINE
    1259 00003ea0     0d3f           CALLR   GET_MENU_DATA             ;GET "CURRENT" IN A1
         00003eb0     00f6  
    1260 00003ec0     4801           CMP     A0,A1                     ;IS IT "CURRENT" ENTRY?
    1261 00003ed0     ca0c           JRZ     DO_CURRENT_ENT            ;YEP....DO INVERSE STUFF
    1262                    *
    1263                    *        A0 HAS OFFSET (FOR POSITIONING)
    1264                    *        A2 HAS TEXT POINTER (FOR MESSAGE)
    1265                    *        A1 NEEDS COLOR FOR MESSAGE.
    1266                    *
    1267 00003ee0     b5a1           MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00003ef0     00e0  
    1268 00003f00                    JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
    1269 00003f70                    RETP                              ;AND RETURN
    1270                    
    1271 00003fa0           DO_CURRENT_ENT       
    1272 00003fa0     09e1           MOVI    NARCS_WHITE,A1            ;DO THE BAR IN WHITE (AT A0 HEIGHT)
         00003fb0 0000fefe  
    1273 00003fd0     0d3f           CALLR   MENU_BAR                  ;PUT IT UP (A0 PRESERVED)
         00003fe0     0021  
    1274                    
    1275 00003ff0     0d3f           CALLR   GET_MENU_DATA             ;GET OUR TEXT POINTER BACK
         00004000     00e1  
    1276 00004010     b5a1           MOVE    *A13(MEN_SCOL),A1,W       ;GET "SELECTED" COLOR
         00004020     0130  
    1277 00004030                    JSRP    MENU_TEXT                 ;AND WRITE INVERTED TEXT
    1278 000040a0                    RETP                              ;THAT'S ALL FOLKS.
    1279                    
    1280                    **************************************************************************
    1281                    *                                                                        *
    1282                    *          UN_SELECT                                                     *
    1283                    *                                                                        *
    1284                    *          THIS IS CALLED TO "UN-SELECT" THE CURRENT ENTRY.              *
    1285                    *                                                                        *
    1286                    **************************************************************************
    1287 000040d0           UN_SELECT
    1288 000040d0     b5a0           MOVE    *A13(MEN_CUR),A0,W        ;POINT AT CURRENT ENTRY
         000040e0     0170  
    1289 000040f0     5621           CLR     A1                        ;USE BLACK FOR BACKGROUND
    1290 00004100     0d3f           CALLR   MENU_BAR                  ;THIS REMOVES THE BAR.
         00004110     000e  
    1291                    
    1292 00004120     0d3f           CALLR   GET_MENU_DATA             ;NOW GET A2 TO TEXT POINTER
         00004130     00ce  
    1293 00004140     b5a1           MOVE    *A13(MEN_COLR),A1,W       ;USE THE NORMAL ENTRY COLOR
         00004150     00e0  
    1294 00004160                    JSRP    MENU_TEXT                 ;PUT UP THE "TEXT" PORTION.
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   28

    1295 000041d0                    RETP                              ;AND RETURN
    1296                    
    1297                    **************************************************************************
    1298                    *                                                                        *
    1299                    *          MENU_BAR                                                      *
    1300                    *                                                                        *
    1301                    *          THIS IS CALLED TO PUT UP THE SELECTION BAR FOR                *
    1302                    *          THE ENTRY IN A0, IN THE COLOR IN A1.                          *
    1303                    *                                                                        *
    1304                    *          THIS ROUTINE MUST PRESERVE A0.                                *
    1305                    *                                                                        *
    1306                    **************************************************************************
    1307                    * STRNGLEN - RETURNS THE LENGTH, IN PIXELS, OF A GIVEN STRING            *
    1308                    * A8 = PTR TO STRING                                                     *
    1309                    * A10 = [Y,X] SPACING OF STRING                                          *
    1310                    * A11 = PTR TO FONT TABLE                                                *
    1311                    * RETURNS:                                                               *
    1312                    * A7 = LENGTH OF STRING                                                  *
    1313                    * Z BIT SET IF LENGTH IS ZERO                                            *
    1314                    *
    1315                    *        FOR FILLAREA
    1316                    *
    1317                    * A1 = <COLOR><PALETTE>
    1318                    * A3 = DAG OF AREA [YPOS,XPOS]                                           
    1319                    * A4 = [Y,X] SIZE OF AREA                                                
    1320                    *
    1321 00004200     098f  MENU_BAR MMTM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00004210     df80  
    1322 00004220     098f           MMTM    SP,A1                     ;SAVE COLOR!
         00004230     4000  
    1323 00004240     0d3f           CALLR   GET_MENU_DATA             ;GET THE TEXT POINTER
         00004250     00bc  
    1324 00004260     0d3f           CALLR   STLEN_SETUP               ;SETUP FOR STRLEN CALL.
         00004270     003d  
    1325 00004280     0d5f           CALLA   STRNGLEN                  ;FIND WIDTH OF STRING.
         00004290 00000000! 
    1326                    *
    1327                    *        A7 HAS LENGTH OF STRING.
    1328                    *
    1329                    *        WE NEED TO GET INTO A3 THE COORDINATES UF UPPER LEFT
    1330                    *        AND A4 THE LENGTH.
    1331                    *
    1332                    *        IF WE'RE CENTERING, WE USE THE BAR WIDTH PARAMETER
    1333                    *        ALONG THE CENTER LINE.
    1334                    *
    1335                    *        IF WE'RE LEFT JUSTIFIED, WE'LL LET THE BOX GO THE
    1336                    *        LENGTH OF THE TEXT FOR NOW.
    1337                    *
    1338 000042b0     b5a3           MOVE    *A13(MEN_ULX),A3,W        ;LEFT X IN A3                    
         000042c0     00b0  
    1339                    *
    1340                    *        IF WE'RE CENTERING....WE NEED TO MOVE THE "LEFT X" BACK HALF
    1341                    *        THE WIDTH OF THE STRING.
    1342                    *
    1343 000042d0     b7a6           MOVE    *A13(MEN_ROM),A6,L        ;GET ROM POINTER
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   29

         000042e0     0090  
    1344 000042f0     b6c6           MOVE    *A6(MR_TCAL),A6,L         ;CHECK ROUTINE
         00004300     0020  
    1345 00004310     0b66           CMPI    STRCNRM,A6
         00004320 ffffffff! 
    1346 00004340     cb06           JRNZ    NOT_CENTERING
    1347                    *
    1348                    *        WE'RE CENTERING....CENTER X IS IN A3
    1349                    *
    1350 00004350     b5a7           MOVE    *A13(MEN_BWID),A7,W       ;A7 IS THE REGISTER FOR BAR WIDTH
         00004360     0120  
    1351 00004370     4ce4           MOVE    A7,A4                     ;GET COPY IN A4
    1352 00004380     2fe4           SRL     1,A4                      ;1/2 OF WIDTH COMES OFF OF CENTER
    1353 00004390     4483           SUB     A4,A3                     ;A3 NOW HAS "LEFT X" 
    1354 000043a0     c005           JRUC    CENTERING                 ;A7 IS WIDTH...A3 IS X
    1355                    
    1356                    *
    1357                    *        LEFT JUSTIFIED....DO IT THE OLD WAY!
    1358                    *
    1359 000043b0           NOT_CENTERING
    1360 000043b0     b5a4           MOVE    *A13(MEN_BDX),A4,W        ;GET EXTRA X UNITS FOR BAR
         000043c0     0110  
    1361 000043d0     4483           SUB     A4,A3
    1362                    
    1363                    *        NOW ADD TWICE THE EXTRA X TO THE STRING LENGTH TO
    1364                    *        FORM THE BAR LENGTH.
    1365                    *
    1366 000043e0     2424           SLL     1,A4                      ;NOW DOUBLE THE EXCESS DX FOR BAR
    1367 000043f0     4087           ADD     A4,A7                     ;NOW A7 HAS WIDTH OF BAR
    1368                    
    1369 00004400           CENTERING
    1370 00004400     0be3           SUBI    C_KLUDGE,A3          ;KLUDGE TO NULLIFY FINAL SPACE.
         00004410     fffe  
    1371                    
    1372 00004420     0d3f           CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         00004430     0141  
    1373                    
    1374 00004440     b5a6           MOVE    *A13(MEN_BDY),A6,W        ;GET BAR DY (NEGATIVE)
         00004450     0100  
    1375 00004460     40c5           ADD     A6,A5                     ;ADJUST Y BY BAR DY
    1376 00004470     2605           SLL     16,A5                     ;SHIFT Y INTO POSITION
    1377                    
    1378 00004480     40a3           ADD     A5,A3                     ;A3 NOW POINTS AT UPPER LEFT
    1379                    
    1380 00004490     b5a4           MOVE    *A13(MEN_BAR),A4,W        ;Y HEIGHT OF BAR
         000044a0     00f0  
    1381 000044b0     2604           SLL     16,A4                     ;IN POSITION
    1382 000044c0     40e4           ADD     A7,A4                     ;A7 HAS X WIDTH OF BAR.
    1383                    
    1384 000044d0     09af           MMFM    SP,A1                     ;NOW GET COLOR BACK!
         000044e0     0002  
    1385 000044f0     2601           SLL     16,A1                     ;SHIFT COLOR TO HIGH HALF (PAL. 0) 
    1386 00004500     0d5f           CALLA   FILLAREA                  ;FILL IT UP!
         00004510 00000000! 
    1387                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   30

    1388 00004530     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7,A8    ;SAVE THE OFFSET
         00004540     01fb  
    1389 00004550     0960          RETS
    1390                    
    1391                    **************************************************************************
    1392                    *                                                                        *
    1393                    *          MENU_TEXT                                                     *
    1394                    *                                                                        *
    1395                    *          THIS IS CALLED TO DISPLAY THE TEXT FOR AN ENTRY.              *
    1396                    *                                                                        *
    1397                    *          A0 HAS OFFSET (FOR POSITIONING)                               *
    1398                    *          A1 HAS COLOR FOR MESSAGE.                                     *
    1399                    *          A2 HAS TEXT POINTER (FOR MESSAGE)                             *
    1400                    *                                                                        *
    1401                    *          WE NEED TO SHIFT THE DATA FOR THE TEXT ROUTINE                *
    1402                    *          AS FOLLOWS:                                                   *
    1403                    *                                                                        *
    1404                    *          A0 = SLEEP                                                    *
    1405                    *          A6 = COLOR                                                    *
    1406                    *          A8 = POINTER                                                  *
    1407                    *          A9 = ADDRESS                                                  *
    1408                    *          A10 = SPACING                                                 *
    1409                    *          A11 = FONT                                                    *
    1410                    *                                                                        *
    1411                    **************************************************************************
    1412 00004560           MENU_TEXT
    1413 00004560     0d3f           CALLR   GET_ENTRY_Y               ;GET Y FOR ENTRY IN A5
         00004570     012d  
    1414 00004580     2605           SLL     16,A5                     ;SHIFT Y INTO POSITION
    1415 00004590     b5a9           MOVE    *A13(MEN_ULX),A9,W        ;GET THE X
         000045a0     00b0  
    1416 000045b0     40a9           ADD     A5,A9                     ;A9 SET WITH SCREEN ADDRESS
    1417                    
    1418 000045c0     4c26           MOVE    A1,A6                     ;COLOR
    1419 000045d0     5600           CLR     A0                        ;NO SLEEP
    1420                    
    1421 000045e0     0d3f           CALLR   STLEN_SETUP
         000045f0     0005  
    1422                    
    1423 00004600     b7a1           MOVE    *A13(MEN_ROM),A1,L
         00004610     0090  
    1424 00004620     b621           MOVE    *A1(MR_TCAL),A1,L         ;GET THE ROUTINE TO USE
         00004630     0020  
    1425 00004640     0161           JUMP    A1                        ;AND CALL IT!
    1426                    
    1427 00004650           STLEN_SETUP
    1428 00004650     4c48           MOVE    A2,A8                     ;TEXT POINTER
    1429 00004660     09ca           MOVI    SPACING20,A10             ;SPACING
         00004670     0002  
    1430 00004680     b7ab           MOVE    *A13(MEN_ROM),A11,L
         00004690     0090  
    1431 000046a0     b76b           MOVE    *A11(MR_FONT),A11,L       ;LOAD FONT
         000046b0     0000  
    1432 000046c0     0960           RETS
    1433                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   31

    1434                    **************************************************************************
    1435                    *                                                                        *
    1436                    *          MENU JOYSTICK HANDLING                                        *
    1437                    *                                                                        *
    1438                    **************************************************************************
    1439 000046d0           ST_STICK
    1440 000046d0     0d3f           CALLR   FORM_SWS           ;THIS LATCHES ANYONE ALREADY DOWN.
         000046e0     006a  
    1441 000046f0     5600           CLR     A0
    1442 00004700     b20d           MOVE    A0,*A13(MEN_ACT),L      ;SHOW THAT WE'RE "ACTING" ON NONE.
         00004710     01b0  
    1443 00004720     b00d           MOVE    A0,*A13(MEN_TYPO),W     ;CLEAR TYPOMATIC COUNTER.
         00004730     01d0  
    1444 00004740     b00d           MOVE    A0,*A13(MEN_HITS),W     ;CLEAR OUT "CONSECUTIVE HITS"
         00004750     01e0  
    1445 00004760                    RETP
    1446                    *
    1447                    *        GETSTICK......RETURN DEBOUNCED/TYPOMATIC FOR
    1448                    *                       UP AND DOWN......OR EDGE OUT
    1449                    *                       ANY BUTTON....(INCLUDING ADVANCE)
    1450                    *
    1451                    *        RETURN A0=
    1452                    *
    1453                    *        NOTHING = 0
    1454                    *        UP = 1
    1455                    *        DOWN = 2
    1456                    *        BUTTON = 3
    1457                    *
    1458                    *        A2 = BUTTON BIT ON BUTTON HITS
    1459                    *
    1460              0004  TYPO_COUNT       EQU     4
    1461              0019  TYPO_STALL       EQU     25
    1462              0101  UP_BITS          EQU     101H
    1463              0202  DOWN_BITS        EQU     202H
    1464              0303  UP_OR_DOWN       EQU     UP_BITS+DOWN_BITS
    1465              f0f0  SW_BUTS          EQU     0F0F0H
    1466          03500000  CN_BUTS          EQU     3500000H                    ;BOTH STARTS, ADV, COIN BUT.
    1467          0350f0f0  BUTTONS          EQU     SW_BUTS+CN_BUTS
    1468          0004000e  MENU_TYPO        EQU     (TYPO_COUNT*10000H)+14      ;14 HITS FOR MENU TILL STUCK
    1469                    *
    1470                    *        TO USE THIS.......FIRST JSRP ST_START.
    1471                    *                          THIS STICKS CLOSED SWITCHES AND
    1472                    *                          INITIALIZES COUNTERS.
    1473                    *
    1474                    *                          DATA IS STORED IN YOUR PDATA
    1475                    *                          AREA.....AT AREAS DETERMINED
    1476                    *                          BY THE "MEN_" STRUCTURE.  THESE
    1477                    *                          LOCATIONS MUST BE AVAILABLE.
    1478                    *
    1479                    *                          A8-A11 ARE NOT TOUCHED.
    1480                    *
    1481                    *         AFTER ST_START.....READ AS FOLLOWS.
    1482                    *
    1483                    *
    1484                    *         LOOP      SLEEP  1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   32

    1485                    *                   MOVI   TYPO_PARMS,A5
    1486                    *                   JSRP   GETSTICK
    1487                    *
    1488                    *                   <LOGICAL STICK STATE RETURNED IN A0>
    1489                    *                   <ACT ON LOGICAL STATE>
    1490                    *
    1491                    *                   JRUC LOOP
    1492                    *                   
    1493                    *
    1494                    *        INPUT A5-----TOP HALF IS TYPOMATIC RATE
    1495                    *                     LOW HALF IS COUNT TILL STICK IS CALLED STUCK
    1496                    *
    1497 00004790           GETSTICK
    1498 00004790     4ca6           MOVE    A5,A6
    1499 000047a0     2e05           SRL     16,A5                ;TYPO RATE IN A5
    1500 000047b0     0b86           ANDI    WORD_MASK,A6         ;STUCK HIT COUNT IN A6
         000047c0 ffff0000  
    1501                    
    1502 000047e0     0d3f           CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         000047f0     0059  
    1503                    *
    1504                    *        RETURN CURRENT STATE IN A0..PREVIOUS STATE IN A1.
    1505                    *
    1506 00004800     03e1           NOT     A1                   ;LAST = 0 AND NOW = 1 MEANS EDGE!
    1507                    
    1508 00004810     5020           AND     A1,A0                ;1'S WHERE WE HAVE POSITIVE EDGE.
    1509 00004820     4c04           MOVE    A0,A4                ;KEEP NEW EDGE STATE IN A4!
    1510                    
    1511 00004830     0b80           ANDI    BUTTONS,A0           ;BUTTON SAYS ACT....IGNORE STICK!
         00004840 fcaf0f0f  
    1512 00004860     cb3c           JRNZ    TEST_BUTS            ;NEW BUTTON......RETURN IT!
    1513                    *
    1514                    *        NO BUTTON.....DO STICK TYPOMATIC STUFF!
    1515                    *
    1516 00004870     b7a2           MOVE    *A13(MEN_ACT),A2,L   ;IS THERE ONE TO WATCH?
         00004880     01b0  
    1517 00004890     ca28           JRZ     NEW_SCAN             ;NOPE....LOOK FOR NEW STUFF!
    1518                    *
    1519                    *        WE HAVE ONE THAT'S DOWN THAT WE WANT TO WATCH.
    1520                    *
    1521 000048a0     0d3f           CALLR   FORM_SWS        ;SEE WHAT THEY LOOK LIKE NOW.
         000048b0     004d  
    1522 000048c0     5040           AND     A2,A0                ;IS IT STILL MADE?
    1523 000048d0     ca1f           JRZ     GS_STICK_OPEN        ;NOPE.......CLEAR OUT ITS STATE.
    1524                    *
    1525                    *        ITS STILL MADE........DO TYPOMATIC.
    1526                    *
    1527 000048e0     b5a1           MOVE    *A13(MEN_TYPO),A1,W  ;DECREMENT TYPOMATIC COUNTER
         000048f0     01d0  
    1528 00004900     1421           DEC     A1
    1529 00004910     b02d           MOVE    A1,*A13(MEN_TYPO),W  ;AND PUT BACK IN MEMORY
         00004920     01d0  
    1530 00004930     cb35           JRNZ    GS_ZERO              ;NOT TIME YET.....RETURN NOTHING
    1531                    *
    1532                    *        WE HAVE A TYPOMATIC HIT.....WE NEED TO TURN SWITCH BIT (A0)
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   33

    1533                    *        INTO "UP" OR "DOWN" AND RE-LOAD TYPOMATIC COUNTER.
    1534                    *
    1535                    *
    1536 00004940     b5a1           MOVE    *A13(MEN_HITS),A1,W  ;GET NUMBER OF HITS
         00004950     01e0  
    1537 00004960     1021           INC     A1                   ;AFTER 15 TYPOS.....KILL TILL OPEN!
    1538 00004970     b02d           MOVE    A1,*A13(MEN_HITS)    ;
         00004980     01e0  
    1539 00004990     48c1           CMP     A6,A1                ;TOO MANY HITS?
    1540 000049a0     c90e           JRHS    GS_GONE              ;YEP....CALL THIS "STUCK"
    1541                    
    1542                    *         MOVI    TYPO_COUNT,A1
    1543 000049b0     b0ad           MOVE    A5,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER RELOADED.
         000049c0     01d0  
    1544                    
    1545 000049d0           RETURN_UP_DOWN
    1546 000049d0     4c01           MOVE    A0,A1                ;GET THE BIT
    1547 000049e0     4c22           MOVE    A1,A2                ;MAKE A COPY
    1548 000049f0     1820           MOVK    1,A0                 ;ASSUME UP
    1549 00004a00     0b81           ANDI    UP_BITS,A1           ;IS IT AN "UP" BIT
         00004a10 fffffefe  
    1550 00004a30     cb26           JRNZ    GS_X                 ;YEP...RETURN UP.
    1551 00004a40     1840           MOVK    2,A0                 ;ASSUME DOWN
    1552 00004a50     0b82           ANDI    DOWN_BITS,A2         ;IS IT A "DOWN" BIT
         00004a60 fffffdfd  
    1553 00004a80     cb21           JRNZ    GS_X                 ;YEP...RETURN "DOWN"
    1554                    *
    1555                    *        NOT A TYPOMATIC CONDITION.
    1556                    *
    1557                    
    1558 00004a90     5600  GS_GONE  CLR     A0                   ;CLEAR OUT CURRENT HIT.
    1559 00004aa0     b20d           MOVE    A0,*A13(MEN_ACT),L   ;INDICATE READY FOR NEXT HIT!
         00004ab0     01b0  
    1560 00004ac0     c01d           JRUC    GS_X                 ;AND RETURN THIS ZERO (NOTHING!)
    1561                    *
    1562                    *        STICK THAT WAS CLOSED OPENED......STOP BOUNCE UPWARD!
    1563                    *
    1564 00004ad0           GS_STICK_OPEN
    1565 00004ad0                    SLEEP   6
    1566 00004b10     c0f7           JRUC    GS_GONE              ;NOW.....CLEAR OUT FOR NEXT HIT.
    1567                    *
    1568                    *        CONTROL COMES HERE WHEN NO BUTTONS ARE PENDING.
    1569                    *
    1570 00004b20           NEW_SCAN
    1571 00004b20     4c80           MOVE    A4,A0                ;LOOK AT THE NEW EDGES.
    1572                    
    1573 00004b30     0b80           ANDI    UP_OR_DOWN,A0        ;IS IT UP OR DOWN?
         00004b40 fffffcfc  
    1574 00004b60     ca12           JRZ     GS_ZERO              ;NO STICK....RETURN NO ACTION!
    1575                    
    1576 00004b70     0d3f           CALLR   FRST_BIT             ;REDUCE TO ONE BIT.
         00004b80     0014  
    1577 00004b90     b20d           MOVE    A0,*A13(MEN_ACT),L   ;STORE THIS BIT
         00004ba0     01b0  
    1578                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   34

    1579 00004bb0     09c1           MOVI    TYPO_STALL,A1
         00004bc0     0019  
    1580 00004bd0     b02d           MOVE    A1,*A13(MEN_TYPO),W  ;TYPOMATIC COUNTER SET FOR LONG STALL.
         00004be0     01d0  
    1581                    
    1582 00004bf0     5621           CLR     A1
    1583 00004c00     b02d           MOVE    A1,*A13(MEN_HITS),W  ;LOAD UP A BUNCH OF HITS 
         00004c10     01e0  
    1584 00004c20     c0da           JRUC    RETURN_UP_DOWN       ;RETURN CORRECT CODE UP OR DOWN
    1585                    *
    1586                    *        NOT UP OR DOWN......SEE IF ITS A BUTTON.
    1587                    *
    1588 00004c30           TEST_BUTS
    1589                    *
    1590                    *        ITS A BUTTON...ALL NEW BUTTON EDGES IN A0
    1591                    *
    1592 00004c30     0d3f           CALLR   FRST_BIT             ;USE 1 OF THEM.
         00004c40     0008  
    1593                    
    1594 00004c50     4c02           MOVE    A0,A2                ;RETURN THE BIT.
    1595                    
    1596 00004c60     09c0           MOVI    3,A0                 ;RETURN THAT ITS A BUTTON.
         00004c70     0003  
    1597 00004c80     c001           JRUC    GS_X                 ;STUCK PROCESSING WILL BE AUTOMATIC.
    1598                    
    1599 00004c90     5600  GS_ZERO  CLR     A0                   ;RETURN NO SWITCH.
    1600 00004ca0           GS_X     RETP
    1601                    
    1602                    **************************************************************************
    1603                    *                                                                        *
    1604                    *          FRST_BIT                                                      *
    1605                    *                                                                        *
    1606                    *          A0 HAS 1 OR MORE BITS SET....RETURN 1 OF THEM.                *
    1607                    *                                                                        *
    1608                    **************************************************************************
    1609 00004cd0     098f  FRST_BIT MMTM    SP,A1,A2
         00004ce0     6000  
    1610 00004cf0     1821           MOVK    1,A1            ;SHIFT TILL WE FIND IT.
    1611 00004d00     4c02  FB1      MOVE    A0,A2
    1612 00004d10     5022           AND     A1,A2
    1613 00004d20     cb02           JRNZ    GOT_IT          ;WE HAVE ON (IN A1)
    1614 00004d30     2421           SLL     1,A1            ;SHIFT IT
    1615 00004d40     c0fb           JRUC    FB1
    1616 00004d50     4c20  GOT_IT   MOVE    A1,A0           ;RETURN THE BIT
    1617 00004d60     09af          MMFM    SP,A1,A2
         00004d70     0006  
    1618 00004d80     0960          RETS
    1619                    
    1620                    **************************************************************************
    1621                    *                                                                        *
    1622                    *          FORM_SWS                                                 *
    1623                    *                                                                        *
    1624                    *          GET THE SWITCHES....1=CLOSED.....AND SAVE                     *
    1625                    *          THIS SCAN AS "LAST STATE".  RETURN:                           *
    1626                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   35

    1627                    *          CURRENT STATE IN A0                                           *
    1628                    *          PREVIOUS STATE IN A1                                          *
    1629                    *                                                                        *
    1630                    **************************************************************************
    1631 00004d90           FORM_SWS
    1632 00004d90     b7a1           MOVE    *A13(MEN_STIK),A1,L  ;RETURN PREVIOUS STATE
         00004da0     0190  
    1633 00004db0     07a0           MOVE    @SWITCH,A0,L         ;GET BOTH SWITCH WORDS
         00004dc0 01c00000  
    1634 00004de0     03e0           NOT     A0                   ;COMPLEMENT
    1635 00004df0     b20d           MOVE    A0,*A13(MEN_STIK),L     ;SAVE "STUCK" STATE.
         00004e00     0190  
    1636 00004e10     0960           RETS
    1637                    
    1638                    **************************************************************************
    1639                    *                                                                        *
    1640                    *          GET_MENU_DATA                                                 *
    1641                    *                                                                        *
    1642                    *          A0 IS OFFSET OF ENTRY OF INTEREST                             *
    1643                    *                                                                        *
    1644                    *          RETURN  A1 = CURRENT OFFSET                                   *
    1645                    *                  A2 = TEXT POINTER                                     *
    1646                    *                  A3 = ROUTINE                                          *
    1647                    *                                                                        *
    1648                    **************************************************************************
    1649 00004e20           GET_MENU_DATA
    1650 00004e20     098f           MMTM    SP,A0                ;DON'T ALTER A0
         00004e30     8000  
    1651                    
    1652 00004e40     0d3f           CALLR   PM_ENTRY     ;POINT A1 AT ENTRY
         00004e50     0009  
    1653                    
    1654 00004e60     b622           MOVE    *A1(MENU_TEXT_PTR),A2,L   ;FETCH THE TEXT POINTER
         00004e70     0000  
    1655 00004e80     b623           MOVE    *A1(MENU_ROUTINE),A3,L    ;FETCH THE ROUTINE
         00004e90     0020  
    1656 00004ea0     b5a1           MOVE    *A13(MEN_CUR),A1,W        ;RETURN CURRENT ENTRY IN A1
         00004eb0     0170  
    1657 00004ec0     09af          MMFM    SP,A0                ;DON'T ALTER A0
         00004ed0     0001  
    1658 00004ee0     0960          RETS
    1659                    
    1660                    **************************************************************************
    1661                    *                                                                        *
    1662                    *          PM_ENTRY                                                      *
    1663                    *                                                                        *
    1664                    *          A0 = MENU ENTRY OF INTEREST                                   *
    1665                    *          RETURN A1 -> POINTS AT <TEXT><ROUTINE><HELP> FOR THIS         *
    1666                    *          ENTRY.                                                        *
    1667                    *                                                                        *
    1668                    **************************************************************************
    1669 00004ef0           PM_ENTRY
    1670 00004ef0     098f           MMTM    SP,A0
         00004f00     8000  
    1671 00004f10     1420           DEC     A0                   ;INDEX FROM ZERO
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   36

    1672 00004f20     09c1           MOVI    MENU_ENTRY_SIZE,A1   ;TIMES SIZE PER ENTRY 
         00004f30     0060  
    1673 00004f40     5e01           MPYU    A0,A1                ;A1 CONTAINS OFFSET INTO TABLE
    1674                    
    1675 00004f50     b7a0           MOVE    *A13(MEN_TPTR),A0,L  ;GET THE BASE OF THE MENU TEXT ENTRIES
         00004f60     0140  
    1676 00004f70     4001           ADD     A0,A1                ;ADD TO OFFSET
    1677 00004f80     09af          MMFM    SP,A0
         00004f90     0001  
    1678 00004fa0     0960          RETS
    1679                    
    1680                    **************************************************************************
    1681                    *                                                                        *
    1682                    *          PLOT_HELP                                                     *
    1683                    *                                                                        *
    1684                    *          THIS ROUTINE PLOTS (OR CLEARS) THE HELP AREA                  *
    1685                    *          FOR THE CURRENT ENTRY.                                        *
    1686                    *                                                                        *
    1687                    **************************************************************************
    1688 00004fb0           PLOT_HELP
    1689 00004fb0     b5a0           MOVE    *A13(MEN_CUR),A0,W        ;GET CURRENT ENTRY
         00004fc0     0170  
    1690 00004fd0     0d3f           CALLR   PM_ENTRY          ;A1 POINTS AT GROUP
         00004fe0     fff0  
    1691 00004ff0     b628           MOVE    *A1(MENU_HELP),A8,L       ;GET HELP TABLE
         00005000     0040  
    1692 00005010     0b48           CMPI    NO_HELP,A8                ;NOT A "HELP" SITUATION?
         00005020     fffe  
    1693 00005030     ca0d           JRZ     NO_HELP_FOR_THIS_ONE
    1694 00005040     0b48           CMPI    ADJ_HELP,A8               ;ADJUSTMENT HELP REQUESTED?
         00005050     fffd  
    1695 00005060     ca80           JAEQ    DO_ADJH                   ;THEN DO IT IN ADJ MODULE!
         00005070 00000000! 
    1696 00005090     0b48           CMPI    SND_HELP,A8               ;ARE WE IN SOUND TEST?
         000050a0     fffc  
    1697 000050b0     ca06           JREQ    DO_SHELP
    1698 000050c0     0b48           CMPI    SND_PLAY,A8
         000050d0     fffb  
    1699 000050e0     ca17           JREQ    DO_SPLAY
    1700 000050f0     0d3f           CALLR   DO_HELP_MENU
         00005100     013f  
    1701 00005110           NO_HELP_FOR_THIS_ONE
    1702 00005110     0960           RETS
    1703                    
    1704                    **************************************************************************
    1705                    *                                                                        *
    1706                    *          DO_SHELP                                                      *
    1707                    *                                                                        *
    1708                    *          THIS IS CALLED FOR EACH NON PLAYING ENTRY IN THE SOUND        *
    1709                    *          TABLE MENU.  IT CAUSES THE SOUND BOARD TO BE SHUT             *
    1710                    *          UP AND THE BOTTOM LINE (WHERE TITLES APPEAR)                  *
    1711                    *          TO BE ERASED.                                                 *
    1712                    *                                                                        *
    1713                    **************************************************************************
    1714 00005120     05a0  DO_SHELP        MOVE    @SND_MADE,A0,W  ;DID SOMEONE MAKE A SOUND?
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   37

         00005130 00000020- 
    1715 00005150     ca0d           JRZ     DO_SH1          ;NOPE
    1716 00005160     5600           CLR     A0
    1717 00005170     0580           MOVE    A0,@SND_MADE,W  ;CLEAR THIS AND RESET THE BOARD!
         00005180 00000020- 
    1718 000051a0     0580           MOVE    A0,@SCODE,W
         000051b0 00000000! 
    1719 000051d0     0580           MOVE    A0,@DCODE,W
         000051e0 00000000! 
    1720 00005200     0d5f           CALLA   QSNDRST                ;kill any sounds in progress
         00005210 00000000! 
    1721 00005230     0d3f  DO_SH1   CALLR   BLNKSNAM        ;BLANK OUT ANY WRITING!
         00005240     0057  
    1722 00005250     0960           RETS
    1723                    *
    1724                    *        A0 CONTAINS 3 FOR SYNTHESIZER...4 FOR DIGITIZER...
    1725                    *        IF CORRESPONDING "CODE" BYTE IS NON ZERO, THEN DISPLAY
    1726                    *        THE TEXTLINE THAT CORRESPONDS.  ELSE BLANK OUT THE
    1727                    *        AREA.
    1728                    *
    1729 00005260     0d3f  DO_SPLAY CALLR   BLNKSNAM        ;BLANK OUT LAST MESSAGE
         00005270     0054  
    1730 00005280     0b40           CMPI    3,A0            ;SYNTHESIZER?
         00005290     fffc  
    1731 000052a0     ca0f           JRZ     CK_SYNT         ;YEP.
    1732                    *
    1733                    *        DIGITIZER.
    1734                    *
    1735 000052b0     05a1           MOVE    @SCODE,A1,W     ;HOLD INFO IF SYNTH WAS RUNNING
         000052c0 00000000! 
    1736 000052e0     5600           CLR     A0
    1737 000052f0     0580           MOVE    A0,@SCODE,W     ;CLEAR OUT SYNTH CODE
         00005300 00000000! 
    1738 00005320     05a0           MOVE    @DCODE,A0       ;ANY CODE
         00005330 00000000! 
    1739 00005350     ca3c           JRZ     DO_SPQX         ;NOTHING HERE.....SHUT UP SOUND SYS.
    1740                    
    1741 00005360     09e1           MOVI    DTABLE,A1       ;BASE OF POINTER TABLE FOR DIGITIZER
         00005370 00008b60' 
    1742 00005390     c00e           JRUC    DO_SP1          ;PRINT THE STRING.
    1743                    
    1744                    
    1745 000053a0     05a1  CK_SYNT  MOVE    @DCODE,A1,W     ;HOLD INFO IF DIGITIZER WAS RUNNING
         000053b0 00000000! 
    1746 000053d0     5600           CLR     A0
    1747 000053e0     0580           MOVE    A0,@DCODE,W     ;CLEAR OUT DIG CODE
         000053f0 00000000! 
    1748 00005410     05a0           MOVE    @SCODE,A0       ;ANY CODE
         00005420 00000000! 
    1749 00005440     ca2d           JRZ     DO_SPQX          ;NOTHING HERE.
    1750                    
    1751 00005450     09e1           MOVI    STABLE,A1       ;BASE OF POINTER TABLE FOR DIGITIZER
         00005460 000089e0' 
    1752                    
    1753 00005480     0d3f  DO_SP1   CALLR   MEN_NUMS                           ;A4 = LEFT X  A5 = RIGHT X
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   38

         00005490     fc01  
    1754 000054a0     0b24           ADDI    10000H*SND_MESS_Y,A4               ;UPPER LEFT Y
         000054b0 014a0000  
    1755 000054d0     0b25           ADDI    10000H*(SND_MESS_Y+SND_BOX_H),A5   ;UPPER LEFT X
         000054e0 018f0000  
    1756 00005500     09e9           MOVI    NARCS_WHITE,A9
         00005510 0000fefe  
    1757 00005530     0d3f           CALLR   STD_BORD       ;TACO BELL HAS YOUR ORDER, MAKE A RU-UUUN......
         00005540     00f0  
    1758                    
    1759 00005550     1420           DEC     A0                        ;INDEX FROM 1.
    1760 00005560     24a0           SLL     5,A0
    1761 00005570     4001           ADD     A0,A1
    1762 00005580     8622           MOVE    *A1,A2,L                  ;NOW WE HAVE THE MESSAGE
    1763                    
    1764 00005590     09e8           MOVI    SND_INST,A8
         000055a0 000085d0' 
    1765 000055c0                    JSRP    L_MESS                    ;PUT INSTRUCTION OUT.
    1766                    
    1767 00005630     09e8           MOVI    SND_SETUP,A8
         00005640 00008940' 
    1768 00005660     0d5f           CALLA   LM_SETUP
         00005670 00000000! 
    1769                    
    1770 00005690     4c48           MOVE    A2,A8                   
    1771 000056a0                    JSRP    LM_FINIS                  ;DO THE DEED
    1772 00005710     0960           RETS                              ;AND RETURN
    1773                    
    1774 00005720     4c21  DO_SPQX  MOVE    A1,A1                     ;OUR SELECTION ISN'T RUNNING...WAS OTHER?
    1775 00005730     ca07           JRZ     DO_SPX                    ;NOPE
    1776 00005740     0d5f           CALLA   QSNDRST                   ;KILL SOUNDS IN PROGRESS
         00005750 00000000! 
    1777 00005770     5600           CLR     A0
    1778 00005780     0580           MOVE    A0,@SND_MADE,W            ;NO RESET NECESSARY NOW
         00005790 00000020- 
    1779 000057b0     0960  DO_SPX   RETS
    1780                    
    1781                    **************************************************************************
    1782                    *                                                                        *
    1783                    *          BLNKSNAM                                                      *
    1784                    *                                                                        *
    1785                    *          CALLED TO BLANK OUT THE SOUND CODE NAME DURING                *
    1786                    *          SOUND TEST.                                                   *
    1787                    *                                                                        *
    1788                    **************************************************************************
    1789                    *
    1790                    *        A3 = POINTER
    1791                    *        A4 = SIZE
    1792                    *
    1793 000057c0           BLNKSNAM
    1794 000057c0     09e3           MOVI    (SND_MESS_Y*10000H)+20H,A3
         000057d0 014a0020  
    1795 000057f0     09e4           MOVI    (SND_BOX_H*10000H)+1E0H,A4
         00005800 004501e0  
    1796 00005820     c080           JAUC    BLNKAREA                  ;ITS BLANK!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   39

         00005830 00000000! 
    1797                    
    1798                    **************************************************************************
    1799                    *                                                                        *
    1800                    *          GET_ENTRY_Y                                                   *
    1801                    *                                                                        *
    1802                    *          THIS RETURNS THE Y POSITIONS FOR THE ENTRY SPECIFIED          *
    1803                    *          IN A0.                                                        *
    1804                    *                                                                        *
    1805                    *          A5 = Y VALUE IN UNITS.                                        *
    1806                    *                                                                        *
    1807                    **************************************************************************
    1808 00005850           GET_ENTRY_Y
    1809 00005850     098f           MMTM    SP,A0,A1
         00005860     c000  
    1810 00005870     b5a5           MOVE    *A13(MEN_ULY),A5,W
         00005880     00c0  
    1811 00005890     b5a1           MOVE    *A13(MEN_DY),A1,W
         000058a0     00d0  
    1812 000058b0     1420           DEC     A0
    1813 000058c0     5e01           MPYU    A0,A1                ;A1 HAS OFFSET PER ENTRY
    1814 000058d0     4025           ADD     A1,A5
    1815 000058e0     09af          MMFM    SP,A0,A1
         000058f0     0003  
    1816 00005900     0960          RETS
    1817                    
    1818                    **************************************************************************
    1819                    *                                                                        *
    1820                    *          MENU_BORDER                                                   *
    1821                    *                                                                        *
    1822                    *          THIS IS CALLED TO PUT A BORDER AROUND THE MENU.               *
    1823                    *                                                                        *
    1824                    *          A8 = MENU STRUCTURE                                           *
    1825                    *          A9 = 1st item to activate as current                          *
    1826                    *                                                                        *
    1827                    *          BORDER IS DONE IN MENU TEXT COLOR                             *
    1828                    *                                                                        *
    1829                    *          THIS ASSUMES MENU IS IN THE CENTERING FORMAT                  *
    1830                    *                                                                        *
    1831                    **************************************************************************
    1832                    *
    1833                    *        1ST WE NEED TO FIND UPPER LEFT.
    1834                    *
    1835                    *
    1836                    *        X = MENU_X - (BAR_WIDTH/2) - 2       (LESS BORDER WIDTH)
    1837                    *        Y = MENU_Y - BDY                     (LESS BORDER HEIGHT)
    1838                    *
    1839                    *        LOWER RIGHT :
    1840                    *
    1841                    *        X = MENU_X + (BAR_WIDTH/2) - 2       (PLUS BORDER WIDTH)
    1842                    *        Y = MENU_Y + (MENU_ENTRIES-1) * DY)) - BDY + BAR_HITE
    1843                    *
    1844                    *
    1845 00005910           MENU_BORDER
    1846 00005910     098f           MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   40

         00005920     ffc0  
    1847 00005930     0d3f           CALLR   STUFF_MENU_PROCESS   ;MOVE DATA INTO PDATA AREA
         00005940     fe33  
    1848                    *
    1849                    *        FIRST COMPUTE UPPER LEFT
    1850                    *
    1851 00005950     0d3f           CALLR   MENU_UL_A4_A5             ;GET UPPER LEFT COORDINATES
         00005960     0017  
    1852 00005970     2605           SLL     16,A5
    1853 00005980     40a4           ADD     A5,A4                     ;A4 POINTS TO UPPER LEFT.
    1854                    *
    1855                    *        FORM LOWER RIGHT
    1856                    *
    1857 00005990     0d3f           CALLR   MENU_LR_A6_A5
         000059a0     0024  
    1858 000059b0     2605           SLL     16,A5                     ;SHIFT A5 DOWN
    1859 000059c0     40c5           ADD     A6,A5                     ;A5 POINTS AT LOWER RIGHT
    1860                    
    1861 000059d0     b5a9           MOVE    *A13(MEN_COLR),A9,W       ;GET MENU TEXT COLOR
         000059e0     00e0  
    1862 000059f0     0d3f           CALLR   STD_BORD
         00005a00     00a4  
    1863                    
    1864 00005a10     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00005a20     03ff  
    1865 00005a30     0960          RETS
    1866                    
    1867                    **************************************************************************
    1868                    *                                                                        *
    1869                    *          MCSETUP                                                       *
    1870                    *                                                                        *
    1871                    *          RETURN:                                                       *
    1872                    *                  A0 = CENTER OF MENU                                   *
    1873                    *                  A1 = 1/2 BAR WIDTH                                    *
    1874                    *                  A2 = Y FOR FIRST LINE OF TEXT OF MENU                 *
    1875                    *                  A3 = DELTA Y (NEGATIVE TO GET FROM TEXT TO BAR.       *
    1876                    *                                                                        *
    1877                    **************************************************************************
    1878 00005a40           MCSETUP
    1879 00005a40     b5a0           MOVE    *A13(MEN_ULX),A0,W        ;UPPER LEFT X (ACTUALLY CENTER)
         00005a50     00b0  
    1880 00005a60     b5a1           MOVE    *A13(MEN_BWID),A1,W       ;BAR_WIDTH
         00005a70     0120  
    1881 00005a80     2fe1           SRL     1,A1                      ;ALL CALCS USE BAR_WIDTH/2
    1882 00005a90     b5a2           MOVE    *A13(MEN_ULY),A2,W        ;UPPER LEFT Y
         00005aa0     00c0  
    1883 00005ab0     b5a3           MOVE    *A13(MEN_BDY),A3,W        ;DELTA Y (NEGATIVE)
         00005ac0     0100  
    1884 00005ad0     0960           RETS
    1885                    
    1886                    
    1887                    **************************************************************************
    1888                    *                                                                        *
    1889                    *          MENU_UL_A4_A5                                                 *
    1890                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   41

    1891                    *          RETURN WINDOW UPPER LEFT CORNER                               *
    1892                    *                                                                        *
    1893                    *          A4 = X                                                        *
    1894                    *          A5 = Y                                                        *
    1895                    *                                                                        *
    1896                    **************************************************************************
    1897 00005ae0           MENU_UL_A4_A5
    1898 00005ae0     098f           MMTM    SP,A0,A1,A2,A3
         00005af0     f000  
    1899 00005b00     0d3f           CALLR   MCSETUP                   ;STUFF THE REGGIES
         00005b10     fff2  
    1900 00005b20     4c04           MOVE    A0,A4                     ;FORM ULX
    1901 00005b30     4424           SUB     A1,A4
    1902 00005b40     0be4           SUBI    C_KLUDGE,A4          ;A4 HAS UPPER LEFT X
         00005b50     fffe  
    1903                    
    1904 00005b60     4c45           MOVE    A2,A5
    1905 00005b70     4065           ADD     A3,A5                     ;A5 HAS UPPER LEFT Y
    1906                    
    1907 00005b80     0be4           SUBI    MB_XWID+GAP,A4            ;NOW WE POINT AT UPPER LEFT FOR FRAME
         00005b90     fff8  
    1908 00005ba0     0be5           SUBI    MB_YWID+GAP,A5
         00005bb0     fff8  
    1909 00005bc0     09af          MMFM    SP,A0,A1,A2,A3
         00005bd0     000f  
    1910 00005be0     0960          RETS
    1911                    
    1912                    **************************************************************************
    1913                    *                                                                        *
    1914                    *          MENU_LR_A6_A5                                                 *
    1915                    *                                                                        *
    1916                    *          RETURN WINDOW LOWER RIGHT CORNER                              *
    1917                    *                                                                        *
    1918                    *          A6 = X                                                        *
    1919                    *          A5 = Y                                                        *
    1920                    *                                                                        *
    1921                    **************************************************************************
    1922 00005bf0           MENU_LR_A6_A5
    1923 00005bf0     098f           MMTM    SP,A0,A1,A2,A3
         00005c00     f000  
    1924 00005c10     0d3f           CALLR   MCSETUP                   ;STUFF THE REGGIES
         00005c20     ffe1  
    1925                    
    1926 00005c30     4c06           MOVE    A0,A6                     ;LOWER RIGHT X
    1927 00005c40     4026           ADD     A1,A6
    1928 00005c50     0be6           SUBI    C_KLUDGE,A6          ;THIS IS THE X
         00005c60     fffe  
    1929                    
    1930 00005c70     b5a0           MOVE    *A13(MEN_ENTS),A0,W       ;THIS IS LAST ENTRY
         00005c80     0160  
    1931 00005c90     0d3f           CALLR   GET_ENTRY_Y               ;A5 HAS THE Y FOR THE LAST ENTRY
         00005ca0     ffba  
    1932 00005cb0     4065           ADD     A3,A5                     ;A5 NOW HAS TOP OF LAST BOX
    1933 00005cc0     b5a7           MOVE    *A13(MEN_BAR),A7,W        ;HEIGHT OF BAR
         00005cd0     00f0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   42

    1934 00005ce0     40e5           ADD     A7,A5                     ;A5 NOW HAS LOWER RIGHT Y
    1935                    
    1936 00005cf0     0b05           ADDI    MB_YWID+GAP,A5
         00005d00     0007  
    1937 00005d10     0b06           ADDI    MB_XWID+GAP,A6            ;THIS IS END OF BORDER
         00005d20     0007  
    1938 00005d30     09af          MMFM    SP,A0,A1,A2,A3
         00005d40     000f  
    1939 00005d50     0960          RETS
    1940                    
    1941                    
    1942                    **************************************************************************
    1943                    *                                                                        *
    1944                    *          F_TITLE                                                       *
    1945                    *                                                                        *
    1946                    *          THIS IS CALLED TO FRAME A TITLE IN THE SAME WIDTH             *
    1947                    *          AS THE MAIN TITLE.                                            *
    1948                    *                                                                        *
    1949                    *          A0 = Y LEVEL OF 15 POINT TEXT                                 *
    1950                    *          A9 = COLOR                                                    *
    1951                    *                                                                        *
    1952                    **************************************************************************
    1953 00005d60     098f  F_TITLE  MMTM    SP,A4,A5,A0
         00005d70     8c00  
    1954 00005d80     4c04           MOVE    A0,A4           ;COPY Y
    1955 00005d90     0be4           SUBI    12,A4
         00005da0     fff3  
    1956 00005db0     2604           SLL     16,A4
    1957 00005dc0     0b04           ADDI    TIT_ULX,A4      ;UPPER LEFT SET
         00005dd0     002c  
    1958                    
    1959 00005de0     4c05           MOVE    A0,A5           ;LOWER RIGHT
    1960 00005df0     0b05           ADDI    27,A5
         00005e00     001b  
    1961 00005e10     2605           SLL     16,A5
    1962 00005e20     0b05           ADDI    TIT_LRX,A5      ;LOWER RIGHT SET
         00005e30     01cc  
    1963                    
    1964 00005e40     0d3f           CALLR   STD_BORD       ;TACO BELL HAS YOUR ORDER, MAKE A RU-UUUN......
         00005e50     005f  
    1965 00005e60     09af          MMFM    SP,A4,A5,A0
         00005e70     0031  
    1966 00005e80     0960          RETS
    1967                    
    1968              e0e0  FIRST_BORDER_COLOR       EQU     0E0E0H
    1969              efef  LAST_BORDER_COLOR        EQU     0EFEFH
    1970                    **************************************************************************
    1971                    *                                                                        *
    1972                    *          G_BORDER                                                      *
    1973                    *                                                                        *
    1974                    *          THIS IS CALLED TO DO A "HSTD TABLE" TYPE CYCLING              *
    1975                    *          BORDER.  THIS ROUTINE GETS:                                   *
    1976                    *                                                                        *
    1977                    *          A4 = UPPER LEFT Y,X                                           *
    1978                    *          A5 = LOWER RIGHT Y,X                                          *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   43

    1979                    *          A6 = NUMBER OF SLICES GOING IN.                               *
    1980                    *                                                                        *
    1981                    **************************************************************************
    1982 00005e90     098f  G_BORDER MMTM    SP,A0,A1,A2,A3,A4,A5,A6
         00005ea0     fe00  
    1983 00005eb0     09e0           MOVI    10001H,A0                 ;1 BY 1 DIMENSION
         00005ec0 00010001  
    1984                    
    1985 00005ee0     09e9           MOVI    LAST_BORDER_COLOR,A9      ;USE LAST ONE 1ST
         00005ef0 0000efef  
    1986 00005f10           NEXT_RING
    1987 00005f10     0d3f           CALLR   DOBORDER                  ;DO THIS RING
         00005f20     0012  
    1988                    
    1989 00005f30     09e1           MOVI    10001H,A1                  ;THIS IS 1 UNIT IN X AND Y
         00005f40 00010001  
    1990 00005f60     e024           ADDXY   A1,A4
    1991 00005f70     e225           SUBXY   A1,A5
    1992                    
    1993 00005f80     0be9           SUBI    101H,A9
         00005f90     fefe  
    1994 00005fa0     0b69           CMPI    FIRST_BORDER_COLOR,A9
         00005fb0 ffff1f1f  
    1995 00005fd0     c903           JRHS    COLOK
    1996 00005fe0     09e9           MOVI    LAST_BORDER_COLOR,A9
         00005ff0 0000efef  
    1997                    
    1998 00006010     3e26  COLOK    DSJS    A6,NEXT_RING
    1999 00006020     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6
         00006030     007f  
    2000 00006040     0960          RETS
    2001                    
    2002                    **************************************************************************
    2003                    *                                                                        *
    2004                    *          DOBORDER                                                     *
    2005                    *                                                                        *
    2006                    *          THIS IS CALLED TO DRAW A BORDER FRAME.                        *
    2007                    *                                                                        *
    2008                    *          A4 = UPPER LEFT Y,X                                           *
    2009                    *          A5 = LOWER RIGHT Y,X                                          *
    2010                    *          A0 = Y,X WIDTH OF BORDER                                      *
    2011                    *          A9 = COLOR OF BORDER.                                         *
    2012                    *                                                                        *
    2013                    *          THIS ROUTINE *** CLEARS OUT ALL AREA INSIDE THE BORDER***     *
    2014                    *          AS A FUNCTION OF ITS OPERATION.                               *
    2015                    *                                                                        *
    2016                    *          THE BORDER IS DONE IN THE "NARCS" PALETTE                     *
    2017                    *                                                                        *
    2018                    *          IT IS ASSUMED THAT THE DISPLAY SYSTEM IS RUNNING!             *
    2019                    *                                                                        *
    2020                    **************************************************************************
    2021                    *
    2022                    * A1 = <COLOR><PALETTE>
    2023                    * A3 = DAG OF AREA [YPOS,XPOS]                                           
    2024                    * A4 = [Y,X] SIZE OF AREA                                                
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   44

    2025                    *
    2026 00006050           DOBORDER
    2027 00006050     098f           MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         00006060     ffc0  
    2028 00006070     4d21           MOVE    A9,A1                     ;GET COLOR
    2029 00006080     2601           SLL     16,A1                     ;COLOR ON TOP..PALETTE 0
    2030                    *
    2031                    *        NOW WE NEED TO MAKE 4 BARS!
    2032                    *
    2033 00006090     4c02           MOVE    A0,A2                     ;SEPARATE DELTA
    2034 000060a0     0b80           ANDI    SX_MASK,A0
         000060b0 ffff0000  
    2035 000060d0     0b82           ANDI    SY_MASK,A2
         000060e0 0000ffff  
    2036                    
    2037 00006100     4c86           MOVE    A4,A6                     ;UPPER LEFTS HERE
    2038 00006110     4c87           MOVE    A4,A7
    2039                    
    2040 00006120     4ca8           MOVE    A5,A8                     ;LOWER RIGHTS HERE
    2041 00006130     4ca9           MOVE    A5,A9
    2042                    
    2043 00006140     0b86           ANDI    SX_MASK,A6                 ;LEFT X
         00006150 ffff0000  
    2044 00006170     0b88           ANDI    SX_MASK,A8                 ;RIGHT X
         00006180 ffff0000  
    2045                    
    2046 000061a0     0b87           ANDI    SY_MASK,A7                 ;TOP Y
         000061b0 0000ffff  
    2047 000061d0     0b89           ANDI    SY_MASK,A9                 ;BOTTOM Y
         000061e0 0000ffff  
    2048                    
    2049                    *
    2050                    *        FIRST BAR GOES FROM ORIGINAL UL XY TO RIGHT X
    2051                    *        AND TOP Y+DELTA Y
    2052                    *
    2053                    *        A3 IS ORIGINAL A4 PASSED.
    2054                    *        FORM DESTINATION IN A4
    2055                    *
    2056 00006200     4c83           MOVE    A4,A3
    2057                    
    2058 00006210     ed04           MOVX    A8,A4
    2059 00006220     eee4           MOVY    A7,A4
    2060 00006230     e044           ADDXY   A2,A4                     ;ADD THE DELTA
    2061                    
    2062 00006240     0d3f           CALLR   DO_A_LINE                 ;DO THIS LINE
         00006250     0016  
    2063                    *
    2064                    *        GOING AROUND CLOCKWISE.....THIS ONE STARTS AT RIGHT X-DELTA
    2065                    *        AND TOP Y
    2066                    *
    2067 00006260     ed03           MOVX    A8,A3
    2068 00006270     e203           SUBXY   A0,A3
    2069 00006280     eee3           MOVY    A7,A3
    2070                    *
    2071                    *        THIS IS THE NATURAL LOWER RIGHT CORNER
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   45

    2072                    *
    2073 00006290     ed04           MOVX    A8,A4
    2074 000062a0     ef24           MOVY    A9,A4
    2075                    
    2076 000062b0     0d3f           CALLR   DO_A_LINE
         000062c0     000f  
    2077                    *
    2078                    *        NOW FOR BOTTOM LINE.....A4 IS STILL SET!
    2079                    *
    2080 000062d0     ecc3           MOVX    A6,A3
    2081 000062e0     ef23           MOVY    A9,A3
    2082 000062f0     e243           SUBXY   A2,A3
    2083                    
    2084 00006300     0d3f           CALLR   DO_A_LINE
         00006310     000a  
    2085                    *
    2086                    *        LEFT WALL....FROM UPPER LEFT
    2087                    *
    2088 00006320     ecc3           MOVX    A6,A3
    2089 00006330     eee3           MOVY    A7,A3
    2090                    
    2091 00006340     ecc4           MOVX    A6,A4
    2092 00006350     e004           ADDXY   A0,A4
    2093 00006360     ef24           MOVY    A9,A4
    2094                    
    2095 00006370     0d3f           CALLR   DO_A_LINE
         00006380     0003  
    2096                    
    2097 00006390     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9
         000063a0     03ff  
    2098 000063b0     0960          RETS
    2099                    
    2100 000063c0           DO_A_LINE
    2101 000063c0     098f           MMTM    SP,A4
         000063d0     0800  
    2102 000063e0     e264           SUBXY   A3,A4           ;FORM DISTANCE
    2103 000063f0     0d5f           CALLA   FILLAREA        ;AND DO THE FILL
         00006400 00000000! 
    2104 00006420     09af          MMFM    SP,A4
         00006430     0010  
    2105 00006440     0960          RETS
    2106                    
    2107 00006450     098f  STD_BORD MMTM    SP,A0
         00006460     8000  
    2108 00006470     09e0           MOVI    BORDER_SIZE,A0
         00006480 00050005  
    2109 000064a0     0d5f           CALLA   DOBORDER
         000064b0 00006050' 
    2110 000064d0     09af          MMFM    SP,A0
         000064e0     0001  
    2111 000064f0     0960          RETS
    2112                    **************************************************************************
    2113                    *                                                                        *
    2114                    *          DO_HELP_MENU                                                  *
    2115                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   46

    2116                    *          THIS IS CALLED TO DISPLAY A HELP MENU FOR THE CURRENT         *
    2117                    *          MENU ENTRY.                                                   *
    2118                    *                                                                        *
    2119                    *          A HELP MENU IS DEFINED AS FOLLOWS:                            *
    2120                    *                                                                        *
    2121                    *          HM_JUST         WORD    0=CENTER   1=LEFT                     *
    2122                    *          HM_COLOR        WORD    COLOR OF MENU                         *
    2123                    *          HM_ENTS         WORD    NUMBER OF LINES IN MENU               *
    2124                    *                          LONG    LONG WORD POINTERS FOR EACH LINE!     *
    2125                    *                                                                        *
    2126                    *          THE PROCESS AREA IS FILLED WITH THE CURRENT MENU              *
    2127                    *          PARAMETERS.                                                   *
    2128                    *                                                                        *
    2129                    *          A8 = POINTER TO HELP MENU STRUCTURE ABOVE                     *
    2130                    *                                                                        *
    2131                    **************************************************************************
    2132 00006500           DO_HELP_MENU
    2133 00006500     0d3f           CALLR   BLNKHELP
         00006510     0015  
    2134                    
    2135 00006520     4d08           MOVE    A8,A8                ;CHECK IF HELP MENU EXISTS.
    2136 00006530     ca12           JRZ     DHMX                 ;NOPE JUST CLEARING WAS OUR JOB.
    2137                    
    2138 00006540     b5a0           MOVE    *A13(MEN_CUR),A0,W   ;THIS IS CURRENT ENTRY
         00006550     0170  
    2139 00006560     4c0b           MOVE    A0,A11               ;PASS ENTRY NUMBER IN A11
    2140 00006570     0d3f           CALLR   GET_ENTRY_Y          ;A5 HAS THE Y FOR THE CURRENT ENTRY
         00006580     ff2c  
    2141                    *
    2142                    *        NOW WE NEED TO MOVE TO MAKE TOP ENTRY BOX LINE UP.
    2143                    *
    2144 00006590     b5aa           MOVE    *A13(MEN_BDY),A10,W  ;THIS IS NEGATIVE TO GIVE US BOX TOP
         000065a0     0100  
    2145 000065b0     40aa           ADD     A5,A10               ;NOW WE HAVE BOX TOP
    2146                    
    2147 000065c0     b5a5           MOVE    *A13(MEN_BAR),A5,W   ;GET BAR HEIGHT
         000065d0     00f0  
    2148 000065e0     2fe5           SRL     1,A5                 ;FIND CENTER OF BAR
    2149 000065f0     40aa           ADD     A5,A10               ;NOW WE'RE AT BAR CENTER.
    2150                    
    2151                    *         SUBI    MB_YWID+GAP,A10      ;THIS IS MAIN MENU TOP. (FOR TOP ENTRY)
    2152                    
    2153 00006600     09e7           MOVI    H_SLAVE,A7        ;FORK OFF SO IT CAN USE PDATA!
         00006610 000067c0' 
    2154 00006630     0d5f           CALLA   P_FORK               ;START UP ANOTHER W/ SAME ID TO FLASH!
         00006640 00000000! 
    2155 00006660     0960  DHMX     RETS
    2156                    
    2157                    **************************************************************************
    2158                    *                                                                        *
    2159                    *          BLNKHELP                                                      *
    2160                    *                                                                        *
    2161                    *          THIS IS CALLED TO BLANK OUT THE HELP AREA.  IT IS             *
    2162                    *          USED BY BOTH THE "NORMAL" HELP PLOTTER AND IS                 *
    2163                    *          CALLED BY THE ADJUSTMENT HELP PROGRAM.                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   47

    2164                    *                                                                        *
    2165                    *          THIS RETURNS THE LEFT X FOR THE HELP MENU IN A9               *
    2166                    *                                                                        *
    2167                    **************************************************************************
    2168 00006670           BLNKHELP
    2169 00006670     098f           MMTM    SP,A3,A4,A5,A6
         00006680     1e00  
    2170 00006690     0d3f           CALLR   MENU_LR_A6_A5        ;GET RIGHT X OF MAIN MENU IN A6
         000066a0     ff54  
    2171 000066b0     4cc9           MOVE    A6,A9                ;PASS TO HELP MENU SLAVE
    2172                    *
    2173                    *        NOW BLANK OUT THE "HELP" REGION
    2174                    *
    2175 000066c0     4cc3           MOVE    A6,A3                ;UPPER LEFT X OF REGION TO BLANK OUT
    2176 000066d0     0b23           ADDI    INST_ULY*10000H,A3   ;THIS IS UPPER LEFT OF BLOCK
         000066e0 004f0000  
    2177                    
    2178 00006700     09e4           MOVI    TIT_LRX+(10000H*400),A4 ;COORDINATE OF LOWER RIGHT OF HELP AREA
         00006710 019001cc  
    2179 00006730     e264           SUBXY   A3,A4                   ;THIS IS SIZE OF REGION TO BLANK
    2180 00006740     0d5f           CALLA   BLNKAREA                ;BLANK OUT THE HELP AREA
         00006750 00000000! 
    2181 00006770     0b09           ADDI    BOX_XGAP,A9             ;RETURN X FOR HELP MENUS
         00006780     0006  
    2182 00006790     09af          MMFM    SP,A3,A4,A5,A6
         000067a0     0078  
    2183 000067b0     0960          RETS
    2184                    
    2185                    **************************************************************************
    2186                    *                                                                        *
    2187                    *          H_SLAVE                                                       *
    2188                    *                                                                        *
    2189                    *          THIS IS A PROCESS CREATED TO PLOT THE HELP BOX.               *
    2190                    *          IT DOES ITS PLOTTING THEN DIES.   THIS ALLOWS IT              *
    2191                    *          TO USE THE PDATA AREA WITHOUT DISTURBING THE CALLER.          *
    2192                    *                                                                        *
    2193                    *          A8 = POINTER TO HELP BOX STRUCTURE                            *
    2194                    *          A9 = LEFT MARGIN FOR THE HELP BOX.                            *
    2195                    *          A10 = Y OF CENTER OF BOX ...HIGH HALF IS ZERO FOR Y CENTING   *
    2196                    *                IF HIGH HALF IS NON-ZERO, THEN THIS IS TOP OF BOX       *
    2197                    *                                                                        *
    2198                    **************************************************************************
    2199              0000  HM_JUST          EQU     0
    2200              0010  HM_COLOR         EQU     HM_JUST+WORD_SIZE
    2201              0020  HM_ENTS          EQU     HM_COLOR+WORD_SIZE
    2202              0030  HM_DATA          EQU     HM_ENTS+WORD_SIZE      ;ENTRY POINTERS
    2203                    
    2204              0060  HS_ROUT          EQU     PDATA             ;LONG-TEXT ROUTINE
    2205              0080  HS_X             EQU     HS_ROUT+LONG_SIZE ;WORD-X FOR TEXT ROUTINE
    2206              0090  HS_Y             EQU     HS_X+WORD_SIZE    ;WORD-CURRENT Y
    2207              00a0  HS_ENTS          EQU     HS_Y+WORD_SIZE    ;WORD-ENTRIES LEFT TO DO
    2208              00b0  HS_COLOR         EQU     HS_ENTS+WORD_SIZE ;WORD-COLOR OF MENU
    2209              00c0  HS_PTR           EQU     HS_COLOR+WORD_SIZE ;LONG-CURRENT TEXT POINTER
    2210                    
    2211 000067c0           H_SLAVE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   48

    2212                    *
    2213                    *        A9 HAS RIGHT X OF MENU
    2214                    *
    2215 000067c0     4d21           MOVE    A9,A1                     ;PUT THIS X VALUE IN A1
    2216                    
    2217 000067d0     b500           MOVE    *A8(HM_JUST),A0,W         ;0 = CENTER  1=LEFT
         000067e0     0000  
    2218 000067f0     ca06           JRZ     HS_CENT                   ;CENTER....SETUP X ACCORDINGLY
    2219                    *
    2220                    *        LEFT JUSTIFY....STORE ROUTINE
    2221                    *
    2222 00006800     09e0           MOVI    STRLNRM,A0                ;LEFT JUSTIFY ROUTIN
         00006810 00000000! 
    2223                    *
    2224                    *        NOW FORM X AS SOME MARGIN FROM WINDOW....
    2225                    *
    2226 00006830     0b01           ADDI    MB_XWID+HELP_X_MARGIN,A1  ;ADD MARGIN TO FORM X FOR TEXT
         00006840     000f  
    2227 00006850     c006           JRUC    CENTER_JOIN               ;CONTINUE
    2228                    
    2229 00006860     09e0  HS_CENT  MOVI    STRCNRM,A0                ;USE CENTERING ROUTINE
         00006870 00000000! 
    2230                    *
    2231                    *        A1 HAS LEFT X OF HELP BOX...FIND RIGHT X
    2232                    *
    2233 00006890     0b01           ADDI    TIT_LRX,A1
         000068a0     01cc  
    2234 000068b0     2fe1           SRL     1,A1                      ;THIS IS CENTER X
    2235                    
    2236 000068c0           CENTER_JOIN
    2237 000068c0     b02d           MOVE    A1,*A13(HS_X),W           ;STORE X
         000068d0     0080  
    2238 000068e0     b20d           MOVE    A0,*A13(HS_ROUT),L        ;STORE ROUTINE
         000068f0     0060  
    2239                    
    2240 00006900     b501           MOVE    *A8(HM_ENTS),A1,W         ;GET NUMBER OF ENTRIES
         00006910     0020  
    2241 00006920     b02d           MOVE    A1,*A13(HS_ENTS),W        ;COUNT IT DOWN IN P-AREA
         00006930     00a0  
    2242                    
    2243 00006940     b500           MOVE    *A8(HM_COLOR),A0,W        ;GET COLOR
         00006950     0010  
    2244 00006960     b00d           MOVE    A0,*A13(HS_COLOR),W       ;STASH IT
         00006970     00b0  
    2245                    
    2246 00006980     0b08           ADDI    HM_DATA,A8                ;POINT AT 1ST ENTRY
         00006990     0030  
    2247 000069a0     b30d           MOVE    A8,*A13(HS_PTR),L         ;NOW WE'RE READY.
         000069b0     00c0  
    2248                    *
    2249                    *        ALL PDATA AREA SET.....NOW WE NEED TO DRAW THE BORDER
    2250                    *
    2251                    *          FOR DOBORDER
    2252                    *
    2253                    *          A4 = UPPER LEFT Y,X                                           
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   49

    2254                    *          A5 = LOWER RIGHT Y,X                                        
    2255                    *          A0 = Y,X WIDTH OF BORDER                                     
    2256                    *          A9 = COLOR OF BORDER.                                         
    2257                    *
    2258                    *        LOWER RIGHT X IS SUCH THAT IT LINES UP WITH TITLE BOX.
    2259                    *        THE Y IS A BIT TRICKIER......NUMBER OF ENTRIES IS
    2260                    *        SITTING IN A1
    2261                    *
    2262 000069c0     09c5           MOVI    HELP_DY,A5                ;DISTANCE PER ENTRY
         000069d0     000c  
    2263 000069e0     5e25           MPYU    A1,A5                     ;DISTANCE FOR ALL ENTRIES
    2264 000069f0     0b05           ADDI    HELP_Y_MARGIN+(MB_YWID*2)+HELP_YLO_MARGIN,A5
         00006a00     0016  
    2265                    *
    2266                    *        A5 NOW CONTAINS FULL HEIGHT OF BOX
    2267                    *
    2268                    *        NOW SEE IF WE'RE CENTERING ON A10 OR IF A10 IS THE TOP.
    2269                    *
    2270 00006a10     0d3f           CALLR   TOP_IN_A10
         00006a20     003a  
    2271                    *
    2272                    *        NOW FORM UPPER LEFT IN A4
    2273                    *
    2274 00006a30     4d44           MOVE    A10,A4                    ;MOVE Y OVER
    2275 00006a40     2604           SLL     16,A4                     ;MAKE ROOM FOR X
    2276 00006a50     4124           ADD     A9,A4                     ;PUT IN THE X...THIS IS UPPER LEFT!
    2277                    
    2278 00006a60     4145           ADD     A10,A5                    ;ADD BASE TO OFFSET
    2279 00006a70     2605           SLL     16,A5                     ;PUT IN Y POSITION
    2280 00006a80     0b05           ADDI    TIT_LRX,A5                ;ADD IN THE X FOR THE CORNER
         00006a90     01cc  
    2281                    *
    2282                    *        NOW ADJUST FROM TOP OF BOX TO POSITION OF 
    2283                    *        1ST ENTRY.
    2284                    *
    2285 00006aa0     0b0a           ADDI    MB_YWID+HELP_Y_MARGIN,A10  ;Y OF 1ST ENTRY
         00006ab0     000d  
    2286 00006ac0     b14d           MOVE    A10,*A13(HS_Y),W           ;PUT AWAY
         00006ad0     0090  
    2287                    
    2288 00006ae0     b5a9           MOVE    *A13(HS_COLOR),A9,W       ;GET THE COLOR FOR DOBORDER
         00006af0     00b0  
    2289                    
    2290 00006b00     0d3f           CALLR   STD_BORD       
         00006b10     ff93  
    2291                    *
    2292                    *        NOW WE NEED TO WALK THROUGH AND PLOT THE HELP
    2293                    *        MENU ENTRIES.
    2294                    *
    2295                    *        A0 = SLEEP
    2296                    *        A1 = ROUTINE
    2297                    *        A6 = COLOR
    2298                    *        A8 = POINTER
    2299                    *        A9 = ADDRESS
    2300                    *        A10 = SPACING
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   50

    2301                    *        A11 = FONT
    2302                    *        A14 = FLAGS
    2303                    *
    2304 00006b20           NEXT_HELP
    2305 00006b20     b7a2           MOVE    *A13(HS_PTR),A2,L         ;GET OUR CURRENT POINTER
         00006b30     00c0  
    2306 00006b40     9648           MOVE    *A2+,A8,L                 ;GET THE CURRENT MESSAGE POINTER
    2307 00006b50     b24d           MOVE    A2,*A13(HS_PTR),L         ;AND PUT POINTER BACK
         00006b60     00c0  
    2308                    
    2309 00006b70     5600           CLR     A0
    2310 00006b80     b7a1           MOVE    *A13(HS_ROUT),A1,L        ;ROUTINE IN A1
         00006b90     0060  
    2311 00006ba0     b5a6           MOVE    *A13(HS_COLOR),A6,W       ;STUFF COLOR
         00006bb0     00b0  
    2312                    
    2313 00006bc0     b5a9           MOVE    *A13(HS_Y),A9,W           ;GET Y
         00006bd0     0090  
    2314 00006be0     2609           SLL     16,A9                     ;SHIFT INTO PLACE
    2315 00006bf0     b5aa           MOVE    *A13(HS_X),A10,W
         00006c00     0080  
    2316 00006c10     4149           ADD     A10,A9                    ;A9 IS NOW POINTING AT SCREEN
    2317                    
    2318 00006c20     09ca           MOVI    SPACING07,A10             ;SPACING
         00006c30     0001  
    2319 00006c40     09eb           MOVI    RD7FONT,A11               ;FONT IS BABY FONT
         00006c50 00000000! 
    2320 00006c70                    JSRP    LM_FINIS                  ;PRINT IT OUT!
    2321                    
    2322 00006ce0     b5a9           MOVE    *A13(HS_Y),A9,W           ;GET THE Y
         00006cf0     0090  
    2323 00006d00     0b09           ADDI    HELP_DY,A9                ;KICK IT
         00006d10     000c  
    2324 00006d20     b12d           MOVE    A9,*A13(HS_Y),W           ;PUT IT BACK
         00006d30     0090  
    2325                    
    2326 00006d40     b5a0           MOVE    *A13(HS_ENTS),A0,W        ;ENTRY COUNT
         00006d50     00a0  
    2327 00006d60     1420           DEC     A0
    2328 00006d70     b00d           MOVE    A0,*A13(HS_ENTS),W        ;PUT IT BACK
         00006d80     00a0  
    2329 00006d90     cbd8           JRNZ    NEXT_HELP
    2330                    
    2331 00006da0     c080           JAUC    SUCIDE                    ;OUR WORK IS DONE!
         00006db0 00000000! 
    2332                    
    2333                    **************************************************************************
    2334                    *                                                                        *
    2335                    *          TOP_IN_A10                                                    *
    2336                    *                                                                        *
    2337                    *          THIS IS CALLED BY H_SLAVE TO GET THE UPPER LEFT               *
    2338                    *          CORNER OF THE BOX IN A10.  A10 HAS THE PASSED PARAMETER.      *
    2339                    *          A5 HAS THE HEIGHT OF THE BOX.  IF THE TOP HALF OF A10         *
    2340                    *          IS ZERO, THEN THEN WE WANT THE BOX CENTER AT THE              *
    2341                    *          A10 LEVEL.  IF THE TOP HALF OF A10 IS NON-ZERO THEN           *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   51

    2342                    *          A10 WAS PASSED AS THE TOP.                                    *
    2343                    *                                                                        *
    2344                    *          RETURN A10 AS THE Y FOR THE TOP OF THE HELP BOX.              *
    2345                    *                                                                        *
    2346                    **************************************************************************
    2347 00006dd0           TOP_IN_A10
    2348 00006dd0     098f           MMTM    SP,A5
         00006de0     0400  
    2349 00006df0     0b6a           CMPI    0FFFFH,A10                ;IS THE TOP HALF ZERO?
         00006e00 ffff0000  
    2350 00006e20     c302           JRHI    TOP_IS_TOP                ;TOP IS SET..RETURN
    2351 00006e30     2fe5           SRL     1,A5                      ;TOP OF BOX IS HALF UP FROM MAIN MENU BAR CENTER
    2352 00006e40     44aa           SUB     A5,A10                    ;NOW A10 HAS Y BASE OF BOX
    2353 00006e50           TOP_IS_TOP
    2354 00006e50     09af          MMFM    SP,A5
         00006e60     0020  
    2355 00006e70     0960          RETS
    2356                    
    2357                    **************************************************************************
    2358                    *                                                                        *
    2359                    *          AREUSURE                                                      *
    2360                    *                                                                        *
    2361                    *          THIS IS CALLED TO GET A CONFIRMATION FROM THE USER.           *
    2362                    *          A8 = PROMPT...THIS WILL APPEAR ABOVE THE "ARE YOU SURE"       *
    2363                    *          A9 = ROUTINE TO JSRP TO DO THE DESIRED ACTION                 *
    2364                    *          A10 = MESSAGE TO DISPLAY CONFIRMING COMPLETION                *
    2365                    *                                                                        *
    2366                    *          RETURN A0=0 MEANS YES WAS CHOSEN.                             *
    2367                    *                 A0 .NE. 0 MEANS NO                                     *
    2368                    *                                                                        *
    2369                    **************************************************************************
    2370 00006e80           AREUSURE
    2371 00006e80     0d5f           CALLA   CLR_SCRN             ;BLANK IT ALL OUT!
         00006e90 00000000! 
    2372 00006eb0     b32d           MOVE    A9,*A13(PDATA),L     ;SAVE ROUTINE
         00006ec0     0060  
    2373 00006ed0     a34c           MOVE    A10,-*A12,L          ;AND CONFIRM MESSAGE
    2374                    
    2375 00006ee0     0d3f           CALLR   SURE_BOX
         00006ef0     0060  
    2376                    
    2377 00006f00     4d02           MOVE    A8,A2                ;PUT MESSAGE TEXT IN SAFE PLACE
    2378 00006f10     09e8           MOVI    MESS_SURE,A8         ;SETUP FOR TITLE
         00006f20 00008370' 
    2379 00006f40     0d5f           CALLA   LM_SETUP             ;STUFF REGGIES
         00006f50 00000000! 
    2380 00006f70     4c48           MOVE    A2,A8                ;GET STRING IN THERE
    2381 00006f80                    JSRP    LM_FINIS             ;AND PRINT IT
    2382                    
    2383 00006ff0     09e8           MOVI    M_SURE,A8            ;NOW THE "ARE YOU SURE" PART
         00007000 00008410' 
    2384 00007020                    JSRP    L_MESS               ;PUT IT UP.
    2385                    
    2386 00007090     09e8           MOVI    MEN_YN,A8            ;PUT UP THE "YES/NO" SELECTOR.
         000070a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   52

    2387 000070c0     09c9           MOVI    2,A9                 ;CURSOR ON 2ND ENTRY (NO)
         000070d0     0002  
    2388                    
    2389 000070e0                    JSRP    B_MENU               ;AND GET A RESPONSE.
    2390 00007150     0b48           CMPI    1,A8                 ;WAS IT YES?
         00007160     fffe  
    2391 00007170     cb1f           JRNZ    SURE_X               ;NOPE....GET OUT
    2392                    
    2393 00007180     0d5f           CALLA   CLR_SCRN             ;CLEAR THE SCREEN FIRST, SO ROUTINE CAN PLOT!
         00007190 00000000! 
    2394                    
    2395 000071b0     b7a0           MOVE    *A13(PDATA),A0,L     ;GET THE ROUTINE TO CALL
         000071c0     0060  
    2396 000071d0     09e7           MOVI    SURE_RET,A7
         000071e0 00007220' 
    2397 00007200     a2ec           MOVE    A7,-*A12,L           ;PUSH RETURN ADDRESS
    2398 00007210     0160           JUMP    A0                   ;AND "JSRP" THE ROUTINE
    2399                    
    2400 00007220     0d3f  SURE_RET CALLR   SURE_BOX             ;BOX IT!
         00007230     002c  
    2401 00007240     9788           MOVE    *A12+,A8,L
    2402 00007250                    JSRP    SUR_MESS             ;PRINT THE MESSAGE
    2403                    
    2404 000072c0                    JSRP    ANY_BUT              ;NOW RETRIEVE ANY BUTTON THEN RETURN
    2405                    
    2406 00007330     5600           CLR     A0                   ;RETURN SUCCESS
    2407 00007340                    RETP
    2408                    
    2409 00007370     0b0c  SURE_X   ADDI    LONG_SIZE,A12        ;POP MESSAGE
         00007380     0020  
    2410 00007390     09c0           MOVI    2,A0                 ;RETURN FAILURE
         000073a0     0002  
    2411 000073b0                    RETP
    2412                    
    2413                    **************************************************************************
    2414                    *                                                                        *
    2415                    *          SUR_MESS                                                      *
    2416                    *                                                                        *
    2417                    *          THIS PRINTS MESSAGE IN A8 IN THE ARE U SURE BOX               *
    2418                    *          CONFIRMATION SPOT.                                            *
    2419                    *                                                                        *
    2420                    **************************************************************************
    2421 000073e0           SUR_MESS
    2422 000073e0     a30c           MOVE    A8,-*A12,L
    2423 000073f0     09e8           MOVI    MESS_CONFIRM,A8
         00007400 00008530' 
    2424 00007420     0d5f           CALLA   LM_SETUP             ;GET CONFIRMATION DATA READY.
         00007430 00000000! 
    2425 00007450     9788           MOVE    *A12+,A8,L
    2426 00007460                    JSRP    LM_FINIS             ;PRINT OUR PART
    2427 000074d0                    RETP
    2428                    
    2429 00007500           SURE_BOX
    2430 00007500     09e9           MOVI    NARCS_ORANGE,A9
         00007510 0000fafa  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   53

    2431 00007530     09e4           MOVI    000600030H,A4
         00007540 00600030  
    2432 00007560     09e5           MOVI    0018001D0H,A5
         00007570 018001d0  
    2433 00007590     0d3f           CALLR   STD_BORD            ;BORDER-IZE THE WHOLE THING.
         000075a0     feea  
    2434 000075b0     0960           RETS
    2435                    
    2436 000075c0           CENT_BOX
    2437 000075c0     09e9           MOVI    NARCS_RED,A9
         000075d0 0000f9f9  
    2438 000075f0           CBOX_COL
    2439 000075f0     09e4           MOVI    0006E0030H,A4
         00007600 006e0030  
    2440 00007620     09e5           MOVI    0011A01D0H,A5
         00007630 011a01d0  
    2441 00007650     0d3f           CALLR   STD_BORD            ;BORDER-IZE THE WHOLE THING.
         00007660     fede  
    2442 00007670     0960           RETS
    2443                    
    2444                    *----------------------------------------------------------------------------*
    2445                    *----------------------------------------------------------------------------*
    2446                    *****************************    MESSAGES    *********************************
    2447                    *----------------------------------------------------------------------------*
    2448                    *----------------------------------------------------------------------------*
    2449                    
    2450              0059  INSTR_Y  EQU     INST_ULY+10
    2451              0065  INSTR_2Y EQU     INSTR_Y+12
    2452                    
    2453 00007680           MM_INST1
    2454 00007680                    MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_Y,NARCS_CYAN,STRCNRM,0
    2455 00007720       53           .STRING   "SELECT WITH UP/DOWN STICK"
    2456 000077e8       00           .BYTE   0  
    2457 000077f0                    .EVEN
    2458                    
    2459 000077f0           MM_INST2
    2460 000077f0                    MESS_MAC  RD7FONT,SPACING07,MENU_X,INSTR_2Y,NARCS_CYAN,STRCNRM,0
    2461 00007890       41           .STRING   "ACTIVATE WITH ANY BUTTON"
    2462 00007950       00           .BYTE   0 
    2463 00007960                    .EVEN
    2464                    
    2465 00007960           MESS_DOOR
    2466 00007960                    MESS_MAC  RD15FONT,SPACING20,256,200,NARCS_RED,STRCNRM,0
    2467 00007a00       49           .STRING  "INVALID GAME SETTINGS"
    2468 00007aa8       00           .BYTE   0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2469 00007ac0                    .EVEN
    2470 00007ac0           MESS_OPEN
    2471 00007ac0                    MESS_MAC  RD15FONT,SPACING20,256,250,NARCS_WHITE,STRCNRM,0
    2472 00007b60       4f           .STRING  "OPEN COIN DOOR TO"
    2473 00007be8       00           .BYTE   0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2474 00007c00                    .EVEN
    2475 00007c00           MESS_OPEN_2
    2476 00007c00                    MESS_MAC  RD15FONT,SPACING20,256,280,NARCS_WHITE,STRCNRM,0
    2477 00007ca0       52           .STRING  "RESTORE FACTORY SETTINGS."
    2478 00007d68       00           .BYTE    0,0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   54

    2479 00007d80                    .EVEN
    2480                    
    2481 00007d80           MESS_FAIL
    2482 00007d80                    MESS_MAC  RD15FONT,SPACING20,256,176,NARCS_RED,STRCNRM,0
    2483 00007e20       49           .STRING  "INVALID GAME SETTINGS"
    2484 00007ec8       00           .BYTE   0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2485 00007ee0                    .EVEN
    2486 00007ee0                    MESS_MAC  RD15FONT,SPACING20,256,226,NARCS_WHITE,STRCNRM,0
    2487 00007f80       41           .STRING  "ATTEMPT TO RESTORE"
    2488 00008010       00           .BYTE   0,1                  ;0 = END OF STRING...1 = MORE MESSAGES!
    2489 00008020                    .EVEN
    2490 00008020                    MESS_MAC  RD15FONT,SPACING20,256,256,NARCS_WHITE,STRCNRM,0
    2491 000080c0       46           .STRING  "FACTORY SETTINGS HAS FAILED."
    2492 000081a0       00           .BYTE    0,0
    2493 000081b0                    .EVEN
    2494                    
    2495 000081b0           MESS_BITCHIN
    2496 000081b0       41           .STRING "ADJUSTMENTS OK"
    2497 00008220       00           .BYTE   0
    2498 00008230                    .EVEN
    2499                    **************************************************************************
    2500                    *                                                                        *
    2501                    *          MESS_MAC  RD15FONT,SPACING20,256,168,NARCS_WHITE,STRCNRM,0    *
    2502                    *          .STRING   "INITIAL TESTS INDICATE:"                           *
    2503                    *          .BYTE     0,1                                                 *
    2504                    *          .EVEN                                                         *
    2505                    *          MESS_MAC  RD15FONT,SPACING20,256,208,NARCS_WHITE,STRCNRM,0    *
    2506                    *          .STRING   "THIS GAME IS BITCHIN'"                             *
    2507                    *          .BYTE     0,0                                                 *
    2508                    *          .EVEN                                                         *
    2509                    *                                                                        *
    2510                    **************************************************************************
    2511                    
    2512 00008230           MESS_TITLE
    2513 00008230                    MESS_MAC  RD20FONT,SPACING20,TM_X,TM_Y,NARCS_GREEN,STRCNRM,0
    2514                    
    2515              0031  RV_Y     EQU     TM_Y+25
    2516                    
    2517 000082d0           MESS_REV
    2518 000082d0                    MESS_MAC  RD15FONT,SPACING20,TM_X,RV_Y,NARCS_YELLOW,STRCNRM,0
    2519                    *
    2520                    *        THIS IS SETUP FOR THE QUESTION BEING ASKED
    2521                    *        BY "ARE YOU SURE"
    2522                    *
    2523 00008370           MESS_SURE
    2524 00008370                    MESS_MAC  RD15FONT,SPACING20,256,160,NARCS_LF,STRCNRM,0
    2525                    *
    2526                    *        THIS IS THE "ARE YOU SURE" PART.
    2527                    *
    2528 00008410           M_SURE
    2529 00008410                    MESS_MAC  RD15FONT,SPACING20,256,200,NARCS_YELLOW,STRCNRM,0
    2530 000084b0       41           .STRING   "ARE YOU SURE?"
    2531 00008518       00           .BYTE      0,0
    2532 00008530                    .EVEN
    2533                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   55

    2534 00008530           MESS_CONFIRM
    2535 00008530                    MESS_MAC  RD15FONT,SPACING20,256,180,NARCS_LF,STRCNRM,0
    2536                    
    2537              0171  SIY1     EQU     SND_MESS_Y+39
    2538              017d  SIY3     EQU     SND_MESS_Y+51
    2539              0158  SIY2     EQU     SND_MESS_Y+14
    2540                    
    2541 000085d0           SND_INST
    2542 000085d0                     MESS_MAC  RD7FONT,SPACING07,256,SIY1,NARCS_WHITE,STRCNRM,0
    2543 00008670       50           .STRING   "PRESS START BUTTON TO REPEAT."
    2544 00008758       00           .BYTE     0,1
    2545 00008770                    .EVEN
    2546 00008770                     MESS_MAC  RD7FONT,SPACING07,256,SIY3,NARCS_WHITE,STRCNRM,0
    2547 00008810       41           .STRING   "ANY OTHER BUTTON FOR NEXT SELECTION."
    2548 00008930       00           .BYTE     0,0
    2549 00008940                    .EVEN
    2550                    
    2551 00008940           SND_SETUP MESS_MAC  RD15FONT,SPACING20,256,SIY2,NARCS_LF,STRCNRM,0
    2552                    
    2553 000089e0 00008c80' STABLE   .LONG   ST1
    2554 00008a00 00008cd0'          .LONG   ST2
    2555 00008a20 00008d40'          .LONG   ST3
    2556 00008a40 00008da0'          .LONG   ST4
    2557 00008a60 00008e00'          .LONG   ST5
    2558 00008a80 00008e60'          .LONG   ST6
    2559 00008aa0 00008ec0'          .LONG   ST7
    2560 00008ac0 00008f50'          .LONG   ST8
    2561 00008ae0 00008fa0'          .LONG   ST9
    2562 00008b00 00009000'          .LONG   ST10
    2563 00008b20 00009040'          .LONG   ST11
    2564 00008b40 000090f0'          .LONG   ST12
    2565                    
    2566 00008b60 000091c0' DTABLE   .LONG   DT1
    2567 00008b80 00009200'          .LONG   DT2
    2568 00008ba0 00009270'          .LONG   DT3
    2569 00008bc0 00009320'          .LONG   DT4
    2570 00008be0 00009380'          .LONG   DT5
    2571 00008c00 000093a0'          .LONG   DT6
    2572 00008c20 00009410'          .LONG   DT7
    2573 00008c40 00009480'          .LONG   DT8
    2574 00008c60 00009520'          .LONG   DT9
    2575                    
    2576 00008c80       4e  ST1      .STRING "NARC RAP"
    2577 00008cc0       00           .BYTE 0
    2578 00008cd0                    .EVEN
    2579 00008cd0       44  ST2      .STRING "DRIVING MUSIC"
    2580 00008d38       00           .BYTE 0
    2581 00008d40                    .EVEN
    2582 00008d40       4e  ST3      .STRING "NARC THEME"
    2583 00008d90       00           .BYTE 0
    2584 00008da0                    .EVEN
    2585 00008da0       54  ST4      .STRING "THE "
    2586 00008dc0       22           .BYTE ASCII_DQ
    2587 00008dc8       53           .STRING "STICK"
    2588 00008df0       81           .BYTE FONT_RQUOTE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   56

    2589 00008df8       00           .BYTE 0
    2590 00008e00                    .EVEN
    2591 00008e00       48  ST5      .STRING "HELICOPTER"
    2592 00008e50       00           .BYTE 0
    2593 00008e60                    .EVEN
    2594 00008e60       4b  ST6      .STRING "KINKY PINKY"
    2595 00008eb8       00           .BYTE 0
    2596 00008ec0                    .EVEN
    2597 00008ec0       57  ST7      .STRING "WINDSHIELD SMASH"
    2598 00008f40       00           .BYTE 0
    2599 00008f50                    .EVEN
    2600 00008f50       43  ST8      .STRING "CAR HORN"
    2601 00008f90       00           .BYTE 0
    2602 00008fa0                    .EVEN
    2603 00008fa0       42  ST9      .STRING "BUG SQUASH"
    2604 00008ff0       00           .BYTE 0
    2605 00009000                    .EVEN
    2606 00009000       53  ST10      .STRING "SIZZLE"
    2607 00009030       00           .BYTE 0
    2608 00009040                    .EVEN
    2609 00009040       55  ST11     .STRING "U10 - DAC   RAMP WAVE"
    2610 000090e8       00           .BYTE 0
    2611 000090f0                    .EVEN
    2612 000090f0       55  ST12     .STRING "U7/U8 - YM2151 SINE WAVE"
    2613 000091b0       00           .BYTE 0
    2614 000091c0                    .EVEN
    2615                    
    2616 000091c0       47  DT1      .STRING "GUNSHOT"
    2617 000091f8       00           .BYTE 0
    2618 00009200                    .EVEN
    2619 00009200       44  DT2      .STRING "DUMPSTER MAN"
    2620 00009260       00           .BYTE 0
    2621 00009270                    .EVEN
    2622 00009270       4f  DT3      .STRING "OH NO, THE NARCS MAN!"
    2623 00009318       00           .BYTE 0
    2624 00009320                    .EVEN
    2625 00009320       44  DT4      .STRING "DRJ. SCREAM"
    2626 00009378       00           .BYTE 0
    2627 00009380                    .EVEN
    2628 00009380       44  DT5      .STRING "DOG"
    2629 00009398       00           .BYTE 0
    2630 000093a0                    .EVEN
    2631 000093a0       59  DT6      .STRING "YOU DIE COP!"
    2632 00009400       00           .BYTE 0
    2633 00009410                    .EVEN
    2634 00009410       4d  DT7      .STRING "MR. BIG LAUGH"
    2635 00009478       00           .BYTE 0
    2636 00009480                    .EVEN
    2637 00009480       55  DT8      .STRING "U20 - DAC RAMP WAVE"
    2638 00009518       00           .BYTE 0
    2639 00009520                    .EVEN
    2640 00009520       55  DT9      .STRING "U30 - CVSD WAVEFORM"
    2641 000095b8       00           .BYTE 0
    2642 000095c0                    .EVEN
    2643                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:12 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

TEST PROGRAM                                                         PAGE   57


 No Errors,  No Warnings
