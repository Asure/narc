TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .FILE   "NARCHELP.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    **************************************************************************
       7                    *                                                                        *
       8                    *          NARC (R)                                                      *
       9                    *                                                                        *
      10                    *          Copyright 1988 Williams Electronics Games Inc.                *
      11                    *          All Rights Reserved                                           *
      12                    *                                                                        *
      13                    **************************************************************************
      14                    *                                                                        *
      15                    *          Narc Adjustments and Audit handing                            *
      16                    *                                                                        *
      17                    *          Larry DeMar    November 10, 1988                              *
      18                    *                                                                        *
      19                    **************************************************************************
      20                    
      21                            .INCLUDE        "\video\MPROCEQU.ASM"   ;MPROC equates
      22                            .INCLUDE        "\video\DISPEQU.ASM"
      23                            .INCLUDE        "\video\GSP.INC"          ;GSP assembler equates
      24                            .INCLUDE        "\video\SYS.INC"    ;Zunit system equates
      25                            .INCLUDE        "\video\MACROS.HDR" ;Macros, Yeah!
      26                            .INCLUDE        "IMGTBL.GLO"              ;GLOBALS
      27                    *       LOCAL STUFF
      28                            .INCLUDE        "NARCEQU.ASM"           ;NARC Equates
      29                             .INCLUDE        "NARCLEQU.ASM"      ;LINKY EQUATES
      30                    
      31                    *
      32                    *        BAD_AUD - ANYTIME AN AUDIT NUMBER IS FETCHED, IF ITS
      33                    *                  CHECKSUM IS BAD, THEN BAD_AUD GETS SET TO 1
      34                    *                  THIS CAUSES "ERROR" IF ANY AUDIT IN A CALCULATION
      35                    *                  IS CORRUPTED, AND KEEPS A BAD CHECKSUM BAD WHEN
      36                    *                  AN AUDIT IS CHANGED.
      37                    
      38 00000000                    .BSS            BAD_AUD,16   ;(BAD_AUD...NOT BAD_DOG!)     
      39 00000010                    .BSS            P1_TIMR,16   ;TIMER UNITS FOR 1 PLAYER
      40 00000020                    .BSS            P2_TIMR,16   ;TIMER UNITS FOR 2 PLAYERS
      41 00000030                    .BSS            C_FRAC,16              ;TIME 10 SECONDS TO
      42                    *                                               ;INDICATE COIN ACTIVITY
      43 00000040                    .BSS            C_FLAGS,3*32     ;INTERRUPT COIN BOUNCE
      44 000000a0                    .BSS    OCT_FLG,16           ;FLAG SAYS WE'RE HALFWAY THROUGH PUSS!
      45                    
      46                    *
      47                    *        IN THIS MODULE
      48                    *
      49                             .GLOBAL         L_MESS, AUD, AUD1, GET_ADJ
      50                             .GLOBAL         GET_AUD, LCOIN, CCOIN, RCOIN, SLAM_SW
      51                             .GLOBAL         CR_STRTP
      52                             .GLOBAL         CR_CONTP
      53                             .GLOBAL         P_START  
      54                             .GLOBAL         P_CONT  
      55                             .GLOBAL         CRED_P  
      56                             .GLOBAL         L_TIMER
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    2

      57                             .GLOBAL         CRD_SCRN
      58                            .GLOBAL         ADD_DUMP
      59                             .GLOBAL         LM_SETUP
      60                             .GLOBAL         LM_FINIS
      61                             .GLOBAL         CMOS_VAL
      62                             .GLOBAL         CLR_AUD,FAC_SET,DISPDUMP
      63                             .GLOBAL         CLR_AUDR
      64                             .GLOBAL         FORM_ADC
      65                             .GLOBAL         F_ADC_S
      66                             .GLOBAL         CRED_P
      67                             .GLOBAL         BAD_AUD
      68                             .GLOBAL         ADJ_PAGE
      69                             .GLOBAL         STRCAT
      70                             .GLOBAL         CLR_SUBS
      71                             .GLOBAL         NO_CREDS
      72                             .GLOBAL                COIN_PAG
      73                             .GLOBAL         CAT_A0
      74                             .GLOBAL         UNIT_CLR
      75                             .GLOBAL         CK_MAX
      76                             .GLOBAL         DUMP_FS
      77                             .GLOBAL         HTOHXASC
      78                             .GLOBAL         PUT_ADJ
      79                             .GLOBAL         LD_CTAB
      80                             .GLOBAL         DEF_PAGE
      81                             .GLOBAL         ROM_NAME
      82                             .GLOBAL         C_FLAGS
      83                             .GLOBAL                GET_CSTR
      84                             .GLOBAL                WAIT_MUT
      85                    *
      86                    *        IN NARCHSTD
      87                    *
      88                             .GLOBAL         SET_PAGE
      89                             .GLOBAL         P_FORK 
      90                             .GLOBAL         DEC_HSR,INIT_HSR
      91                    *
      92                    *        GLOBALS IN NARCHSTD
      93                    *
      94                             .GLOBAL         RC_BYTEI
      95                             .GLOBAL         RC_BYTE
      96                             .GLOBAL         RC_WORD
      97                             .GLOBAL         RC_LONG
      98                             .GLOBAL         RC_LONGI
      99                             .GLOBAL         WC_BYTE
     100                             .GLOBAL         WC_BYTEI
     101                             .GLOBAL         WC_WORD
     102                             .GLOBAL         WC_WORDI
     103                             .GLOBAL         WC_LONG
     104                             .GLOBAL         WC_LONGI
     105                    *
     106                    *        IN NARCMENU
     107                    *
     108                             .GLOBAL         GET_CSPT
     109                             .GLOBAL         STR_OBJ
     110                             .GLOBAL         STR_FREE
     111                             .GLOBAL         CKPROMPT
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    3

     112                             .GLOBAL         TWO_TS,TWO_TP
     113                             .GLOBAL         G1SEL,F1SEL
     114                             .GLOBAL         BUILD_ST
     115                             .GLOBAL         HID_P
     116                    *
     117                    *        IN NARCMUGS
     118                    *
     119                            .GLOBAL          CRDTPAGE
     120                    *
     121                    *        IN NARCTEST
     122                    *
     123                             .GLOBAL         CK_DOOR
     124                             .GLOBAL         WT_ADV,WW_ADV
     125                             .GLOBAL         WAIT_BUT
     126                             .GLOBAL         FORM_SWS
     127                    *
     128                    *        OTHERS
     129                    *
     130                             .GLOBAL         SOUNDSUP
     131                             .GLOBAL         G_CRED
     132                    
     133 00000000                    .TEXT
     134                    
     135                    **************************************************************************
     136                    *                                                                        *
     137                    *          COIN HANDLING                                                 *
     138                    *                                                                        *
     139                    **************************************************************************
     140                    **************************************************************************
     141                    *                                                                        *
     142                    *          GEORGE INTERFACE ROUTINES                                     *
     143                    *                                                                        *
     144                    **************************************************************************
     145                    
     146                    **************************************************************************
     147                    *                                                                        *
     148                    *          L_TIMER                                                       *
     149                    *                                                                        *
     150                    *          THIS IS CALLED EACH TICK THROUGH THE EXEC LOOP                *
     151                    *          BEFORE TIMER IS CLEARED.  IT DOES NOTHING                     *
     152                    *          IF THE GAME IS NOT IN PLAY.   ELSE IT ADDS                    *
     153                    *          THE EXEC TIME TO THE 1 PLAYER OR 2 PLAYER                     *
     154                    *          TIMER BASED ON CURRENT NUMBER OF PEOPLE PLAYING.              *
     155                    *                                                                        *
     156                    **************************************************************************
     157              0113  FIVE_SEC EQU     113H                ;THIS IS 5 SECONDS.  (Experimentally!)
     158                    
     159 00000000     05a0  L_TIMER  MOVE    @C_FRAC,A0,W         ;COUNT DOWN COIN FRACTION TIMER
         00000010 00000030- 
     160 00000030     ca07           JRZ     L_TIM1               ;NOTHING THERE
     161 00000040     0b80           ANDI    07FFH,A0             ;THIS IS 30 SECONDS.....IF LARGER BRING DOWN!
         00000050 fffff800  
     162 00000070     1420           DEC     A0
     163 00000080     0580           MOVE    A0,@C_FRAC,W
         00000090 00000030- 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    4

     164                    
     165 000000b0     05a0  L_TIM1   MOVE    @GAMSTATE,A0         ;CHECK IF ITS IN PLAY
         000000c0 00000000! 
     166 000000e0     0b40           CMPI    INAMODE,A0
         000000f0     ffcf  
     167 00000100     ca24           JREQ    CK_OCTO              ;ATTRACT MODE..CHECK OCTOPUS!
     168 00000110     0b40           CMPI    INDIAG,A0
         00000120     ffbf  
     169 00000130     ca20           JREQ    NO_PLAY
     170 00000140     0b40           CMPI    INGAMEOV,A0
         00000150     ffaf  
     171 00000160     ca1d           JREQ    NO_PLAY
     172                    *
     173                    *        WE'RE PLAYING!
     174                    *
     175 00000170     05a0           MOVE    @NPLYRS,A0           ;HOW MANY?
         00000180 00000000! 
     176 000001a0     ca19           JRZ     NO_PLAY              ;NONE!
     177                    
     178 000001b0     05a1           MOVE    @TIMER,A1,W          ;GET ELAPSED TIME
         000001c0 00000000! 
     179                    
     180 000001e0     0b40           CMPI    1,A0                 ;1?
         000001f0     fffe  
     181 00000200     ca3e           JRZ     LT_ONE
     182                    *
     183                    *        TWO PLAYER GAME
     184                    *
     185 00000210     05a0           MOVE    @P2_TIMR,A0,W        ;GET PLAYER 2 TIMER.
         00000220 00000020- 
     186 00000240     4020           ADD     A1,A0                ;ADD ELAPSED TIME
     187 00000250     0580           MOVE    A0,@P2_TIMR,W        ;PUT BACK IN MEMORY
         00000260 00000020- 
     188                    *
     189 00000280     0b40           CMPI    FIVE_SEC,A0          ;ARE WE AT 5 SECONDS?
         00000290     feec  
     190 000002a0     c809           JRLO    NO_PLAY              ;NOT YET
     191                    
     192 000002b0     09c0           MOVI    AUD2TIME,A0
         000002c0     0013  
     193 000002d0     0d5f           CALLA   AUD1                 ;CHALK IT!
         000002e0 000054d0' 
     194                    
     195 00000300     5600           CLR     A0
     196 00000310     0580           MOVE    A0,@P2_TIMR,W        ;CLEAR OUT TIMER
         00000320 00000020- 
     197 00000340     0960  NO_PLAY  RETS
     198                    *
     199                    *        ITS A-MODE...CHECK OCTOPUS!
     200                    *
     201 00000350           CK_OCTO
     202 00000350     05a0           MOVE    @OCT_FLG,A0,W        ;HALF WAY THERE?
         00000360 000000a0- 
     203 00000380     cb09           JRNZ    CK_P2                ;YEP...CHECK FOR OTHER HALF
     204                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    5

     205                    *        CHECK PART 1
     206                    *
     207 00000390     05a0           MOVE    @SWITCH,A0,W         ;CHECK FOR OCTOPUS 
         000003a0 01c00000  
     208 000003c0     0b40           CMPI    37CEH,A0
         000003d0     c831  
     209 000003e0     cb1f           JRNZ     NO_OCTO             ;NO ONE HOME
     210                    *
     211                    *        GOT PART 1..SET FLAG
     212                    *
     213 000003f0     0580           MOVE    A0,@OCT_FLG,W        ;NON-ZERO MEANS PART 1!
         00000400 000000a0- 
     214                    *
     215                    *        WE HAVE PART 1 OF THE OCTOPUSS!
     216                    *
     217 00000420     05a0  CK_P2    MOVE    @SWITCH,A0,W         ;GET SWITCHES
         00000430 01c00000  
     218 00000450     4c01           MOVE    A0,A1                ;MAKE A COPY
     219                    
     220 00000460     03e0           NOT     A0                   ;CHECK JUST THE JOYSTICKS
     221 00000470     0b80           ANDI    0F0FH,A0
         00000480 fffff0f0  
     222 000004a0     0b40           CMPI    0801H,A0             ;JOYSTICKS CORRECT?
         000004b0     f7fe  
     223 000004c0     cb0d           JRNZ    NO_JOY               ;NOPE.......TOO BAD!
     224                    
     225 000004d0     0b41           CMPI    675EH,A1             ;DID WE GET TO OUR DESIRED COMBO?
         000004e0     98a1  
     226 000004f0     cb0e           JRNZ    NO_OCTO              ;NOPE....HOLD FLAG
     227                    
     228 00000500     09ed           MOVI    ACTIVE,A13
         00000510 00000000! 
     229 00000530     09e7           MOVI    HID_P,A7             ;START THE PROCESS!
         00000540 00000000! 
     230 00000560     5621           CLR     A1
     231 00000570     0d5f           CALLA   GETPRC               ;THAT'S ALL FOLKS!
         00000580 00000000! 
     232                    
     233 000005a0     5600  NO_JOY   CLR     A0
     234 000005b0     0580           MOVE    A0,@OCT_FLG,W        ;START FROM SQUARE 1
         000005c0 000000a0- 
     235                    
     236 000005e0     0960  NO_OCTO  RETS
     237                    
     238 000005f0           LT_ONE
     239                    *
     240                    *        ONE PLAYER GAME
     241                    *
     242 000005f0     05a0           MOVE    @P1_TIMR,A0,W        ;GET PLAYER 1 TIMER.
         00000600 00000010- 
     243 00000620     4020           ADD     A1,A0                ;ADD ELAPSED TIME
     244 00000630     0580           MOVE    A0,@P1_TIMR,W        ;PUT BACK IN MEMORY
         00000640 00000010- 
     245                    *
     246 00000660     0b40           CMPI    FIVE_SEC,A0          ;ARE WE AT 5 SECONDS?
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    6

         00000670     feec  
     247 00000680     c8cb           JRLO    NO_PLAY              ;NOT YET
     248                    
     249 00000690     09c0           MOVI    AUD1TIME,A0
         000006a0     0012  
     250 000006b0     0d5f           CALLA   AUD1                 ;CHALK IT!
         000006c0 000054d0' 
     251                    
     252 000006e0     5600           CLR     A0
     253 000006f0     0580           MOVE    A0,@P1_TIMR,W        ;CLEAR OUT TIMER
         00000700 00000010- 
     254 00000720     0960           RETS
     255                    *
     256                    *        CR_STRTP - ARE THERE ENOUGH CREDITS TO START
     257                    *        CR_CONTP - ARE THERE ENOUGH CREDITS TO CONTINUE
     258                    *        P_START  - PLAYER STARTED...DEDUCT CREDITS
     259                    *        P_CONT   - PLAYER CONTINUED...DEDUCT CREDITS
     260                    *        CRED_P   - HOW MANY CREDITS (FOR A GEORGE MESSAGE)
     261                    *
     262                    *        JRHS FOR OK TO START!
     263                    *
     264 00000730     098f  CR_STRTP MMTM    SP,A0,A1
         00000740     c000  
     265 00000750     09c0           MOVI    ADJFREPL,A0
         00000760     0014  
     266 00000770     0d3f           CALLR   GET_ADJ              ;ARE WE IN FREE PLAY?
         00000780     0518  
     267 00000790     0b40           CMPI    1,A0                 ;WE ARE IF ITS NOT ZERO.
         000007a0     fffe  
     268 000007b0     c90c           JRHS    CR_STX
     269                    
     270 000007c0     0d3f           CALLR   CCCC                 ;MAKE SURE THINGS ARE IN TACT
         000007d0     03f9  
     271 000007e0     0d3f           CALLR  COIN_PAG
         000007f0     040b  
     272                    **************************************************************************
     273                    *                                                                        *
     274                    *          MOVI    HSR_C,A7                                              *
     275                    *          CALLA   RC_LONG                                               *
     276                    *          CMPI    1,A0          SUPER-CHARGED!                          *
     277                    *          JRLO    CR_STX                                                *
     278                    *                                                                        *
     279                    **************************************************************************
     280 00000800     0d3f           CALLR   GET_CREDITS          ;GET CURRENT CREDITS
         00000810     01d8  
     281 00000820     4c01           MOVE    A0,A1
     282 00000830     09c0           MOVI    ADJCSTRT,A0
         00000840     000a  
     283 00000850     0d3f           CALLR   GET_ADJ              ;GET NUMBER NEEDED
         00000860     050a  
     284 00000870     4801           CMP     A0,A1                ;DO WE HAVE ENOUGH TO START?
     285                    
     286 00000880     09af  CR_STX   MMFM    SP,A0,A1
         00000890     0003  
     287 000008a0     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    7

     288                    
     289 000008b0           CR_CONTP
     290 000008b0     098f           MMTM    SP,A0,A1
         000008c0     c000  
     291 000008d0     09c0           MOVI    ADJFREPL,A0
         000008e0     0014  
     292 000008f0     0d3f           CALLR   GET_ADJ              ;ARE WE IN FREE PLAY?
         00000900     0500  
     293 00000910     0b40           CMPI    1,A0                 ;WE ARE IF ITS NOT ZERO.
         00000920     fffe  
     294 00000930     c90c           JRHS    CR_STX1
     295                    
     296 00000940     0d3f           CALLR   CCCC                 ;MAKE SURE THINGS ARE IN TACT
         00000950     03e1  
     297 00000960     0d3f          CALLR   COIN_PAG
         00000970     03f3  
     298                    **************************************************************************
     299                    *                                                                        *
     300                    *          MOVI    HSR_C,A7                                              *
     301                    *          CALLA   RC_LONG                                               *
     302                    *          CMPI    1,A0                                                  *
     303                    *          JRLO    CR_STX1                                               *
     304                    *                                                                        *
     305                    **************************************************************************
     306 00000980     0d3f           CALLR   GET_CREDITS          ;GET CURRENT CREDITS
         00000990     01c0  
     307 000009a0     4c01           MOVE    A0,A1
     308 000009b0     09c0           MOVI    ADJCCONT,A0
         000009c0     000b  
     309 000009d0     0d3f           CALLR   GET_ADJ              ;GET NUMBER NEEDED
         000009e0     04f2  
     310 000009f0     4801           CMP     A0,A1                ;DO WE HAVE ENOUGH TO START?
     311 00000a00     09af  CR_STX1 MMFM    SP,A0,A1
         00000a10     0003  
     312 00000a20     0960          RETS
     313                    
     314 00000a30     098f  P_START  MMTM    SP,A0,A1
         00000a40     c000  
     315 00000a50     0d3f           CALLR   CRED_P
         00000a60     01b1  
     316 00000a70     4c01           MOVE    A0,A1
     317 00000a80     09c0           MOVI    ADJCSTRT,A0
         00000a90     000a  
     318 00000aa0     0d3f           CALLR   GET_ADJ              ;GET NUMBER NEEDED
         00000ab0     04e5  
     319 00000ac0     0d3f           CALLR   REMOVE_CREDITS
         00000ad0     0017  
     320 00000ae0     0d5f           CALLA   DEC_HSR              ;TAKE 1 FROM HIGH SCORE RESET COUNTER
         00000af0 00000000! 
     321 00000b10     09af          MMFM    SP,A0,A1
         00000b20     0003  
     322 00000b30     0960          RETS
     323                    
     324 00000b40     098f  P_CONT   MMTM    SP,A0,A1
         00000b50     c000  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    8

     325 00000b60     0d3f           CALLR   CRED_P
         00000b70     01a0  
     326 00000b80     4c01           MOVE    A0,A1
     327 00000b90     09c0           MOVI    ADJCCONT,A0
         00000ba0     000b  
     328 00000bb0     0d3f           CALLR   GET_ADJ              ;GET NUMBER NEEDED
         00000bc0     04d4  
     329 00000bd0     0d3f           CALLR   REMOVE_CREDITS
         00000be0     0006  
     330 00000bf0     0d5f           CALLA   DEC_HSR              ;TAKE 1 FROM HIGH SCORE RESET COUNTER
         00000c00 00000000! 
     331 00000c20     09af          MMFM    SP,A0,A1
         00000c30     0003  
     332 00000c40     0960          RETS
     333                    
     334 00000c50           REMOVE_CREDITS
     335 00000c50     4401           SUB     A0,A1                ;REMOVE START AMOUNT FROM WHAT WE HAVE
     336 00000c60     c901           JRHS    PS1                  ;WE'RE OK.
     337                    
     338 00000c70     5621           CLR     A1                   ;IT WENT NEGATIVE....MAKE ZERO.
     339 00000c80     0d3f  PS1      CALLR   COIN_PAG
         00000c90     03c1  
     340 00000ca0     09e7           MOVI    CREDITS,A7
         00000cb0 014010e0  
     341 00000cd0     4c20           MOVE    A1,A0                ;PUT WHATS LEFT OUT TO WRITE
     342 00000ce0     0d5f           CALLA   WC_BYTE              ;WRITE THE NEW AMOUNT
         00000cf0 00000000! 
     343                    
     344 00000d10     0d3f           CALLR   FORM_COIN_CKSUM_AND_STORE
         00000d20     0396  
     345 00000d30     0d3f           CALLR   DEF_PAGE             ;POINT AT DEFAULT PAGE.
         00000d40     050c  
     346 00000d50     0d5f           CALLA   G_CRED                 ;UPDATE THE SCANNER CREDIT MESSAGE
         00000d60 00000000! 
     347 00000d80     0960           RETS
     348                    
     349                    **************************************************************************
     350                    *                                                                        *
     351                    *          NO_CREDS                                                      *
     352                    *                                                                        *
     353                    *          THIS IS CALLED TO REMOVE CREDITS AND CREDIT FRACTIONS         *
     354                    *          FROM THE MACHINE.                                             *
     355                    *                                                                        *
     356                    **************************************************************************
     357 00000d90     098f  NO_CREDS MMTM    SP,A0,A1,A7
         00000da0     c100  
     358 00000db0     0d3f           CALLR   FORM_COIN_CKSUM ;MAKE THE REAL CKSUM
         00000dc0     036f  
     359 00000dd0     09e7           MOVI    COIN_CKSUM,A7
         00000de0 01401150  
     360 00000e00     4c20           MOVE    A1,A0
     361 00000e10     1020           INC     A0              ;MAKE THE CKSUM BAD!
     362 00000e20     0d5f           CALLA   WC_BYTE
         00000e30 00000000! 
     363 00000e50     09af          MMFM    SP,A0,A1,A7
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE    9

         00000e60     0083  
     364 00000e70     0960          RETS
     365                    
     366                    **************************************************************************
     367                    *                                                                        *
     368                    *          COIN SWITCHES                                                 *
     369                    *                                                                        *
     370                    **************************************************************************
     371              0040- LC_FLAG  EQU     C_FLAGS
     372              0048- RC_FLAG  EQU     C_FLAGS+BYTE_SIZE
     373              0050- CC_FLAG  EQU     C_FLAGS+(2*BYTE_SIZE)
     374              0058- XC_FLAG  EQU     C_FLAGS+(3*BYTE_SIZE)
     375                    
     376              0020  RUN_TIME EQU     LONG_SIZE            ;2ND LONG WORD COUNTS DOWN LONG TIME
     377              0040  OPENS_LEFT EQU   2*LONG_SIZE          ;3RD LONG WORD COUNTS DOWN CONSEC OPENS
     378                    
     379              002b  PULSE_MAX        EQU     700/16       ;FRAMES TILL ITS TOO LINE.
     380              0004  MIN_OPENS        EQU     4
     381                    
     382              0000  COIN_SBIT        EQU     0
     383              0001  COIN_SUCC_BIT    EQU     1
     384              0002  COIN_FAIL_BIT    EQU     2
     385              0003  COIN_ACK_BIT     EQU     3
     386                    
     387              0001  COIN_SFLAG       EQU     1
     388              0002  COIN_SUCC_VAL    EQU     2
     389              0004  COIN_FAIL_VAL    EQU     4
     390              0008  COIN_ACK_VAL     EQU     8
     391                    
     392 00000e80     09c8  LCOIN    MOVI    ADJLMULT,A8
         00000e90     0002  
     393                    *         MOVI    L_COIN_BIT,A9
     394 00000ea0     09ea           MOVI    LC_FLAG,A10          ;LEFT COIN FLAG
         00000eb0 00000040- 
     395 00000ed0     09cb           MOVI    AUDLCOIN,A11
         00000ee0     0001  
     396 00000ef0     c024           JRUC    COIN_ROUTINE
     397                    
     398 00000f00     09c8  CCOIN    MOVI    ADJCMULT,A8
         00000f10     0003  
     399                    *         MOVI    C_COIN_BIT,A9
     400 00000f20     09ea           MOVI    CC_FLAG,A10          ;LEFT COIN FLAG
         00000f30 00000050- 
     401 00000f50     09cb           MOVI    AUDCCOIN,A11
         00000f60     0002  
     402 00000f70     c01c           JRUC    COIN_ROUTINE
     403                    
     404 00000f80     09c8  RCOIN    MOVI    ADJRMULT,A8
         00000f90     0004  
     405                    *         MOVI    R_COIN_BIT,A9
     406 00000fa0     09ea           MOVI    RC_FLAG,A10          ;LEFT COIN FLAG
         00000fb0 00000048- 
     407 00000fd0     09cb           MOVI    AUDRCOIN,A11
         00000fe0     0003  
     408 00000ff0     c014           JRUC    COIN_ROUTINE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   10

     409                    
     410                             .IF     FOURTH_SLOT
     411                    
     412                             .GLOBAL XCOIN
     413 00001000     09c8  XCOIN    MOVI    ADJCMULT,A8
         00001010     0003  
     414                    *        MOVI    X_COIN_BIT,A9
     415 00001020     09ea           MOVI    XC_FLAG,A10          ;LEFT COIN FLAG
         00001030 00000058- 
     416 00001050     576b           CLR     A11                  ;SIGNAL ZERO FOR SPECIAL AUDIT PROCEDURE
     417                    *
     418                    *        FETCH THE CENTER COIN UNITS
     419                    *
     420 00001060     05a0           MOVE    @GAMSTATE,A0,W       ;DIAGNOSTICS?
         00001070 00000000! 
     421 00001090     0b40           CMPI    INDIAG,A0
         000010a0     ffbf  
     422 000010b0     ca7d           JREQ    CRX                  ;THEN NO ACTION!
     423                    
     424 000010c0     4d00           MOVE    A8,A0                ;MOVE MULTIPLIER ADJUST NUMBER TO A0
     425 000010d0     0d5f           CALLA   GET_ADJ              ;FETCH IT
         000010e0 00005910' 
     426 00001100     4c08           MOVE    A0,A8                ;AND BACK TO STATIC REG...ANY THERE?
     427 00001110     ca77           JRZ     CRX                  ;NOPE....DON'T WASTE THE TIME!
     428                    
     429 00001120     2428           SLL     1,A8                 ;DOUBLE THE CENTER SLOT UNITS!
     430 00001130     c00c           JRUC    XCOIN_CONTINUE       ;NOW USE "NORMAL COIN ROUTINE
     431                    
     432                             .ENDIF
     433                    
     434                    **************************************************************************
     435                    *                                                                        *
     436                    *          COIN_ROUTINE                                                  *
     437                    *                                                                        *
     438                    *          THIS IS CALLED FROM EACH OF THE COIN SWITCHES WHEN            *
     439                    *          MADE.  IT CONTAINS THE FOLLOWING:                             *
     440                    *                                                                        *
     441                    *                  A8 = MULTIPLIER FOR THAT SWITCH.                      *
     442                    *                  A10 = BASE OF RAM POINTERS                            *
     443                    *                  A11 = BASE AUDIT NUMBER                               *
     444                    *                                                                        *
     445                    **************************************************************************
     446 00001140           COIN_ROUTINE
     447 00001140     05a0           MOVE    @GAMSTATE,A0,W       ;DIAGNOSTICS?
         00001150 00000000! 
     448 00001170     0b40           CMPI    INDIAG,A0
         00001180     ffbf  
     449 00001190     ca6f           JREQ    CRX                  ;THEN NO ACTION!
     450                    
     451 000011a0     4d00           MOVE    A8,A0                ;MOVE MULTIPLIER ADJUST NUMBER TO A0
     452 000011b0     0d5f           CALLA   GET_ADJ              ;FETCH IT
         000011c0 00005910' 
     453 000011e0     4c08           MOVE    A0,A8                ;AND BACK TO STATIC REG...ANY THERE?
     454 000011f0     ca69           JRZ     CRX                  ;NOPE....DON'T WASTE THE TIME!
     455                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   11

     456 00001200           XCOIN_CONTINUE
     457 00001200     0d3f           CALLR   SLAM_P               ;SLAM AROUND?
         00001210     030d  
     458 00001220     cb66           JRNZ    CRX                  ;THEN NO ACTION
     459                    
     460 00001230     09e0            MOVI    LC_PID,A0            ;ALL 3 SLOTS USE THIS ID NOW
         00001240 0000c000  
     461 00001260     b00d           MOVE    A0,*A13(PROCID),W    ;SET OUR ID (IN CASE TABLE IS WRONG)
         00001270     0020  
     462                    
     463 00001280     8f40           MOVB    *A10,A0              ;GET FLAG BYTE
     464 00001290     cb5f           JRNZ    CRX                  ;SOMEONE ELSE THERE...WE'RE A BOUNCE!
     465                    *
     466                    *        OK....THIS IS A NEW POSITIVE EDGE....START THE TIMING
     467                    *        WHEELS   (A0 HAS A ZERO!)
     468                    *
     469 000012a0     09c1           MOVI    PULSE_MAX,A1         ;MAXIMUM PULSE WIDTH
         000012b0     002b  
     470 000012c0     ac2a           MOVB    A1,*A10(RUN_TIME)    ;COUNT IT DOWN HERE.
         000012d0     0020  
     471                    
     472 000012e0     09c1           MOVI    MIN_OPENS,A1         ;THIS MANY FRAMES OF OPEN TIL OPEN
         000012f0     0004  
     473 00001300     ac2a           MOVB    A1,*A10(OPENS_LEFT)
         00001310     0040  
     474                    
     475 00001320     09c1           MOVI    COIN_SFLAG,A1
         00001330     0001  
     476 00001340     8c2a           MOVB    A1,*A10              ;TELL INTERRUPT TO START!
     477                    
     478 00001350     09c9           MOVI    100H,A9              ;4 SECONDS MAX
         00001360     0100  
     479                    
     480 00001370           COIN_LOOP
     481 00001370                    SLEEP   1                    ;NOW SLEEP TIGHTLY TILL WE GET SUCCESS OR FAIL
     482 000013b0     8f40           MOVB    *A10,A0              ;GET THE FLAGS
     483 000013c0     1fa0           BTST    COIN_FAIL_BIT,A0     ;TOO LONG?
     484 000013d0     ca05           JRZ     CK_SUCC
     485                    *
     486                    *        WE HAVE FAILURE...ACKNOWLEDGE IT
     487                    *
     488 000013e0     0ba0           ORI     COIN_ACK_VAL,A0      ;THIS ACKNOWLEDGES WE SAW IT.
         000013f0 00000008  
     489 00001410     8c0a           MOVB    A0,*A10              ;PUT IT BACK
     490 00001420     c046           JRUC    CRX                  ;AND GET OUT
     491                    
     492 00001430           CK_SUCC
     493 00001430     1fc0           BTST    COIN_SUCC_BIT,A0
     494 00001440     cb02           JRNZ    COIN_GO              ;GOT IT!...CONTINUE!
     495                    
     496 00001450     3de9           DSJS    A9,COIN_LOOP         ;TIME OUT FOR SAFETY
     497                    
     498                             .IF     DEBUG
     499                                     JRUC    $
     500                             .ENDIF
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   12

     501                    
     502 00001460     c042           JRUC    CRX                  ;TIMED OUT....JUST DIE!
     503                    
     504 00001470     5600  COIN_GO  CLR     A0
     505 00001480     8c0a           MOVB    A0,*A10              ;CLEAR THE FLAGS BACK OUT!
     506                    
     507 00001490     0d3f           CALLR   SLAM_P               ;SLAM?
         000014a0     02e4  
     508 000014b0     cb3d           JRNZ    CRX                 ;THEN WE'RE OUT OF HERE
     509                    *
     510                    *        WE SURVIVED 1/2 SECOND WITHOUT A SLAM....ITS TIME TO CASH
     511                    *        IN HIS STACHE.
     512                    *
     513 000014c0     5600           CLR     A0
     514 000014d0     0580           MOVE    A0,@SOUNDSUP,W       ;TURN SOUNDS ON. (A-MODE SOUND SUPRESSOR)
         000014e0 00000000! 
     515                    
     516 00001500                   SOUND1  COINSND  
     517                    
     518 00001560     09c0           MOVI    15*40H,A0            ;DON'T WIPE ON GAME OVER IF ITS WITHIN
         00001570     03c0  
     519 00001580     0580           MOVE    A0,@C_FRAC,W         ;15 SECONDS (THIS TIMES OUT TO OVER 20)
         00001590 00000030- 
     520                    
     521 000015b0     0d3f           CALLR   CHALK_COIN           ;STRIKE UP THE AUDIT(S)
         000015c0     003c  
     522                    
     523 000015d0     4d08           MOVE    A8,A8                ;NO CUNITS?
     524 000015e0     ca2a           JRZ     CRX                  ;THEN NO MORE WORK TO DO.
     525                    
     526 000015f0     0d3f           CALLR   ADJUST_CREDITS       ;GIVE CREDIT FOR THE MONEY.
         00001600     005c  
     527 00001610     0d3f           CALLR   DEF_PAGE             ;POINT PAGE AWAY!
         00001620     047e  
     528                    *
     529                    *         NOW LET'S COMPOSE A CREDITS STRING FOR
     530                    *         GEORGE
     531                    *
     532 00001630     0d5f           CALLA   G_CRED                ;GIVE TO GEORGE TO PLOT!
         00001640 00000000! 
     533                    
     534 00001660     05a0           MOVE    @GAMSTATE,A0,W       ;HE GOT HIS BOOTY....NOW HE GETS
         00001670 00000000! 
     535 00001690     0b40           CMPI    INAMODE,A0           ;A DISPLAY IN AMODE ONLY!
         000016a0     ffcf  
     536 000016b0     cb1d           JRNZ    CRX                    
     537                    *
     538                    *        THE FOLLOWING ID IS FOR THE "TODD IS PUTTING UP THE OUTSIDE"
     539                    *        PORTION OF THIS PROCESS......IF IT IS RUNNING...NO NEED FOR
     540                    *        US TO RUN.
     541                    *
     542 000016c0     09c0           MOVI    CP_PID1,A0           ;CHANGE OUR ID TO "TODD IN PROGRESS"
         000016d0     0abf  
     543 000016e0     b00d           MOVE    A0,*A13(PROCID),W    
         000016f0     0020  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   13

     544                    
     545 00001700     09e1           MOVI    0FFFFH,A1            ;AND CHECK IF THERE IS A TODD IN PROGRESS
         00001710 0000ffff  
     546 00001730     0d5f           CALLA   EXISTP              
         00001740 00000000! 
     547 00001760     ca01           JRZ     CRY                  ;NO TODD..CONTINUE 
     548 00001770     c011            JRUC    CRX                  ;TODD IS COMING UP...AFTER THAT
     549                    *                                     ;OUR UPDATED NUMBER WILL BE USED!
     550                    
     551 00001780           CRY      JSRP    CRD_SCRN       ;PUT UP THE CREDITS SCREEN
     552 000017f0                    SLEEP   500H                 ;SLEEP FOR 20 SECONDS
     553                    *
     554                    *        NOW THAT CREDITS HAS BEEN ADJUSTED.....WE NEED TO 
     555                    *        GO TO THE TITLE PAGE
     556                    *
     557 00001840     0d3f           CALLR   KIL_MINE
         00001850     0006  
     558                    
     559 00001860     0d5f           CALLA   ATSTRT              ;
         00001870 00000000! 
     560 00001890     c080  CRX      JAUC    SUCIDE
         000018a0 00000000! 
     561                    
     562 000018c0           KIL_MINE
     563 000018c0     098f           MMTM    SP,A0,A1
         000018d0     c000  
     564 000018e0     b5a0           MOVE    *A13(PROCID),A0,W    ;PASS OUR ID TO FORKED PROCESS
         000018f0     0020  
     565 00001900     09e1           MOVI    0FFFFH,A1
         00001910 0000ffff  
     566 00001930     0d5f           CALLA   KILALL
         00001940 00000000! 
     567 00001960     09af          MMFM    SP,A0,A1
         00001970     0003  
     568 00001980     0960          RETS
     569                    
     570                    **************************************************************************
     571                    *                                                                        *
     572                    *          CHALK_COIN                                                    *
     573                    *                                                                        *
     574                    *          A11 contains the base audit number.  Chalk the audit for      *
     575                    *          1 more coin hit there!                                        *
     576                    *                                                                        *
     577                    *          3 away from the base is the "door-closed" counter             *
     578                    *                                                                        *
     579                    *          3 away from that is the "sub-total".                          *
     580                    *                                                                        *
     581                    *          3 away from that is the "door-closed" sub-total.              *
     582                    *                                                                        *
     583                    *                                                                        *
     584                    **************************************************************************
     585 00001990           CHALK_COIN 
     586 00001990     098f           MMTM    SP,A0
         000019a0     8000  
     587 000019b0     4d60           MOVE    A11,A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   14

     588                    *
     589                    *        READY TO CHALK THE AUDIT......ZERO MEANS "EXTRA SLOT"
     590                    *
     591                             .IF     FOURTH_SLOT
     592 000019c0     cb04           JRNZ    CCC01                ;ITS A NORMAL ONE
     593                    
     594 000019d0     09c0           MOVI    AUDCCOIN,A0          ;CHALK FOR "CENTER COINS"
         000019e0     0002  
     595 000019f0     0d3f           CALLR   CHALK_FOR_A0         ;CHALK TWO SETS!
         00001a00     0005  
     596                             .ENDIF
     597                    
     598 00001a10     0d3f  CCC01    CALLR   CHALK_FOR_A0    ;CHALK RELEVANT COUNTERS
         00001a20     0003  
     599                    
     600 00001a30     09af          MMFM    SP,A0
         00001a40     0001  
     601 00001a50     0960          RETS
     602                    
     603                    **************************************************************************
     604                    *                                                                        *
     605                    *          CHALK_FOR_A0                                                  *
     606                    *                                                                        *
     607                    *          THIS IS CALLED TO CHALK THE AUDITS FOR A COIN SWITCH.         *
     608                    *          A0 HAS THE BASE AUDIT FOR THE COIN SWITCH.                    *
     609                    *                                                                        *
     610                    **************************************************************************
     611 00001a60           CHALK_FOR_A0
     612 00001a60     098f           MMTM    SP,A0
         00001a70     8000  
     613 00001a80     0d3f           CALLR   AUD1            ;CHALK THE DIRECT AUDIT
         00001a90     03a3  
     614                    
     615 00001aa0     0b00           ADDI    2*CHUTES,A0     ;AND THE "SUB-TOTAL"
         00001ab0     0006  
     616 00001ac0     0d3f           CALLR   AUD1
         00001ad0     039f  
     617                    
     618 00001ae0     0d5f           CALLA   CK_DOOR         ;NOW SEE IF DOOR IS CLOSED.
         00001af0 00000000! 
     619 00001b10     cb08           JRNE    CKCN1           ;ITS OPEN....DON'T CHALK THE OTHERS!
     620                    
     621 00001b20     0be0           SUBI    CHUTES,A0       ;MOVE TO DOOR OPEN TOTAL
         00001b30     fffc  
     622 00001b40     0d3f           CALLR   AUD1
         00001b50     0397  
     623                    
     624 00001b60     0b00           ADDI    2*CHUTES,A0     ;AND DOOR OPEN SUB-TOTAL
         00001b70     0006  
     625 00001b80     0d3f           CALLR   AUD1
         00001b90     0393  
     626 00001ba0     09af  CKCN1   MMFM    SP,A0
         00001bb0     0001  
     627 00001bc0     0960          RETS
     628                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   15

     629                    **************************************************************************
     630                    *                                                                        *
     631                    *          ADJUST_CREDITS                                                *
     632                    *                                                                        *
     633                    *          This is the routine that turns the coin switch hit            *
     634                    *          into a tangable (if you could say that) reward.               *
     635                    *                                                                        *
     636                    *          The coin chute multiplier is in A8.                           *
     637                    *                                                                        *
     638                    **************************************************************************
     639 00001bd0           ADJUST_CREDITS
     640 00001bd0     098f           MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
         00001be0     fff0  
     641 00001bf0     0d3f           CALLR   CK_MAX          ;ARE WE AT MAXIMUM CREDITS?
         00001c00     006c  
     642 00001c10     c94b           JRHS    ADCRXX          ;YEP.....DON'T ROCK THE BOAT!
     643                    *
     644 00001c20     0d3f           CALLR   CCCC            ;VALIDATE THE CURRENT TOTALS (OR CLEAR!)
         00001c30     02b3  
     645                    
     646 00001c40     0d3f           CALLR   FETCH_REQ       ;GET THE REQUIRED FOR CREDIT, BONUS AND MINIMUM
         00001c50     0255  
     647                    *
     648                    *        A2 = REQUIRED FOR CREDIT
     649                    *        A3 = FOR BONUS
     650                    *        A4 = MINIMUM
     651                    *
     652 00001c60     0d3f           CALLR   ADD_TO_CUNITS   ;ADD TO OUR CUNITS
         00001c70     00aa  
     653 00001c80     4c63           MOVE    A3,A3           ;BONUS EFFECTIVE?
     654 00001c90     ca02           JRZ     NO_BUNITS       ;NOPE....DON'T RUN UP THE COUNTER!
     655                    
     656 00001ca0     0d3f           CALLR   ADD_TO_BUNITS   ;ADD TO BONUS UNITS
         00001cb0     00c6  
     657                    
     658 00001cc0           NO_BUNITS
     659 00001cc0     4c84           MOVE    A4,A4           ;MINIMUM REQUIRED?
     660 00001cd0     ca10           JRZ     NO_MINIMUM      ;NOPE.....LEAVE ALONE.
     661                    
     662 00001ce0     09e7           MOVI    MINUNITS,A7     ;POINT AT MINIMUM
         00001cf0 01401130  
     663 00001d10     0d5f           CALLA   RC_WORD         ;GET THE AMOUNT ACCUMULATED
         00001d20 00000000! 
     664 00001d40     4100           ADD     A8,A0           ;ADD AMOUNT RECEIVED
     665 00001d50     0d5f           CALLA   WC_WORD         ;WRITE THE MINUNITS BACK IN CASE NOT ENOUGH.
         00001d60 00000000! 
     666                    
     667 00001d80     4480           SUB     A4,A0           ;DO WE HAVE ENOUGH TO ACT?
     668 00001d90     c831           JRLO    ADCRX           ;NOPE....NO CREDITS YET!
     669                    
     670 00001da0     5600           CLR     A0              ;CLEAR OUT MINIMUM FOR NEXT SHOT!
     671 00001db0     0d5f           CALLA   WC_WORD         ;REMOVE ACCUMULATED MINIMUM.
         00001dc0 00000000! 
     672                    
     673 00001de0           NO_MINIMUM
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   16

     674 00001de0     56c6           CLR     A6              ;COUNT ACCUMULATED CREDITS IN A6
     675 00001df0     574a           CLR     A10             ;IN CASE NO BONUS!
     676                    
     677 00001e00     5708           CLR     A8
     678 00001e10     09e7           MOVI    BUNITS,A7
         00001e20 01401110  
     679 00001e40     0d5f           CALLA   RC_WORD         ;GET THE NUMBER OF BUNITS
         00001e50 00000000! 
     680 00001e70     4c09           MOVE    A0,A9           ;INTO A9
     681                    
     682 00001e80     4c63           MOVE    A3,A3           ;DON'T DIVIDE BY ZERO!
     683 00001e90     ca07           JRZ     NO_BU_BU
     684 00001ea0     5a68           DIVU    A3,A8           ;DIVIDE BUNITS BY NUMBER NEEDED FOR BONUS
     685                    
     686 00001eb0     4d20           MOVE    A9,A0           ;WRITE REMAINDER BACK
     687 00001ec0     0d5f           CALLA   WC_WORD
         00001ed0 00000000! 
     688                    
     689 00001ef0     4d06           MOVE    A8,A6           ;NUMBER OF BONUS CREDITS EARNED.
     690 00001f00     4d0a           MOVE    A8,A10          ;REMEMBER IF ANY BONUS CREDITS WERE EARNED!
     691                    
     692 00001f10           NO_BU_BU
     693 00001f10     5708           CLR     A8
     694 00001f20     0d3f           CALLR   GET_CUNITS      ;READ IN THE CUNITS
         00001f30     0088  
     695 00001f40     4c09           MOVE    A0,A9
     696                    
     697 00001f50     4c42           MOVE    A2,A2           ;DON'T DIVIDE BY ZERO.
     698 00001f60     ca05           JRZ     NO_CR
     699                    
     700 00001f70     5a48           DIVU    A2,A8           ;GET CREDITS!
     701 00001f80     4d20           MOVE    A9,A0           ;REMAINDER IS LEFTOVER CUNITS
     702 00001f90     0d3f           CALLR   PUT_CUNITS
         00001fa0     008c  
     703 00001fb0     4106           ADD     A8,A6           ;A6 HAS WHAT WE'VE WON!
     704                    
     705 00001fc0     4cc1  NO_CR    MOVE    A6,A1
     706 00001fd0     09c0           MOVI    AUDPAIDC,A0
         00001fe0     000d  
     707 00001ff0     0d5f           CALLA   AUD             ;CHALK UP THE EARNED CREDITS!
         00002000 000053c0' 
     708                    
     709 00002020     0d3f           CALLR   GET_CREDITS
         00002030     0056  
     710 00002040     40c0           ADD     A6,A0           ;ADD IN THE NEW ONES.
     711 00002050     0d3f           CALLR   PUT_CREDITS     ;NOW STORE EM BACK (ENFORCE MAX)
         00002060     0009  
     712                    
     713 00002070     4d4a           MOVE    A10,A10         ;WAS THE BONUS EARNED?
     714 00002080     ca02           JRZ     ADCRX           ;NOPE...EXIT!
     715                    *
     716                    *        WHEN BONUS EARNED...WE START THE WHOLE SYSTEM OVER!
     717                    *
     718 00002090     0d3f           CALLR   CLEAR_UNITS
         000020a0     003b  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   17

     719                    
     720 000020b0     0d3f  ADCRX    CALLR   FORM_COIN_CKSUM_AND_STORE
         000020c0     025c  
     721 000020d0     09af  ADCRXX  MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
         000020e0     0fff  
     722 000020f0     0960          RETS
     723                    
     724                    **************************************************************************
     725                    *                                                                        *
     726                    *          PUT_CREDITS                                                   *
     727                    *                                                                        *
     728                    *          STORE CREDIT COUNT IN A0 TO CMOS....ENFORCING                 *
     729                    *          MAXIMUM CREDITS.                                              *
     730                    *                                                                        *
     731                    **************************************************************************
     732 00002100           PUT_CREDITS
     733 00002100     098f           MMTM    SP,A0,A6,A7
         00002110     8300  
     734 00002120     0d3f           CALLR   GET_MAX         ;GET MAX CREDS IN A1....BE ON COIN PAGE
         00002130     000e  
     735 00002140     4820           CMP     A1,A0           ;SEE HOW WE STACK UP.
     736 00002150     c803           JRLO    USE_A0          ;WE'RE LOWER...JUST STORE.
     737                    *
     738                    *        WE'RE AT (OR OVER) MAXIMUM CREDITS
     739                    *
     740 00002160     0d3f           CALLR   CLEAR_UNITS     ;CLEAR OUT THE UNIT FRACTIONS.
         00002170     002e  
     741 00002180     4c20           MOVE    A1,A0           ;USE MAXIMUM
     742                    
     743 00002190     09e7  USE_A0   MOVI    CREDITS,A7
         000021a0 014010e0  
     744 000021c0     0d5f           CALLA   WC_BYTE         ;WRITE THE CREDITS OUT.
         000021d0 00000000! 
     745 000021f0     09af          MMFM    SP,A0,A6,A7
         00002200     00c1  
     746 00002210     0960          RETS
     747                    
     748                    **************************************************************************
     749                    *                                                                        *
     750                    *          GET_MAX                                                       *
     751                    *                                                                        *
     752                    *          GET MAXIMUM CREDITS IN A1.                                    *
     753                    *                                                                        *
     754                    *          THIS LEAVES YOU ON COIN PAGE.                                 *
     755                    *                                                                        *
     756                    **************************************************************************
     757 00002220           GET_MAX
     758 00002220     098f           MMTM    SP,A0
         00002230     8000  
     759 00002240     09c0           MOVI    ADJMAXC,A0
         00002250     0013  
     760 00002260     0d5f           CALLA   GET_ADJ_FOR_COIN    ;FETCH MAXIMUM CREDITS (PUT US ON COIN PAGE)
         00002270 00005b40' 
     761 00002290     4c01           MOVE    A0,A1
     762 000022a0     09af          MMFM    SP,A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   18

         000022b0     0001  
     763 000022c0     0960          RETS
     764                    
     765                    **************************************************************************
     766                    *                                                                        *
     767                    *          CK_MAX                                                        *
     768                    *                                                                        *
     769                    *          THIS IS CALLED TO SEE IF WE ARE AT MAXIMUM CREDITS.           *
     770                    *          .HS. MEANS WE ARE AT MAXIMUM CREDITS.                         *
     771                    *                                                                        *
     772                    **************************************************************************
     773 000022d0     098f  CK_MAX   MMTM    SP,A0,A1
         000022e0     c000  
     774 000022f0     0d3f           CALLR   GET_MAX              ;GET MAXIMUM IN A1
         00002300     fff1  
     775 00002310     0d3f           CALLR   CRED_P               ;GET CREDITS IN A0 (AND FLIP PAGE AWAY)
         00002320     0025  
     776 00002330     4820           CMP     A1,A0                ;JRHS FOR MAXIMUM CREDITS!
     777 00002340     09af          MMFM    SP,A0,A1
         00002350     0003  
     778 00002360     0960          RETS
     779                    
     780                    **************************************************************************
     781                    *                                                                        *
     782                    *          UNIT_CLR                                                      *
     783                    *                                                                        *
     784                    *          THIS IS CALLED BY GEORGE AT GAME OVER.  IT CLEARS             *
     785                    *          OUT ANY COIN FRACTIONS THAT WERE NOT USED BY THE              *
     786                    *          CURRENT PLAYER(S).  THIS ALLOWS ALL BUY-IN TO                 *
     787                    *          TAKE ADVANTAGE OF MULTIPLE COIN BONUSES.                      *
     788                    *                                                                        *
     789                    *          ANYTIME A COIN IS INSERTED, C_FRAC IS SET TO ABOUT            *
     790                    *          10 SECONDS.  MY TIMING INTERFACE COUNTS C_FRAC DOWN           *
     791                    *          TO ZERO.  IF C_FRAC IS NON ZERO WHEN THIS ROUTINE IS          *
     792                    *          CALLED, THEN SOMEONE PUT A COIN IN NOT TOO LONG BEFORE        *
     793                    *          GAME OVER.  DON'T SCREW HIM OUT OF HIS FRACTIONS.             *
     794                    *                                                                        *
     795                    **************************************************************************
     796 00002370     098f  UNIT_CLR MMTM    SP,A0
         00002380     8000  
     797 00002390     05a0           MOVE    @C_FRAC,A0,W                   ;DO WE GIVE HIM A REPRIEVE?
         000023a0 00000030- 
     798 000023c0     cb06           JRNZ    UC1                            ;YEP!
     799 000023d0     0d3f           CALLR   CCCC                           ;VALIDATE COINAGE
         000023e0     0238  
     800 000023f0     0d3f           CALLR   CLEAR_UNITS                    ;CLEAR OUT FRACTIONAL UNITS
         00002400     0005  
     801 00002410     0d3f           CALLR   FORM_COIN_CKSUM_AND_STORE      ;MAKE ALL GOOD.
         00002420     0226  
     802 00002430     09af  UC1     MMFM    SP,A0
         00002440     0001  
     803 00002450     0960          RETS
     804                    
     805 00002460           CLEAR_UNITS
     806 00002460     098f           MMTM    SP,A0,A7
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   19

         00002470     8100  
     807 00002480     5600           CLR     A0
     808 00002490     09e7           MOVI    CUNITS,A7       ;3 CONSECUTIVE WORDS OF CMOS
         000024a0 014010f0  
     809 000024c0     0d5f           CALLA   WC_WORDI
         000024d0 00000000! 
     810 000024f0     0d5f           CALLA   WC_WORDI
         00002500 00000000! 
     811 00002520     0d5f           CALLA   WC_WORD
         00002530 00000000! 
     812 00002550     09af          MMFM    SP,A0,A7
         00002560     0081  
     813 00002570     0960          RETS
     814                    *
     815                    *        RETURN CREDITS IN A0.........AND Z BIT CLEAR IF
     816                    *        CREDITS EXIST OR IN FREE PLAY.
     817                    *
     818 00002580     0d3f  CRED_P   CALLR   CCCC            ;CHECK TO SEE IF DATA IS OK.
         00002590     021d  
     819                    
     820 000025a0           GET_CREDITS
     821 000025a0     098f           MMTM    SP,A7
         000025b0     0100  
     822 000025c0     0d3f           CALLR   COIN_PAG
         000025d0     022d  
     823 000025e0     09e7           MOVI    CREDITS,A7      ;
         000025f0 014010e0  
     824 00002610     0d5f           CALLA   RC_BYTE         ;READ CURRENT CREDITS
         00002620 00000000! 
     825 00002640     cb08           JRNZ    GC1             ;WE GOT SOME!
     826                    
     827 00002650     098f           MMTM    SP,A0           ;PUSH THE ZERO!
         00002660     8000  
     828 00002670     09c0           MOVI    ADJFREPL,A0
         00002680     0014  
     829 00002690     0d3f           CALLR   GET_ADJ         ;SEE IF FREEPLAY......(Z BIT CLEAR IF SO!)
         000026a0     0326  
     830 000026b0     09af           MMFM    SP,A0           ;RESTORE A0
         000026c0     0001  
     831                    
     832 000026d0     0d3f  GC1      CALLR   DEF_PAGE        ;FLIP CMOS AWAY
         000026e0     0372  
     833 000026f0     09af          MMFM    SP,A7
         00002700     0080  
     834 00002710     0960          RETS
     835                    
     836 00002720           ADD_TO_CUNITS
     837 00002720     098f           MMTM    SP,A0,A7
         00002730     8100  
     838 00002740     0d3f           CALLR   GET_CUNITS
         00002750     0006  
     839 00002760     4100           ADD     A8,A0
     840 00002770     0d3f           CALLR   PUT_CUNITS
         00002780     000e  
     841 00002790     09af          MMFM    SP,A0,A7
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   20

         000027a0     0081  
     842 000027b0     0960          RETS
     843                    
     844 000027c0           GET_CUNITS
     845 000027c0     098f           MMTM    SP,A7
         000027d0     0100  
     846 000027e0     09e7           MOVI    CUNITS,A7
         000027f0 014010f0  
     847 00002810     0d5f           CALLA   RC_WORD
         00002820 00000000! 
     848 00002840     09af          MMFM    SP,A7
         00002850     0080  
     849 00002860     0960          RETS
     850                    
     851 00002870           PUT_CUNITS
     852 00002870     098f           MMTM    SP,A7
         00002880     0100  
     853 00002890     09e7           MOVI    CUNITS,A7
         000028a0 014010f0  
     854 000028c0     0d5f           CALLA   WC_WORD
         000028d0 00000000! 
     855 000028f0     09af          MMFM    SP,A7
         00002900     0080  
     856 00002910     0960          RETS
     857                    
     858 00002920           ADD_TO_BUNITS
     859 00002920     098f           MMTM    SP,A7,A0
         00002930     8100  
     860 00002940     09e7           MOVI    BUNITS,A7
         00002950 01401110  
     861 00002970     0d5f           CALLA   RC_WORD
         00002980 00000000! 
     862 000029a0     4100           ADD     A8,A0
     863 000029b0     0d5f           CALLA   WC_WORD
         000029c0 00000000! 
     864 000029e0     09af          MMFM    SP,A7,A0
         000029f0     0081  
     865 00002a00     0960          RETS
     866                    
     867 00002a10           CRD_SCRN
     868 00002a10     09c0           MOVI    CP_PID1,A0           ;CHANGE OUR ID TO "TODD IN PROGRESS"
         00002a20     0abf  
     869 00002a30     b00d           MOVE    A0,*A13(PROCID),W    
         00002a40     0020  
     870                    
     871 00002a50     09c0           MOVI    CP_PID2,A0       ;ARE WE SHOWING THE TITLE PAGE?
         00002a60     0ac0  
     872 00002a70     09e1           MOVI    0FFFFH,A1
         00002a80 0000ffff  
     873 00002aa0     0d5f           CALLA   EXISTP
         00002ab0 00000000! 
     874                    
     875 00002ad0     ca12           JRZ     NOT_TITLE       ;ITS NOT THE TITLE PAGE...TRASH IT.
     876                    *
     877                    *        TITLE PAGE IS RUNNING....KILL IT!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   21

     878                    *
     879 00002ae0     09c0           MOVI    CP_PID2,A0
         00002af0     0ac0  
     880 00002b00     0d5f           CALLA   KILALL          ;ITS DEAD!
         00002b10 00000000! 
     881 00002b30     0d5f           CALLA   DMAQWAIT        ; WAIT FOR DMA TO BE DONE (IF IN MOTION)
         00002b40 00000000! 
     882                    *
     883                    *        NOW BLANK THE AREA OF OUR INTEREST
     884                    *
     885                    
     886                    * A3 = DAG OF AREA [YPOS,XPOS]                                           *
     887                    * A4 = [Y,X] SIZE OF AREA                                                *
     888                             
     889 00002b60     09e3           MOVI    0B80040H,A3                              ;CORNER OF REGION
         00002b70 00b80040  
     890 00002b90     09e4           MOVI    0DC0180H,A4
         00002ba0 00dc0180  
     891 00002bc0     0d5f           CALLA   BLNKAREA                                 ;BLANK IT OUT!
         00002bd0 00000000! 
     892 00002bf0     c01a           JRUC    BLANKED_NOW_GO
     893                    
     894 00002c00           NOT_TITLE
     895 00002c00     0d5f           CALLA   WIPEOUT         ;TAKE DOWN WHATEVER'S RUNNING.
         00002c10 00000000! 
     896                    *         CALLR   COIN_PAG       ;GET THE CMOS PAGE BACK TO US!
     897 00002c30                    SLEEP   1               ;GIVE TODD SOME TIME
     898 00002c70                    JSRP    CRDTPAGE        ;PUT UP THE GOOD LOOKING PART OF THE PAGE.
     899                    
     900 00002ce0     09c0           MOVI    1,A0
         00002cf0     0001  
     901 00002d00     0580           MOVE    A0,@DISPLAYON,W ;TURN THE DISPLAY PROCESSOR BACK ON!
         00002d10 00000000! 
     902                    
     903 00002d30                    SLEEP   1
     904                    
     905 00002d70     0d5f           CALLA   COLRSTRT        ;RESTART THE COLORS JACK
         00002d80 00000000! 
     906                    
     907 00002da0           BLANKED_NOW_GO
     908 00002da0     09e8           MOVI    CPYR_MES,A8          ;COPYRIGHT MESSAGE
         00002db0 00009c30' 
     909 00002dd0                    JSRP    L_MESS
     910                    
     911 00002e40     09c0           MOVI    CP_PID2,A0           ;CHANGE OUR ID TO "CREDITS PAGE"
         00002e50     0ac0  
     912 00002e60     b00d           MOVE    A0,*A13(PROCID),W    ;SET OUR ID (IN CASE TABLE IS WRONG)
         00002e70     0020  
     913                    *
     914                    *        BEWARE.....GET_CSTR SMASHES A LONG WORD IN THE PDATA AREA
     915                    *        AT:  AT PDATA + 3*LONG_SIZE
     916                    *
     917 00002e80     0d3f           CALLR   GET_CSTR                  ;GET THE CREDITS STRING
         00002e90     03aa  
     918 00002ea0     4d02           MOVE    A8,A2                     ;PUT IT IN NON-VOLITILE REGGIE!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   22

     919                    
     920 00002eb0     0d3f           CALLR   SELECT_SETUP              ;POINT AT PLACE BASED ON PROMPTING
         00002ec0     011f  
     921 00002ed0     0d3f           CALLR   LM_SETUP
         00002ee0     03a0  
     922 00002ef0     4c48           MOVE    A2,A8                     ;POINT AT MESSAGE
     923 00002f00                    JSRP    LM_FINIS                  ;AND PRINT IT OUT!
     924                    
     925 00002f70     0d5f           CALLA   CKPROMPT                  ;IS THERE A PROMPT STRING?
         00002f80 00000000! 
     926 00002fa0     ca0d           JRZ     BOT_PROMPT                ;NOT ON TOP...DO THE BOTTOM 
     927                    *
     928                    *        BASED ON A1.....WE NEED TO DO THE FOLLOWING:
     929                    *
     930                    *        A1 = 0 PLOT THE A0 STRING OUTRIGHT USING L_MESS
     931                    *               (IT CONTAINS ALL DATA)
     932                    *
     933                    *        A1 = 1  PLOT ONLY THE STRING LIST (1, 2 or 3 POINTERS
     934                    *                CENTERED APPROPRIATELY
     935                    *
     936                    *        A1 = 2  PLOT THE 1ST LINE OF THE STRING LIST ALONG
     937                    *                WITH THE 2 CREDITS TO START...1 TO CONTINUE
     938                    *        
     939                    *        A1 = 3  PLOT THE 2ND LINE OF THE STRING LIST ALONG
     940                    *                WITH THE 2 CREDITS TO START...1 TO CONTINUE
     941                    *
     942                    *        A1 = 4  PLOT THE 3RD LINE OF THE STRING LIST ALONG
     943                    *                WITH THE 2 CREDITS TO START...1 TO CONTINUE
     944                    *
     945                    *        A1 = 5 PLOT THE 1ST LINE W/ 2 CREDITS PER PLAYER
     946                    *
     947                    *        A1 = 6 PLOT THE 2ND LINE W/2 CREDITS PER PLAYER
     948                    *
     949                    *        A1 = 7 PLOT THE 3RD LINE W/2 CREDITS PER PLAYER
     950                    *
     951                    *        A1 = 8 PLOT CUSTOM MESSAGE
     952                    *
     953 00002fb0     4c08           MOVE    A0,A8                                                 
     954 00002fc0     09c0           MOVI    LONG_SIZE,A0              ;INDEX A1 INTO A TABLE
         00002fd0     0020  
     955 00002fe0     5e01           MPYU    A0,A1                     ;A1 HAS OFFSET
     956 00002ff0     0b21           ADDI    HELP_TAB,A1               ;A1 POINTS AT VECTOR
         00003000 00003120' 
     957 00003020     8621           MOVE    *A1,A1,L                  ;GET THE VECTOR
     958                    
     959 00003030     09e7           MOVI    BOT_PROMPT,A7
         00003040 00003080' 
     960 00003060     a2ec           MOVE    A7,-*A12,L                ;PUSH RETURN ADDRESS
     961 00003070     0161           JUMP    A1                        ;THUS "JSRP"ing THE ROUTINE
     962                    
     963 00003080           BOT_PROMPT
     964 00003080                    JSRP    ADD_PROMPT           ;ADD THE HELPFUL HARDWARE PROMPT
     965                    
     966 000030f0                    RETP
     967                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   23

     968 00003120 000067d0' HELP_TAB .LONG   L_MESS               ;0 SAYS USE L_MESS
     969 00003140 00003240'          .LONG   JUST_LIST            ;1 SAYS USE LISTED MESSAGES ONLY
     970 00003160 00003ca0'          .LONG   LINE_ONE_PLUS        ;2 SAYS USE 1ST LINE W/ 2 TO START
     971 00003180 00003e50'          .LONG   LINE_TWO_PLUS        ;3
     972 000031a0 00003df0'          .LONG   LINE_THREE_PLUS      ;4
     973 000031c0 00003eb0'          .LONG   LINE_ONE_PLUS_2      ;5 USE 1ST LINE 2/ 2 CREDITS PER PLAYER
     974 000031e0 00004000'          .LONG   LINE_TWO_PLUS_2      ;6
     975 00003200 00004060'          .LONG   LINE_THREE_PLUS_2    ;7
     976 00003220 000035a0'          .LONG   OUTPUT_CUSTOM        ;8 CUSTOM MESSAGE!
     977                    
     978 00003240           JUST_LIST
     979 00003240     4d03           MOVE    A8,A3                ;STASH WHERE IT WILL SURVIVE
     980 00003250     b662           MOVE    *A3(LONG_SIZE),A2,L  ;ONE WORD ONLY?
         00003260     0020  
     981 00003270     ca2e           JRZ     JUST_ONE             ;YEP....CENTER IT NICELY
     982                    *
     983                    *        there's a 2nd line...check for 3rd!
     984                    *
     985 00003280     b662           MOVE    *A3(2*LONG_SIZE),A2,L  ;IS THERE A 3RD LINE?
         00003290     0040  
     986 000032a0     ca1a           JRZ     JUST_TWO               ;NOPE
     987                    
     988 000032b0     09e8           MOVI    SETUP_3_OF_3,A8
         000032c0 000099b0' 
     989 000032e0                    JSRP    SET_THEN_A2
     990                    
     991 00003350     b662           MOVE    *A3(LONG_SIZE),A2,L    ;GET LINE 2
         00003360     0020  
     992                    
     993 00003370     09e8           MOVI    SETUP_2_OF_3,A8
         00003380 00009910' 
     994 000033a0                    JSRP    SET_THEN_A2
     995                    
     996 00003410     09e8           MOVI    SETUP_1_OF_3,A8        ;SET HEIGHT FOR TOP LINE
         00003420 00009870' 
     997 00003440     c00f           JRUC    FIRST_LINE
     998                    
     999 00003450           JUST_TWO
    1000 00003450     b662           MOVE    *A3(LONG_SIZE),A2,L    ;GET LINE 2
         00003460     0020  
    1001 00003470     09e8           MOVI    SETUP_2_OF_2,A8
         00003480 00009af0' 
    1002 000034a0                    JSRP    SET_THEN_A2
    1003                    
    1004 00003510     09e8           MOVI    SETUP_1_OF_2,A8
         00003520 00009a50' 
    1005                    
    1006 00003540           FIRST_LINE
    1007 00003540     8662           MOVE    *A3,A2,L
    1008 00003550     c046           JRUC    SET_THEN_A2               ;DO TOP LEN AND RETURN
    1009                    
    1010 00003560     09e8  JUST_ONE MOVI    SETUP_1_OF_1,A8
         00003570 00009b90' 
    1011 00003590     c0fa           JRUC    FIRST_LINE                ;DO TOP LEN AND RETURN
    1012                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   24

    1013                    *
    1014                    *        OUTPUT THE CUSTOM MESSAGE
    1015                    *
    1016          01404700  CM_LINE1 EQU     CUSTOM_MESSAGE
    1017          01404890  CM_LINE2 EQU     CUSTOM_MESSAGE+CMESS_LINE_SIZE
    1018          01404a20  CM_LINE3 EQU     CUSTOM_MESSAGE+(2*CMESS_LINE_SIZE)
    1019                    
    1020 000035a0           OUTPUT_CUSTOM
    1021 000035a0     09ea           MOVI    CM_LINE3,A10         ;CHECK LINE 3
         000035b0 01404a20  
    1022 000035d0     0d3f           CALLR   CK_LINE              ;3 VALID LINES?
         000035e0     004f  
    1023 000035f0     ca1e           JRZ     GO_FOR_2
    1024                    
    1025 00003600     09e8           MOVI    SETUP_3_OF_3,A8
         00003610 000099b0' 
    1026 00003630                    JSRP    SET_THEN_STRNGRAM    ;PUT IT OUT
    1027                    
    1028 000036a0     09ea           MOVI    CM_LINE2,A10
         000036b0 01404890  
    1029 000036d0     09e8           MOVI    SETUP_2_OF_3,A8
         000036e0 00009910' 
    1030 00003700                    JSRP    SET_THEN_STRNGRAM
    1031                    
    1032 00003770     09ea           MOVI    CM_LINE1,A10
         00003780 01404700  
    1033 000037a0     09e8           MOVI    SETUP_1_OF_3,A8
         000037b0 00009870' 
    1034 000037d0     c025           JRUC    SET_THEN_STRNGRAM
    1035                    
    1036 000037e0           GO_FOR_2
    1037 000037e0     09ea           MOVI    CM_LINE2,A10         ;CHECK LINE 2
         000037f0 01404890  
    1038 00003810     0d3f           CALLR   CK_LINE              ;3 VALID LINES?
         00003820     002b  
    1039 00003830     ca11           JRZ     GO_FOR_1
    1040                    
    1041 00003840     09e8           MOVI    SETUP_2_OF_2,A8
         00003850 00009af0' 
    1042 00003870                    JSRP    SET_THEN_STRNGRAM    ;PUT IT OUT
    1043                    
    1044 000038e0     09ea           MOVI    CM_LINE1,A10
         000038f0 01404700  
    1045 00003910     09e8           MOVI    SETUP_1_OF_2,A8
         00003920 00009a50' 
    1046 00003940     c00e           JRUC    SET_THEN_STRNGRAM
    1047                    
    1048 00003950           GO_FOR_1
    1049 00003950     09ea           MOVI    CM_LINE1,A10
         00003960 01404700  
    1050 00003980     09e8           MOVI    SETUP_1_OF_1,A8
         00003990 00009b90' 
    1051 000039b0     c007           JRUC    SET_THEN_STRNGRAM
    1052                    
    1053                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   25

    1054                    *                                                                        *
    1055                    *          SET_THEN_A2                                                   *
    1056                    *                                                                        *
    1057                    *          THIS IS A PRIMITIVE FOR THE COIN PAGE PLOTTERS.               *
    1058                    *                                                                        *
    1059                    *          IT SETS UP WITH THE STRING IN A8, THEN FINSHES                *
    1060                    *          ON THE STRING IN A2.                                          *
    1061                    *                                                                        *
    1062                    *          JSRP THIS ROUTINE!                                            *
    1063                    *                                                                        *
    1064                    **************************************************************************
    1065 000039c0           SET_THEN_A2
    1066 000039c0     0d5f           CALLA   LM_SETUP
         000039d0 000068f0' 
    1067 000039f0     4c48           MOVE    A2,A8
    1068 00003a00     c080           JAUC    LM_FINIS               ;THAT DOES LINE 3
         00003a10 00006930' 
    1069                    
    1070                    **************************************************************************
    1071                    *                                                                        *
    1072                    *          SET_THEN_STRNGRAM                                             *
    1073                    *                                                                        *
    1074                    *          A10 POINTS AT A CMOS STRING FOR CUSTOM MESSAGE.               *
    1075                    *          A8 CONTAINS THE SETUP STRING FOR PRINTING THIS                *
    1076                    *          STRING OUT.  CONVERT FROM CMOS TO STRNGRAM                    *
    1077                    *          AND PRINT ON THE STRING.                                      *
    1078                    *                                                                        *
    1079                    **************************************************************************
    1080 00003a30           SET_THEN_STRNGRAM
    1081 00003a30     0d3f           CALLR   CK_LINE                ;TRANSFER TO STRNGRAM
         00003a40     0009  
    1082 00003a50     0d5f           CALLA   LM_SETUP
         00003a60 000068f0' 
    1083 00003a80     09e8           MOVI    STRNGRAM,A8
         00003a90 00000000! 
    1084 00003ab0     c080           JAUC    LM_FINIS
         00003ac0 00006930' 
    1085                    
    1086                    **************************************************************************
    1087                    *                                                                        *
    1088                    *          CK_LINE                                                       *
    1089                    *                                                                        *
    1090                    *          A10 POINTS AT A CMOS STRING.  WE MOVE THIS STRING             *
    1091                    *          TO OUR PDATA AREA.  THEN WE CALL BUILD_ST TO                  *
    1092                    *          PACK IT INTO "STRNGRAM" WE RETURN .EQ. (PASSED FROM           *
    1093                    *          BUILD_ST) BACK TO OUR CALLER IF IT IS ALL SPACES.             *
    1094                    *                                                                        *
    1095                    **************************************************************************
    1096 00003ae0     098f  CK_LINE  MMTM    SP,A0,A7,A1,A2,A10
         00003af0     e120  
    1097 00003b00     4d47           MOVE    A10,A7               ;INPUT POINTER TO CMOS
    1098 00003b10     4daa           MOVE    A13,A10              ;OUR PDATA AREA
    1099 00003b20     0b0a           ADDI    PDATA,A10            ;A10 IS DESTINATION.
         00003b30     0060  
    1100 00003b40     4d42           MOVE    A10,A2               ;ITERATE TO LOAD IT UP.
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   26

    1101                    
    1102 00003b50     09c1           MOVI    CMESS_CHARS,A1       ;COUNTER
         00003b60     0019  
    1103 00003b70     0d5f           CALLA   ADJ_PAGE             ;POINT THE PAGE
         00003b80 00005d70' 
    1104                    
    1105 00003ba0     0d5f  CK_LOOP  CALLA   RC_BYTEI             ;FETCH A BYTE
         00003bb0 00000000! 
    1106 00003bd0     8c02           MOVB    A0,*A2               ;STORE
    1107 00003be0     0b02           ADDI    BYTE_SIZE,A2
         00003bf0     0008  
    1108 00003c00     3ce1           DSJS    A1,CK_LOOP
    1109                    
    1110 00003c10     0d5f           CALLA   DEF_PAGE             ;POINT AWAY NOW
         00003c20 00005e10' 
    1111 00003c40     0d5f           CALLA   BUILD_ST             ;NOW XFER TO STRNGRAM (REMOVING SPACES ETC)
         00003c50 00000000! 
    1112 00003c70     09af          MMFM    SP,A0,A7,A1,A2,A10   ;RETURN .EQ. IF ITS ALL SPACES.
         00003c80     0487  
    1113 00003c90     0960          RETS
    1114                    
    1115 00003ca0           LINE_ONE_PLUS
    1116 00003ca0     8702           MOVE    *A8,A2,L             ;GET LINE 1
    1117 00003cb0     09e8  LOP_1    MOVI    SETUP_1_OF_3,A8
         00003cc0 00009870' 
    1118 00003ce0     0d5f           CALLA   LM_SETUP
         00003cf0 000068f0' 
    1119 00003d10     4c48           MOVE    A2,A8                ;SWAP IN TEXT POINTER
    1120 00003d20                    JSRP    LM_FINIS             ;PRINT IT
    1121                    
    1122 00003d90     09e8  LOP_2    MOVI    TWO_TS,A8            ;TWO TO START STUFF
         00003da0 00000000! 
    1123 00003dc0     c080           JAUC    L_MESS               ;PRINT IT AND RETURN
         00003dd0 000067d0' 
    1124                    
    1125                    *
    1126                    *        IF THE GAME IS IN A 2 TO START....2 TO CONTINUE MODE
    1127                    *
    1128 00003df0           LINE_THREE_PLUS
    1129 00003df0     b702           MOVE    *A8(2*LONG_SIZE),A2,L  ;FETCH LINE 3
         00003e00     0040  
    1130 00003e10     caf7           JRZ     LOP_2                ;NOTHING ON LINE 3
    1131 00003e20     c080           JAUC    LOP_1                ;THEN ITS THE SAME AS ABOVE!
         00003e30 00003cb0' 
    1132                    
    1133 00003e50           LINE_TWO_PLUS
    1134 00003e50     b702           MOVE    *A8(LONG_SIZE),A2,L  ;FETCH LINE 2
         00003e60     0020  
    1135 00003e70     caf1           JRZ     LOP_2                ;NOTHING ON LINE 2
    1136 00003e80     c080           JAUC    LOP_1                ;THEN ITS THE SAME AS ABOVE!
         00003e90 00003cb0' 
    1137                    
    1138 00003eb0           LINE_ONE_PLUS_2
    1139 00003eb0     8702           MOVE    *A8,A2,L             ;GET LINE 1
    1140 00003ec0     09e8  LOP_12   MOVI    SETUP_1_OF_2,A8
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   27

         00003ed0 00009a50' 
    1141 00003ef0     0d5f           CALLA   LM_SETUP
         00003f00 000068f0' 
    1142 00003f20     4c48           MOVE    A2,A8                ;SWAP IN TEXT POINTER
    1143 00003f30                    JSRP    LM_FINIS             ;PRINT IT
    1144                    
    1145 00003fa0     09e8  LOP_22   MOVI    TWO_TP,A8            ;TWO CREDITS PER PLAYER
         00003fb0 00000000! 
    1146 00003fd0     c080           JAUC    L_MESS               ;PRINT IT AND RETURN
         00003fe0 000067d0' 
    1147                    
    1148 00004000           LINE_TWO_PLUS_2
    1149 00004000     b702           MOVE    *A8(LONG_SIZE),A2,L  ;FETCH LINE 2
         00004010     0020  
    1150 00004020     caf7           JRZ     LOP_22               ;NOTHING ON LINE 2
    1151 00004030     c080           JAUC    LOP_12               ;THEN ITS THE SAME AS ABOVE!
         00004040 00003ec0' 
    1152                    
    1153 00004060           LINE_THREE_PLUS_2
    1154 00004060     b702           MOVE    *A8(2*LONG_SIZE),A2,L  ;FETCH LINE 3
         00004070     0040  
    1155 00004080     caf1           JRZ     LOP_22               ;NOTHING ON LINE 3
    1156 00004090     c080           JAUC    LOP_12               ;THEN ITS THE SAME AS ABOVE!
         000040a0 00003ec0' 
    1157                    
    1158                    **************************************************************************
    1159                    *                                                                        *
    1160                    *          SELECT_SETUP                                                  *
    1161                    *                                                                        *
    1162                    *          THIS IS CALLED TO SELECT A SETUP STRING FOR THE               *
    1163                    *          CREDITS MESSAGE.  IF THERE IS PROMPTING TO ADD...WE           *
    1164                    *          DROP IT DOWN....ELSE WE PRINT IT CENTERED.                    *
    1165                    *                                                                        *
    1166                    **************************************************************************
    1167 000040c0           SELECT_SETUP
    1168 000040c0     098f           MMTM    SP,A0                     
         000040d0     8000  
    1169 000040e0     09e8           MOVI    MESS_CNUM,A8              ;ASSUME NO EXTRA PROMPT
         000040f0 00007a80' 
    1170                    
    1171 00004110     0d5f           CALLA   CKPROMPT                  ;IS THERE ONE?
         00004120 00000000! 
    1172 00004140     ca03           JRZ     NO_EXTRA
    1173                    
    1174 00004150     09e8           MOVI    MESS_LOWNUM,A8
         00004160 00007b20' 
    1175 00004180     09af  NO_EXTRA        MMFM    SP,A0                     
         00004190     0001  
    1176 000041a0     0960          RETS
    1177                     
    1178                    **************************************************************************
    1179                    *                                                                        *
    1180                    *          FETCH_REQ                                                     *
    1181                    *                                                                        *
    1182                    *          THIS ROUTINE FETCHES THE NUMBER OF UNITS REQUIRED             *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   28

    1183                    *          FOR CREDIT, BONUS AND MINIMUM:                                *
    1184                    *                                                                        *
    1185                    *                  A2 = REQ FOR CREDITS                                  *
    1186                    *                  A3 = REQ FOR BONUS                                    *
    1187                    *                  A4 = MINIMUM                                          *
    1188                    *                                                                        *
    1189                    **************************************************************************
    1190 000041b0           FETCH_REQ
    1191 000041b0     098f           MMTM    SP,A0
         000041c0     8000  
    1192 000041d0     09c0           MOVI    ADJCUNIT,A0
         000041e0     0005  
    1193 000041f0     0d3f           CALLR   GET_ADJ
         00004200     0170  
    1194 00004210     4c02           MOVE    A0,A2
    1195                    
    1196 00004220     09c0           MOVI    ADJBUNIT,A0
         00004230     0006  
    1197 00004240     0d3f           CALLR   GET_ADJ
         00004250     016b  
    1198 00004260     4c03           MOVE    A0,A3
    1199                    
    1200 00004270     09c0           MOVI    ADJMUNIT,A0
         00004280     0007  
    1201 00004290     0d3f           CALLR   GET_ADJ_FOR_COIN
         000042a0     0189  
    1202 000042b0     4c04           MOVE    A0,A4
    1203 000042c0     09af          MMFM    SP,A0
         000042d0     0001  
    1204 000042e0     0960          RETS
    1205                    
    1206                    **************************************************************************
    1207                    *                                                                        *
    1208                    *          SLAM_P                                                        *
    1209                    *                                                                        *
    1210                    *          IS THERE A SLAM PROCESS RUNNING?                              *
    1211                    *                                                                        *
    1212                    *          .EQ.    NO                                                    *
    1213                    *          .NE.    YES                                                   *
    1214                    *                                                                        *
    1215                    **************************************************************************
    1216 000042f0     09e0  SLAM_P   MOVI    SLAM_PID,A0          ;SLAM PROCESS ACTIVE?
         00004300 0000c008  
    1217 00004320     09e1           MOVI    0FFFFH,A1
         00004330 0000ffff  
    1218 00004350     0d5f           CALLA   EXISTP
         00004360 00000000! 
    1219 00004380     0960           RETS
    1220                    
    1221 00004390     09e0  SLAM_SW  MOVI    SLAM_PID,A0
         000043a0 0000c008  
    1222 000043c0     b00d           MOVE    A0,*A13(PROCID),W    ;SET OUR ID TO SLAM
         000043d0     0020  
    1223 000043e0     09e1           MOVI    0FFFFH,A1
         000043f0 0000ffff  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   29

    1224 00004410     0d5f           CALLA   KILALL               ;KILL ANY OTHER INCARNATIONS
         00004420 00000000! 
    1225                    
    1226 00004440                    SLEEP   40H                  ;1 SECOND OF COIN IGNORING.
    1227 00004490     c080           JAUC    SUCIDE
         000044a0 00000000! 
    1228                    
    1229                    **************************************************************************
    1230                    *                                                                        *
    1231                    *          FORM_COIN_CKSUM                                               *
    1232                    *                                                                        *
    1233                    *          THIS ROUTINE IS CALLED TO FORM THE COIN/CREDITS               *
    1234                    *          CHECKSUM.  THE CHECKSUM IS RETURNED IN A1.                    *
    1235                    *                                                                        *
    1236                    *          .EQ.   IT MATCHES WHATS THERE                                 *
    1237                    *          .NE.   IT DOESN'T MATCH                                       *
    1238                    *                                                                        *
    1239                    **************************************************************************
    1240 000044c0           FORM_COIN_CKSUM
    1241 000044c0     098f           MMTM    SP,A0,A7,A2
         000044d0     a100  
    1242 000044e0     0d3f           CALLR   COIN_PAG                 ;MAKE SURE WE'RE ON THE RIGHT PAGE.
         000044f0     003b  
    1243 00004500     09e7           MOVI    COIN_CKSUM_START,A7       ;POINT AT FIRST BYTE TO CHECK
         00004510 014010e0  
    1244 00004530     09c2           MOVI    COIN_CKSUM_BYTES,A2
         00004540     0007  
    1245 00004550     5621           CLR     A1                        ;CLEAR OUT CHECKSUM
    1246                    
    1247 00004560     0d5f  CN_SUM   CALLA   RC_BYTEI                  ;FETCH A BYTE IN A0
         00004570 00000000! 
    1248 00004590     4001           ADD     A0,A1                     ;ADD TO SUM
    1249 000045a0     3ca2           DSJS    A2,CN_SUM                 ;TILL WE HAVE EM ALL
    1250                    
    1251 000045b0     03e1           NOT     A1                        ;COMPLEMENT OF COURSE
    1252 000045c0     0b81           ANDI    BYTE_MASK,A1              ;AND KEEP THE BYTE
         000045d0 ffffff00  
    1253                    
    1254 000045f0     09e7           MOVI    COIN_CKSUM,A7
         00004600 01401150  
    1255 00004620     0d5f           CALLA   RC_BYTE                   ;FETCH THE CURRENT CKSUM
         00004630 00000000! 
    1256 00004650     4801           CMP     A0,A1                     ;COMPARE TO THIS
    1257 00004660     09af          MMFM    SP,A0,A7,A2
         00004670     0085  
    1258 00004680     0960          RETS
    1259                    
    1260 00004690           FORM_COIN_CKSUM_AND_STORE
    1261 00004690     098f           MMTM    SP,A1,A7,A0
         000046a0     c100  
    1262 000046b0     0d3f           CALLR   FORM_COIN_CKSUM
         000046c0     ffdf  
    1263 000046d0     09e7           MOVI    COIN_CKSUM,A7
         000046e0 01401150  
    1264 00004700     4c20           MOVE    A1,A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   30

    1265 00004710     0d5f           CALLA   WC_BYTE
         00004720 00000000! 
    1266 00004740     09af          MMFM    SP,A1,A7,A0
         00004750     0083  
    1267 00004760     0960          RETS
    1268                    
    1269                    **************************************************************************
    1270                    *                                                                        *
    1271                    *          CCCC                                                          *
    1272                    *                                                                        *
    1273                    *          Check_Coin_and_Clear_on_bad_Checksum.                         *
    1274                    *                                                                        *
    1275                    *          This is called before operations that deal with               *
    1276                    *          the coinage and credits values.                               *
    1277                    *                                                                        *
    1278                    *          It checks to see if they area is in tact. If it               *
    1279                    *          is, then no action is performed.                              *
    1280                    *                                                                        *
    1281                    *          Else, it clears our all values (credits, etc.)                *
    1282                    *          so that nothing is given away erroneously.                    *
    1283                    *                                                                        *
    1284                    **************************************************************************
    1285 00004770     098f  CCCC     MMTM    SP,A0,A1,A7,A2
         00004780     e100  
    1286 00004790     0d3f           CALLR   FORM_COIN_CKSUM      ;THIS SETS US TO THE COINAGE PAGE!
         000047a0     ffd1  
    1287 000047b0     ca0c           JRZ     CCCCX                ;ALL IS OK!
    1288                    
    1289 000047c0     09e7           MOVI    COIN_CKSUM_START,A7  ;POINT AT FIRST BYTE
         000047d0 014010e0  
    1290 000047f0     09c2           MOVI    COIN_CKSUM_BYTES,A2  ;NUMBER OF BYTES TO CLEAR
         00004800     0007  
    1291 00004810     5600           CLR     A0
    1292                    
    1293 00004820           CCCC_LOOP
    1294 00004820     0d5f           CALLA   WC_BYTEI             ;WRITE A BYTE
         00004830 00000000! 
    1295 00004850     3c82           DSJS    A2,CCCC_LOOP         ;UNTIL THEY'RE DONE!
    1296                    
    1297 00004860     0d3f           CALLR   FORM_COIN_CKSUM_AND_STORE  ;NOW MAKE THE CKSUM VALID
         00004870     ffe1  
    1298                    
    1299 00004880     09af  CCCCX    MMFM    SP,A0,A1,A7,A2
         00004890     0087  
    1300 000048a0     0960          RETS
    1301                    
    1302                    **************************************************************************
    1303                    *                                                                        *
    1304                    *          COIN_PAG                                                     *
    1305                    *                                                                        *
    1306                    *          THIS SETS THE CURRENT CMOS PAGE FOR COIN/CREDITS              *
    1307                    *                                                                        *
    1308                    **************************************************************************
    1309 000048b0           COIN_PAG
    1310 000048b0     098f           MMTM    SP,A1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   31

         000048c0     4000  
    1311 000048d0     09c1           MOVI    COIN_SELECT,A1       ;THIS IS COIN/CREDITS PAGE
         000048e0     0040  
    1312 000048f0     0d5f           CALLA   SET_PAGE             ;SET IT PLEASE
         00004900 00000000! 
    1313 00004920     09af          MMFM    SP,A1
         00004930     0002  
    1314 00004940     0960          RETS
    1315                    
    1316                    **************************************************************************
    1317                    *                                                                        *
    1318                    *         AUDIT HANDLING                                                 *
    1319                    *                                                                        *
    1320                    **************************************************************************
    1321                    *                                                                        *
    1322                    *          POINT_AT_AUDIT                                                *
    1323                    *                                                                        *
    1324                    *          THIS IS CALLED TO POINT AT THE AUDIT INDICATED BY             *
    1325                    *          A0.  A0 IS THE AUDIT NUMBER 0-30.  A7 IS RETURNED             *
    1326                    *          POINTING AT THE BEGINNING OF THE AUDIT.                       *
    1327                    *                                                                        *
    1328                    **************************************************************************
    1329 00004950           POINT_AT_AUDIT
    1330 00004950     098f           MMTM    SP,A1
         00004960     4000  
    1331 00004970     0d3f           CALLR   AUDIT_PAGE
         00004980     0009  
    1332                    
    1333 00004990     09c7           MOVI    AUD_SIZE,A7          ;THIS IS SIZE PER AUDIT
         000049a0     0060  
    1334 000049b0     5e07           MPYU    A0,A7                ;A1 NOW HAS OFFSET
    1335 000049c0     0b27           ADDI    AUDITORG,A7          ;ADD BASE
         000049d0 01400000  
    1336 000049f0     09af          MMFM    SP,A1
         00004a00     0002  
    1337 00004a10     0960          RETS
    1338                    
    1339 00004a20           AUDIT_PAGE
    1340 00004a20     098f           MMTM    SP,A1
         00004a30     4000  
    1341 00004a40     09c1           MOVI    AUDIT_SELECT,A1      ;THIS IS AUDIT PAGE
         00004a50     0040  
    1342 00004a60     0d5f           CALLA   SET_PAGE             ;SET IT PLEASE
         00004a70 00000000! 
    1343 00004a90     09af          MMFM    SP,A1
         00004aa0     0002  
    1344 00004ab0     0960          RETS
    1345                    
    1346                    **************************************************************************
    1347                    *                                                                        *
    1348                    *          FORM_AUD_CKSUM                                                *
    1349                    *                                                                        *
    1350                    *          THIS IS CALLED TO FORM THE CHECKSUM FOR THE AUDIT             *
    1351                    *          SPECIFIED IN A0.                                              *
    1352                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   32

    1353                    *          A1 RETURNS THE CHECKSUM.                                      *
    1354                    *                                                                        *
    1355                    *          Z BIT IS SET BASED ON WHETHER IT MATCHES THE CHECKSUM THERE.  *
    1356                    *                                                                        *
    1357                    **************************************************************************
    1358 00004ac0           FORM_AUD_CKSUM
    1359 00004ac0     098f           MMTM    SP,A0,A4,A7
         00004ad0     8900  
    1360 00004ae0     0d3f           CALLR   POINT_AT_AUDIT            ;A7 = POINTER TO CURRENT ENTRY
         00004af0     ffe5  
    1361 00004b00     098f           MMTM    SP,A7                     ;SAVE POINTER TO ENTRY
         00004b10     0100  
    1362 00004b20     09c4           MOVI    AUD_BYTES_TO_CHECK,A4     ;COUNT DOWN THE BYTES
         00004b30     0004  
    1363 00004b40     5621           CLR     A1                        ;KEEP SUM IN A1
    1364 00004b50           ADD_A_BYTE
    1365 00004b50     0d5f           CALLA   RC_BYTEI                  ;GET A BYTE INTO A0
         00004b60 00000000! 
    1366 00004b80     4001           ADD     A0,A1                     ;ADD TO SUM
    1367 00004b90     3ca4           DSJ     A4,ADD_A_BYTE             ;ONE MORE ADDED
    1368 00004ba0     03e1           NOT     A1                        ;CHECKSUM IS NOW IN LOW WORD
    1369 00004bb0     0b81           ANDI    WORD_MASK,A1              ;MASK SO ITS COOL
         00004bc0 ffff0000  
    1370 00004be0     09af          MMFM    SP,A7                     ;GET POINTER BACK
         00004bf0     0080  
    1371 00004c00     0b07           ADDI    AUD_CKSUM,A7              ;POINT AT CHECKBYTE
         00004c10     0040  
    1372 00004c20     0d5f           CALLA   RC_WORD                   ;READ IN THE CKSUM
         00004c30 00000000! 
    1373 00004c50     4801           CMP     A0,A1                     ;COMPARE WHAT'S THERE TO WHAT WE GOT
    1374 00004c60     09af          MMFM    SP,A0,A4,A7               ;Z BIT RETURNS COMPARE
         00004c70     0091  
    1375 00004c80     0960          RETS                              ;A1 RETURNS CKSUM
    1376                    
    1377                    **************************************************************************
    1378                    *                                                                        *
    1379                    *          STORE_AUD_CKSUM                                               *
    1380                    *                                                                        *
    1381                    *          THIS WILL STORE THE AUDIT CHECKSUM IN A1 FOR THE              *
    1382                    *          AUDIT NUMBER SPECIFIED BY A0.                                 *
    1383                    *                                                                        *
    1384                    **************************************************************************
    1385 00004c90           STORE_AUD_CKSUM
    1386 00004c90     098f           MMTM    SP,A7,A0                  ;POINTING REGISTER
         00004ca0     8100  
    1387 00004cb0     0d3f           CALLR   POINT_AT_AUDIT            ;A7 POINTS AT AUDIT
         00004cc0     ffc8  
    1388 00004cd0     0b07           ADDI    AUD_CKSUM,A7              ;POINT AT CHECKBYTE
         00004ce0     0040  
    1389 00004cf0     4c20           MOVE    A1,A0                     ;GET CHECKBYTE IN A0
    1390 00004d00     0d5f           CALLA   WC_WORD                   ;WRITE THE CKSUM
         00004d10 00000000! 
    1391 00004d30     09af          MMFM    SP,A7,A0                  ;POINTING REGISTER
         00004d40     0081  
    1392 00004d50     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   33

    1393                    
    1394                    **************************************************************************
    1395                    *                                                                        *
    1396                    *          FORM_AUD_CKSUM_AND_STORE                                      *
    1397                    *                                                                        *
    1398                    *          THE VALUE AT BAD_AUD IS USED TO DETERMINE WHETHER TO STORE    *
    1399                    *          THE CORRECT OR INCORRECT VALUE!                               *
    1400                    *                                                                        *
    1401                    *          A0 = AUDIT NUMBER                                             *
    1402                    *                                                                        *
    1403                    **************************************************************************
    1404 00004d60           FORM_AUD_CKSUM_AND_STORE
    1405 00004d60     098f           MMTM    SP,A1,A2                     ;SAVE A1!
         00004d70     6000  
    1406 00004d80     0d3f           CALLR   FORM_AUD_CKSUM
         00004d90     ffd2  
    1407 00004da0     05a2           MOVE    @BAD_AUD,A2,W                ;GET THE "FUDGE" WORD
         00004db0 00000000- 
    1408 00004dd0     5641           XOR     A2,A1                        ;MAKE CKSUM BAD IF AUDIT IS BAD
    1409 00004de0     0d3f           CALLR   STORE_AUD_CKSUM
         00004df0     ffe9  
    1410 00004e00     09af          MMFM    SP,A1,A2
         00004e10     0006  
    1411 00004e20     0960          RETS
    1412                    
    1413                    **************************************************************************
    1414                    *                                                                        *
    1415                    *          GET_AUD                                                       *
    1416                    *                                                                        *
    1417                    *          THIS IS CALLED TO FETCH THE AUDIT VALUE FOR THE AUDIT         *
    1418                    *          SPECIFIED IN A0 INTO A1.  IF THE CHECKBYTE FOR THE            *
    1419                    *          AUDIT IS INCORRECT, THEN RAM LOCATION BAD_AUD WILL BE         *
    1420                    *          SET TO 1.                                                     *
    1421                    *                                                                        *
    1422                    **************************************************************************
    1423 00004e30           GET_AUD
    1424 00004e30     098f           MMTM    SP,A7,A0
         00004e40     8100  
    1425 00004e50     0d3f           CALLR   FORM_AUD_CKSUM       ;SEE IF CKSUM IS OK
         00004e60     ffc5  
    1426 00004e70     ca04           JRZ     FETCH_AUDIT_1        ;ITS OK....
    1427                    *
    1428                    *        CHECKSUM IS BAD....SET GLOBAL
    1429                    *
    1430 00004e80     1821           MOVK    1,A1
    1431 00004e90     0581           MOVE    A1,@BAD_AUD,W        ;SET THE FLAG!
         00004ea0 00000000- 
    1432                    
    1433 00004ec0           FETCH_AUDIT_1
    1434 00004ec0     0d3f           CALLR   POINT_AT_AUDIT       ;A7 POINTS AT AUDIT
         00004ed0     ffa7  
    1435 00004ee0     0b07           ADDI    AUD_DATA,A7          ;ADD ZERO OFFSET
         00004ef0     0000  
    1436 00004f00     0d5f           CALLA   RC_LONG              ;FETCH THE LONG WORD TO A0
         00004f10 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   34

    1437 00004f30     4c01           MOVE    A0,A1                ;RETURN IN A1
    1438 00004f40     09af          MMFM    SP,A7,A0
         00004f50     0081  
    1439 00004f60     0960          RETS
    1440                    
    1441                    **************************************************************************
    1442                    *                                                                        *
    1443                    *          STORE_AUDIT                                                   *
    1444                    *                                                                        *
    1445                    *          A0 = AUDIT NUMBER TO STORE VALUE FOR                          *
    1446                    *          A1 = VALUE TO STORE.                                          *
    1447                    *          BAD_AUD = NON ZERO IF BAD CHECKSUM IS TO BE MAINTAINED.       *
    1448                    *                                                                        *
    1449                    **************************************************************************
    1450 00004f70           STORE_AUDIT
    1451 00004f70     098f           MMTM    SP,A0,A7
         00004f80     8100  
    1452 00004f90     0d3f           CALLR   POINT_AT_AUDIT       ;A7 POINTS AT AUDIT
         00004fa0     ff9a  
    1453 00004fb0     0b07           ADDI    AUD_DATA,A7          ;ADD ZERO OFFSET
         00004fc0     0000  
    1454 00004fd0     4c20           MOVE    A1,A0                ;MOVE DATA TO WRITING REGISTER
    1455 00004fe0     0d5f           CALLA   WC_LONG              ;WRITE THE DATA BACK
         00004ff0 00000000! 
    1456 00005010     09af          MMFM    SP,A0,A7             ;GET AUDIT NUMBER BACK
         00005020     0081  
    1457 00005030     c0d2           JRUC    FORM_AUD_CKSUM_AND_STORE    ;STORE GOOD OR BAD CKSUM BASED
    1458                    *                                            ;ON BAD_AUD
    1459                    
    1460                    **************************************************************************
    1461                    *                                                                        *
    1462                    *          CLR_SUBS                                                      *
    1463                    *                                                                        *
    1464                    *          THIS IS CALLED TO CLEAR OUT THE COINAGE SUB-TOTALS.           *
    1465                    *                                                                        *
    1466                    **************************************************************************
    1467 00005040     09c0  CLR_SUBS MOVI    FRST_SUB,A0
         00005050     0007  
    1468 00005060     09c1           MOVI    LAST_SUB,A1
         00005070     000c  
    1469 00005080     0d3f           CALLR   CLR_AUDR        ;CLEAR EM OUT!
         00005090     0003  
    1470 000050a0                    RETP
    1471                    
    1472                    **************************************************************************
    1473                    *                                                                        *
    1474                    *          CLR_AUDR                                                 *
    1475                    *                                                                        *
    1476                    *          THIS IS CALLED TO CLEAR OUT A RANGE OF AUDITS.                *
    1477                    *          A0 = 1ST AUDIT NUMBER                                         *
    1478                    *          A1 = LAST AUDIT NUMBER (INCLUSIVE)                            *
    1479                    *                                                                        *
    1480                    **************************************************************************
    1481 000050d0           CLR_AUDR
    1482 000050d0     098f           MMTM    SP,A0,A1,A2
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   35

         000050e0     e000  
    1483 000050f0     4c22           MOVE    A1,A2                     ;MOVE "LAST" TO A2
    1484 00005100     5621           CLR     A1                        ;WE'LL STORE ZEROS
    1485 00005110     0581           MOVE    A1,@BAD_AUD               ;MAKE CKSUMS GOOD ON STORING
         00005120 00000000- 
    1486 00005140     0d3f  CAR1     CALLR   STORE_AUDIT               ;STORE THIS AUDIT
         00005150     ffe1  
    1487 00005160     1020           INC     A0                        ;KICK TO NEXT AUDIT
    1488 00005170     4840           CMP     A2,A0
    1489 00005180     c2fb           JRLS    CAR1
    1490 00005190     09af          MMFM    SP,A0,A1,A2
         000051a0     0007  
    1491 000051b0     0960          RETS
    1492                    
    1493                    **************************************************************************
    1494                    *                                                                        *
    1495                    *       CLR_DUMP_AUD                                                     *
    1496                    *                                                                        *
    1497                    *       This is called by both joysticks down while looking              *
    1498                    *       at dump page.   It clears out the audits associated              *
    1499                    *       with that page.                                                  *
    1500                    *                                                                        *
    1501                    **************************************************************************
    1502 000051c0           CLR_DUMP_AUD
    1503 000051c0     09c0          MOVI    AUDDOGGY,A0 
         000051d0     0021  
    1504 000051e0     0d3f          CALLR   KILL_AUD
         000051f0     0011  
    1505 00005200     09c0          MOVI    AUDLOCK,A0  
         00005210     0022  
    1506 00005220     0d3f          CALLR   KILL_AUD
         00005230     000d  
    1507 00005240     09c0          MOVI    AUDTRAP,A0  
         00005250     0026  
    1508 00005260     0d3f          CALLR   KILL_AUD
         00005270     0009  
    1509 00005280     09c0          MOVI    AUDSURV,A0  
         00005290     0027  
    1510 000052a0     0d3f          CALLR   KILL_AUD
         000052b0     0005  
    1511 000052c0     09c0          MOVI    AUDBONE,A0  
         000052d0     0028  
    1512 000052e0     0d3f          CALLR   KILL_AUD
         000052f0     0001  
    1513 00005300     0960          RETS
    1514                    
    1515                    **************************************************************************
    1516                    *                                                                        *
    1517                    *       KILL_AUD                                                         *
    1518                    *                                                                        *
    1519                    *       This is called to clear out an audit.                            *
    1520                    *                                                                        *
    1521                    *       A0 = audit number.                                               *
    1522                    *                                                                        *
    1523                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   36

    1524 00005310           KILL_AUD
    1525 00005310     098f          MMTM    SP,A1
         00005320     4000  
    1526 00005330     5621          CLR     A1                        ;WE'LL STORE ZEROS
    1527 00005340     0581          MOVE    A1,@BAD_AUD               ;MAKE CKSUMS GOOD ON STORING
         00005350 00000000- 
    1528 00005370     0d3f          CALLR   STORE_AUDIT               ;STORE THIS AUDIT
         00005380     ffbe  
    1529 00005390     09af          MMFM    SP,A1
         000053a0     0002  
    1530 000053b0     0960          RETS
    1531                    
    1532                    **************************************************************************
    1533                    *                                                                        *
    1534                    *          AUD                                                           *
    1535                    *                                                                        *
    1536                    *          A0 = AUDIT NUMBER.......A1 = COUNT TO ADD.                    *
    1537                    *                                                                        *
    1538                    **************************************************************************
    1539 000053c0     098f  AUD      MMTM    SP,A1,A2
         000053d0     6000  
    1540 000053e0     5642           CLR     A2                   ;SET "BAD_AUD" GOOD UNTIL OTHERWISE PROVEN!
    1541 000053f0     0582           MOVE    A2,@BAD_AUD,W        ;ITS GOOD.
         00005400 00000000- 
    1542 00005420     4c22           MOVE    A1,A2                ;COPY OUR COUNT
    1543 00005430     0d3f           CALLR   GET_AUD              ;FETCH THE CURRENT AUDIT COUNTER
         00005440     ff9e  
    1544 00005450     4041           ADD     A2,A1                ;ADD THE NEW COUNT
    1545 00005460     0d3f           CALLR   STORE_AUDIT          ;STORE IT BACK
         00005470     ffaf  
    1546 00005480     0d3f           CALLR   DEF_PAGE             ;SWITCH PAGE AWAY FROM THE DATA!
         00005490     0097  
    1547 000054a0     09af          MMFM    SP,A1,A2
         000054b0     0006  
    1548 000054c0     0960          RETS
    1549                    
    1550 000054d0     098f  AUD1     MMTM    SP,A1
         000054e0     4000  
    1551 000054f0     1821           MOVK    1,A1
    1552 00005500     0d3f           CALLR   AUD
         00005510     ffea  
    1553 00005520     09af          MMFM    SP,A1
         00005530     0002  
    1554 00005540     0960          RETS
    1555                    
    1556                    **************************************************************************
    1557                    *                                                                        *
    1558                    *          CLR_AUD                                                       *
    1559                    *                                                                        *
    1560                    *          This is called to clear out all of the audits.                *
    1561                    *                                                                        *
    1562                    *          A relatively easy task given the primitives available.        *
    1563                    *                                                                        *
    1564                    **************************************************************************
    1565 00005550     098f  CLR_AUD  MMTM    SP,A0,A1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   37

         00005560     c000  
    1566 00005570     09c0           MOVI    1,A0                 ;START AT AUDIT 1
         00005580     0001  
    1567 00005590     09c1           MOVI    N_AUDITS-1,A1        ;THIS IS TOTAL ALLOCATED
         000055a0     002c  
    1568 000055b0     0d3f           CALLR   CLR_AUDR
         000055c0     ffb0  
    1569 000055d0     09af          MMFM    SP,A0,A1
         000055e0     0003  
    1570 000055f0     0960          RETS
    1571                    
    1572                    **************************************************************************
    1573                    *                                                                        *
    1574                    *          ADJUSTMENTS                                                   *
    1575                    *                                                                        *
    1576                    **************************************************************************
    1577                    **************************************************************************
    1578                    *                                                                        *
    1579                    *          CMOS_VAL                                                     *
    1580                    *                                                                        *
    1581                    *          ARE ADJUSTMENTS AND NAME/REV OK?                              *
    1582                    *                                                                        *
    1583                    *          .EQ. MEANS YES                                                *
    1584                    *          .NE. MEANS NO                                                 *
    1585                    *                                                                        *
    1586                    **************************************************************************
    1587 00005600           CMOS_VAL
    1588 00005600     0d3f           CALLR   FORM_ADC  ;SEE IF CKSUM IS OK.
         00005610     0004  
    1589 00005620     cb02           JRNZ    CMOS_BAD        ;NOPE....RETURN .NE.
    1590                    
    1591 00005630     0d3f           CALLR   CHECK_NAME_AND_REV   ;HOW ABOUT THE NAME AND REV?
         00005640     0054  
    1592 00005650           CMOS_BAD
    1593 00005650     0960           RETS
    1594                    
    1595                    **************************************************************************
    1596                    *                                                                        *
    1597                    *          Adjustments are all stored as long words in CMOS.             *
    1598                    *          They are referenced by adjustment number.  Stuff              *
    1599                    *          adjustment number in A0.  Call GET_ADJ and the                *
    1600                    *          value is returned in A0.                                      *
    1601                    *                                                                        *
    1602                    **************************************************************************
    1603                    **************************************************************************
    1604                    *                                                                        *
    1605                    *          FORM_ADC                                                *
    1606                    *                                                                        *
    1607                    *          THIS IS CALLED TO FORM THE CHECKSUM FOR THE ADJUSTMENTS       *
    1608                    *          AREA.  IT IS RETURNED IN A1.                                  *
    1609                    *                                                                        *
    1610                    *          IT IS COMPARED TO THE REAL CHECKSUM AND .EQ. RETURNED IF OK.  *
    1611                    *                                                                        *
    1612                    **************************************************************************
    1613 00005660           FORM_ADC 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   38

    1614 00005660     098f           MMTM    SP,A7,A0,A6
         00005670     8300  
    1615 00005680     0d3f           CALLR   ADJ_PAGE          ;SET CMOS PAGE FOR ADJUSTMENTS
         00005690     006d  
    1616 000056a0     09e7           MOVI    ADJUSTORG,A7         ;POINT AT FIRST BYTE
         000056b0 01404000  
    1617 000056d0     09c6           MOVI    ADJ_BYTES_TO_CHECK,A6  ;NUMBER OF BYTES
         000056e0     00bd  
    1618 000056f0     5621           CLR     A1                     ;ACCUMULATE CKSUM HERE
    1619                    
    1620 00005700     0d5f  ADJ_C1   CALLA   RC_BYTEI               ;READ A BYTE
         00005710 00000000! 
    1621 00005730     4001           ADD     A0,A1                  ;ADD THE BYTE TO THE SUM
    1622 00005740     3ca6           DSJS    A6,ADJ_C1
    1623                    
    1624 00005750     03e1           NOT     A1                     ;COMPLEMENT THE SUM
    1625 00005760     0b81           ANDI    WORD_MASK,A1           ;KEEP A WORD.
         00005770 ffff0000  
    1626                    
    1627 00005790     09e7           MOVI    ADJ_CKSUM,A7
         000057a0 01404bd0  
    1628 000057c0     0d5f           CALLA   RC_WORD                ;FETCH THE CHECKSUM
         000057d0 00000000! 
    1629 000057f0     4801           CMP     A0,A1                  ;COMPARE TO FETCHED VALUE
    1630 00005800     09af          MMFM    SP,A7,A0,A6
         00005810     00c1  
    1631 00005820     0960          RETS
    1632                    
    1633                    **************************************************************************
    1634                    *                                                                        *
    1635                    *          F_ADC_S                                                       *
    1636                    *                                                                        *
    1637                    *          CALCULATE THE ADJUSTMENT CHECKSUM AND STORE THE               *
    1638                    *          NEW VALUE.                                                    *
    1639                    *                                                                        *
    1640                    **************************************************************************
    1641 00005830           F_ADC_S
    1642 00005830     098f           MMTM    SP,A0,A1,A7
         00005840     c100  
    1643 00005850     0d3f           CALLR   FORM_ADC         ;FORM THE CKSUM
         00005860     ffdf  
    1644 00005870     4c20           MOVE    A1,A0                  ;PUT IN CMOS WRITING REGGIE
    1645 00005880     09e7           MOVI    ADJ_CKSUM,A7
         00005890 01404bd0  
    1646 000058b0     0d5f           CALLA   WC_WORD                ;AND STORE IT
         000058c0 00000000! 
    1647 000058e0     09af          MMFM    SP,A0,A1,A7
         000058f0     0083  
    1648 00005900     0960          RETS
    1649                    
    1650                    **************************************************************************
    1651                    *                                                                        *
    1652                    *          GET_ADJ                                                       *
    1653                    *                                                                        *
    1654                    *          THIS IS CALLED TO FETCH THE VALUE OF AN ADJUSTMENT.           *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   39

    1655                    *                                                                        *
    1656                    *          THE ADJUSTMENT NUMBER IS GIVEN IN A0.                         *
    1657                    *          THE VALUE FOR THE ADJUSTMENT IS RETURNED IN A0.               *
    1658                    *                                                                        *
    1659                    **************************************************************************
    1660 00005910     098f  GET_ADJ  MMTM    SP,A1,A7
         00005920     4100  
    1661 00005930     0d3f           CALLR   ADJPOINT             ;POINT AT ADJUSTMENT
         00005940     0016  
    1662 00005950     0d5f           CALLA   RC_LONG              ;FETCH THE ADJUST PLEASE
         00005960 00000000! 
    1663 00005980     0d3f           CALLR   DEF_PAGE
         00005990     0047  
    1664 000059a0     4c00           MOVE    A0,A0                ;RETURN Z BIT BASED ON ADJUSTMENT!
    1665 000059b0     09af          MMFM    SP,A1,A7
         000059c0     0082  
    1666 000059d0     0960          RETS
    1667                    
    1668                    **************************************************************************
    1669                    *                                                                        *
    1670                    *          PUT_ADJ                                                       *
    1671                    *                                                                        *
    1672                    *          ADJUST NUMBER IN A0.                                          *
    1673                    *          VALUE IN A1.                                                  *
    1674                    *          STORE IT!........                                             *
    1675                    *                                                                        *
    1676                    *          ****************** THIS IS A UTILITY......IT DOES NOT         *
    1677                    *                             CORRECT ANY CHECKSUM CHANGE THAT           *
    1678                    *                             MAY OCCUR!!                                *
    1679                    *                                         ***************************    *
    1680                    *                                                                        *
    1681                    **************************************************************************
    1682 000059e0     098f  PUT_ADJ  MMTM    SP,A7,A0
         000059f0     8100  
    1683 00005a00     0d3f           CALLR   ADJPOINT             ;POINT AT REQUESTED ADJ.
         00005a10     0009  
    1684 00005a20     4c20           MOVE    A1,A0                ;GET VALUE IN WRITING REGGIE!
    1685 00005a30     0d5f           CALLA   WC_LONG              ;WRITE THE ADJUSTMENT
         00005a40 00000000! 
    1686 00005a60     0d3f           CALLR   DEF_PAGE             ;SWAP PAGE AWAY.
         00005a70     0039  
    1687 00005a80     09af          MMFM    SP,A7,A0
         00005a90     0081  
    1688 00005aa0     0960          RETS
    1689                    
    1690 00005ab0           ADJPOINT
    1691 00005ab0     0d3f           CALLR   ADJ_PAGE             ;SET CMOS PAGE FOR ADJUSTMENTS
         00005ac0     002a  
    1692 00005ad0     09c7           MOVI    ADJ_SIZE,A7          ;SIZE PER ADJUSTMENT IN A7
         00005ae0     0040  
    1693 00005af0     5e07           MPYU    A0,A7                ;TIMES ADJUSTMENT REQUESTED.
    1694                    
    1695 00005b00     0b27           ADDI    ADJUSTORG,A7         ;ADD TO BASE
         00005b10 01404000  
    1696 00005b30     0960           RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   40

    1697                    
    1698 00005b40           GET_ADJ_FOR_COIN
    1699 00005b40     0d3f           CALLR   GET_ADJ              ;GET THE ADJUSTMENT
         00005b50     ffdb  
    1700 00005b60     c080           JAUC    COIN_PAG            ;THEN RE-INSTATE THE COIN PAGE!
         00005b70 000048b0' 
    1701                    
    1702                    **************************************************************************
    1703                    *                                                                        *
    1704                    *          CHECK_NAME_AND_REV                                            *
    1705                    *                                                                        *
    1706                    *          THIS ROUTINE IS CALLED TO SEE IF THE GAME NAME/REV IS         *
    1707                    *          CORRECT.  IF IT IS NOT, THE GAME WILL AUTOMATICALLY           *
    1708                    *          FACTORY SET.   .EQ. MEANS OK!                                 *
    1709                    *                                                                        *
    1710                    **************************************************************************
    1711 00005b90           CHECK_NAME_AND_REV
    1712 00005b90     098f           MMTM    SP,A0,A1,A2,A3,A7
         00005ba0     f100  
    1713 00005bb0     0d3f           CALLR   ADJ_PAGE          ;MAKE SURE WE'RE ON THE CORRECT PAGE
         00005bc0     001a  
    1714                    
    1715 00005bd0     09e7           MOVI    NAME_REV,A7          ;POINT AT CMOS NAME STORAGE
         00005be0 01404bf0  
    1716 00005c00     09e1           MOVI    ROM_NAME,A1          ;POINT AT OUR VERSION
         00005c10 00007590' 
    1717 00005c30     09c2           MOVI    NAME_REV_SIZE,A2     ;MAXIMUM NAME SIZE
         00005c40     001e  
    1718                    
    1719 00005c50           NEXT_LET1
    1720 00005c50     0d5f           CALLA   RC_BYTEI             ;FETCH A BYTE
         00005c60 00000000! 
    1721 00005c80     8e23           MOVB    *A1,A3               ;GET 1 FROM ROM
    1722 00005c90     0b83           ANDI    BYTE_MASK,A3         ;MASK ANY SIGN EXTENDS
         00005ca0 ffffff00  
    1723                    
    1724 00005cc0     4860           CMP     A3,A0                ;THEY BETTER BE THE SAME
    1725 00005cd0     cb06           JRNZ    RETURN_NOW           ;NOPE....BYE  (RETURN .NE.)
    1726                    
    1727 00005ce0     0b01           ADDI    BYTE_SIZE,A1         ;KICK SOURCE POINTER
         00005cf0     0008  
    1728 00005d00     4c00           MOVE    A0,A0                ;WAS IT A ZERO?
    1729 00005d10     ca02           JRZ     RETURN_NOW           ;YEP....NO MORE (RETURN .EQ.)
    1730 00005d20     3dc2           DSJS    A2,NEXT_LET1
    1731 00005d30     5600           CLR     A0                   ;RETURN .EQ.
    1732                             
    1733 00005d40           RETURN_NOW
    1734 00005d40     09af          MMFM    SP,A0,A1,A2,A3,A7
         00005d50     008f  
    1735 00005d60     0960          RETS
    1736                    
    1737                    **************************************************************************
    1738                    *                                                                        *
    1739                    *          ADJ_PAGE                                                   *
    1740                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   41

    1741                    *          THIS SETS THE CURRENT CMOS PAGE FOR ADJUSTMENTS.              *
    1742                    *                                                                        *
    1743                    **************************************************************************
    1744 00005d70           ADJ_PAGE
    1745 00005d70     098f           MMTM    SP,A1
         00005d80     4000  
    1746 00005d90     09c1           MOVI    ADJUST_SELECT,A1      ;THIS IS AUDIT PAGE
         00005da0     0040  
    1747 00005db0     0d5f           CALLA   SET_PAGE             ;SET IT PLEASE
         00005dc0 00000000! 
    1748 00005de0     09af          MMFM    SP,A1
         00005df0     0002  
    1749 00005e00     0960          RETS
    1750                    
    1751                    
    1752                    **************************************************************************
    1753                    *                                                                        *
    1754                    *          DEF_PAGE                                                      *
    1755                    *                                                                        *
    1756                    *          THIS SWITCHES TO "DEFAULT" PAGE.  THE DEFAULT                 *
    1757                    *          PAGE IS THE ONE THAT WE WOULD LIKE TO SMASH                   *
    1758                    *          MOST IN THE CASE OF A CRASH.  AFTER MOST                      *
    1759                    *          PROCESSING, WE SWITCH TO THIS PAGE!                           *
    1760                    *                                                                        *
    1761                    **************************************************************************
    1762 00005e10           DEF_PAGE
    1763 00005e10     01e0           PUSHST                       ;PRESERVE CODES THAT ARE BEING RETURNED
    1764 00005e20     098f           MMTM    SP,A1
         00005e30     4000  
    1765 00005e40     09c1           MOVI    TODAYS_SELECT,A1     ;THIS IS TODAY'S HIGH SCORES PAGE
         00005e50     0000  
    1766 00005e60     0d5f           CALLA   SET_PAGE             ;SET IT PLEASE
         00005e70 00000000! 
    1767 00005e90     09af           MMFM    SP,A1
         00005ea0     0002  
    1768 00005eb0     01c0           POPST
    1769 00005ec0     0960           RETS
    1770                    
    1771                    **************************************************************************
    1772                    *                                                                        *
    1773                    *          FAC_SET                                                       *
    1774                    *                                                                        *
    1775                    *          THIS ROUTINE RESTORES THE FACTORY SETTINGS TO THE             *
    1776                    *          ADJUSTMENTS.                                                  *
    1777                    *                                                                        *
    1778                    **************************************************************************
    1779 00005ed0     098f  FAC_SET  MMTM    SP,A0,A1,A2,A7
         00005ee0     e100  
    1780 00005ef0     0d3f           CALLR   DUMP_FS              ;CLEAR OUT "DUMP" MEMORY
         00005f00     021f  
    1781 00005f10     0d3f           CALLR   NO_CREDS             ;REMOVE ANY COINS
         00005f20     fae6  
    1782                    **************************************************************************
    1783                    *                                                                        *
    1784                    *          CALLR   HS_RESET_COUNTER                                      *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   42

    1785                    *                                                                        *
    1786                    **************************************************************************
    1787 00005f30     0d3f           CALLR   ADJ_PAGE             ;SET CMOS PAGE CORRECTLY
         00005f40     ffe2  
    1788                    
    1789 00005f50     09e1           MOVI    FACTORY_TABLE,A1     ;ROM
         00005f60 00007650' 
    1790 00005f80     09e7           MOVI    ADJUSTORG,A7         ;CMOS
         00005f90 01404000  
    1791 00005fb0     09c2           MOVI    N_ADJUSTS,A2         ;NUMBER OF ADJUSTMENTS ALLOCATED
         00005fc0     001c  
    1792                    
    1793 00005fd0     9620  FACS1    MOVE    *A1+,A0,L            ;FETCH A ROM LONG WORD
    1794 00005fe0     0d5f           CALLA   WC_LONGI             ;WRITE THE WORD TO CMOS
         00005ff0 00000000! 
    1795 00006010     3ca2           DSJS    A2,FACS1             ;WRITE 1 LONG WORD PER ADJUST
    1796                    
    1797 00006020     0d3f           CALLR   SWITCH_FOR_JUMPER    ;CHANGE COINAGE BASED ON JUMPER.
         00006030     0018  
    1798                    
    1799 00006040     0d3f           CALLR   LD_CTAB      ;EXPAND THE CSELCT VALUE
         00006050     0057  
    1800                    
    1801 00006060     0d3f           CALLR   F_ADC_S  ;MAKE THE CHECKSUM CORRECT.
         00006070     ff7b  
    1802                    *
    1803                    *        NOW STORE THE GAME NAME AND REVISION INFO
    1804                    *
    1805 00006080     09e7           MOVI    NAME_REV,A7          ;POINT AT CMOS NAME STORAGE
         00006090 01404bf0  
    1806 000060b0     09e1           MOVI    ROM_NAME,A1          ;POINT AT OUR VERSION
         000060c0 00007590' 
    1807 000060e0     09c2           MOVI    NAME_REV_SIZE,A2     ;MAXIMUM NAME SIZE
         000060f0     001e  
    1808                    
    1809 00006100           NEXT_LETTER
    1810 00006100     8e20           MOVB    *A1,A0               ;FETCH A BYTE
    1811 00006110     0d5f           CALLA   WC_BYTEI             ;WRITE IT TO CMOS
         00006120 00000000! 
    1812 00006140     0b01           ADDI    BYTE_SIZE,A1         ;KICK SOURCE POINTER
         00006150     0008  
    1813 00006160     4c00           MOVE    A0,A0                ;WAS IT A ZERO?
    1814 00006170     ca01           JRZ     NAME_DONE            ;YEP....NO MORE!
    1815 00006180     3d22           DSJS    A2,NEXT_LETTER
    1816                             
    1817 00006190           NAME_DONE
    1818 00006190     09af          MMFM    SP,A0,A1,A2,A7
         000061a0     0087  
    1819 000061b0     0960          RETS
    1820                    
    1821                    **************************************************************************
    1822                    *                                                                        *
    1823                    *          SWITCH_FOR_JUMPER                                             *
    1824                    *                                                                        *
    1825                    *          THIS IS CALLED OUT OF THE FACTORY SETTING SEQUENCE.           *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   43

    1826                    *          IT CHECKS FOR JUMPER COMBINATIONS INDICATING                  *
    1827                    *          GERMAN OR FRENCH GAMES.                                       *
    1828                    *                                                                        *
    1829                    *          THE JUMPERS ARE CONNECTED AS FOLLOWS:                         *
    1830                    *                                                                        *
    1831                    *                     GERMAN JUMPER = BIT 15 OF "COINS"                  *
    1832                    *                     FRENCH JUMPER = BIT 14 OF "COINS"                  *
    1833                    *                                                                        *
    1834                    *          IF BOTH JUMPERS ARE IN, OR BOTH ARE MISSING, THEN             *
    1835                    *          ITS U.S. DEFAULT....LEAVE EVERYTHING ALONE.                   *
    1836                    *                                                                        *
    1837                    *          IF GERMAN IS MISSING (READ AS A 1) THEN USE                   *
    1838                    *          GERMAN 1 COINAGE.                                             *
    1839                    *                                                                        *
    1840                    *          IF FRENCH IS MISSING THEN USE FRENCH 1 COINAGE.               *
    1841                    *                                                                        *
    1842                    **************************************************************************
    1843 000061c0           SWITCH_FOR_JUMPER
    1844 000061c0     098f           MMTM    SP,A0
         000061d0     8000  
    1845 000061e0     05a0           MOVE    @COINS,A0,W          ;GET THE 16 BITS
         000061f0 01c00010  
    1846 00006210     0b80           ANDI    JUMPERS,A0           ;JUST KEEP THE BITS
         00006220 ffff3fff  
    1847 00006240     ca0d           JRZ     USA                  ;BOTH ARE IN...US!
    1848                    
    1849 00006250     0b60           CMPI    JUMPERS,A0           ;ARE BOTH MISSING?
         00006260 ffff3fff  
    1850 00006280     ca09           JRZ     USA                  ;YEP....US.
    1851                    
    1852 00006290     0b60           CMPI    GERMAN_BIT,A0        ;IS JUST THE GERMAN MISSING?
         000062a0 ffff7fff  
    1853 000062c0     cb03           JRNZ    NOGERM               ;NOPE
    1854                    
    1855 000062d0     0d3f           CALLR   DO_GERMAN            ;DO THE GERMAN STUFF
         000062e0     0013  
    1856 000062f0     c002           JRUC    SFJX                 ;AND EXIT
    1857                    *
    1858                    *        MUST BE FRENCH
    1859                    *
    1860 00006300     0d3f  NOGERM   CALLR   DO_FRENCH            ;IF IT IS NOT POSSIBLE....DO IT.
         00006310     0003  
    1861 00006320           USA
    1862 00006320     09af  SFJX     MMFM    SP,A0
         00006330     0001  
    1863 00006340     0960          RETS
    1864                    
    1865 00006350           DO_FRENCH
    1866 00006350     098f           MMTM    SP,A0,A1
         00006360     c000  
    1867 00006370     09c0           MOVI    ADJPRICE,A0          ;AS MASTER PRICER.
         00006380     0001  
    1868 00006390     09e1           MOVI    F1SEL,A1             ;USE FRENCH SELECTOR
         000063a0 00000000! 
    1869 000063c0     0d5f           CALLA   PUT_ADJ
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   44

         000063d0 000059e0' 
    1870 000063f0     09af          MMFM    SP,A0,A1
         00006400     0003  
    1871 00006410     0960          RETS
    1872                    
    1873 00006420           DO_GERMAN
    1874 00006420     098f           MMTM    SP,A0,A1
         00006430     c000  
    1875 00006440     09c0           MOVI    ADJPRICE,A0          ;AS MASTER PRICER.
         00006450     0001  
    1876 00006460     09e1           MOVI    G1SEL,A1             ;USE GERMAN SELECTOR
         00006470 00000000! 
    1877 00006490     0d5f           CALLA   PUT_ADJ
         000064a0 000059e0' 
    1878                    
    1879 000064c0     09c0           MOVI    ADJDIFF,A0
         000064d0     000c  
    1880 000064e0     09c1           MOVI    1,A1                 ;DIFFICULTY 1 FOR GERMANS
         000064f0     0001  
    1881 00006500     0d5f           CALLA   PUT_ADJ
         00006510 000059e0' 
    1882                    
    1883 00006530     09c0           MOVI    ADJBUYIN,A0
         00006540     0019  
    1884 00006550     09c1           MOVI    1,A1                 ;EASY BUY-IN FOR GERMANS
         00006560     0001  
    1885 00006570     0d5f           CALLA   PUT_ADJ
         00006580 000059e0' 
    1886                    
    1887 000065a0     09af          MMFM    SP,A0,A1
         000065b0     0003  
    1888 000065c0     0960          RETS
    1889                    
    1890                    **************************************************************************
    1891                    *                                                                        *
    1892                    *          LD_CTAB                                                       *
    1893                    *                                                                        *
    1894                    *          THIS IS CALLED TO STORE THE CSELCT VALUES FOR                 *
    1895                    *          THE COIN SELECTOR STORED AS ADJPRICE.                         *
    1896                    *                                                                        *
    1897                    **************************************************************************
    1898 000065d0           LD_CTAB
    1899 000065d0     098f           MMTM    SP,A0,A6,A1
         000065e0     c200  
    1900 000065f0     0d5f           CALLA   GET_CSPT             ;A6 POINTS AT CORRECT CSELCT VALUE
         00006600 00000000! 
    1901 00006620     09c0           MOVI    ADJC1,A0             ;FIRST ONE TO STORE
         00006630     0002  
    1902 00006640     94c1  LCT1     MOVE    *A6+,A1,W            ;FETCH A VALUE (WORD)
    1903 00006650     0b81           ANDI    WORD_MASK,A1         ;IN CASE SOMEONE SIGN EXTENDS.
         00006660 ffff0000  
    1904 00006680     0d3f           CALLR   PUT_ADJ              ;WRITE THIS ONE TO MEMORY
         00006690     ff34  
    1905 000066a0     1020           INC     A0
    1906 000066b0     0b40           CMPI    ADJCX,A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   45

         000066c0     fff6  
    1907 000066d0     c2f6           JRLS    LCT1
    1908                    *
    1909                    *        NOW INDICATE THAT VALUES ARE "UNTOUCHED"
    1910                    *
    1911 000066e0     09c1           MOVI    1,A1
         000066f0     0001  
    1912 00006700     09c0           MOVI    ADJVIRGIN,A0         ;THIS SAYS 1ST 8 UNTOUCHED.
         00006710     0015  
    1913 00006720     0d3f           CALLR   PUT_ADJ
         00006730     ff2a  
    1914                    
    1915 00006740     09c0           MOVI    ADJ1ST6,A0           ;THIS SAYS 1ST 6 UNTOUCHED.
         00006750     0017  
    1916 00006760     0d3f           CALLR   PUT_ADJ              ;DONE!
         00006770     ff26  
    1917                    
    1918 00006780     09af          MMFM    SP,A0,A6,A1
         00006790     0043  
    1919 000067a0     0960          RETS
    1920                    
    1921                    **************************************************************************
    1922                    *                                                                        *
    1923                    * HS_RESET_COUNTER                                                       *
    1924                    *          MMTM    SP,A0,A7                                              *
    1925                    *          CALLR   COIN_PAG                                              *
    1926                    *          MOVI    HSR_C,A7                                              *
    1927                    *          CLR     A0                                                    *
    1928                    *          CALLA   WC_LONG                                               *
    1929                    *       MMFM    SP,A0,A7                                                *
    1930                    *       RETS                                                            *
    1931                    *                                                                        *
    1932                    **************************************************************************
    1933                    
    1934                    **************************************************************************
    1935                    *                                                                        *
    1936                    * CC_COIN                                                                *
    1937                    *          MMTM    SP,A7                                                 *
    1938                    *          CALLR   COIN_PAG                                              *
    1939                    *          MOVI    HSR_C,A7                                              *
    1940                    *          CALLA   RC_LONG         ;GET THE TABLE COUNTER                *
    1941                    *          JRZ     CCC_X           ;ITS DOWN                             *
    1942                    *          DEC     A0              ;1 LESS                               *
    1943                    *          CALLA   WC_LONG                                               *
    1944                    * CCC_X MMFM    SP,A7                                                   *
    1945                    *       RETS                                                            *
    1946                    *                                                                        *
    1947                    **************************************************************************
    1948                    
    1949                    **************************************************************************
    1950                    *                                                                        *
    1951                    *          L_MESS                                                        *
    1952                    *                                                                        *
    1953                    *          A8 POINTS AT MESS_MAC FOLLOWED BY MESSAGE TEXT.               *
    1954                    *             POP ALL REGGIES LEAVING A8 POINTING AT TEXT.               *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   46

    1955                    *             AND JUMP TO THE TEXT PROCESSOR!                            *
    1956                    *                                                                        *
    1957                    *          THE MMFM POPS THE ROUTINE TO CALL INTO A1.                    *
    1958                    *                                                                        *
    1959                    *          YOU ***MUST*** USE JSRP TO GET HERE.  WE JUMP TO              *
    1960                    *          THE STRING ROUTINE WHICH WILL RETP BACK TO THE CALLER!        *
    1961                    *                                                                        *
    1962                    **************************************************************************
    1963 000067b0     0b08  L_MESS_LOOP      ADDI    BYTE_SIZE,A8         ;PUSH BEYOND THIS BYTE
         000067c0     0008  
    1964 000067d0     0b08  L_MESS   ADDI    0FH,A8              ;IF IT ENDS IN OTHER THAN ZERO..KICK TO 
         000067e0     000f  
    1965                    *                                     ;NEXT WORD
    1966 000067f0     0b88           ANDI    0FFFFFFF0H,A8        ;AND MASK FRACTIONAL WORD
         00006800 0000000f  
    1967                    
    1968 00006820     09a8           MMFM    A8,A1,A6,A9,A10,A11       ;LOAD UP REGGIES FROM A8.
         00006830     0e42  
    1969 00006840     5600           CLR     A0                        ;NEVER SLEEP!
    1970                    
    1971 00006850     09e7           MOVI    L_RET,A7
         00006860 000068a0' 
    1972 00006880     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
    1973 00006890     0161          JUMP    A1              ;JUMP TO THE ROUTINE.
    1974 000068a0     8f00  L_RET    MOVB    *A8,A0          ;CHECK NEXT BYTE 0=DONE...1=MORE.
    1975 000068b0     cbef           JRNZ    L_MESS_LOOP
    1976 000068c0                    RETP
    1977                             
    1978                    **************************************************************************
    1979                    *                                                                        *
    1980                    *          LM_SETUP                                                      *
    1981                    *                                                                        *
    1982                    *          THIS IS CALLED TO SETUP THE WORLD FOR A STRING                *
    1983                    *          OPERATION, BUT NOT PHYSICALLY MAKE THE CALL.                  *
    1984                    *                                                                        *
    1985                    *          THIS ALLOWS TWEAKING OF REGGIES BEFORE THE CALL.              *
    1986                    *                                                                        *
    1987                    *          LM_FINIS                                                     *
    1988                    *                                                                        *
    1989                    *          THIS IS CALLED ONCE THE MODIFICATIONS ARE MADE!               *
    1990                    *                                                                        *
    1991                    *                                                                        *
    1992                    **************************************************************************
    1993 000068f0     09a8  LM_SETUP MMFM    A8,A1,A6,A9,A10,A11       ;LOAD UP REGGIES FROM A8.
         00006900     0e42  
    1994 00006910     5600           CLR     A0                        ;DON'T SLEEP
    1995 00006920     0960           RETS
    1996                    
    1997 00006930           LM_FINIS
    1998 00006930     0161           JUMP    A1                            ;THIS RUNS ROUTINE AND
    1999                    
    2000                    **************************************************************************
    2001                    *                                                                        *
    2002                    *          GET_CSTR                                                      *
    2003                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   47

    2004                    *          HERE WE FORM THE CREDITS STRING AND                           *
    2005                    *          RETURN IT IN THE GEORGE STRING BUFFER.                        *
    2006                    *          WE RETURN A8 POINTING AT THIS BUFFER.                         *
    2007                    *                                                                        *
    2008                    *          WE ALSO PUT APPROPRIATE FRACTION ON THE                       *
    2009                    *          END IF ADJUSTED ACCORDINGLY.                                  *
    2010                    *                                                                        *
    2011                    **************************************************************************
    2012 00006940     09c0  GET_CSTR MOVI    ADJFREPL,A0                    ;ARE WE IN FREE PLAY?
         00006950     0014  
    2013 00006960     0d5f           CALLA   GET_ADJ
         00006970 00005910' 
    2014 00006990     ca04           JRZ     NOT_FREE
    2015                    
    2016 000069a0     09e8           MOVI    MESS_FREEP,A8                  ;RETURN POINTING AT FREE PLAY MESSAGE
         000069b0 00007bc0' 
    2017 000069d0     c04c           JRUC    GET_CX
    2018                    
    2019 000069e0           NOT_FREE
    2020 000069e0     0d5f           CALLA   STR_OBJ                        ;ALLOCATE AN OBJECT PLEASE
         000069f0 00000000! 
    2021 00006a10     c84a           JRC     NO_SOBJ                        ;NONE TO USE!
    2022                             
    2023 00006a20     09e8           MOVI    MESS_CREDITS,A8                ;POINT AT TEXT PART
         00006a30 00007a30' 
    2024 00006a50     0d5f           CALLA   STRCAT                         ;BUILD THIS IN.
         00006a60 000094e0' 
    2025 00006a80     0d3f           CALLR   CRED_P
         00006a90     fbae  
    2026 00006aa0     4c0a           MOVE    A0,A10                         ;SAVE CREDITS
    2027 00006ab0     0d3f           CALLR   CAT_A0
         00006ac0     0044  
    2028                    *
    2029                    *        NOW WE NEED TO SEE IF WE SHOULD ADD A FRACTION.
    2030                    *
    2031 00006ad0     09c0           MOVI    ADJFRAC,A0
         00006ae0     0009  
    2032 00006af0     0d5f           CALLA   GET_ADJ                        ;CHECK THE ADJUSTMENT
         00006b00 00005910' 
    2033 00006b20     ca2a           JRZ     NSFRAC                         ;DON'T SHOW IT!
    2034                    *
    2035                    *        ADD ANY FRACTION WE HAVE.
    2036                    *
    2037 00006b30     0d3f           CALLR   COIN_PAG                       ;PUT US ON COIN PAGE
         00006b40     fdd6  
    2038 00006b50     0d3f           CALLR   GET_CUNITS                     ;A0 HAS CUNITS
         00006b60     fbc5  
    2039 00006b70     0d3f           CALLR   DEF_PAGE                       ;FLIP CMOS AWAY
         00006b80     ff28  
    2040 00006b90     4c00           MOVE    A0,A0                          ;ZERO?
    2041 00006ba0     ca22           JRZ     NSFRAC                         ;THEN NO FRACTION.
    2042                    *
    2043                    *        WE HAVE A FRACTION...WERE THE CREDITS ZERO?
    2044                    *
    2045 00006bb0     4d4a           MOVE    A10,A10                        ;WE SAVED EM IN A10
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   48

    2046 00006bc0     cb0b           JRNZ    NZM                            ;NON ZERO MANTISSA
    2047                    
    2048 00006bd0     4ce8           MOVE    A7,A8                          ;WALK DOWN STRING LOOKING FOR THE "ZERO"
    2049 00006be0     8f01  KILL_Z   MOVB    *A8,A1                         ;GET A BYTE
    2050 00006bf0     ca08           JRZ     NZM                            ;COULDN'T FIND IT....GO ON.
    2051                    
    2052 00006c00     0b41           CMPI    LET_0,A1                       ;IS THIS THE ZERO?
         00006c10     ffcf  
    2053 00006c20     ca03           JRZ     GOT_ZERO
    2054                    
    2055 00006c30     0b08           ADDI    BYTE_SIZE,A8
         00006c40     0008  
    2056 00006c50     c0f8           JRUC    KILL_Z
    2057                    
    2058 00006c60     5621  GOT_ZERO CLR     A1
    2059 00006c70     8c28           MOVB    A1,*A8                         ;KILL THE ZERO
    2060                    
    2061 00006c80     09e8  NZM      MOVI    MESS_2SPACE,A8                 ;SPACE BET. MANTISSA AND DENMO
         00006c90 00009850' 
    2062 00006cb0     0d5f           CALLA   STRCAT
         00006cc0 000094e0' 
    2063                    
    2064 00006ce0     0d3f  NOT_ZM   CALLR   CAT_A0                         ;ADD A0 ONTO FRACTION
         00006cf0     0021  
    2065                    
    2066 00006d00     09e8           MOVI    MESS_SLASH,A8
         00006d10 00009840' 
    2067 00006d30     0d5f           CALLA   STRCAT                         ;ADD SLASH
         00006d40 000094e0' 
    2068                    
    2069 00006d60     09c0           MOVI    ADJCUNIT,A0                    ;UNITS REQUIRED FOR CREDIT
         00006d70     0005  
    2070 00006d80     0d5f           CALLA   GET_ADJ
         00006d90 00005910' 
    2071 00006db0     0d3f           CALLR   CAT_A0                         ;DENOMINATOR
         00006dc0     0014  
    2072                    
    2073 00006dd0     4ce8  NSFRAC   MOVE    A7,A8                          ;MOVE "OBJECT" TO A8
    2074 00006de0     09e7           MOVI    STRNGRAM,A7                    ;POINT AT STRING RAM
         00006df0 00000000! 
    2075 00006e10     5600           CLR     A0
    2076 00006e20     8c07           MOVB    A0,*A7                         ;STRINGRAM IS NULL
    2077 00006e30     0d5f           CALLA   STRCAT                         ;COPY THE STRING OUT OF OBJECT BLOCK
         00006e40 000094e0' 
    2078 00006e60     4ce8           MOVE    A7,A8
    2079 00006e70     0d5f           CALLA   STR_FREE                       ;AND FREE UP THE OBJECT BLOCK
         00006e80 00000000! 
    2080                    
    2081 00006ea0     0320  GET_CX   CLRC                                   ;RETURN OK
    2082 00006eb0     0960  GET_CXX  RETS
    2083                    *
    2084                    *        NO OBJECTS AVAILABLE TO FORM STRING
    2085                    *
    2086 00006ec0     09e8  NO_SOBJ  MOVI    MESS_NULL,A8
         00006ed0 00009860' 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   49

    2087 00006ef0     0de0           SETC
    2088 00006f00     c0fa           JRUC    GET_CXX                        ;RETURN BLANK STRING!
    2089                    
    2090                    **************************************************************************
    2091                    *                                                                        *
    2092                    *          CAT_A0                                                        *
    2093                    *                                                                        *
    2094                    *          A0 HAS A BINARY NUMBER.  TURN INTO DECIMAL STRING             *
    2095                    *          AND CONCATONATE TO THE STRING WE'RE BUILDING IN               *
    2096                    *          A7.                                                           *
    2097                    *                                                                        *
    2098                    **************************************************************************
    2099 00006f10     098f  CAT_A0   MMTM    SP,A8
         00006f20     0080  
    2100 00006f30     4c08           MOVE    A0,A8                          ;CREDIT COUNT IN A8
    2101 00006f40     0d5f           CALLA   HEXTOASC                       ;STRING
         00006f50 00000000! 
    2102 00006f70     0d5f           CALLA   STRCAT                         ;NOW WE HAVE WHOLE NUMBER.
         00006f80 000094e0' 
    2103 00006fa0     09af          MMFM    SP,A8
         00006fb0     0100  
    2104 00006fc0     0960          RETS
    2105                    
    2106                    **************************************************************************
    2107                    *                                                                        *
    2108                    *          ADD_PROMPT                                                    *
    2109                    *                                                                        *
    2110                    *          THIS IS CALLED ON THE CREDITS PAGE TO ADD A WORD OF           *
    2111                    *          WISDOM BELOW THE CREDITS MESSAGE.  IT PICKS OUT THE           *
    2112                    *          CORRECT MESSAGES AND BLINKS THEM.                             *
    2113                    *                                                                        *
    2114                    **************************************************************************
    2115 00006fd0           ADD_PROMPT
    2116 00006fd0     09e7           MOVI    PROMPT_PROC,A7
         00006fe0 00007060' 
    2117 00007000     0d5f           CALLA   P_FORK               ;START UP ANOTHER W/ SAME ID TO FLASH!
         00007010 00000000! 
    2118 00007030                    RETP
    2119                    
    2120 00007060           PROMPT_PROC
    2121 00007060     09c0           MOVI    ADJFREPL,A0
         00007070     0014  
    2122 00007080     0d5f           CALLA   GET_ADJ
         00007090 00005910' 
    2123 000070b0     cb0e           JRNZ    RF2                  ;ALWAYS READY FOR 2 PLAYERS!
    2124                    
    2125 000070c0     0d3f           CALLR   CRED_P
         000070d0     fb4a  
    2126 000070e0     ca0f           JRZ     PP1
    2127                    
    2128 000070f0     4c01           MOVE    A0,A1                ;PUT CREDITS IN A1
    2129 00007100     09c0           MOVI    ADJCSTRT,A0          ;GET AMOUNT NEEDED TO START.
         00007110     000a  
    2130 00007120     0d5f           CALLA   GET_ADJ
         00007130 00005910' 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   50

    2131 00007150     4801           CMP     A0,A1                ;ARE THERE ENOUGH TO START?
    2132 00007160     c807           JRLO    PP1                  ;NOPE...."INSERT COIN"
    2133                    *
    2134                    *        WE HAVE ENOUGH TO START FOR 1....HOW ABOUT 2?
    2135                    *
    2136 00007170     2420           SLL     1,A0                 ;THIS IS AMOUNT NEEDED FOR 2.
    2137 00007180     4801           CMP     A0,A1
    2138 00007190     c809           JRLO    PP2                  ;NOT ENOUGH.....PRINT 1.
    2139                    *
    2140                    *        01H = READY FOR 2 PLAYERS.  PRESS START.
    2141                    *
    2142 000071a0     09e1  RF2      MOVI    MESS_READY_2,A1
         000071b0 00007d80' 
    2143 000071d0     c008           JRUC    RED_1
    2144                    
    2145 000071e0     09e0  PP1      MOVI    MESS_INS_COIN,A0
         000071f0 00007ee0' 
    2146 00007210     5621           CLR     A1
    2147 00007220     c006           JRUC    RED_2
    2148                    
    2149 00007230     09e1  PP2      MOVI    MESS_READY_1,A1
         00007240 00007c20' 
    2150 00007260     09e0  RED_1    MOVI    MESS_PRESS_START,A0
         00007270 00007ff0' 
    2151 00007290     b20d  RED_2    MOVE    A0,*A13(PDATA),L             ;HOLD MESSAGES
         000072a0     0060  
    2152 000072b0     b22d           MOVE    A1,*A13(PDATA+LONG_SIZE),L
         000072c0     0080  
    2153                    
    2154 000072d0           BLINK_LOOP
    2155 000072d0     b7a8           MOVE    *A13(PDATA),A8,L             ;FIRST MESSAGE
         000072e0     0060  
    2156 000072f0                    JSRP    L_MESS
    2157 00007360     b7a8           MOVE    *A13(PDATA+LONG_SIZE),A8,L   ;2ND MESSAGE
         00007370     0080  
    2158 00007380     ca07           JRZ     BL1                          ;NOT HOME!
    2159                    
    2160 00007390                    JSRP    L_MESS
    2161                    
    2162 00007400           BL1      SLEEP   10H
    2163                    
    2164 00007440     b7a8           MOVE    *A13(PDATA),A8,L
         00007450     0060  
    2165 00007460     0d3f           CALLR   LM_SETUP
         00007470     ff47  
    2166 00007480     56c6           CLR     A6                             ;BLACK
    2167 00007490                    JSRP    LM_FINIS
    2168                    
    2169                    **************************************************************************
    2170                    *                                                                        *
    2171                    *          MOVE    *A13(PDATA+LONG_SIZE),A8,L                            *
    2172                    *          JRZ     BL2                                                   *
    2173                    *          CALLR   LM_SETUP                                              *
    2174                    *          CLR     A6                                                    *
    2175                    *          JSRP    LM_FINIS                                             *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   51

    2176                    *                                                                        *
    2177                    **************************************************************************
    2178                    
    2179 00007500           BL2      SLEEP   10H
    2180 00007540     c0d8           JRUC    BLINK_LOOP
    2181                    
    2182                    **************************************************************************
    2183                    *                                                                        *
    2184                    *       SOUND(S?)                                                        *
    2185                    *                                                                        *
    2186                    **************************************************************************
    2187 00007550     f3fe  COINSND .WORD   0F3FEH,010H,08085H,0            ;"COIN" SOUND
    2188                    
    2189                    **************************************************************************
    2190                    *                                                                        *
    2191                    *          MESSAGE SECTION                                               *
    2192                    *                                                                        *
    2193                    **************************************************************************
    2194 00007590       4e  ROM_NAME .STRING   "NARC REVISION 7.00-GNP"
    2195 00007640       00           .BYTE     0
    2196 00007650                    .EVEN
    2197                    
    2198 00007650           FACTORY_TABLE
    2199 00007650 00000000                   .LONG   0000H  ;ADJ_UNUSED       EQU     0
    2200 00007670 00000001                   .LONG   0001H  ;ADJ_PRICING      EQU     1      ;MASTER PRICING
    2201 00007690 00000001                   .LONG   0001H  ;ADJ_LEFT_MULT    EQU     2
    2202 000076b0 00000004                   .LONG   0004H  ;ADJ_CENTER_MULT  EQU     3
    2203 000076d0 00000001                   .LONG   0001H  ;ADJ_RIGHT_MULT   EQU     4
    2204 000076f0 00000001                   .LONG   0001H  ;ADJ_UNITS_CREDIT EQU     5
    2205 00007710 00000000                   .LONG   0000H  ;ADJ_UNITS_BONUS  EQU     6
    2206 00007730 00000000                   .LONG   0000H  ;ADJ_MIN_UNITS    EQU     7
    2207 00007750 00000004                   .LONG   0004H  ;ADJCDIV          EQU     8       ;COINS PER DOLLAR 
    2208 00007770 00000001                   .LONG   0001H  ;SHOW FRACTIONS           9
    2209 00007790 00000001                   .LONG   0001H  ;ADJ_START_CRED   EQU     10      ;CREDITS REQUIRED TO START
    2210 000077b0 00000001                   .LONG   0001H  ;ADJ_CONT_CRED    EQU     11      ;CREDITS REQUIRED TO CONTINUE
    2211 000077d0 00000003                   .LONG   0003H  ;ADJ_DIFFICULTY   EQU     12
    2212 000077f0 00001388                   .LONG    5000  ;ADJ_HSRESET      EQU     13
    2213 00007810 00000003                   .LONG   0003H  ;ADJ_LIVES        EQU     14
    2214 00007830 00000005                   .LONG   0005H  ;ADJ_ROCKETS      EQU     15
    2215 00007850 00100000                   .LONG  100000H  ;ADJ_EXTRA_MAN    EQU    16      ;SCORE STORED HERE
    2216 00007870 00000000                   .LONG   0000H  ;ADJ_LAST_MAN     EQU     17      ;NO EXTRA MEN BEYOND THIS SCORE
    2217 00007890 00000000                   .LONG   0000H  ;ADJ_AMODE_MUSIC  EQU     18
    2218 000078b0 0000001e                   .LONG   0030   ;MAXIMUM CREDITS          19
    2219                    *
    2220                    *       G_FREE:  REPLACE  ".LONG 0"   WITH  ".LONG 1"   
    2221                    *               
    2222                    *                     .LONG   0001H  ;FREE PLAY                20
    2223 000078d0 00000000                        .LONG   0000H  ;FREE PLAY                20
    2224 000078f0 00000001                   .LONG   0001H  ;NON-ZERO MEANS COIN BLOCK (1ST 8) UNTOUCHED 21
    2225 00007910 00000000                   .LONG   0000H  ;ZERO MEANS NORMAL GORE ... 1 = SOFTEN IT  22
    2226 00007930 00000001                   .LONG   0001H  ;NON-ZERO MEANS 1ST 6 UNTOUCHED.           23
    2227 00007950 00000000                   .LONG   0000H  ;NON-ZERO MEANS NO COIN-SPECIFIC MESSAGE ON COIN PAGE  24
    2228 00007970 00000001                   .LONG   0001H  ;non-zero means buy-in safes allowed without loop-around               2
    2229 00007990 00000000                   .LONG   0000H  ; UNUSED                  26
    2230 000079b0 00000000                   .LONG   0000H  ; UNUSED                  27
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   52

    2231 000079d0 00000000                   .LONG   0000H  ; UNUSED                  28
    2232 000079f0 00000000                   .LONG   0000H  ; UNUSED                  29
    2233 00007a10 00000000                   .LONG   0000H  ; UNUSED                  30
    2234                    *
    2235                    *        A0 = SLEEP
    2236                    *        A1 = ROUTINE
    2237                    *        A6 = COLOR
    2238                    *        A8 = STRING POINTER
    2239                    *        A9 = SCREEN ADDRESS
    2240                    *        A10 = SPACING
    2241                    *        A11 = FONT
    2242                    *        A14 = FLAGS
    2243                    *
    2244                    
    2245 00007a30           MESS_CREDITS
    2246 00007a30       43           .STRING   "CREDITS: "
    2247 00007a78       00           .BYTE     0
    2248 00007a80                    .EVEN
    2249                    *
    2250                    *        NORMAL CREDITS SETUP STRING
    2251                    *
    2252 00007a80           MESS_CNUM
    2253 00007a80                    MESS_MAC  RD20FONT,SPACING20,CP_CX,240,NARCS_LF,STRCNRM,0
    2254                    *
    2255                    *        "LOW" CREDITS SETUP STRING WHEN EXTRA ADVICE ON PRICING
    2256                    *        IS BEING ADDED.
    2257                    *
    2258 00007b20           MESS_LOWNUM
    2259 00007b20                    MESS_MAC  RD20FONT,SPACING20,CP_CX,118H,NARCS_LF,STRCNRM,0
    2260                    
    2261 00007bc0           MESS_FREEP
    2262 00007bc0       46           .STRING   "FREE  PLAY"
    2263 00007c10       00           .BYTE     0
    2264 00007c20                    .EVEN
    2265                    
    2266 00007c20           MESS_READY_1
    2267 00007c20                    MESS_MAC  RD15FONT,SPACING20,CP_CX,14BH,NARCS_YELLOW,STRCNRM,0
    2268 00007cc0       52           .STRING   "READY FOR  1  PLAYER."
    2269 00007d68       00           .BYTE     0,0
    2270 00007d80                    .EVEN
    2271                    
    2272 00007d80           MESS_READY_2
    2273 00007d80                    MESS_MAC  RD15FONT,SPACING20,CP_CX,14BH,NARCS_YELLOW,STRCNRM,0
    2274 00007e20       52           .STRING   "READY FOR  2  PLAYERS."
    2275 00007ed0       00           .BYTE     0,0
    2276 00007ee0                    .EVEN
    2277                    
    2278 00007ee0           MESS_INS_COIN
    2279 00007ee0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,335,NARCS_YELLOW,STRCNRM,0
    2280 00007f80       49           .STRING   "INSERT COIN."
    2281 00007fe0       00           .BYTE     0,0
    2282 00007ff0                    .EVEN
    2283                    
    2284 00007ff0           MESS_PRESS_START
    2285 00007ff0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,355,NARCS_YELLOW,STRCNRM,0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   53

    2286 00008090       50           .STRING   "PRESS START"
    2287 000080e8       00           .BYTE     0,0
    2288 00008100                    .EVEN
    2289                    
    2290                    **************************************************************************
    2291                    *                                                                        *
    2292                    *          DUMPING SOFTWARE                                              *
    2293                    *                                                                        *
    2294                    **************************************************************************
    2295 00008100           DUMP_FS
    2296 00008100     0d3f           CALLR   DUMP_PAGE
         00008110     004f  
    2297 00008120     5600           CLR     A0
    2298 00008130     09e7           MOVI    DUMP_PTR,A7
         00008140 01400000  
    2299 00008160     0d5f           CALLA   WC_WORD              ;SET NUMBER OF DUMPS TO ZERO
         00008170 00000000! 
    2300 00008190     0960           RETS
    2301                    
    2302                    **************************************************************************
    2303                    *                                                                        *
    2304                    *          ADD_DUMP                                                      *
    2305                    *                                                                        *
    2306                    *          THIS IS CALLED TO RECORD A DUMP.  A0 THROUGH A8 ARE           *
    2307                    *          RECORDED IN MEMORY.                                           *
    2308                    *                                                                        *
    2309                    **************************************************************************
    2310              0240  DUMP_SIZE        EQU     9*C_LONG_SIZE     ;9 LONG WORDS.
    2311          01403dc0  DUMP_LAST        EQU     WPCMOS-DUMP_SIZE  ;ALLOW EM TO USE THE WHOLE PAGE!
    2312              000c  MAX_DUMP         EQU     12                ;DON'T HOLD MORE THAN 12
    2313                    
    2314 000081a0     099f  ADD_DUMP MMTM    SP,B0,B1,B2
         000081b0     e000  
    2315 000081c0     098f           MMTM    SP,A0,A1,A7
         000081d0     c100  
    2316 000081e0     0d3f           CALLR   DUMP_PAGE            ;SET CMOS PAGE CORRECTLY.
         000081f0     0041  
    2317 00008200     4e00           MOVE    A0,B0
    2318 00008210     4ee2           MOVE    A7,B2                ;SAVE THESE!
    2319 00008220     4e21           MOVE    A1,B1
    2320                    
    2321 00008230     09e7           MOVI    DUMP_PTR,A7
         00008240 01400000  
    2322 00008260     0d5f           CALLA   RC_WORD              ;GET THE INDICATOR OF HOW MANY.
         00008270 00000000! 
    2323 00008290     09c1           MOVI    DUMP_SIZE,A1
         000082a0     0240  
    2324 000082b0     5e01           MPYU    A0,A1                ;THIS IS OFFSET INTO CMOS FOR THIS ENTRY!
    2325                    
    2326 000082c0     0b21           ADDI    DUMP_DATA,A1         ;NOW A1 POINTS WHERE WE'RE PUTTING THE DATA!
         000082d0 01400020  
    2327 000082f0     0b61           CMPI    DUMP_LAST,A1         ;ARE WE TOO FAR FOR ANOTHER?
         00008300 febfc23f  
    2328 00008320     c929           JRHS    NO_DUMP              ;YEP....SKIP IT
    2329                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   54

    2330 00008330     1020           INC     A0                   ;1 MORE OUT THERE!
    2331 00008340     0d5f           CALLA   WC_WORD              ;CHALK IT!
         00008350 00000000! 
    2332                    
    2333 00008370     4c27           MOVE    A1,A7                ;THIS IS POINTER TO STORE DATA.
    2334 00008380     4e10           MOVE    B0,A0                ;THIS IS A0
    2335 00008390     0d5f           CALLA   WC_LONGI
         000083a0 00000000! 
    2336 000083c0     4e30           MOVE    B1,A0                ;THIS IS A1
    2337 000083d0     0d5f           CALLA   WC_LONGI
         000083e0 00000000! 
    2338 00008400     4c40           MOVE    A2,A0                ;THIS IS A2
    2339 00008410     0d5f           CALLA   WC_LONGI
         00008420 00000000! 
    2340 00008440     4c60           MOVE    A3,A0                ;THIS IS A3
    2341 00008450     0d5f           CALLA   WC_LONGI
         00008460 00000000! 
    2342 00008480     4c80           MOVE    A4,A0                ;THIS IS A4
    2343 00008490     0d5f           CALLA   WC_LONGI
         000084a0 00000000! 
    2344 000084c0     4ca0           MOVE    A5,A0                ;THIS IS A5
    2345 000084d0     0d5f           CALLA   WC_LONGI
         000084e0 00000000! 
    2346 00008500     4cc0           MOVE    A6,A0                ;THIS IS A6
    2347 00008510     0d5f           CALLA   WC_LONGI
         00008520 00000000! 
    2348 00008540     4e50           MOVE    B2,A0                ;THIS IS A7
    2349 00008550     0d5f           CALLA   WC_LONGI
         00008560 00000000! 
    2350 00008580     4d00           MOVE    A8,A0                ;THIS IS A8
    2351 00008590     0d5f           CALLA   WC_LONGI
         000085a0 00000000! 
    2352 000085c0           NO_DUMP 
    2353 000085c0     09af          MMFM    SP,A0,A1,A7
         000085d0     0083  
    2354 000085e0     09bf          MMFM    SP,B0,B1,B2
         000085f0     0007  
    2355 00008600     0960          RETS
    2356                    
    2357 00008610           DUMP_PAGE
    2358 00008610     098f           MMTM    SP,A1
         00008620     4000  
    2359 00008630     09c1           MOVI    DUMP_SELECT,A1      ;THIS IS DUMP PAGE
         00008640     00c0  
    2360 00008650     0d5f           CALLA   SET_PAGE             ;SET IT PLEASE
         00008660 00000000! 
    2361 00008680     09af          MMFM    SP,A1
         00008690     0002  
    2362 000086a0     0960          RETS
    2363                    
    2364 000086b0           DISPDUMP
    2365 000086b0     0d3f           CALLR   DUMP_PAGE
         000086c0     fff4  
    2366 000086d0     09e7           MOVI    DUMP_PTR,A7
         000086e0 01400000  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   55

    2367 00008700     0d5f           CALLA   RC_WORD              ;GET THE INDICATOR OF HOW MANY.
         00008710 00000000! 
    2368 00008730     ca52           JRZ     NOTHIN_TO_DUMP
    2369                    *
    2370 00008740     5729           CLR     A9                   ;THIS IS CURRENT ONE
    2371 00008750     4c08           MOVE    A0,A8                ;THIS IS THE LAST ONE TO DO
    2372                    
    2373 00008760           DO_ANOTHER_DPAGE
    2374 00008760     0d5f           CALLA   CLR_SCRN             ;CLEAR SCREEN
         00008770 00000000! 
    2375 00008790     0d3f           CALLR   DUMP_PAGE
         000087a0     ffe6  
    2376 000087b0     09ca           MOVI    20,A10               ;THIS IS Y COORDIANTE OF CURRENT ONE!
         000087c0     0014  
    2377 000087d0     09cb           MOVI    MAX_DUMP,A11         ;THIS IS MAX NUMBER PER PAGE.
         000087e0     000c  
    2378                    
    2379 000087f0           DO_ANOTHER_DUMP
    2380 000087f0                    JSRP    DO_DUMP
    2381 00008860     0b0a           ADDI    30,A10               ;KICK Y UP
         00008870     001e  
    2382 00008880     1029           INC     A9                   ;KICK TO NEXT DUMP
    2383 00008890     4909           CMP     A8,A9                ;UNTIL THEY'RE ALL DONE!
    2384 000088a0     c938           JRHS    DUMP_DONE            ;WE'RE NOT ALL DONE YET!
    2385                    
    2386 000088b0     3dab           DSJS    A11,DO_ANOTHER_DUMP  ;NOT FOR THIS PAGE EITHER!
    2387                    
    2388 000088c0                    JSRP    WAIT_MUT             ;WATCH FOR STICKS!
    2389 00008930     c0e2           JRUC    DO_ANOTHER_DPAGE
    2390                    
    2391              f0f0  SW_BUTS          EQU     0F0F0H
    2392          03500000  CN_BUTS          EQU     3500000H                    ;BOTH STARTS, ADV, COIN BUT.
    2393          0350f0f0  BUTTONS          EQU     SW_BUTS+CN_BUTS
    2394                    
    2395                    **************************************************************************
    2396                    *                                                                        *
    2397                    *          WAIT_MUT                                                      *
    2398                    *                                                                        *
    2399                    *          THIS IS LIKE "WAIT_BUT"....WAIT FOR ANY BUTTON EXCEPT         *
    2400                    *          THAT IT WILL CLEAR OUT THE DUMPS IF BOTH STICKS ARE PUSHED    *
    2401                    *          DOWN.                                                         *
    2402                    *                                                                        *
    2403                    **************************************************************************
    2404 00008940           WAIT_MUT
    2405 00008940     0d5f           CALLA   FORM_SWS        ;1ST STATE DOESN'T COUNT
         00008950 00000000! 
    2406                    *
    2407                    *        RETURN CURRENT STATE IN A0..PREVIOUS STATE IN A1.
    2408                    *
    2409 00008970           WB1      SLEEP   1
    2410                    
    2411 000089b0     0d5f           CALLA   FORM_SWS
         000089c0 00000000! 
    2412 000089e0     4c02           MOVE    A0,A2               
    2413 000089f0     0b82           ANDI    202H,A2
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   56

         00008a00 fffffdfd  
    2414 00008a20     0b42           CMPI    202H,A2
         00008a30     fdfd  
    2415 00008a40     cb0b           JRNZ    WB2                  ;NOT "CLEAR"
    2416                    
    2417 00008a50                    SOUND1  COINSND
    2418 00008ab0     0d3f           CALLR   DUMP_FS              ;CLEAR OUT THE DUMPS!
         00008ac0     ff63  
    2419 00008ad0     0d3f           CALLR   CLR_DUMP_AUD
         00008ae0     fc6d  
    2420 00008af0     c0e7           JRUC    WB1
    2421                    
    2422 00008b00     03e1  WB2      NOT     A1                   ;LAST = 0 AND NOW = 1 MEANS EDGE!
    2423                    
    2424 00008b10     5020           AND     A1,A0                ;1'S WHERE WE HAVE POSITIVE EDGE.
    2425 00008b20     0b80           ANDI    BUTTONS,A0           ;IS IT A BUTTON? 
         00008b30 fcaf0f0f  
    2426 00008b50     cae1           JRZ     WB1
    2427 00008b60                    SOUND1  BEEP_1                ;MAKE A BEEP
    2428 00008bc0                    RETP
    2429                    
    2430 00008bf0     f3df  BEEP_1   .WORD  0F3DFH,010H,080A2H,0            ;LOW BEEP 
    2431                    
    2432 00008c30           DUMP_DONE
    2433 00008c30                    RETP                         ;AND RETURN TO CALLER!
    2434                    
    2435 00008c60           NOTHIN_TO_DUMP
    2436 00008c60     0d5f           CALLA   CLR_SCRN             ;PRINT SOMEHTING PLEASE
         00008c70 00000000! 
    2437 00008c90     09e8           MOVI    MESS_NODUMP,A8
         00008ca0 000096a0' 
    2438 00008cc0                    JSRP    L_MESS
    2439 00008d30                    RETP
    2440                    
    2441                    **************************************************************************
    2442                    *                                                                        *
    2443                    *          DO_DUMP                                                       *
    2444                    *                                                                        *
    2445                    *          A9 = DUMP NUMBER TO DO                                        *
    2446                    *          A10 = Y POSITION.                                             *
    2447                    *                                                                        *
    2448                    **************************************************************************
    2449 00008d60     098c  DO_DUMP  MMTM    A12,A8,A9,A10,A11
         00008d70     00f0  
    2450                    
    2451 00008d80     09c7           MOVI    DUMP_SIZE,A7
         00008d90     0240  
    2452 00008da0     5f27           MPYU    A9,A7                ;THIS IS OFFSET INTO CMOS FOR THIS ENTRY!
    2453                    
    2454 00008db0     0b27           ADDI    DUMP_DATA,A7         ;NOW A1 POINTS WHERE WE'RE PUTTING THE DATA!
         00008dc0 01400020  
    2455                    *
    2456                    *        Y IS IN A10
    2457                    *
    2458 00008de0     4d43           MOVE    A10,A3               ;Y IN A3
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   57

    2459 00008df0     09c2           MOVI    20,A2                ;STORE X IN A2
         00008e00     0014  
    2460 00008e10     09c5           MOVI    9,A5                 ;NUMBER OF WORDS TO DUMP
         00008e20     0009  
    2461 00008e30           NEXT_ELE
    2462 00008e30     0d5f           CALLA   RC_LONGI             ;GET A WORD
         00008e40 00000000! 
    2463 00008e60     4c04           MOVE    A0,A4                ;HEX IN A4
    2464                    
    2465 00008e70     b2ed           MOVE    A7,*A13(PDATA),L
         00008e80     0060  
    2466 00008e90     b24d           MOVE    A2,*A13(PDATA+LONG_SIZE),L
         00008ea0     0080  
    2467 00008eb0     b26d           MOVE    A3,*A13(PDATA+(2*LONG_SIZE)),L
         00008ec0     00a0  
    2468 00008ed0     b2ad           MOVE    A5,*A13(PDATA+(3*LONG_SIZE)),L
         00008ee0     00c0  
    2469                    
    2470 00008ef0                    JSRP    WRITE_HEX            ;WRITE IT OUT.....A0 = DATA
    2471                    *                                                      A10 = Y
    2472                    *                                                      A11 = X
    2473 00008f60     b7a7           MOVE    *A13(PDATA),A7,L
         00008f70     0060  
    2474 00008f80     b7a2           MOVE    *A13(PDATA+LONG_SIZE),A2,L
         00008f90     0080  
    2475 00008fa0     b7a3           MOVE    *A13(PDATA+(2*LONG_SIZE)),A3,L
         00008fb0     00a0  
    2476 00008fc0     b7a5           MOVE    *A13(PDATA+(3*LONG_SIZE)),A5,L
         00008fd0     00c0  
    2477                    
    2478 00008fe0     0b02           ADDI    48H,A2
         00008ff0     0048  
    2479                    
    2480 00009000     0b45           CMPI    4,A5                 ;WHEN WE'RE DOWN TO 4 SKIP TO NEXT LINE
         00009010     fffb  
    2481 00009020     cb04           JRNZ    NO_SKIP_NOW
    2482                    
    2483 00009030     0b03           ADDI    12,A3                ;PUSH TO 2ND LINE
         00009040     000c  
    2484 00009050     09c2           MOVI    20,A2                ;RE-MARGIN OVER.
         00009060     0014  
    2485                    
    2486 00009070           NO_SKIP_NOW
    2487 00009070     0d85           DSJ     A5,NEXT_ELE
         00009080     ffda  
    2488                    
    2489 00009090     09ac          MMFM    A12,A8,A9,A10,A11
         000090a0     0f00  
    2490 000090b0                    RETP
    2491                    
    2492                    **************************************************************************
    2493                    *                                                                        *
    2494                    *          WRITE_HEX                                                     *
    2495                    *                                                                        *
    2496                    *          A4  = DATA                                                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   58

    2497                    *          A3  = Y                                                       *
    2498                    *          A2  = X                                                       *
    2499                    *                                                                        *
    2500                    **************************************************************************
    2501 000090e0           WRITE_HEX
    2502 000090e0     09e8           MOVI    MESS_DUMP,A8
         000090f0 00009600' 
    2503 00009110     0d3f           CALLR   LM_SETUP             ;SETUP FOR A DUMP!
         00009120     fd7c  
    2504 00009130     4c69           MOVE    A3,A9               ;MOVE Y DOWN
    2505 00009140     2609           SLL     16,A9                ;SHIFT Y INTO PLACE
    2506 00009150     4049           ADD     A2,A9               ;ADD IN X
    2507                    
    2508 00009160     4c88           MOVE    A4,A8
    2509 00009170     5663           CLR     A3                   ;NO COMMAS!
    2510 00009180     0d3f           CALLR   HTOHXASC             ;CONVERT PLEASE!
         00009190     000a  
    2511 000091a0                    JSRP    LM_FINIS
    2512 00009210                    RETP
    2513                    
    2514                    **************************************************************************
    2515                    *                                                                        *
    2516                    * HTOHXASC - CONVERTS A 32 BIT HEX # TO AN ASCII STRING TERMINATED           *
    2517                    *          BY 0                                                                        *
    2518                    * A8 = HEX #                                                                           *
    2519                    * RETURNS:                                                                             *
    2520                    * A8 PTR TO THE STRING                                                                 *
    2521                    * A3 = NON ZERO IF COMMAS ARE TO BE ADDED!                               *
    2522                    *                                                                        *
    2523                    **************************************************************************
    2524 00009240           HTOHXASC
    2525 00009240     098f          MMTM    SP,A1,A2,A9
         00009250     6040  
    2526 00009260     5621          CLR     A1
    2527 00009270     5642          CLR     A2                      ;COMMA COUNT
    2528 00009280     a02f          MOVE    A1,-*SP,W               ;HERE'S THE NULL TERMINATOR
    2529 00009290     1a01           MOVK   16,A1                   ;DIVISOR FOR HEX
    2530 000092a0     4d09          MOVE    A8,A9
    2531 000092b0           HEXTASC2
    2532 000092b0     5708          CLR     A8
    2533 000092c0     5a28          DIVU    A1,A8
    2534 000092d0     0b09          ADDI    '0',A9                  ;MAKE THE REMAINDER ASCII
         000092e0     0030  
    2535 000092f0     0b49           CMPI    '9',A9               ;IS IT IN A-F RANGE?
         00009300     ffc6  
    2536 00009310     c202           JRLS    HHH1
    2537 00009320     0b09           ADDI    7,A9                 ;MAKE ALPHA!
         00009330     0007  
    2538 00009340     a12f  HHH1    MOVE    A9,-*SP,W               ;SAVE HERE
    2539 00009350     4d09          MOVE    A8,A9
    2540 00009360     ca0b          JRZ     HEXTASC3                ;BR = DONE!
    2541 00009370     1022          INC     A2
    2542 00009380     0b42          CMPI    3,A2                    ;COMMA CHECK    
         00009390     fffc  
    2543 000093a0     c8f0          JRLO    HEXTASC2                ;BR = NO COMMA
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   59

    2544                    *
    2545                    *        SEE IF WE'RE DOING COMMAS
    2546                    *
    2547 000093b0     4c63           MOVE    A3,A3                ;COMMAS?
    2548 000093c0     caee           JRZ     HEXTASC2             ;NOPE....IGNORE!
    2549                    
    2550 000093d0     09c2          MOVI    ',',A2
         000093e0     002c  
    2551 000093f0     a04f          MOVE    A2,-*SP,W               ;STUFF A COMMA
    2552 00009400     5642          CLR     A2
    2553 00009410     c0e9          JRUC    HEXTASC2
    2554 00009420           HEXTASC3
    2555 00009420     09e1          MOVI    STRNGRAM,A1             ;STORE HERE FOR BLOW OUT        
         00009430 00000000! 
    2556 00009450     4c28          MOVE    A1,A8
    2557                    
    2558 00009460           HEXTASC4
    2559 00009460     95e9          MOVE    *SP+,A9,W
    2560 00009470     8d21          MOVB    A9,*A1
    2561 00009480     1101          ADDK    8,A1
    2562 00009490     4d29          MOVE    A9,A9
    2563 000094a0     cbfb          JRNZ    HEXTASC4
    2564 000094b0     09af          MMFM    SP,A1,A2,A9
         000094c0     0206  
    2565 000094d0     0960           RETS
    2566                    
    2567                    **************************************************************************
    2568                    *                                                                        *
    2569                    *          STRCAT                                                        *
    2570                    *                                                                        *
    2571                    *          THIS IS CALLED TO CONCATONATE 2 STRINGS.                      *
    2572                    *                                                                        *
    2573                    *          A7 <--- <A7><A8>                                              *
    2574                    *                                                                        *
    2575                    *          THAT IS.......CONCATONATE A8 ONTO THE END OF A7.              *
    2576                    *                                                                        *
    2577                    **************************************************************************
    2578 000094e0     098f  STRCAT   MMTM    SP,A7,A0,A8
         000094f0     8180  
    2579 00009500     8ee0  STRC2    MOVB    *A7,A0          ;WALK DOWN A7 TO ITS ZERO.
    2580 00009510     ca03           JRZ     STRC1           ;WE'RE THERE!
    2581                    
    2582 00009520     0b07           ADDI    BYTE_SIZE,A7    ;KICK TO NEXT BYTE
         00009530     0008  
    2583 00009540     c0fb           JRUC    STRC2
    2584                    *
    2585                    *        NOW A7 POINTS AT ITS ZERO.
    2586                    *
    2587 00009550     8f00  STRC1    MOVB    *A8,A0          ;GET A BYTE FROM 2ND STRING
    2588 00009560     8c07           MOVB    A0,*A7          ;ADD THIS TO 1ST STRING
    2589 00009570     0b07           ADDI    BYTE_SIZE,A7
         00009580     0008  
    2590 00009590     0b08           ADDI    BYTE_SIZE,A8
         000095a0     0008  
    2591 000095b0     4c00           MOVE    A0,A0           ;DID WE JUST MOVE TERMINATOR?
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:08 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

Audits and Adjustments                                               PAGE   60

    2592 000095c0     cbf8           JRNZ    STRC1           ;NOPE...MOVE ANOTHER
    2593                    
    2594 000095d0     09af          MMFM    SP,A7,A0,A8
         000095e0     0181  
    2595 000095f0     0960          RETS
    2596                    
    2597 00009600           MESS_DUMP
    2598 00009600                    MESS_MAC  RD7FONT,SPACING07,30,355,NARCS_WHITE,STRLNRM,0
    2599                    
    2600 000096a0           MESS_NODUMP
    2601 000096a0                    MESS_MAC  RD15FONT,SPACING20,256,200,NARCS_ORANGE,STRCNRM,0
    2602 00009740       4e           .STRING "NOTHING HERE....PRESS ADVANCE!"
    2603 00009830       00           .BYTE   0,0
    2604 00009840                    .EVEN
    2605                    
    2606 00009840       2f  MESS_SLASH .STRING "/"
    2607 00009848       00             .BYTE 0
    2608 00009850                      .EVEN
    2609                    
    2610 00009850       20  MESS_2SPACE .STRING "  "
    2611 00009860       00  MESS_NULL   .BYTE 0
    2612 00009870                       .EVEN
    2613                    
    2614 00009870           SETUP_1_OF_3
    2615 00009870                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_13,NARCS_LASER,STRCNRM,0
    2616 00009910           SETUP_2_OF_3
    2617 00009910                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_23,NARCS_LASER,STRCNRM,0
    2618 000099b0           SETUP_3_OF_3
    2619 000099b0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_33,NARCS_LASER,STRCNRM,0
    2620                    
    2621 00009a50           SETUP_1_OF_2
    2622 00009a50                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_12,NARCS_LASER,STRCNRM,0
    2623                    
    2624 00009af0           SETUP_2_OF_2
    2625 00009af0                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_22,NARCS_LASER,STRCNRM,0
    2626                    
    2627 00009b90           SETUP_1_OF_1
    2628 00009b90                    MESS_MAC  RD15FONT,SPACING20,CP_CX,CP_11,NARCS_LASER,STRCNRM,0
    2629                    
    2630 00009c30           CPYR_MES
    2631 00009c30                    MESS_MAC  RD7FONT,SPACING07,CP_CX,182H,NARCS_GREY,STRCNRM,0
    2632 00009cd0       22           .BYTE   ASCII_DQ
    2633 00009cd8       4e           .STRING "NARC"  
    2634 00009cf8       22           .BYTE   ASCII_DQ
    2635 00009d00       20           .STRING " COPYRIGHT 1988 WILLIAMS ELECTRONICS GAMES INC."
    2636 00009e78       00           .BYTE 0,0
    2637 00009e90                    .EVEN
    2638                    
    2639                             .END

 No Errors,  No Warnings
