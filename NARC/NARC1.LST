TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .FILE   "NARC1.ASM"
       3                    
       4                    **************************************************************************
       5                    *                                                                        *
       6                    *       COPYRIGHT (C) 1988 WILLIAMS ELECTRONICS GAMES, INC.              *
       7                    *       ALL RIGHTS RESERVED.                                             *
       8                    *                                                                        *
       9                    **************************************************************************
      10                    
      11                            .WIDTH  132
      12                            .OPTION B,D,L
      13                            .MNOLIST
      14                    
      15                    *       GET THE SYSTEM STUFF
      16                            .INCLUDE        "video\MPROCEQU.ASM"    ;MPROC equates
      17                            .INCLUDE        "video\DISPEQU.ASM"     ;Display processor equates
      18                            .INCLUDE        "video\GSP.INC" ;GSP assembler equates
      19                            .INCLUDE        "video\SYS.INC" ;Zunit system equates
      20                            .INCLUDE        "video\MACROS.HDR"      ;Macros, Yeah!
      21                    *       LOCAL STUFF
      22                            .INCLUDE        "NARCEQU.ASM"           ;NARC Equates
      23                            .INCLUDE        "NARCTEQU.ASM"          ;NARC Todd Equates
      24                            .INCLUDE        "NARCAUDN.ASM"
      25                    ***     .INCLUDE        "IMGTBL.GLO"            ;Image Label Equates
      26                            .INCLUDE        "NARCFRAG.GLO"
      27                    
      28                    *LABELS IN THIS MODULE
      29                            .GLOBAL FILLAREA,FINDBB,ANIMATCK
      30                    *LABELS EXTERNAL TO THIS MODULE
      31                            .GLOBAL BUGBURN,LDEXP1
      32                            .GLOBAL CHINADR1,CHINADR2,CHINADR3,ARMDR1,ARMDR2,ARMDR3,GET_ADJ
      33                            .GLOBAL BIGDOOR1,BIGDOOR2,BIGDOOR3,HOTWIN1
      34                    
      35 00000000                    .BSS   NOAUTOE,16                      ;DEBUGGERY
      36                    
      37 00000000                   .EVEN
      38 00000000                   .TEXT
      39                    
      40 00000000     c080  SNDSIDE JAUC    ONESND
         00000010 00000000! 
      41                    
      42                    **************************************************************************
      43                    *                                                                        *
      44                    * OBJECT BLOCK INITIALIZATION ROUTINES                                   *
      45                    *                                                                        *
      46                    **************************************************************************
      47                    **************************************************************************
      48                    *                                                                        *
      49                    * GPALOBJ - GET A PALETTE AND AN OBJECT BLOCK                            *
      50                    * A14 = PTR TO PLAYER INITIALIZATION TABLE.                              *
      51                    * RETURNS:                                                               *
      52                    * A0 = PTR TO OBJECT                                                     *
      53                    * Z BIT SET = FAILURE,A0 = 0                                             *
      54                    *                                                                        *
      55                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    2

      56 00000030           GPALOBJ
      57 00000030     0d5f          CALLA   GETOBJ
         00000040 00000000! 
      58 00000060     ca08          JRZ     GPALOBJX                ;OBJECT BLOCK FAILURE
      59 00000070     0d5f          CALLA   INITPAL                 ;GET THE PALETTE
         00000080 00000000! 
      60 000000a0     cb04          JRNZ    GPALOBJX
      61 000000b0     0d5f          CALLA   FREEOBJ
         000000c0 00000000! 
      62 000000e0     5600          CLR     A0
      63 000000f0           GPALOBJX
      64 000000f0     0960          RETS
      65                    **************************************************************************
      66                    *                                                                        *
      67                    * GBPALOBJ - GET A BACKGROUND PALETTE AND AN OBJECT BLOCK                *
      68                    * A14 = PTR TO PLAYER INITIALIZATION TABLE.                              *
      69                    * RETURNS:                                                               *
      70                    * A0 = PTR TO OBJECT                                                     *
      71                    * Z BIT SET = FAILURE,A0 = 0                                             *
      72                    *                                                                        *
      73                    **************************************************************************
      74 00000100           GBPALOBJ
      75 00000100     0d5f          CALLA   GETOBJ
         00000110 00000000! 
      76 00000130     ca08          JRZ     GBPALOX                 ;OBJECT BLOCK FAILURE
      77 00000140     0d5f          CALLA   INITBPAL                ;GET THE BACKGROUND PALETTE
         00000150 00000000! 
      78 00000170     cb04          JRNZ    GBPALOX
      79 00000180     0d5f          CALLA   FREEOBJ
         00000190 00000000! 
      80 000001b0     5600          CLR     A0
      81 000001c0           GBPALOX
      82 000001c0     0960          RETS
      83                    
      84                    *
      85                    *SHVELCPY - COPY VELOCITIES TO SHADOW (IF ANY)
      86                    *A8=OBJECT
      87                    *
      88 000001d0           SHVELCPY: 
      89 000001d0     098f          MMTM    SP,A0,A1
         000001e0     c000  
      90 000001f0     b700          MOVE    *A8(OSHAD),A0,L
         00000200     0240  
      91 00000210     ca09          JREQ    SHVLCPX
      92 00000220     bb00          MOVE    *A8(OXVEL),*A0(OXVEL),L
         00000230     0040  
         00000240     0040  
      93 00000250     b701          MOVE    *A8(OZVEL),A1,L
         00000260     00e0  
      94 00000270     b220          MOVE    A1,*A0(OZVEL),L
         00000280     00e0  
      95 00000290     b220          MOVE    A1,*A0(OYVEL),L
         000002a0     0060  
      96 000002b0           SHVLCPX:
      97 000002b0     09af          MMFM    SP,A0,A1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    3

         000002c0     0003  
      98 000002d0     0960          RETS
      99                    
     100                    *
     101                    *SHVELFLP - COPY SHADOW VELOCITY AND FLIP HIM
     102                    *A8=OBJECT
     103                    *A3=OXVEL
     104 000002e0           SHVELFLP:
     105 000002e0     0d3f          CALLR   SHVELCPY
         000002f0     ffed  
     106 00000300     b50e          MOVE    *A8(OXVEL+10H),A14,W            ;TEST X VELOCITY
         00000310     0050  
     107                    *FLIPDUDE
     108                    *A8=OBJECT, N=SIGN OF XVEL
     109 00000320           FLP:
     110 00000320     ce80          JAN     YFLP
         00000330 00004cf0' 
     111 00000350     c080          JAUC    NOYFLP
         00000360 00004d70' 
     112                    
     113                    **************************************************************************
     114                    *                                                                        *
     115                    * OBJOFF - TURN AN OBJECT "OFF" I.E. SET DMA OUTPUT TO 0                 *
     116                    * A0 = PTR TO OBJECT BLOCK                                               *
     117                    *                                                                        *
     118                    **************************************************************************
     119 00000380           OBJOFF
     120 00000380                   PUSH    A4
     121 00000390     b404          MOVE    *A0(OFLAGS),A4,W
         000003a0     0100  
     122 000003b0     2f84          SRL     4,A4
     123 000003c0     2484          SLL     4,A4
     124 000003d0     b080          MOVE    A4,*A0(OFLAGS),W
         000003e0     0100  
     125 000003f0                   PULL    A4
     126 00000410     0960          RETS
     127                    **************************************************************************
     128                    *                                                                        *
     129                    * OBJON - TURN AN OBJECT "ON" I.E. SET DMA OUTPUT TO WRITE <> 0          *
     130                    * A0 = PTR TO OBJECT BLOCK                                               *
     131                    *                                                                        *
     132                    **************************************************************************
     133 00000420           OBJON
     134 00000420                   PUSH    A4
     135 00000430     b404          MOVE    *A0(OFLAGS),A4,W
         00000440     0100  
     136 00000450     2f84          SRL     4,A4
     137 00000460     2484          SLL     4,A4
     138 00000470     1044          ADDK    2,A4
     139 00000480     b080          MOVE    A4,*A0(OFLAGS),W
         00000490     0100  
     140 000004a0                   PULL    A4
     141 000004c0     0960          RETS
     142                    
     143                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    4

     144                    *                                                                        *
     145                    * Z POSITIONING ROUTINES                                                 *
     146                    *                                                                        *
     147                    **************************************************************************
     148                    
     149                    *
     150                    *XZCHK
     151                    *CALLING PARAMETERS:
     152                    *A8=OBJECT SEEKING
     153                    *A0=OBJECT SEEKED
     154                    *A5=X RANGE
     155                    *A6=Z RANGE
     156                    *RETURNS:
     157                    *CARRY SET IF HE IS CLOSE ENOUGH
     158                    *A1=DELTA X
     159                    *A2=DELTA Z
     160                    *A3=ABS DELTA X
     161                    *A4=ABS DELTA Z
     162 000004d0           XZCHK:
     163 000004d0     4c04          MOVE    A0,A4
     164 000004e0     0d3f          CALLR   GETANIX                 ;GET X ANIMATION POINT
         000004f0     0066  
     165 00000500     4c03          MOVE    A0,A3
     166 00000510                   SWAP    A4,A8
     167 00000540     0d3f          CALLR   GETANIX
         00000550     0060  
     168 00000560     4c01          MOVE    A0,A1
     169 00000570     4d00          MOVE    A8,A0
     170 00000580     4c88          MOVE    A4,A8
     171 00000590     b504          MOVE    *A8(OZPOS),A4,W        
         000005a0     00d0  
     172 000005b0     b402          MOVE    *A0(OZPOS),A2,W
         000005c0     00d0  
     173 000005d0     4482          SUB     A4,A2
     174 000005e0     4461          SUB     A3,A1
     175 000005f0     4c23          MOVE    A1,A3
     176 00000600     4c44          MOVE    A2,A4
     177 00000610     0383          ABS     A3
     178 00000620     0384          ABS     A4
     179 00000630     48a3          CMP     A5,A3
     180 00000640     c901          JRNC    XZCHKX
     181 00000650     48c4          CMP     A6,A4
     182 00000660           XZCHKX:
     183 00000660     0960          RETS
     184                            
     185                    **************************************************************************
     186                    *                                                                        *
     187                    * CLRPDATA - CLEAR THE PDATA AREA OF A PROCESS BLOCK                     *
     188                    * A13 = PTR TO PROCESS BLOCK                                             *
     189                    *                                                                        *
     190                    **************************************************************************
     191 00000670           CLRPDATA
     192 00000670     098f          MMTM    SP,A1,A6,A14
         00000680     4202  
     193 00000690     4dae          MOVE    A13,A14
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    5

     194 000006a0     5621          CLR     A1
     195 000006b0     0b0e          ADDI    PDATA,A14
         000006c0     0060  
     196 000006d0     09c6          MOVI    (PSDATA-PDATA)/16,A6
         000006e0     0024  
     197 000006f0           CLRSHL
     198 000006f0     2fe6          SRL     1,A6
     199 00000700     c901          JRNC    CLRPDL
     200 00000710     902e          MOVE    A1,*A14+,W      ;STUFF THE ODD WORD     
     201 00000720           CLRPDL
     202 00000720     922e          MOVE    A1,*A14+,L              
     203 00000730     3c46          DSJS    A6,CLRPDL
     204 00000740     09af          MMFM    SP,A1,A6,A14
         00000750     4042  
     205 00000760     0960          RETS
     206                    **************************************************************************
     207                    *                                                                        *
     208                    * DFRMGRND - RETURNS THE DISTANCE FROM THE BOTTOM OF                     *
     209                    *                  AN OBJECT TO THE "GROUND."                            *
     210                    * A8 = OBJECT BLOCK                                                      *
     211                    * RETURN(S)                                                              *
     212                    * A1 = DISTANCE FROM GROUND (16 BITS)                                    *
     213                    * STATUS BITS SET ACCORDING TO THE SIGN OF A1                            *
     214                    * NOTE: MAX ACCEPTABLE Y = +32K, MIN ACCEPTABLE Y = -32K                 *
     215                    *                                                                        *
     216                    **************************************************************************
     217 00000770           DFRMGRND
     218 00000770                   PUSH    A2
     219 00000780     b501          move    *A8(OYPOS),A1,W
         00000790     00b0  
     220 000007a0     b502          move    *A8(OSIZEY),A2,W
         000007b0     0150  
     221 000007c0     4022          add     A1,A2                   ;A2 = BOTTOM Y
     222 000007d0     b501          move    *A8(OZPOS),A1,W
         000007e0     00d0  
     223 000007f0     4441          sub     A2,A1
     224 00000800     0b01          addi    ZORIGIN,A1
         00000810     00c8  
     225 00000820     09af          mmfm    SP,A2
         00000830     0004  
     226 00000840     0960          RETS
     227                    
     228                    **************************************************************************
     229                    *                                                                        *
     230                    * GET BOTTOM Y OF AN OBJECT                                              *
     231                    * A8 = OBJECT BLOCK PTR                                                  *
     232                    * RETURN(S)                                                              *
     233                    * A1 = 16 BIT BOTTOM Y IN LSW                                            *
     234                    * STATUS SET ACCORDING TO THE BOTTOM Y                                   *
     235                    *NOTE: MAKE SURE OBLOCK IS INIT'D WITH GSAGOF BEFORE CALLING             *
     236                    *                                                                        *
     237                    **************************************************************************
     238 00000850           GETBOTY
     239 00000850                   PUSH    A2
     240 00000860     b501          MOVE    *A8(OYPOS),A1,W         ;GET Y POSITION
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    6

         00000870     00b0  
     241 00000880     b502          MOVE    *A8(OSIZEY),A2,W        ;GET THE CURRENT SIZE
         00000890     0150  
     242 000008a0     4041          ADD     A2,A1                   ;A1 = BOTTOM Y
     243 000008b0     09af          MMFM    SP,A2
         000008c0     0004  
     244 000008d0     0960          RETS
     245                    
     246                    **************************************************************************
     247                    *                                                                        *
     248                    * GETCPNT - RETURNS THE CENTER XY POSITION OF A GIVEN IMAGE              *
     249                    * A8 = IMAGE OBLOCK                                                      *
     250                    * RETURN(S)                                                              *
     251                    * A1 = CENTER Y:CENTER X                                                         *
     252                    *                                                                        *
     253                    **************************************************************************
     254 000008e0     a20f  GETCPNT MOVE    A0,-*SP,L
     255 000008f0     b500          MOVE    *A8(OYPOS),A0,W
         00000900     00b0  
     256 00000910     2600          SLL     16,A0
     257 00000920     b501          MOVE    *A8(OXPOS),A1,W
         00000930     0090  
     258 00000940     ec20          MOVX    A1,A0
     259 00000950     b701          MOVE    *A8(OSIZE),A1,L
         00000960     0140  
     260 00000970     0d3f          CALLR   GETCENT
         00000980     0004  
     261 00000990     2600          SLL     16,A0
     262 000009a0     ee01          MOVY    A0,A1
     263 000009b0     97e0          MOVE    *SP+,A0,L
     264 000009c0     0960          RETS
     265                    
     266                    **************************************************************************
     267                    *                                                                        *
     268                    * GETCENT - RETURNS THE CENTER POINT OF A BOX                            *
     269                    * A0 = UPPER LEFT Y:UPPER LEFT X                                         *
     270                    * A1 = Y_SIZE:X_SIZE                                                     *
     271                    * RETURN(S)                                                              *
     272                    * A0 = CENTER Y(LSW)                                                     *
     273                    * A1 = CENTER X(LSW)                                                     *
     274                    *                                                                        *
     275                    **************************************************************************
     276 000009d0     a24f  GETCENT MOVE    A2,-*SP,L
     277 000009e0     ee22          MOVY    A1,A2
     278 000009f0     2de2          SRL     17,A2           ;YSIZE/2
     279 00000a00     2602          SLL     16,A2           ;BACK TO Y HALF
     280 00000a10     2601          SLL     16,A1           ;CLEAR Y
     281 00000a20     2de1          SRL     17,A1           ;XSIZE/2
     282 00000a30     ee41          MOVY    A2,A1
     283 00000a40     e020          ADDXY   A1,A0           ;OFFSET TO CENTER
     284 00000a50     5621          CLR     A1
     285 00000a60     ec01          MOVX    A0,A1           ;RETURN THESE IN USEFUL POSITIONS
     286 00000a70     2e00          SRL     16,A0
     287 00000a80     97e2          MOVE    *SP+,A2,L
     288 00000a90     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    7

     289                    
     290                    **************************************************************************
     291                    *                                                                        *
     292                    * GETSCRRX - THE THE WORLD X COORDINATE OF THE SCREEN RIGHT END          *
     293                    * RETURNS                                                                *
     294                    * A0 = SCREEN RIGHT X, 32 BITS                                           *
     295                    *                                                                        *
     296                    **************************************************************************
     297 00000aa0           GETSCRRX
     298 00000aa0                   PUSH    A2
     299 00000ab0     05a0          MOVE    @SCRNLR,A0,W
         00000ac0 00000000! 
     300 00000ae0     05a2          MOVE    @WORLDTL,A2,W
         00000af0 00000000! 
     301 00000b10     4040          ADD     A2,A0                   ;GET SCREEN LOWER RT.
     302 00000b20     2600          SLL     16,A0
     303 00000b30                   PULL    A2
     304 00000b50     0960          RETS
     305                    
     306                    *
     307                    *GETANIX - GET ANIMATION POINT X COORD
     308                    *CALLING PARMS: A8=OBJECT
     309                    *RETURNS A0=16 BIT WORLD COORD OF UPPER LEFT
     310                    *
     311 00000b60           GETANIX:
     312 00000b60     098f          MMTM    SP,A1,A2
         00000b70     6000  
     313 00000b80     b701          MOVE    *A8(OIMG),A1,L
         00000b90     0180  
     314 00000ba0     b422          MOVE    *A1(IANIOFF),A2,W
         00000bb0     0020  
     315 00000bc0     b500          MOVE    *A8(OFLAGS),A0,W
         00000bd0     0100  
     316 00000be0     1f60          BTST    B_FLIPH,A0
     317 00000bf0     ca05          JRZ     GETAX1
     318 00000c00     b420          MOVE    *A1(ISIZE),A0,W
         00000c10     0000  
     319 00000c20     4440          SUB     A2,A0
     320 00000c30     1420          DEC     A0
     321 00000c40     4c02          MOVE    A0,A2
     322 00000c50           GETAX1:
     323 00000c50     b500          MOVE    *A8(OXPOS),A0,W
         00000c60     0090  
     324 00000c70     4040          ADD     A2,A0
     325 00000c80     09af          MMFM    SP,A1,A2
         00000c90     0006  
     326 00000ca0     0960          RETS
     327                    
     328                    **************************************************************************
     329                    *                                                                        *
     330                    * GETZMID - GET THE Z MIDPOINT OF AN OBJECT.                             *
     331                    * A8 = PTR TO OBJECT                                                     *
     332                    * RETURNS:                                                               *
     333                    * A0 = 32 BIT Z CENTER                                                   *
     334                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    8

     335                    **************************************************************************
     336 00000cb0           GETZMID
     337 00000cb0     098f          MMTM    SP,A1,A2
         00000cc0     6000  
     338 00000cd0     b702          MOVE    *A8(OZSIZ),A2,L
         00000ce0     01b0  
     339 00000cf0     ee41          MOVY    A2,A1                           ;A1 = OZPLUS
     340 00000d00     2e01          SRL     16,A1
     341 00000d10     0522          ZEXT    A2
     342 00000d20     4022          ADD     A1,A2                           ;A2 = TOTAL Z WIDTH
     343 00000d30     25e2          SLL     15,A2                           ;DIVIDE FOR HALF
     344 00000d40     2601          SLL     16,A1
     345 00000d50     b700          MOVE    *A8(OZVAL),A0,L
         00000d60     00c0  
     346 00000d70     4020          ADD     A1,A0                           ;GET TO THE EDGE
     347 00000d80     4440          SUB     A2,A0                           ;GO BACK TO MIDPOINT    
     348 00000d90     09af          MMFM    SP,A1,A2        
         00000da0     0006  
     349 00000db0     0960          RETS
     350                    
     351                    **************************************************************************
     352                    *                                                                        *
     353                    * CLRWORLD - CLEAR ALL WORLD COORDINATES AND SCROLL VELOCITIES.          *
     354                    *                                                                        *
     355                    **************************************************************************
     356 00000dc0           CLRWORLD
     357 00000dc0                   PUSH    A0
     358 00000dd0     5600          CLR     A0
     359 00000de0     0780          MOVE    A0,@SCROLLX,L           ;X SCROLL VALUE
         00000df0 00000000! 
     360 00000e10     0780          MOVE    A0,@SCROLLY,L           ;Y SCROLL VALUE
         00000e20 00000000! 
     361 00000e40     0780          MOVE    A0,@WORLDTLX,L          ;TOP LEFT X SCREEN COORD (WORLD)
         00000e50 00000000! 
     362 00000e70     0780          MOVE    A0,@WORLDTLY,L          ;TOP LEFT Y SCREEN COORD (WORLD)
         00000e80 00000000! 
     363 00000ea0     0780          MOVE    A0,@WORLDTL,L
         00000eb0 00000000! 
     364 00000ed0     0780          MOVE    A0,@BAK2TLY,L           ;TOP LFT Y SLOW SCROLL BACKGROUND
         00000ee0 00000000! 
     365 00000f00     0780          MOVE    A0,@BAK2TLX,L           ;TOP LFT X SLOW SCROLL BACKGROUND
         00000f10 00000000! 
     366 00000f30     09e0          MOVI    SCRNST,A0
         00000f40 00500000  
     367 00000f60     0780          MOVE    A0,@SCRNTL,L
         00000f70 00000000! 
     368 00000f90     09e0          MOVI    SCRNEND,A0
         00000fa0 01900200  
     369 00000fc0     0780          MOVE    A0,@SCRNLR,L
         00000fd0 00000000! 
     370 00000ff0                   PULL    A0
     371 00001010     0960          RETS
     372                    
     373                    **************************************************************************
     374                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE    9

     375                    * GETSCRBY - THE THE WORLD Y COORDINATE OF THE SCREEN BOTTOM             *
     376                    * RETURNS                                                                *
     377                    * A0 = SCREEN BOTTOM Y                                                   *
     378                    *                                                                        *
     379                    **************************************************************************
     380 00001020           GETSCRBY
     381 00001020                   PUSH    A2
     382 00001030     05a0          MOVE    @SCRNLR+16,A0,W
         00001040 00000010! 
     383 00001060     05a2          MOVE    @WORLDTL+16,A2,W
         00001070 00000010! 
     384 00001090     4040          ADD     A2,A0                   ;GET SCREEN BOTTOM Y
     385 000010a0     2600          SLL     16,A0                   ;MAKE IT A 32 BIT VALUE
     386 000010b0                   PULL    A2
     387 000010d0     0960          RETS
     388                    
     389                    **************************************************************************
     390                    *                                                                        *
     391                    * SETZPOS - SETUP OBJECTS Z POSITION                                     *
     392                    *           BASED ON OBJECTS BOTTOM Y POSITION                           *
     393                    * A0 = OBJECT BLOCK                                                      *
     394                    *                                                                        *
     395                    **************************************************************************
     396 000010e0     a22f  SETZPOS MOVE    A1,-*SP,L
     397 000010f0     0d3f          CALLR   GETZPOS
         00001100     001f  
     398 00001110     2601          SLL     16,A1
     399 00001120     b220          MOVE    A1,*A0(OZVAL),L
         00001130     00c0  
     400 00001140     97e1          MOVE    *SP+,A1,L
     401 00001150     0960          RETS
     402                    
     403                    **************************************************************************
     404                    *                                                                        *
     405                    * SETYFRMZ - SET THE OBJECTS Y POSITION ACCORDING TO IT'S CURRENT Z      *
     406                    * A0 = OBJECT                                                            *
     407                    *                                                                        *
     408                    **************************************************************************
     409 00001160           SETYFRMZ
     410 00001160     098f          MMTM    SP,A1,A2
         00001170     6000  
     411 00001180     b601          MOVE    *A0(OZVAL),A1,L
         00001190     00c0  
     412 000011a0     0b21          ADDI    ZORIGIN*10000H,A1
         000011b0 00c80000  
     413 000011d0     b402          MOVE    *A0(OSIZEY),A2,W
         000011e0     0150  
     414 000011f0     2602          SLL     16,A2
     415 00001200     4441          SUB     A2,A1
     416 00001210     b220          MOVE    A1,*A0(OYVAL),L
         00001220     00a0  
     417 00001230     09af          MMFM    SP,A1,A2
         00001240     0006  
     418 00001250     0960          RETS
     419                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   10

     420                    *                                                                        *
     421                    * SETTZPOS - SET OBJECTS Z POS. BASED ON TOP Y POSITION                  *
     422                    * A0 = PTR TO OBJECT                                                     *
     423                    *                                                                        *
     424                    **************************************************************************
     425 00001260           SETTZPOS
     426 00001260                   PUSH    A1
     427 00001270     b401          MOVE    *A0(OYPOS),A1,W
         00001280     00b0  
     428 00001290     0be1          SUBI    ZORIGIN,A1      ;GET Z POSITION                         
         000012a0     ff37  
     429 000012b0     b020          MOVE    A1,*A0(OZPOS),W
         000012c0     00d0  
     430 000012d0                   PULL    A1
     431 000012f0     0960          RETS
     432                    
     433                    **************************************************************************
     434                    *                                                                        *
     435                    * GETZPOS - GET AN OBJECTS Z POSITION BASED ON ZORIGIN                   *
     436                    * A0 = OBJECT BLOCK PTR                                                  *
     437                    * RETURN(S)                                                              *
     438                    * A1 = Z POSITION                                                        *
     439                    *                                                                        *
     440                    **************************************************************************
     441 00001300     a30f  GETZPOS MOVE    A8,-*SP,L
     442 00001310     4c08          MOVE    A0,A8
     443 00001320     0d3f          CALLR   GETBOTY
         00001330     ff51  
     444 00001340     0be1          SUBI    ZORIGIN,A1      ;GET Z POSITION                         
         00001350     ff37  
     445 00001360     97e8          MOVE    *SP+,A8,L
     446 00001370     0960          RETS
     447                    
     448                    **************************************************************************
     449                    *                                                                        *
     450                    * PUTZPOS - STUFF OBJECTS Z POSITION                                     *
     451                    * A0 = OBJECT BLOCK PTR                                                  *
     452                    * A1 = 16 BIT Z POSITION                                                 *
     453                    *                                                                        *
     454                    **************************************************************************
     455 00001380     b020  PUTZPOS MOVE    A1,*A0(OZPOS),W
         00001390     00d0  
     456 000013a0     0960          RETS
     457                    
     458                    **************************************************************************
     459                    *                                                                        *
     460                    * MAKSHAD - MAKE A SHADOW OF AN OBJECT. IT IS JUST THE OBJECT WITH A     *
     461                    *         CONSTANT COLOR, XLATED TO THE GROUND                           *
     462                    * A8 = OBJECT TO SHADOW                                                  *
     463                    * RETURN(S)                                                              *
     464                    * A0 = SHADOW OBJECT                                                     *
     465                    *                                                                        *
     466                    **************************************************************************
     467 000013b0           MAKSHAD
     468 000013b0     0d5f          CALLA   SHADST
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   11

         000013c0 00000000! 
     469 000013e0     0960          RETS
     470                    
     471                    **************************************************************************
     472                    *                                                                        *
     473                    * OFLASH - FLASH THE OBJECT WITH A CONSTANT COLOR                        *
     474                    * A8=PTR TO OBJECT BLOCK                                                 *
     475                    *                                                                        *
     476                    **************************************************************************
     477 000013f0     09e0  OFLASH  MOVI    0FFFFh,A0
         00001400 0000ffff  
     478 00001420     b008          MOVE    A0,*A8(OCONST),W        ;SELECT CONSTANT COLOR
         00001430     0170  
     479                    
     480 00001440     b500  OFLSH1  MOVE    *A8(OFLAGS),A0,W
         00001450     0100  
     481 00001460     2f80          SRL     4,A0
     482 00001470     2480          SLL     4,A0
     483 00001480     1100          ADDK    8,A0
     484 00001490     b008          MOVE    A0,*A8(OFLAGS),W        ;FLASHY
         000014a0     0100  
     485                    
     486 000014b0     1880          MOVK    4,A0
     487 000014c0     0d5f          CALLA   PRCSLP
         000014d0 00000000! 
     488                    
     489 000014f0     b500          MOVE    *A8(OFLAGS),A0,W
         00001500     0100  
     490 00001510     2f80          SRL     4,A0
     491 00001520     2480          SLL     4,A0
     492 00001530     1040          ADDK    2,A0
     493 00001540     b008          MOVE    A0,*A8(OFLAGS),W        ;NORMAL
         00001550     0100  
     494                    
     495 00001560     1860          MOVK    3,A0
     496 00001570     0d5f          CALLA   PRCSLP
         00001580 00000000! 
     497 000015a0     c0e9          JRUC    OFLSH1          
     498                    
     499                    **************************************************************************
     500                    *                                                                        *
     501                    * BOUNCER - ALTERS AN OBJECTS VELOCITY ACCORDING TO THE DIRECTION IT IS  *
     502                    *         CURRENTLY MOVING. IF THE OBJECT IS TRAVELLING IN POSITIVE X    *
     503                    *         IT WILL ADD A NEGATIVE X VELOCITY FACTOR, AND VICE-VERSA. THE  *
     504                    *         SAME GOES FOR Y.                                               *
     505                    * A4 = BOUNCE VELOCITY FACTOR FOR X                                      *
     506                    * A5 = BOUNCE VELOCITY FACTOR FOR Y                                      *
     507                    * A8 = OBLOCK PTR                                                        *
     508                    *                                                                        *
     509                    **************************************************************************
     510 000015b0           BOUNCER
     511 000015b0     098f          MMTM    SP,A0,A1
         000015c0     c000  
     512 000015d0     b701          MOVE    *A8(OXVEL),A1,L         ;PROCESS X VELOCITY
         000015e0     0040  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   12

     513 000015f0     4c80          MOVE    A4,A0
     514 00001600     0d3f          CALLR   REVVEL
         00001610     000f  
     515 00001620     b228          MOVE    A1,*A8(OXVEL),L
         00001630     0040  
     516 00001640     b701          MOVE    *A8(OYVEL),A1,L         ;PROCESS Y VELOCITY
         00001650     0060  
     517 00001660     4ca0          MOVE    A5,A0
     518 00001670     0d3f          CALLR   REVVEL
         00001680     0008  
     519 00001690     b228          MOVE    A1,*A8(OYVEL),L
         000016a0     0060  
     520 000016b0     2e01          SRL     16,A1
     521 000016c0     b028          MOVE    A1,*A8(OZVEL),W         ;STUFF THIS AS A Z VELOCITY ALSO
         000016d0     00e0  
     522 000016e0     09af          MMFM    SP,A0,A1
         000016f0     0003  
     523 00001700     0960          RETS
     524                    
     525                    **************************************************************************
     526                    *                                                                        *
     527                    * REVVEL - ADDS A REVERSE VELOCITY FACTOR TO A GIVEN VELOCITY            *
     528                    * A0 = VELOCITY FACTOR                                                   *
     529                    * A1 = VELOCITY                                                          *
     530                    *                                                                        *
     531                    **************************************************************************
     532 00001710           REVVEL  PUSH    A0
     533 00001720                   TEST    A1      
     534 00001730     ca03          JREQ    REVVELX         ;BR = NOT GOING ANYWHERE
     535 00001740     ce01          JRN     REVVEL1         ;BR = VELOCITY IS NEGATIVE, ADD AS IS
     536 00001750     03a0          NEG     A0
     537 00001760           REVVEL1
     538 00001760     4001          ADD     A0,A1
     539 00001770           REVVELX
     540 00001770                   PULL    A0
     541 00001790     0960          RETS
     542                    
     543                    **************************************************************************
     544                    *                                                                        *
     545                    * SLINEVEL - GET THE X & Y VELOCITIES TO MAKE AN OBJECT TRAVEL           *
     546                    *          FROM PNT. A TO PNT. B ALONG THE SHORTEST PATH.                *
     547                    * A2 = PNT. A [Y,X] POSITION                                             *
     548                    * A3 = PNT. B [Y,X] POSITION                                             *
     549                    * A4 = DURATION(# OF TICKS TO GET FROM A TO B)                           *
     550                    * RETURNS:                                                               *
     551                    * A1 = X VEL (32 BITS)                                                   *
     552                    * A2 = Y VEL (32 BITS)                                                   *
     553                    * NOTE: DON'T CALL WITH THE A=B, IT'S A WAIST OF TIME AND UNDEFINED.     *
     554                    *                                                                        *
     555                    **************************************************************************
     556 000017a0           SLINEVEL
     557 000017a0     098f          MMTM    SP,A3
         000017b0     1000  
     558 000017c0     e243          SUBXY   A2,A3           ;GET THE DIFFERENCE
     559 000017d0     ec61          MOVX    A3,A1           ;A1 = X DISTANCE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   13

     560 000017e0     2e03          SRL     16,A3
     561 000017f0     2603          SLL     16,A3           ;CLEAR OUT THE X PART
     562 00001800     5883          DIVS    A4,A3           ;A3 = Y VELOCITY(32 BITS)
     563 00001810     2601          SLL     16,A1
     564 00001820     5881          DIVS    A4,A1           ;A1 = X VELOCITY(32 BITS)
     565 00001830     4c62          MOVE    A3,A2           ;RETURN Y VEL HERE FOR CONSISTENCY
     566 00001840     09af          MMFM    SP,A3
         00001850     0008  
     567 00001860     0960          RETS
     568                    
     569                    **************************************************************************
     570                    *                                                                        *
     571                    * ROUTINES TO SUPPORT THE NARC SPECIFIC MISC. LISTS                      *
     572                    *                                                                        *
     573                    **************************************************************************
     574                    **************************************************************************
     575                    *                                                                        *
     576                    * BBINIT - INITIALIZE THE BACKGROUND BLOCK FREE LIST                     *
     577                    *                                                                        *
     578                    **************************************************************************
     579 00001870     098f  BBINIT  MMTM    SP,A0,A1,A2,A3
         00001880     f000  
     580 00001890     09c3          MOVI    NBBLOCKS,A3,W           ;# OF BACKGROUND BLOCKS TO INIT
         000018a0     0200  
     581 000018b0     09e1          MOVI    BBLOCKS,A1
         000018c0 00000000! 
     582 000018e0     0781          MOVE    A1,@BBFREE,L            ;INITIALIZE FREE LIST POINTER
         000018f0 00000000! 
     583 00001910     5600          CLR     A0
     584 00001920     0780          MOVE    A0,@BBACTIVE,L          ;EMPTY THE ACTIVE LIST
         00001930 00000000! 
     585                    
     586                    **************************************************************************
     587                    *                                                                        *
     588                    * NINIT - FREE LIST INITIALIZATION FOR NARC MISC. LISTS                  *
     589                    * A1 = FIRST BLOCK OF LIST                                               *
     590                    * A3 = BLOCK COUNT                                                       *
     591                    *                                                                        *
     592                    **************************************************************************
     593 00001950           NINIT 
     594 00001950     4c22          MOVE    A1,A2
     595 00001960     0b01          ADDI    NSIZ,A1,W
         00001970     0050  
     596 00001980     8222          MOVE    A1,*A2,L                ;LINK UP THE FREE LIST
     597 00001990     3ca3          DSJS    A3,NINIT
     598 000019a0     8202          MOVE    A0,*A2,L                ;ZERO LAST LINK
     599 000019b0     09af          MMFM    SP,A0,A1,A2,A3  ;RESTORE REGS
         000019c0     000f  
     600 000019d0     0960          RETS
     601                    
     602                    **************************************************************************
     603                    *                                                                        *
     604                    * ADDBB - ADD BACKGROUND BLOCK TO BB ACTIVE LIST                         *
     605                    *         THE LIST IS SORTED IN ASCENDING X, THEN ASCENDING Y.           *
     606                    * A0 = PTR TO BACKGROUND BLOCK                                           *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   14

     607                    * A1 = DATA                                                              *
     608                    * RETURN(S)                                                              *
     609                    * A0 = PTR TO ELEMENT                                                    *
     610                    * ZBIT SET UPON FAILURE                                                  *
     611                    * NOTE: THE BCKGND BLOCK MUST BE STUFFED WITH INFO FIRST                 *
     612                    *                                                                        *
     613                    **************************************************************************
     614 000019e0     098f  ADDBB   MMTM    SP,A2,A3,A4,A5,A6,A7,A8,A9,A10  
         000019f0     3fe0  
     615 00001a00     09e2          MOVI    BBFREE,A2
         00001a10 00000000! 
     616 00001a30     09e3          MOVI    BBACTIVE,A3
         00001a40 00000000! 
     617 00001a60     b607          MOVE    *A0(OXVAL),A7,L
         00001a70     0080  
     618 00001a80     b608          MOVE    *A0(OYVAL),A8,L
         00001a90     00a0  
     619                    
     620 00001aa0     8644          MOVE    *A2,A4,L        ;GET A BLOCK OFF THE FREE LIST
     621 00001ab0     ca16          JREQ    ADDBBX          ;BR = NONE AVAILABLE
     622                    
     623 00001ac0     8685          MOVE    *A4,A5,L        ;A5 = REST OF FREE LIST
     624 00001ad0     82a2          MOVE    A5,*A2,L        
     625                    
     626 00001ae0     b204          MOVE    A0,*A4(NPTR),L  ;STUFF THE OBJECT PTR
         00001af0     0020  
     627 00001b00     b024          MOVE    A1,*A4(NDATA),W ;AND THE DATA
         00001b10     0040  
     628                    
     629 00001b20           ADDBBL
     630 00001b20     4c66          MOVE    A3,A6           ;A6 = POINTER TO PREVIOUS
     631 00001b30     86c3          MOVE    *A6,A3,L        ;A3 = PTR TO NEXT
     632 00001b40     ca0b          JREQ    ADDBBEND        ;BR = END OF THE LIST, ADD IT HERE
     633                    
     634 00001b50     b669          MOVE    *A3(NPTR),A9,L
         00001b60     0020  
     635 00001b70     b72a          MOVE    *A9(OXVAL),A10,L
         00001b80     0080  
     636 00001b90     4947          CMP     A10,A7
     637 00001ba0     c7f7          JRGT    ADDBBL          ;BR = NOT TIME TO ADD
     638 00001bb0     c404          JRLT    ADDBBEND        ;BR = ADD AWAY.
     639                    
     640 00001bc0     b72a          MOVE    *A9(OYVAL),A10,L        ;X'S ARE =, WE MUST TRY THE YPOS
         00001bd0     00a0  
     641 00001be0     4948          CMP     A10,A8
     642 00001bf0     c7f2          JRGT    ADDBBL
     643                    
     644 00001c00           ADDBBEND
     645 00001c00     8264          MOVE    A3,*A4,L        ;PTR TO THE REST OF THE LIST    
     646 00001c10     8286          MOVE    A4,*A6,L
     647                    
     648 00001c20           ADDBBX
     649 00001c20     4c80          MOVE    A4,A0           ;RETURN THE PTR
     650 00001c30     09af          MMFM    SP,A2,A3,A4,A5,A6,A7,A8,A9,A10
         00001c40     07fc  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   15

     651 00001c50     0960          RETS
     652                    
     653                    **************************************************************************
     654                    *                                                                        *
     655                    * DELBB - DELETE A BACKGROUND BLOCK FROM THE BBACTIVE LIST               *
     656                    * A0 = PTR TO BACKGROUND BLOCK                                           *
     657                    *                                                                        *
     658                    **************************************************************************
     659 00001c60     098f  DELBB   MMTM    SP,A2,A3
         00001c70     3000  
     660 00001c80     09e2          MOVI    BBFREE,A2
         00001c90 00000000! 
     661 00001cb0     09e3          MOVI    BBACTIVE,A3
         00001cc0 00000000! 
     662 00001ce0     0d3f          CALLR   DELNLIST
         00001cf0     0029  
     663 00001d00     09af          MMFM    SP,A2,A3
         00001d10     000c  
     664 00001d20     0960          RETS
     665                    
     666                    **************************************************************************
     667                    *                                                                        *
     668                    * ISBB - CHECK TO SEE IF OBJECT IS ON THE BB LIST                        *
     669                    * A0 = PTR TO OBJECT                                                     *
     670                    * RETURNS                                                                *
     671                    * CARRY CLEAR = NOT FOUND                                                *
     672                    * CARRY SET   = FOUND                                                    *
     673                    *                                                                        *
     674                    **************************************************************************
     675 00001d30           ISBB
     676 00001d30     098f          MMTM    SP,A3
         00001d40     1000  
     677 00001d50     09e3          MOVI    BBACTIVE,A3
         00001d60 00000000! 
     678 00001d80     0d3f          CALLR   ISNLIST
         00001d90     0038  
     679 00001da0     09af          MMFM    SP,A3
         00001db0     0008  
     680 00001dc0     0960          RETS
     681                    
     682                    **************************************************************************
     683                    *                                                                        *
     684                    * FINDBB - FIND AN OBJECTS BB LIST NODE.                                 *
     685                    * A0 = PTR TO OBJECT                                                     *
     686                    * RETURNS                                                                *
     687                    *       A0 = NODE PTR, 0 = NONE FOUND                                    *
     688                    *       Z BIT SET  = NOT FOUND                                           *
     689                    *       Z BIT CLR  = FOUND                                               *
     690                    *                                                                        *
     691                    **************************************************************************
     692 00001dd0           FINDBB
     693 00001dd0     098f          MMTM    SP,A3
         00001de0     1000  
     694 00001df0     09e3          MOVI    BBACTIVE,A3
         00001e00 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   16

     695 00001e20     0d3f          CALLR   ISNLIST
         00001e30     002e  
     696 00001e40     4c60          MOVE    A3,A0
     697 00001e50     09af          MMFM    SP,A3
         00001e60     0008  
     698 00001e70     0960          RETS
     699                    
     700                    **************************************************************************
     701                    *                                                                        *
     702                    * ADDNLIST - ADD AN ELEMENT TO A GIVEN NARC MISC. LIST.                  *
     703                    * A0 = PTR TO STUFF                                                      *
     704                    * A1 = DATA TO STUFF                                                     *
     705                    * A2 = MEMORY LOCATION OF FREE LIST                                      *
     706                    * A3 = MEMORY LOCATION OF ACTIVE LIST                                    *
     707                    * RETURN(S)                                                              *
     708                    * A0 = PTR TO ELEMENT                                                    *
     709                    * ZBIT SET UPON FAILURE                                                  *
     710                    *                                                                        *
     711                    **************************************************************************
     712 00001e80           ADDNLIST
     713 00001e80     098f          MMTM    SP,A4,A5
         00001e90     0c00  
     714                    
     715 00001ea0     8644          MOVE    *A2,A4,L        ;GET A BLOCK OFF THE FREE LIST
     716 00001eb0     ca0a          JREQ    ADDNX           ;BR = NONE AVAILABLE
     717                    
     718 00001ec0     8685          MOVE    *A4,A5,L        ;A5 = REST OF FREE LIST
     719 00001ed0     82a2          MOVE    A5,*A2,L        
     720                    
     721 00001ee0     8665          MOVE    *A3,A5,L        ;A5 = ACTIVE LIST
     722 00001ef0     8283          MOVE    A4,*A3,L        ;PUT NEW ELEMENT TO THE HEAD OF THE LIST
     723 00001f00     82a4          MOVE    A5,*A4,L        ;LINK THE REST OF THE ACTIVE LIST
     724                    
     725 00001f10     b204          MOVE    A0,*A4(NPTR),L  ;STUFF THE OBJECT PTR
         00001f20     0020  
     726 00001f30     b024          MOVE    A1,*A4(NDATA),W ;AND THE DATA
         00001f40     0040  
     727 00001f50     4c80          MOVE    A4,A0           ;RETURN IN A RECONIZED POSITION
     728                    
     729 00001f60           ADDNX:  
     730 00001f60     09af          MMFM    SP,A4,A5
         00001f70     0030  
     731 00001f80     0960          RETS    
     732                    
     733                    **************************************************************************
     734                    *                                                                        *
     735                    * DELNLIST - DELETE AN ELEMENT FROM A NARC MISC. LIST.                   *
     736                    * A0 = VALUE CONTAINED IN NPTR                                           *
     737                    * A2 = MEMORY LOCATION OF FREE LIST                                      *
     738                    * A3 = MEMORY LOCATION OF ACTIVE LIST                                    *
     739                    *                                                                        *
     740                    **************************************************************************
     741 00001f90           DELNLIST
     742 00001f90     098f          MMTM    SP,A3,A4,A5
         00001fa0     1c00  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   17

     743 00001fb0           DELNLP  
     744 00001fb0     4c64          MOVE    A3,A4           ;SAVE PREVIOUS
     745 00001fc0     8663          MOVE    *A3,A3,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
     746 00001fd0     cb09          JRNE    DELNCHK
     747                    
     748 00001fe0                   CALLERR 3               ;LOG THE ERROR
     749 00002060     c008          JRUC    DELNX
     750                    ***     JREQ    $               ;ELEMENT DOES NOT EXIST, ERROR
     751                    
     752 00002070           DELNCHK
     753 00002070     b665          MOVE    *A3(NPTR),A5,L
         00002080     0020  
     754 00002090     48a0          CMP     A5,A0
     755 000020a0     cbf0          JRNE    DELNLP          ;NOT FOUND KEEP LOOKING
     756                    
     757 000020b0     8a64          MOVE    *A3,*A4,L       ;LINK AROUND IN ACTIVE LIST     
     758 000020c0     8644          MOVE    *A2,A4,L        ;LINK INTO FREE LIST AT START
     759 000020d0     8283          MOVE    A4,*A3,L
     760 000020e0     8262          MOVE    A3,*A2,L
     761 000020f0           DELNX
     762 000020f0     09af          MMFM    SP,A3,A4,A5
         00002100     0038  
     763 00002110     0960          RETS
     764                    
     765                    **************************************************************************
     766                    *                                                                        *
     767                    * ISNLIST - SEE IF ELEMENT EXISTS ON NARC MISC. LIST                     *
     768                    * A0 = CONTENTS OF NPTR TO SEARCH FOR                                    *
     769                    * A3 = LOCATION OF ACTIVE LIST                                           *
     770                    * RETURNS                                                                *
     771                    * A3 = BBLIST NODE IF FOUND                                              *
     772                    * CARRY CLEAR = NOT FOUND                                                *
     773                    * CARRY SET   = FOUND                                                    *
     774                    *                                                                        *
     775                    **************************************************************************
     776 00002120           ISNLIST
     777 00002120     098f          MMTM    SP,A5
         00002130     0400  
     778 00002140           ISNLP   
     779 00002140     8663          MOVE    *A3,A3,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
     780 00002150     cb04          JRNZ    ISNCMP
     781 00002160     0320          CLRC                    ;NO FOUNDING BROHCK, MANG               
     782 00002170     09af          MMFM    SP,A5
         00002180     0020  
     783 00002190     0960          RETS
     784 000021a0           ISNCMP
     785 000021a0     b665          MOVE    *A3(NPTR),A5,L
         000021b0     0020  
     786 000021c0     48a0          CMP     A5,A0
     787 000021d0     cbf6          JRNE    ISNLP           ;NOT FOUND KEEP LOOKING
     788 000021e0     0de0          SETC                    ;FOUND ONE, FLAG PLEASE
     789 000021f0     09af          MMFM    SP,A5
         00002200     0020  
     790 00002210     0960          RETS
     791                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   18

     792                    **************************************************************************
     793                    *                                                                        *
     794                    * ISBBID - SEE IF AN OBJECT OF GIVEN ID EXISTS ON THE BB LIST.           *
     795                    * A0 = OID TO SEARCH AGAINST.                                            *
     796                    * A1 = MASK 0=DON'T CARE                                                 *
     797                    * RETURNS                                                                *
     798                    *       Z BIT SET = NOT FOUND, A0 = 0                                    *
     799                    *       Z BIT CLR = FOUND, A0 = PTR TO BBLIST ELEMENT                    *
     800                    *                                                                        *
     801                    **************************************************************************
     802 00002220           ISBBID
     803 00002220     098f          MMTM    SP,A2,A3
         00002230     3000  
     804 00002240     4c22          MOVE    A1,A2
     805 00002250     5002          AND     A0,A2           ;FORM SEARCH I.D.
     806 00002260     09e0          MOVI    BBACTIVE,A0
         00002270 00000000! 
     807 00002290           ISBBIDLP        
     808 00002290     8600          MOVE    *A0,A0,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
     809 000022a0     ca08          JRZ     ISBBIDX
     810 000022b0     b603          MOVE    *A0(NPTR),A3,L
         000022c0     0020  
     811 000022d0     b463          MOVE    *A3(OID),A3,W
         000022e0     01a0  
     812 000022f0     5023          AND     A1,A3           ;STRIP DON'T CARES
     813 00002300     4862          CMP     A3,A2           ;CHECK AGAINST MATCH
     814 00002310     cbf7          JRNE    ISBBIDLP        ;BR = NO MATCH
     815 00002320     4c00          MOVE    A0,A0           ;CLR Z
     816 00002330           ISBBIDX
     817 00002330     09af          MMFM    SP,A2,A3
         00002340     000c  
     818 00002350     0960          RETS
     819                    
     820                    **************************************************************************
     821                    *                                                                        *
     822                    * ISBBBLP - SEE IF AN OBJECT WITH A GIVEN OBLIP EXISTS ON THE BB LIST.   *
     823                    * A0 = OBLIPIMG TO SEARCH AGAINST.                                       *
     824                    * RETURNS                                                                *
     825                    *       Z BIT SET = NOT FOUND, A0 = 0                                    *
     826                    *       Z BIT CLR = FOUND, A0 = PTR TO BBLIST ELEMENT                    *
     827                    *                                                                        *
     828                    **************************************************************************
     829 00002360           ISBBBLP
     830 00002360     098f          MMTM    SP,A1,A2
         00002370     6000  
     831 00002380     4c01          MOVE    A0,A1
     832 00002390     09e0          MOVI    BBACTIVE,A0
         000023a0 00000000! 
     833 000023c0           ISBBBBLP        
     834 000023c0     8600          MOVE    *A0,A0,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
     835 000023d0     ca07          JRZ     ISBBLPX
     836 000023e0     b602          MOVE    *A0(NPTR),A2,L
         000023f0     0020  
     837 00002400     b642          MOVE    *A2(OBLIPIMG),A2,L
         00002410     0260  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   19

     838 00002420     4822          CMP     A1,A2           ;CHECK AGAINST MATCH
     839 00002430     cbf8          JRNE    ISBBBBLP        ;BR = NO MATCH
     840 00002440     4c00          MOVE    A0,A0           ;CLR Z
     841 00002450           ISBBLPX
     842 00002450     09af          MMFM    SP,A1,A2
         00002460     0006  
     843 00002470     0960          RETS
     844                    
     845                    **************************************************************************
     846                    *                                                                        *
     847                    * DELBBOBJ - FULLY DELETE A BBLIST OBJECT FROM THE WORLD.                *
     848                    * A0 = PTR TO BBLIST NODE.                                               *
     849                    *                                                                        *
     850                    **************************************************************************
     851 00002480           DELBBOBJ
     852 00002480                   PUSH    A1
     853 00002490     b401          MOVE    *A0(NDATA),A1,W         ;SEE IF IT IS ON SCREEN
         000024a0     0040  
     854 000024b0     ca0c          JRZ     DELBBOP                 ;BR = NO JUST PULL IT
     855 000024c0     b600          MOVE    *A0(NPTR),A0,L
         000024d0     0020  
     856 000024e0     09e1          MOVI    BACKSLST,A1
         000024f0 00000000! 
     857 00002510     0d5f          CALLA   DELSUPP                 ;DELETE OFF THE SUPPLEMENTAL
         00002520 000031e0' 
     858 00002540     0d5f          CALLA   DELSOBJ                 ;DELETE IT OFF OF THE LIST
         00002550 00000000! 
     859 00002570     c005          JRUC    DELBBBB
     860 00002580           DELBBOP
     861 00002580     b600          MOVE    *A0(NPTR),A0,L
         00002590     0020  
     862 000025a0     0d5f          CALLA   FREESOBJ                ;JUST FREE UP THE DATA BLOCK
         000025b0 00000000! 
     863 000025d0           DELBBBB
     864 000025d0     0d3f          CALLR   DELBB                   ;AND DELETE IT OFF OF THE 
         000025e0     ff67  
     865 000025f0     b600          MOVE    *A0(OPLINK),A0,L
         00002600     01f0  
     866 00002610     ca03          JRZ     DELBBNP
     867 00002620     0d5f          CALLA   KILL
         00002630 00000000! 
     868 00002650           DELBBNP
     869 00002650                   PULL    A1
     870 00002670     0960          RETS
     871                    
     872                    **************************************************************************
     873                    *                                                                        *
     874                    * BBWIPE - PUT ALL BACKGROUND OBJECTS, CURRENTLY IN LIMBO, ONTO THE      *
     875                    *        OBJECT FREE LIST.                                               *
     876                    *                                                                        *
     877                    **************************************************************************
     878 00002680     098f  BBWIPE  MMTM    SP,A0,A1,A2
         00002690     e000  
     879 000026a0     09e1          MOVI    BBACTIVE,A1
         000026b0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   20

     880                    
     881 000026d0           BBWIPE1
     882 000026d0     8621          MOVE    *A1,A1,L
     883 000026e0     ca0d          JREQ    BBWIPEX         ;BR = WE'RE DONE
     884 000026f0     b422          MOVE    *A1(NDATA),A2,W
         00002700     0040  
     885 00002710     cbfb          JRNE    BBWIPE1         ;BR = THIS BLOCK IS NOT IN LIMBO
     886 00002720     b620          MOVE    *A1(NPTR),A0,L  ;GET THE POINTER
         00002730     0020  
     887                    
     888 00002740     07a2          MOVE    @OFREE,A2,L                             
         00002750 00000000! 
     889 00002770     8240          MOVE    A2,*A0,L
     890 00002780     0780          MOVE    A0,@OFREE,L     ;STICK THIS BLOCK AT THE HEAD OF THE LIST
         00002790 00000000! 
     891 000027b0     c0f1          JRUC    BBWIPE1
     892 000027c0           BBWIPEX
     893 000027c0     09af          MMFM    SP,A0,A1,A2
         000027d0     0007  
     894 000027e0     0960          RETS
     895                    
     896                            
     897                    **************************************************************************
     898                    *                                                                        *
     899                    * SUPPLEMENTAL LIST ROUTINES                                             *
     900                    *                                                                        *
     901                    **************************************************************************
     902                    **************************************************************************
     903                    *                                                                        *
     904                    * MYOINIT - INITIALIZE SUPPLEMENTAL OBJECT LIST HEADERS                  *
     905                    *                                                                        *
     906                    **************************************************************************
     907 000027f0           MYOINIT
     908 000027f0     098f          MMTM    SP,A0,A1,A2,A3,A4,A5
         00002800     fc00  
     909 00002810     01e0          PUSHST
     910 00002820     0d5f          CALLA   CLRPAL
         00002830 00000000! 
     911 00002850     09e0          MOVI    NARCS,A0
         00002860 00000000! 
     912 00002880     0d5f          CALLA   GETFPAL                 ;GET THE FIXED FOREGROUND PALETTE
         00002890 00000000! 
     913 000028b0     0580          MOVE    A0,@CURPAL,W            ;STUFF THIS HERE FOR FIXED STUFF
         000028c0 00000000! 
     914 000028e0     09e0          MOVI    NARCS,A0
         000028f0 00000000! 
     915 00002910     0d5f          CALLA   GETBPAL                 ;GET THE FIXED BACKGROUND PALETTE
         00002920 00000000! 
     916 00002940     c01f          JRUC    MYOINITG
     917                    *
     918                    *MYOINITF - MYOINIT ONLY CLEARING THE FOREGROUND PALETTES
     919 00002950           MYOINITF
     920 00002950     098f          MMTM    SP,A0,A1,A2,A3,A4,A5
         00002960     fc00  
     921 00002970     01e0          PUSHST
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   21

     922 00002980     0d5f          CALLA   CLRFPAL
         00002990 00000000! 
     923 000029b0     09e0          MOVI    NARCS,A0
         000029c0 00000000! 
     924 000029e0     0d5f          CALLA   GETFPAL                 ;GET THE FIXED FOREGROUND PALETTE
         000029f0 00000000! 
     925 00002a10     0580          MOVE    A0,@CURPAL,W            ;STUFF THIS HERE FOR FIXED STUFF
         00002a20 00000000! 
     926 00002a40     c00f          JRUC    MYOINITG
     927                    *
     928                    *MYOINITF - MYOINIT ONLY CLEARING THE FOREGROUND PALETTES
     929 00002a50           MYOINITB
     930 00002a50     098f          MMTM    SP,A0,A1,A2,A3,A4,A5
         00002a60     fc00  
     931 00002a70     01e0          PUSHST
     932 00002a80     0d5f          CALLA   CLRBPAL
         00002a90 00000000! 
     933 00002ab0     09e0          MOVI    NARCS,A0
         00002ac0 00000000! 
     934 00002ae0     0d5f          CALLA   GETBPAL                 ;GET THE FIXED BACKGROUND PALETTE
         00002af0 00000000! 
     935 00002b10     0580          MOVE    A0,@CURPAL,W            ;STUFF THIS HERE FOR FIXED STUFF
         00002b20 00000000! 
     936 00002b40           MYOINITG
     937 00002b40     0360          DINT
     938 00002b50     05a0          MOVE    @INTENB,A0,W
         00002b60 c0000110  
     939 00002b80     0b80          ANDNI   X1E,A0                  ;NO MORE DMA INTERRUPTS
         00002b90 00000002  
     940 00002bb0     0580          MOVE    A0,@INTENB,W
         00002bc0 c0000110  
     941 00002be0     01c0          POPST
     942 00002bf0     0d3f          CALLR   SLSTINIT
         00002c00     0029  
     943 00002c10     5600          CLR     A0
     944 00002c20     0780          MOVE    A0,@PLAYERS,L
         00002c30 00000000! 
     945 00002c50     0580          MOVE    A0,@GAMERASE
         00002c60 00000000! 
     946 00002c80     0d5f          CALLA   AUTOEOFF                ;DISABLE AUTOERASE
         00002c90 00000000! 
     947 00002cb0     0d3f          CALLR   DMAWAIT                 ;WAIT ON DMA
         00002cc0     024e  
     948 00002cd0     09e1          MOVI    ERASECOL,A1
         00002ce0 0000ffff  
     949 00002d00     2601          SLL     16,A1                   ;CONSTANT:PALETTE
     950 00002d10     09e2          MOVI    [2,511],A2              ;HEIGHT:WIDTH
         00002d20 000201ff  
     951 00002d40     09e3          MOVI    [510,0],A3              ;DAG
         00002d50 01fe0000  
     952 00002d70     09e4          MOVI    2000000H,A4             ;SAG
         00002d80 02000000  
     953 00002da0     09e0          MOVI    DMAREGS,A0
         00002db0 01a800a0  
     954 00002dd0     0980          MMTM    A0,A1,A2,A3,A4          ;STORE TO LAST 2 LINES OF BITMAP
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   22

         00002de0     7800  
     955 00002df0     56a5          CLR     A5                      ;STUFF OFFSET
     956 00002e00     a0a0          MOVE    A5,-*A0,W
     957 00002e10     09e5          MOVI    DMACAL,A5               ;CONTROL &
         00002e20 0000800c  
     958 00002e40     a0a0          MOVE    A5,-*A0,W               ;GO!
     959 00002e50     09af          MMFM    SP,A0,A1,A2,A3,A4,A5
         00002e60     003f  
     960 00002e70     c080          JAUC    OINIT
         00002e80 00000000! 
     961                    
     962                    
     963                    **************************************************************************
     964                    *                                                                        *
     965                    * SLSTINIT - SUPPLEMENTAL LIST INITIALIZER, THIS INITIALIZES ALL BUT     *
     966                    *          THE PLAYER SUPPLEMENTAL LIST                                  *
     967                    *                                                                        *
     968                    **************************************************************************
     969 00002ea0           SLSTINIT
     970 00002ea0                   PUSH    A0
     971 00002eb0     5600          CLR     A0
     972 00002ec0     0780          MOVE    A0,@BACKSLST,L
         00002ed0 00000000! 
     973 00002ef0     0780          MOVE    A0,@PLAYER_BULLETS,L
         00002f00 00000000! 
     974 00002f20     0780          MOVE    A0,@ENEMY_BULLETS,L
         00002f30 00000000! 
     975 00002f50     0780          MOVE    A0,@ENEMIES,L
         00002f60 00000000! 
     976 00002f80     0780          MOVE    A0,@PLAYERS,L
         00002f90 00000000! 
     977 00002fb0     0780          MOVE    A0,@BOOTY,L
         00002fc0 00000000! 
     978 00002fe0     0780          MOVE    A0,@CARLIST,L
         00002ff0 00000000! 
     979 00003010     0780          MOVE    A0,@EXPLOSIONS,L
         00003020 00000000! 
     980 00003040                   PULL    A0
     981 00003060     0960          RETS
     982                    
     983                    **************************************************************************
     984                    *                                                                        *
     985                    * ADDSBOBJ - ADD OBJECT TO SUPPLEMENTAL BACKGROUND LIST                  *
     986                    * A0 = PTR TO OBJECT                                                     *
     987                    *                                                                        *
     988                    **************************************************************************
     989 00003070           ADDSBOBJ
     990 00003070                   PUSH    A1
     991 00003080     09e1          MOVI    BACKSLST,A1
         00003090 00000000! 
     992 000030b0     0d3f          CALLR   ADDSUPP
         000030c0     0003  
     993 000030d0                   PULL    A1
     994 000030f0     0960          RETS
     995                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   23

     996                    *                                                                        *
     997                    * ADDSUPP - ADD OBJECT TO A SUPPLEMENTAL LIST                            *
     998                    * A0 = PTR TO OBJECT                                                     *
     999                    * A1 = MEMORY LOCATION OF SUPPLEMENTAL LIST HEADER                       *
    1000                    *                                                                        *
    1001                    **************************************************************************
    1002 00003100           ADDSUPP 
    1003 00003100     ba20          MOVE    *A1(0),*A0(OSLINK),L    ;LINK SLIST TO THIS BLOCK
         00003110     0000  
         00003120     0020  
    1004 00003130     8201          MOVE    A0,*A1,L                ;NEW HEAD OF THE SLIST
    1005 00003140     0960          RETS
    1006                    
    1007                    **************************************************************************
    1008                    *                                                                        *
    1009                    * DELSBOBJ - DELETE OBJECT FROM SUPPLEMENTAL BACKGROUND LIST             *
    1010                    * A0 = PTR TO OBJECT                                                     *
    1011                    *                                                                        *
    1012                    **************************************************************************
    1013 00003150           DELSBOBJ
    1014 00003150                   PUSH    A1
    1015 00003160     09e1          MOVI    BACKSLST,A1
         00003170 00000000! 
    1016 00003190     0d3f          CALLR   DELSUPP
         000031a0     0003  
    1017 000031b0                   PULL    A1
    1018 000031d0     0960          RETS
    1019                    
    1020                    **************************************************************************
    1021                    *                                                                        *
    1022                    * DELSUPP - DELETE OBJECT FROM THE SUPPLEMENTAL LIST                     *
    1023                    * A0 = PTR TO OBJECT                                                     *
    1024                    * A1 = MEMORY LOCATION OF SUPPLEMENTAL LIST HEADER                       *
    1025                    *                                                                        *
    1026                    **************************************************************************
    1027 000031e0           DELSUPP
    1028 000031e0     098f          MMTM    SP,A1,A2
         000031f0     6000  
    1029 00003200     4c22          MOVE    A1,A2
    1030 00003210     8621          MOVE    *A1,A1,L        ;SPECIAL CASE THE HEADER
    1031 00003220     cb09          JRNZ    DELSCHK1
    1032                    
    1033 00003230                   CALLERR 2               ;LOG THE ERROR
    1034 000032b0     c005          JRUC    DELSX
    1035                    ***     JREQ    $               ;ERROR
    1036 000032c0           DELSCHK1
    1037 000032c0     4820          CMP     A1,A0
    1038 000032d0     cb06          JRNE    DELSLUP
    1039 000032e0     ba22          MOVE    *A1(OSLINK),*A2(0),L    ;LINK AROUND THIS GUY   
         000032f0     0020  
         00003300     0000  
    1040 00003310           DELSX
    1041 00003310     09af          MMFM    SP,A1,A2
         00003320     0006  
    1042 00003330     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   24

    1043                    
    1044 00003340           DELSLUP
    1045 00003340     4c22          MOVE    A1,A2           ;SAVE PREVIOUS
    1046 00003350     b621          MOVE    *A1(OSLINK),A1,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
         00003360     0020  
    1047 00003370     cb09          JRNZ    DELSCHK2
    1048                    
    1049 00003380                   CALLERR 2               ;LOG THE ERROR
    1050 00003400     c0f0          JRUC    DELSX
    1051                    ***     JREQ    $               ;ELEMENT DOES NOT EXIST, HOLD FOR ERROR
    1052 00003410           DELSCHK2
    1053 00003410     4820          CMP     A1,A0
    1054 00003420     cbf1          JRNE    DELSLUP         ;NOT FOUND KEEP LOOKING
    1055                    
    1056 00003430     ba22          MOVE    *A1(OSLINK),*A2(OSLINK),L       ;LINK AROUND THIS GUY   
         00003440     0020  
         00003450     0020  
    1057                    
    1058 00003460     09af          MMFM    SP,A1,A2
         00003470     0006  
    1059 00003480     0960          RETS
    1060                    
    1061                    **************************************************************************
    1062                    *                                                                        *
    1063                    * ISSUPP - IS AN OBJECT ON A SUPPLEMENTAL LIST                           *
    1064                    * A0 = PTR TO OBJECT                                                     *
    1065                    * A1 = MEMORY LOCATION OF SUPPLEMENTAL LIST HEADER                       *
    1066                    * RETURNS:                                                               *
    1067                    *  Z BIT SET = NOT ON                                                    *
    1068                    *  Z BIT CLR = IS ON                                                     *
    1069                    *                                                                        *
    1070                    **************************************************************************
    1071 00003490           ISSUPP
    1072 00003490                   PUSH    A1
    1073 000034a0     8621          MOVE    *A1,A1,L        ;SPECIAL CASE THE HEADER
    1074 000034b0     ca03          JREQ    ISEND
    1075 000034c0     4820          CMP     A1,A0
    1076 000034d0     cb04          JRNE    ISSEARCH
    1077 000034e0           ISFOUND
    1078 000034e0     4c21          MOVE    A1,A1           ;SET Z BIT
    1079 000034f0           ISEND
    1080 000034f0                   PULL    A1
    1081 00003510     0960          RETS
    1082 00003520           ISSEARCH
    1083 00003520     b621          MOVE    *A1(OSLINK),A1,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
         00003530     0020  
    1084 00003540     cafa          JREQ    ISEND                   ;ELEMENT DOES NOT EXIST
    1085 00003550     4820          CMP     A1,A0
    1086 00003560     cbfb          JRNE    ISSEARCH                ;NOT FOUND KEEP LOOKING
    1087 00003570     c0f6          JRUC    ISFOUND                 ;FOUND RETURN
    1088                    
    1089                    **************************************************************************
    1090                    *                                                                        *
    1091                    * ISSUPPID - IS AN OBJECT ON A SUPPLEMENTAL LIST(SEARCH BY OBJECT I.D.)  *
    1092                    * A0 = OBJECT I.D.                                                       *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   25

    1093                    * A1 = MEMORY LOCATION OF SUPPLEMENTAL LIST HEADER                       *
    1094                    * RETURNS:                                                               *
    1095                    *  Z BIT SET = NOT ON                                                    *
    1096                    *              A1 = ZERO                                                 *
    1097                    *  Z BIT CLR = IS ON                                                     *
    1098                    *              A1 = PTR TO OBJECT                                        *       
    1099                    *                                                                        *
    1100                    **************************************************************************
    1101 00003580           ISSUPPID
    1102 00003580                   PUSH    A2      
    1103 00003590     8621          MOVE    *A1,A1,L        ;SPECIAL CASE THE HEADER
    1104 000035a0     ca05          JREQ    ISENDID
    1105 000035b0     b422          MOVE    *A1(OID),A2,W
         000035c0     01a0  
    1106 000035d0     4840          CMP     A2,A0
    1107 000035e0     cb04          JRNE    ISSRCHID
    1108 000035f0           ISFNDID
    1109 000035f0     4c21          MOVE    A1,A1           ;SET Z BIT
    1110 00003600           ISENDID
    1111 00003600                   PULL    A2
    1112 00003620     0960          RETS
    1113 00003630           ISSRCHID
    1114 00003630     b621          MOVE    *A1(OSLINK),A1,L        ;SEARCHING FOR THE ELEMENT IN THE LIST
         00003640     0020  
    1115 00003650     cafa          JREQ    ISENDID                 ;ELEMENT DOES NOT EXIST
    1116 00003660     b422          MOVE    *A1(OID),A2,W
         00003670     01a0  
    1117 00003680     4840          CMP     A2,A0
    1118 00003690     cbf9          JRNE    ISSRCHID                ;NOT FOUND KEEP LOOKING
    1119 000036a0     c0f4          JRUC    ISFNDID                 ;FOUND RETURN
    1120                    
    1121                    **************************************************************************
    1122                    *                                                                        *
    1123                    * CNTSUPP - COUNT THE NUMBER OF OBJECTS ON GIVEN SUPPLEMENTAL LIST.      *
    1124                    * A1 = SUPPLEMENTAL LIST                                                 *
    1125                    * RETURNS:                                                               *
    1126                    * A0 = OBJECT CNT                                                        *
    1127                    *                                                                        *
    1128                    **************************************************************************
    1129 000036b0           CNTSUPP
    1130 000036b0                   PUSH    A1
    1131 000036c0     5600          CLR     A0
    1132 000036d0     8621          MOVE    *A1,A1,L
    1133 000036e0     ca07          JRZ     CNTSUPPX        
    1134 000036f0           CNTSUPPL
    1135 000036f0     1020          INC     A0
    1136 00003700     0b40          CMPI    NOBJ,A0
         00003710     fe7f  
    1137 00003720     c903          JRHS    CNTSUPPX                ;WE'VE MAXED, SOMETHING IS WRONG
    1138 00003730     b621          MOVE    *A1(OSLINK),A1,L
         00003740     0020  
    1139 00003750     cbf9          JRNZ    CNTSUPPL
    1140 00003760           CNTSUPPX        
    1141 00003760                   PULL    A1
    1142 00003780     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   26

    1143                    
    1144                    **************************************************************************
    1145                    *                                                                        *
    1146                    * RANDOM - GENERATE A RANDOM NUMBER                                      *
    1147                    * RETURNS:                                                               *
    1148                    * A0 = 32 BIT RANDOM #                                                   *
    1149                    *                                                                        *
    1150                    **************************************************************************
    1151 00003790           RANDOM: PUSH    A1
    1152 000037a0     07a0          MOVE    @RAND,A0,L
         000037b0 00000000! 
    1153 000037d0     2020          SLA     1,A0
    1154 000037e0     cc03          JRV     RND2
    1155 000037f0     0ba0          ORI     2,A0
         00003800 00000002  
    1156 00003820     0780  RND2:   MOVE    A0,@RAND,L
         00003830 00000000! 
    1157 00003850     5621          CLR     A1
    1158 00003860     4220          ADDC    A1,A0   ;GET LAST BIT BACK TO MAKE 32
    1159 00003870     05a1          MOVE    @HCOUNT,A1
         00003880 c00001c0  
    1160 000038a0     6820          RL      A1,A0   ;RANDOM ROTATION
    1161 000038b0     4c00          MOVE    A0,A0   ;SET STATUS BITS
    1162 000038c0     09af          MMFM    SP,A1
         000038d0     0002  
    1163 000038e0     0960          RETS    
    1164                    
    1165                    **************************************************************************
    1166                    *                                                                        *
    1167                    * RANDU - GENERATE A UNIFORMLY DISTRIBUTED RANDOM # BETWEEN 1 AND [A0]   *
    1168                    * A0 = RANGE INPUT                                                       *
    1169                    * RETURNS:                                                               *
    1170                    * A0 = RANDOM #                                                          *
    1171                    *                                                                        *
    1172                    **************************************************************************
    1173 000038f0           RANDU:  PUSH    A1
    1174 00003900     4c01          MOVE    A0,A1
    1175 00003910     0d3f          CALLR   RANDOM
         00003920     ffe6  
    1176 00003930     5e20          MPYU    A1,A0
    1177 00003940     1020          INC     A0
    1178 00003950     09af          MMFM    SP,A1
         00003960     0002  
    1179 00003970     0960          RETS            
    1180                    *
    1181                    *GET SIGNED RANDOM # IN RANGE +/- A0
    1182                    *CALLING PARAMETERS: A0
    1183                    *RETURNS A0
    1184                    *
    1185 00003980           SRAND:
    1186 00003980     098f          MMTM    SP,A1
         00003990     4000  
    1187 000039a0     4c01          MOVE    A0,A1
    1188 000039b0     2420          SLL     1,A0
    1189 000039c0     0d5f          CALLA   RANDU
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   27

         000039d0 000038f0' 
    1190 000039f0     4420          SUB     A1,A0
    1191 00003a00     09af          MMFM    SP,A1
         00003a10     0002  
    1192 00003a20     0960          RETS
    1193                    **************************************************************************
    1194                    *                                                                        *
    1195                    * RANGRAND - GENERATE A RANDOM NUMBER IN A GIVEN RANGE.                  *
    1196                    * B0 = LOWER BOUND                                                       *
    1197                    * B1 = UPPER BOUND                                                       *
    1198                    * RETURNS                                                                *
    1199                    * A0 = RANDOM #                                                          *
    1200                    *                                                                        *
    1201                    **************************************************************************
    1202 00003a30           RANGRAND
    1203 00003a30                   PUSH    A1
    1204 00003a40                   PUSH    B1
    1205 00003a50     4411          SUB     B0,B1           ;NORMALIZE THE RANGE
    1206 00003a60     4e30          MOVE    B1,A0           ;SET RANGE FOR RANDU
    1207 00003a70     0d3f          CALLR   RANDU
         00003a80     ffe6  
    1208 00003a90     4e11          MOVE    B0,A1
    1209 00003aa0     4020          ADD     A1,A0
    1210 00003ab0                   PULL    B1
    1211 00003ad0                   PULL    A1
    1212 00003af0     0960          RETS
    1213                    
    1214                    *
    1215                    *RANDPER - RANDOM % ROUTINE
    1216                    *CALLING PARAMETERS:
    1217                    *A0=PROBABILITY OF EVENT (0-1000) P(A0=1000) = 1; P(A0=1) = 1/1000.
    1218                    *RETURNS CS IF PROBABILITY IS TRUE, CC FOR FALSE
    1219                    *RETURNS A0 = ACTUAL RANDOM # 0-999
    1220 00003b00           RANDPER:
    1221 00003b00     098f          MMTM    SP,A1,A2
         00003b10     6000  
    1222 00003b20     4c02          MOVE    A0,A2
    1223 00003b30     0d5f          CALLA   RANDOM
         00003b40 00003790' 
    1224 00003b60     09c1          MOVI    1000,A1
         00003b70     03e8  
    1225 00003b80     5e20          MPYU    A1,A0
    1226 00003b90     4840          CMP     A2,A0
    1227 00003ba0     09af          MMFM    SP,A1,A2
         00003bb0     0006  
    1228 00003bc0     0960          RETS            
    1229                    
    1230                    **************************************************************************
    1231                    *                                                                        *
    1232                    * FILLAREA - FILL A GIVEN SQUARE AREA ON THE SCREEN WITH A COLOR         *
    1233                    * A1 = [COLOR,PALETTE]                                                   *
    1234                    * A3 = DAG OF AREA [YPOS,XPOS]                                           *
    1235                    * A4 = [Y,X] SIZE OF AREA                                                *
    1236                    *                                                                        *
    1237                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   28

    1238 00003bd0           FILLAREA
    1239 00003bd0     098f          MMTM    SP,A1,A2,A4,A5
         00003be0     6c00  
    1240 00003bf0     c003          JRUC    AREACON
    1241                    **************************************************************************
    1242                    *                                                                        *
    1243                    * BLNKAREA - BLANK A GIVEN SQUARE AREA ON THE SCREEN                     *
    1244                    * A3 = DAG OF AREA [YPOS,XPOS]                                           *
    1245                    * A4 = [Y,X] SIZE OF AREA                                                *
    1246                    *                                                                        *
    1247                    **************************************************************************
    1248 00003c00           BLNKAREA
    1249 00003c00     098f          MMTM    SP,A1,A2,A4,A5
         00003c10     6c00  
    1250 00003c20     5621          CLR     A1                      ;CONSTANT 0:PALETTE 0
    1251 00003c30           AREACON
    1252 00003c30     4c82          MOVE    A4,A2
    1253 00003c40     09e4          MOVI    2000000H,A4             ;SOMEWHERE IN IMAGE ROM
         00003c50 02000000  
    1254 00003c70     09e5          MOVI    DMACAL,A5
         00003c80 0000800c  
    1255 00003ca0     0d3f          CALLR   DMAN
         00003cb0     014c  
    1256 00003cc0     09af          MMFM    SP,A1,A2,A4,A5
         00003cd0     0036  
    1257 00003ce0     0960          RETS
    1258                    
    1259                    **************************************************************************
    1260                    *                                                                        *
    1261                    * LOADATAB - LOAD A ANIMATION LIST FROM MAIN ANIMATION TABLE             *
    1262                    * A0 = FRAME TYPE                                                        *
    1263                    * A6 = MAIN ANIMATION TABLE                                              *
    1264                    * RETURN(S):                                                             *
    1265                    * A11 = PTR TO HEAD OF ANIMATION LIST                                    *
    1266                    *                                                                        *
    1267                    **************************************************************************
    1268 00003cf0           LOADATAB:
    1269 00003cf0     a2cf          MOVE    A6,-*SP,L
    1270 00003d00     0d5f          CALLA   BASFRM          ;OFFSET INTO LIST TABLE
         00003d10 0000f010' 
    1271 00003d30     86cb          MOVE    *A6,A11,L       ;POINT TO THE LIST
    1272 00003d40     97e6          MOVE    *SP+,A6,L
    1273 00003d50     0960          RETS
    1274                    
    1275                    **************************************************************************
    1276                    *                                                                        *
    1277                    * PFRAME - GET NEXT FRAME FROM ANIMATION LIST                            *
    1278                    * A8 = POINTER TO OBJECT BLOCK                                           *
    1279                    * A11 = POINTER TO NEXT FRAME IN THE ANIMATION LIST                      *
    1280                    * RETURN(S)                                                              *
    1281                    * A5 = TICKS FOR THIS FRAME                                              *
    1282                    * C BIT SET(JxC)  = END OF LIST WAS HIT                                  *
    1283                    * N BIT SET(JxN)  = SPECIAL FRAME ENCOUNTERED                            *
    1284                    *                                                                        *
    1285                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   29

    1286 00003d60     098f  PFRAME  MMTM    SP,A1,A4
         00003d70     4800  
    1287 00003d80     9761          MOVE    *A11+,A1,L              ;LOAD NEXT FRAME
    1288 00003d90     cb02          JRNE    PFRAME1                 ;NOT THE END OF THE LIST
    1289                    
    1290 00003da0     0de0          SETC                            ;SET CARRY FLAG
    1291 00003db0     c007          JRUC    PFRAMEX
    1292                    
    1293 00003dc0           PFRAME1
    1294 00003dc0     b504          MOVE    *A8(OFLAGS),A4,W
         00003dd0     0100  
    1295 00003de0     0d5f          CALLA   ANI                     ;SETUP NEW FRAME
         00003df0 00000000! 
    1296 00003e10           PFRAME2
    1297 00003e10     9565          MOVE    *A11+,A5,W              ;LOAD SLEEP TICKS PER FRAME
    1298 00003e20     0320          CLRC    
    1299                    
    1300 00003e30     09af  PFRAMEX MMFM    SP,A1,A4
         00003e40     0012  
    1301 00003e50     0960          RETS
    1302                    
    1303                    **************************************************************************
    1304                    *                                                                        *
    1305                    * BOUNDRY CHECK ROUTINES                                                 *
    1306                    *                                                                        *
    1307                    **************************************************************************
    1308                    **************************************************************************
    1309                    *                                                                        *
    1310                    * CKOUTOFX - CHECK THE OBJECT AGAINST UNIVERSE X START AND END           *
    1311                    *               IF IT IS OUT OF RANGE. PUT IT IN BOUNDS                  *
    1312                    * A8 = OBJECT                                                            *
    1313                    *                                                                        *
    1314                    **************************************************************************
    1315 00003e60           CKOUTOFX
    1316 00003e60     098f          MMTM    SP,A1,A2,A3
         00003e70     7000  
    1317 00003e80     b501          MOVE    *A8(OXPOS),A1,W
         00003e90     0090  
    1318 00003ea0     cf04          JRNN    CKOXMAX
    1319 00003eb0     5621          CLR     A1              ;IT'S LEFT OF UNIVERSE START
    1320 00003ec0     b028          MOVE    A1,*A8(OXPOS),W
         00003ed0     0090  
    1321 00003ee0     c00c          JRUC    CKOXXX
    1322 00003ef0           CKOXMAX
    1323 00003ef0     b502          MOVE    *A8(OSIZEX),A2,W
         00003f00     0140  
    1324 00003f10     2fe2          SRL     1,A2
    1325 00003f20     4041          ADD     A2,A1
    1326 00003f30     05a3          MOVE    @UNIVENDX,A3,W
         00003f40 00000000! 
    1327 00003f60     4861          CMP     A3,A1
    1328 00003f70     c203          JRLS    CKOXXX  
    1329 00003f80     4443          SUB     A2,A3           ;IT'S RIGHT OF UNIVERSE END
    1330 00003f90     b068          MOVE    A3,*A8(OXPOS),W
         00003fa0     0090  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   30

    1331 00003fb0           CKOXXX
    1332 00003fb0     09af          MMFM    SP,A1,A2,A3
         00003fc0     000e  
    1333 00003fd0     0960          RETS
    1334                    
    1335                    **************************************************************************
    1336                    *                                                                        *
    1337                    * CKBOUNDS - CHECK OBJECT AGAINST BOUNDRIES. THE PROPER VELOCITY         *
    1338                    *          IS ZERO'D IF A BOUNDRY IS HIT.                                *
    1339                    * A8 = OBJECT BLOCK PTR                                                  *
    1340                    *                                                                        *
    1341                    **************************************************************************
    1342 00003fe0           CKBOUNDS
    1343 00003fe0     098f          MMTM    SP,A1,A2,A3,A4
         00003ff0     7800  
    1344                    *DO X BOUNDRIES FIRST
    1345 00004000     b501          MOVE    *A8(OXPOS),A1,W
         00004010     0090  
    1346 00004020     05a2          MOVE    @WORLDTL,A2,W
         00004030 00000000! 
    1347 00004050     4441          SUB     A2,A1                   ;ADJUST FOR WORLD COORDS
    1348                    
    1349 00004060     b702          MOVE    *A8(OXVEL),A2,L         ;GET HIS VELOCITY
         00004070     0040  
    1350 00004080     ca0c          JREQ    CKYBND                  ;BR = NOT MOVING, FORGET IT
    1351 00004090     ce06          JRN     CKLBND                  ;BR = NEGATIVE, CHECK LEFT
    1352                    
    1353 000040a0     0b41          CMPI    PXMAX,A1                ;TOO FAR RIGHT?
         000040b0     fe0b  
    1354 000040c0     c408          JRLT    CKYBND                  ;BR = NO
    1355                    
    1356 000040d0     0d3f          CALLR   PSTOPX                  ;ZERO HIS X VELOCITY
         000040e0     0086  
    1357 000040f0     c005          JRUC    CKYBND
    1358                    
    1359 00004100     0b41  CKLBND  CMPI    PXMIN,A1                ;TOO FAR LEFT?
         00004110     fff5  
    1360 00004120     c702          JRGT    CKYBND                  ;BR = NO
    1361 00004130     0d3f          CALLR   PSTOPX
         00004140     0080  
    1362                    
    1363                    *NOW CHECK THE Y BOUNDRIES
    1364 00004150           CKYBND
    1365 00004150     b501          MOVE    *A8(OZPOS),A1,W         ;GET THE Z POSITION
         00004160     00d0  
    1366 00004170     05a3          MOVE    @PLZMIN,A3,W
         00004180 00000000! 
    1367 000041a0     05a4          MOVE    @PLZMAX,A4,W
         000041b0 00000000! 
    1368                    
    1369 000041d0     b702          MOVE    *A8(OZVEL),A2,L
         000041e0     00e0  
    1370 000041f0     ca10          JREQ    CKBNDX                  ;BR = NO VELOCITY, NO CHECK
    1371 00004200     ce08          JRN     CKUBND                  ;BR = NEGATIVE, CHECK YMIN
    1372                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   31

    1373 00004210     b502          MOVE    *A8(OZPLUS),A2,W
         00004220     01c0  
    1374 00004230     4041          ADD     A2,A1
    1375 00004240     4881          CMP     A4,A1                   ;HIT ROCK BOTTOM?
    1376 00004250     c40a          JRLT    CKBNDX                  ;BR = NO
    1377 00004260     0d3f          CALLR   PSTOPYZ                 ;ZERO Y VELOCITY
         00004270     0096  
    1378 00004280     c007          JRUC    CKBNDX
    1379                    
    1380 00004290           CKUBND
    1381 00004290     b502          MOVE    *A8(OZMINUS),A2,W
         000042a0     01b0  
    1382 000042b0     4441          SUB     A2,A1
    1383 000042c0     4861          CMP     A3,A1                   ;AT THE TOP?
    1384 000042d0     c702          JRGT    CKBNDX                  ;BR = NO
    1385 000042e0     0d3f          CALLR   PSTOPYZ
         000042f0     008e  
    1386                    
    1387 00004300     09af  CKBNDX  MMFM    SP,A1,A2,A3,A4
         00004310     001e  
    1388 00004320     0960          RETS
    1389                    
    1390                    **************************************************************************
    1391                    *                                                                        *
    1392                    * CKZBOUND - CHECK OBJECT AGAINST IT'S CURRENT Z BOUNDRIES AND ZERO IF   *
    1393                    *          IT IS HIT                                                     *
    1394                    * A8 = PTR TO OBJECT                                                     *
    1395                    *                                                                        *
    1396                    **************************************************************************
    1397 00004330           CKZBOUND
    1398 00004330     098f          MMTM    SP,A1,A2,A3,A4
         00004340     7800  
    1399 00004350     b501          MOVE    *A8(OZPOS),A1,W         ;GET THE Z POSITION
         00004360     00d0  
    1400 00004370     05a3          MOVE    @PLZMIN,A3,W
         00004380 00000000! 
    1401 000043a0     05a4          MOVE    @PLZMAX,A4,W
         000043b0 00000000! 
    1402 000043d0     b702          MOVE    *A8(OZVEL),A2,L
         000043e0     00e0  
    1403 000043f0     ca10          JREQ    CKZBNDX                 ;BR = NO VELOCITY, NO CHECK
    1404 00004400     ce08          JRN     CKUZBND                 ;BR = NEGATIVE, CHECK YMIN
    1405 00004410     b502          MOVE    *A8(OZPLUS),A2,W
         00004420     01c0  
    1406 00004430     4041          ADD     A2,A1
    1407 00004440     4881          CMP     A4,A1                   ;HIT ROCK BOTTOM?
    1408 00004450     c40a          JRLT    CKZBNDX                 ;BR = NO
    1409 00004460     0d3f          CALLR   PSTOPZ                  ;ZERO Y VELOCITY
         00004470     005a  
    1410 00004480     c007          JRUC    CKZBNDX
    1411 00004490           CKUZBND
    1412 00004490     b502          MOVE    *A8(OZMINUS),A2,W
         000044a0     01b0  
    1413 000044b0     4441          SUB     A2,A1
    1414 000044c0     4861          CMP     A3,A1                   ;AT THE TOP?
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   32

    1415 000044d0     c702          JRGT    CKZBNDX                 ;BR = NO
    1416 000044e0     0d3f          CALLR   PSTOPZ
         000044f0     0052  
    1417 00004500           CKZBNDX
    1418 00004500     09af          MMFM    SP,A1,A2,A3,A4
         00004510     001e  
    1419 00004520     0960          RETS
    1420                    
    1421                    **************************************************************************
    1422                    *                                                                        *
    1423                    * CKZADJST - CHECK OBJECT AGAINST IT'S CURRENT Z BOUNDRIES,              *
    1424                    *          IF A BOUNDRY IS HIT OR PASSED, ADJUST TO BOUNDRY              *
    1425                    *          AND ZERO VELOCITY                                             *
    1426                    * A8 = PTR TO OBJECT                                                     *
    1427                    *                                                                        *
    1428                    **************************************************************************
    1429 00004530           CKZADJST
    1430 00004530     098f          MMTM    SP,A1,A3,A4,A5
         00004540     5c00  
    1431 00004550     b501          MOVE    *A8(OZPOS),A1,W         ;GET THE Z POSITION
         00004560     00d0  
    1432 00004570     4c24          MOVE    A1,A4
    1433 00004580     b505          MOVE    *A8(OYPOS),A5,W
         00004590     00b0  
    1434 000045a0     05a3          MOVE    @PLZMAX,A3,W
         000045b0 00000000! 
    1435 000045d0     4423          SUB     A1,A3
    1436 000045e0     c704          JRGT    CKUZADJ
    1437 000045f0     0383          ABS     A3
    1438 00004600     4464          SUB     A3,A4
    1439 00004610     4465          SUB     A3,A5
    1440 00004620     c008          JRUC    CKZADJ1
    1441 00004630           CKUZADJ
    1442 00004630     05a3          MOVE    @PLZMIN,A3,W
         00004640 00000000! 
    1443 00004660     4461          SUB     A3,A1
    1444 00004670     c709          JRGT    CKZADJX
    1445 00004680     0381          ABS     A1
    1446 00004690     4024          ADD     A1,A4
    1447 000046a0     4025          ADD     A1,A5
    1448 000046b0           CKZADJ1
    1449 000046b0     0d3f          CALLR   PSTOPZ
         000046c0     0035  
    1450 000046d0     b088          MOVE    A4,*A8(OZPOS),W
         000046e0     00d0  
    1451 000046f0     b0a8          MOVE    A5,*A8(OYPOS),W
         00004700     00b0  
    1452 00004710           CKZADJX
    1453 00004710     09af          MMFM    SP,A1,A3,A4,A5
         00004720     003a  
    1454 00004730     0960          RETS
    1455                    
    1456                    **************************************************************************
    1457                    *                                                                        *
    1458                    * CKZAMIN - CHECK OBJECT AGAINST THE CURRENT ZMIN BOUNDRY                *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   33

    1459                    *               ZERO VELOCITY AND ADJUST POSITION TO THAT                *
    1460                    *               BOUNDRY IF IT WAS EXCEEDED.                              *
    1461                    * A8 = PTR TO OBJECT                                                     *
    1462                    *                                                                        *
    1463                    **************************************************************************
    1464 00004740           CKZAMIN
    1465 00004740     098f          MMTM    SP,A1,A2,A3,A4,A5
         00004750     7c00  
    1466 00004760     b501          MOVE    *A8(OZPOS),A1,W         ;GET THE Z POSITION
         00004770     00d0  
    1467 00004780     4c24          MOVE    A1,A4
    1468 00004790     b505          MOVE    *A8(OYPOS),A5,W
         000047a0     00b0  
    1469 000047b0     b702          MOVE    *A8(OZVEL),A2,L
         000047c0     00e0  
    1470 000047d0     cf11          JRNN    CKZAMINX                ;BR = 0/PLUS VELOCITY, NO CHECK
    1471 000047e0     b502          MOVE    *A8(OZMINUS),A2,W
         000047f0     01b0  
    1472 00004800     4441          SUB     A2,A1
    1473 00004810     05a3          MOVE    @PLZMIN,A3,W
         00004820 00000000! 
    1474 00004840     4461          SUB     A3,A1
    1475 00004850     c709          JRGT    CKZAMINX
    1476 00004860     0381          ABS     A1
    1477 00004870     4024          ADD     A1,A4
    1478 00004880     4025          ADD     A1,A5
    1479 00004890     0d3f          CALLR   PSTOPZ
         000048a0     0017  
    1480 000048b0     b088          MOVE    A4,*A8(OZPOS),W
         000048c0     00d0  
    1481 000048d0     b0a8          MOVE    A5,*A8(OYPOS),W
         000048e0     00b0  
    1482 000048f0           CKZAMINX
    1483 000048f0     09af          MMFM    SP,A1,A2,A3,A4,A5
         00004900     003e  
    1484 00004910     0960          RETS
    1485                    
    1486                    **************************************************************************
    1487                    *                                                                        *
    1488                    * OBJECT VELOCITY STOP ROUTINES                                          *
    1489                    *                                                                        *
    1490                    **************************************************************************
    1491                    *
    1492                    *PSTOP - STOP AN OBJECT, A8:OBJECT BLOCK PTR
    1493 00004920     0d3f  PSTOP   CALLR   PSTOPX
         00004930     0001  
    1494 00004940     c029          JRUC    PSTOPYZ
    1495                    *
    1496                    *PSTOPX - CLEAR AN OBJECTS X VELOCITY, A8:OBJECT BLOCK PTR
    1497 00004950     098f  PSTOPX  MMTM    SP,A0,A1        
         00004960     c000  
    1498 00004970     5621          CLR     A1
    1499 00004980     b228          MOVE    A1,*A8(OXVEL),L
         00004990     0040  
    1500 000049a0     b700          MOVE    *A8(OSHAD),A0,L
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   34

         000049b0     0240  
    1501 000049c0     ca02          JREQ    PSTOPXX
    1502 000049d0     b220          MOVE    A1,*A0(OXVEL),L         ;STOP THE SHADOW
         000049e0     0040  
    1503 000049f0           PSTOPXX
    1504 000049f0     09af          MMFM    SP,A0,A1
         00004a00     0003  
    1505 00004a10     0960          RETS
    1506                    **************************************************************************
    1507                    *                                                                        *
    1508                    * PSTOPZ - STOP AN OBJECTS Z VELOCITY ONLY                               *
    1509                    * A8 = PTR TO OBJECT                                                     *
    1510                    *                                                                        *
    1511                    **************************************************************************
    1512 00004a20           PSTOPZ
    1513 00004a20     098f          MMTM    SP,A1,A2,A3
         00004a30     7000  
    1514 00004a40     b702          MOVE    *A8(OYVEL),A2,L
         00004a50     0060  
    1515 00004a60     4c43          MOVE    A2,A3                   ;KEEP HERE FOR SIGN COMPARISON
    1516 00004a70     b701          MOVE    *A8(OZVEL),A1,L
         00004a80     00e0  
    1517 00004a90     0381          ABS     A1
    1518 00004aa0     0382          ABS     A2
    1519 00004ab0     4422          SUB     A1,A2
    1520 00004ac0     4c63          MOVE    A3,A3                   ;SWITCH SIGNS?
    1521 00004ad0     cf01          JRNN    PSTOPZN                 ;BR = NO
    1522 00004ae0     03a2          NEG     A2
    1523 00004af0           PSTOPZN
    1524 00004af0     5621          CLR     A1
    1525 00004b00     b228          MOVE    A1,*A8(OZVEL),L
         00004b10     00e0  
    1526 00004b20     b248          MOVE    A2,*A8(OYVEL),L
         00004b30     0060  
    1527 00004b40     b703          MOVE    *A8(OSHAD),A3,L
         00004b50     0240  
    1528 00004b60     ca04          JREQ    PSTOPZNS
    1529 00004b70     b223          MOVE    A1,*A3(OZVEL),L         ;STOP THE SHADOW
         00004b80     00e0  
    1530 00004b90     b223          MOVE    A1,*A3(OYVEL),L
         00004ba0     0060  
    1531 00004bb0           PSTOPZNS
    1532 00004bb0     09af          MMFM    SP,A1,A2,A3
         00004bc0     000e  
    1533 00004bd0     0960          RETS
    1534                    
    1535                    *PSTOPYZ - CLEAR AN OBJECTS(AND ITS SHADOW) Y & Z VELOCITY, A8:OBJECT BLOCK PTR
    1536 00004be0           PSTOPYZ
    1537 00004be0     098f          MMTM    SP,A0,A1
         00004bf0     c000  
    1538 00004c00     5621          CLR     A1
    1539 00004c10     b228          MOVE    A1,*A8(OYVEL),L
         00004c20     0060  
    1540 00004c30     b228          MOVE    A1,*A8(OZVEL),L
         00004c40     00e0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   35

    1541 00004c50     b700          MOVE    *A8(OSHAD),A0,L
         00004c60     0240  
    1542 00004c70     ca04          JREQ    PSTOPYZX
    1543 00004c80     b220          MOVE    A1,*A0(OYVEL),L         ;STOP THE SHADOW
         00004c90     0060  
    1544 00004ca0     b220          MOVE    A1,*A0(OZVEL),L         
         00004cb0     00e0  
    1545 00004cc0           PSTOPYZX
    1546 00004cc0     09af          MMFM    SP,A0,A1
         00004cd0     0003  
    1547 00004ce0     0960          RETS
    1548                    
    1549                    *
    1550                    *YFLP - SET OBJECT Y-FLIP, A8:OBJECT BLOCK PTR
    1551 00004cf0     098f  YFLP    MMTM    SP,A1,A4
         00004d00     4800  
    1552 00004d10     b504          MOVE    *A8(OFLAGS),A4
         00004d20     0100  
    1553 00004d30     0ba4          ORI     M_FLIPH,A4
         00004d40 00000010  
    1554 00004d60     c007          JRUC    STUFLAGS
    1555                    *
    1556                    *NOYFLP - CLEAR OBJECT Y-FLIP, A8:OBJECT BLOCK PTR      
    1557 00004d70     098f  NOYFLP  MMTM    SP,A1,A4
         00004d80     4800  
    1558 00004d90     b504          MOVE    *A8(OFLAGS),A4
         00004da0     0100  
    1559 00004db0     0b84          ANDNI   M_FLIPH,A4
         00004dc0 00000010  
    1560 00004de0           STUFLAGS
    1561 00004de0     b701          MOVE    *A8(OIMG),A1,L          ;GET THE CURRENT IMAGE POINTER
         00004df0     0180  
    1562 00004e00     0d5f          CALLA   ANI                     ;SETUP THE "NEW" IMAGE
         00004e10 00000000! 
    1563 00004e30     09af  UNFLPD  MMFM    SP,A1,A4
         00004e40     0012  
    1564 00004e50     0960          RETS
    1565                    
    1566                    *
    1567                    *SEE IF THE GUY WANTS TO FLIP LEFT OR RIGHT
    1568 00004e60     1f87  PSWLR   BTST    BPRYTE,A7               ;SWITCHED TO RIGHT
    1569 00004e70     cbef          JRNE    NOYFLP                  ;NO
    1570 00004e80     1fa7  SWLF    BTST    BPLEFT,A7               ;SWITCHED TO LEFT
    1571 00004e90     cbe5          JRNE    YFLP                    ;NO
    1572 00004ea0     0960          RETS
    1573                    
    1574                    **************************************************************************
    1575                    *                                                                        *
    1576                    * SYNCUP - SYNCHRONIZE WITH THE NEXT DISPLAY INTERRUPT, I.E.             *
    1577                    *        WAIT UNTIL THE NEXT INTERRUPT IS FINISHED BEFORE RETURNING      *
    1578                    *                                                                        *
    1579                    **************************************************************************
    1580 00004eb0     a20f  SYNCUP  MOVE    A0,-*SP,L
    1581 00004ec0     5600          CLR     A0
    1582 00004ed0     0780          MOVE    A0,@INTSYNC0,L  ;CLEAR HALF SCREEN SYNC
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   36

         00004ee0 00000000! 
    1583                    
    1584 00004f00     07a0  SYNCUP1 MOVE    @INTSYNC0,A0,L
         00004f10 00000000! 
    1585 00004f30     cafc          JREQ    SYNCUP1         ;END HASN'T HIT YET
    1586 00004f40     97e0          MOVE    *SP+,A0,L
    1587 00004f50     0960          RETS
    1588                    
    1589                    **************************************************************************
    1590                    *                                                                        *
    1591                    * SYNCHALF - SYNCHRONIZE WITH THE HALF SCREEN INTERRUPT                  *
    1592                    *                                                                        *
    1593                    **************************************************************************
    1594 00004f60           SYNCHALF
    1595 00004f60     098f          MMTM    SP,A0,A1
         00004f70     c000  
    1596 00004f80     09e1          MOVI    INTSYNC0,A1
         00004f90 00000000! 
    1597 00004fb0     c005          JRUC    SYNCSD
    1598                    **************************************************************************
    1599                    *                                                                        *
    1600                    * SYNCFULL - SYNCHRONIZE WITH THE FULL SCREEN INTERRUPT                  *
    1601                    *                                                                        *
    1602                    **************************************************************************
    1603 00004fc0           SYNCFULL
    1604 00004fc0     098f          MMTM    SP,A0,A1
         00004fd0     c000  
    1605 00004fe0     09e1          MOVI    INTSYNC1,A1
         00004ff0 00000000! 
    1606                    
    1607 00005010     5600  SYNCSD  CLR     A0
    1608 00005020     8001          MOVE    A0,*A1,W        ;CLEAR HALF SCREEN SYNC
    1609                    
    1610 00005030     8420  SYNCSD1 MOVE    *A1,A0,W
    1611 00005040     cafe          JREQ    SYNCSD1         ;END HASN'T HIT YET
    1612 00005050     09af          MMFM    SP,A0,A1
         00005060     0003  
    1613 00005070     0960          RETS
    1614                    **************************************************************************
    1615                    *                                                                        *
    1616                    * DTIME - USED TO DMA AN IMAGE                                           *
    1617                    * A1 = [CONSTANT COLOR,PALETTE(STUFFED IN DTIME)]                        *
    1618                    * A3 = DAG [Y,X]                                                         *
    1619                    * A5 = [OFFSET,CONTROL]                                                  *
    1620                    * A14 = ADDRESS OF IMAGE HEADER                                          *
    1621                    *                                                                        *
    1622                    **************************************************************************
    1623 00005080           DTIME:
    1624 00005080     098f          MMTM    SP,A0,A1
         00005090     c000  
    1625 000050a0     b7c0          MOVE    *A14(ICMAP),A0,L        ;GET THE PALETTE
         000050b0     0060  
    1626 000050c0     0d5f          CALLA   FINDPAL                 ;GET THE CORRECT COLOR MAP #
         000050d0 00000000! 
    1627 000050f0     cb01          JRNZ    DTIME1                  ;BR = PALETTE WAS FOUND
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   37

    1628 00005100     5600          CLR     A0                      ;DEFAULT TO FIXED PALETTE
    1629 00005110           DTIME1
    1630 00005110     ec01          MOVX    A0,A1
    1631 00005120     0d5f          CALLA   QDMA                    ;QUEUE THIS SUCKAH
         00005130 00000000! 
    1632 00005150     09af          MMFM    SP,A0,A1
         00005160     0003  
    1633 00005170     0960          RETS
    1634                    **************************************************************************
    1635                    *                                                                        *
    1636                    * DMAN - MANUAL DMA, ALL REGS MUST BE SETUP UPON CALLING                 *
    1637                    *                                                                        *
    1638                    **************************************************************************
    1639 00005180     c080  DMAN    JAUC    QDMAN
         00005190 00000000! 
    1640                    **************************************************************************
    1641                    *                                                                        *
    1642                    * DMAWAIT - WAIT ON THE DMA BUSY BIT TO CLEAR                            *
    1643                    *                                                                        *
    1644                    **************************************************************************
    1645 000051b0           DMAWAIT 
    1646 000051b0                   PUSH    A0
    1647 000051c0           DMAWAITL
    1648 000051c0     05a0          MOVE    @DMACTRL,A0,W   ;DMA BUSY?
         000051d0 01a80000  
    1649 000051f0     cefc          JRN     DMAWAITL        ;BR = YES
    1650 00005200                   PULL    A0
    1651 00005220     0960          RETS
    1652                    **************************************************************************
    1653                    *                                                                        *
    1654                    * DMAQWAIT - WAIT FOR DMA QUEUES TO EMPTY, THEN WAIT FOR DMA TO FINISH   *
    1655                    *          THE LAST ONE.                                                 *
    1656                    *                                                                        *
    1657                    **************************************************************************
    1658 00005230           DMAQWAIT
    1659 00005230                   PUSH    A0
    1660 00005240           DMAQWT1
    1661 00005240     05a0          MOVE    @TOPQ0CNT,A0,W  
         00005250 00000000! 
    1662 00005270     cbfc          JRNE    DMAQWT1
    1663 00005280     05a0          MOVE    @TOPQ1CNT,A0,W  
         00005290 00000000! 
    1664 000052b0     cbf8          JRNE    DMAQWT1
    1665 000052c0     05a0          MOVE    @BOTQ0CNT,A0,W  
         000052d0 00000000! 
    1666 000052f0     cbf4          JRNE    DMAQWT1
    1667 00005300     05a0          MOVE    @BOTQ1CNT,A0,W  
         00005310 00000000! 
    1668 00005330     cbf0          JRNE    DMAQWT1
    1669 00005340                   PULL    A0
    1670 00005360           DMAQWT2
    1671 00005360     4dbd          MOVE    B13,B13
    1672 00005370     cae3          JRZ     DMAWAIT
    1673 00005380     c0fd          JRUC    DMAQWT2
    1674                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   38

    1675                    *                                                                        *
    1676                    * DMAHALT - HALT THE DMA                                                 *
    1677                    *                                                                        *
    1678                    **************************************************************************
    1679 00005390           DMAHALT
    1680 00005390                   PUSH    A0
    1681 000053a0     5600          CLR     A0
    1682 000053b0     0580          MOVE    A0,@DMACTRL,W           ;HALT THE DMA                    
         000053c0 01a80000  
    1683 000053e0                   PULL    A0
    1684 00005400     0960          RETS
    1685                    *
    1686                    *CMAPRS - RESET THE COLOR MAP SELECT
    1687 00005410     5600  CMAPRS  CLR     A0
    1688                    *CMAPSL - SELECT THE COLOR MAP(0-15 IN A0)
    1689 00005420     a22f  CMAPSL  MOVE    A1,-*SP,L
    1690 00005430     0d5f          CALLA   DMAWAIT
         00005440 000051b0' 
    1691 00005460     0580          MOVE    A0,@CMAPSEL
         00005470 01a80080  
    1692 00005490     97e1          MOVE    *SP+,A1,L
    1693 000054a0     0960          RETS
    1694                    
    1695                    **************************************************************************
    1696                    *                                                                        *
    1697                    * CRINIT - COLOR RAM INITIALIZATION, FIRST CLEAR ALL COLOR RAM, THEN     *
    1698                    *        FILL WITH PALETTES.                                             *
    1699                    *                                                                        *
    1700                    **************************************************************************
    1701 000054b0           CRINIT
    1702 000054b0     098f          MMTM    SP,A0,A1,A2,A6
         000054c0     e200  
    1703 000054d0     09e1          MOVI    COLRAM,A1
         000054e0 01800000  
    1704 00005500     5600          CLR     A0
    1705 00005510     09e6          MOVI    10000H,A6,L
         00005520 00010000  
    1706                    *CLEAR ALL COLOR PALETTES
    1707 00005540           CRINIT1
    1708 00005540     9201          MOVE    A0,*A1+,L       ;STUFF TWO WORDS AT A TIME
    1709 00005550     3c46          DSJS    A6,CRINIT1
    1710                    
    1711 00005560     09af          MMFM    SP,A0,A1,A2,A6 ;<----
         00005570     0047  
    1712 00005580     0960          RETS                   ;<----
    1713                    
    1714                    **************************************************************************
    1715                    *                                                                        *
    1716                    * CRLOAD - LOAD COLOR RAM FROM A ROM TABLE                               *
    1717                    * A1 = START OF ROM TABLE                                                *
    1718                    * A2 = COLOR RAM START ADDRESS                                           *
    1719                    * A6 = PALETTE COUNT                                                     *
    1720                    *                                                                        *
    1721                    **************************************************************************
    1722 00005590           CRLOAD
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   39

    1723 00005590     098f          MMTM    SP,A0,A1,A2
         000055a0     e000  
    1724 000055b0           CRLOAD1
    1725 000055b0     9420          MOVE    *A1+,A0,W       ;GRAB FIRST COLOR FROM THIS TABLE
    1726 000055c0     ce05          JRN     CRLOAD4         ;BR = NULL PALETTE
    1727 000055d0           CRLOAD3
    1728 000055d0     8002          MOVE    A0,*A2,W        ;STUFF COLOR
    1729 000055e0     9420          MOVE    *A1+,A0,W       ;GRAB NEXT COLOR FROM THIS TABLE
    1730 000055f0     ce02          JRN     CRLOAD4         ;BR = NEXT PALETTE
    1731 00005600     1202          ADDK    16,A2           ;INC THIS WAY SO WE DON'T OVERRUN PALETTES
    1732 00005610     c0fb          JRUC    CRLOAD3
    1733                    
    1734 00005620           CRLOAD4
    1735 00005620     0b02          ADDI    1000H,A2        ;NEXT PALETTE
         00005630     1000  
    1736 00005640     2e82          SRL     12,A2
    1737 00005650     2582          SLL     12,A2           ;MASK OFF LOW BULLSHIT
    1738 00005660     3d86          DSJ     A6,CRLOAD1
    1739                    
    1740 00005670     09af          MMFM    SP,A0,A1,A2
         00005680     0007  
    1741 00005690     0960          RETS
    1742                    
    1743                    *
    1744                    *SCRCLR - CLEAR THE SCREEN WITH EUGENE
    1745                    *ONLY CALL WITH INTERRUPTS DISABLED AND THE DMA SHUT DOWN, OTHERWISE
    1746                    *       USE CLR_SCRN
    1747 000056a0     5600  SCRCLR  CLR     A0
    1748                    *SCRFIL - FILL SCREEN WITH A0
    1749 000056b0           SCRFIL:
    1750 000056b0     098f          MMTM    SP,A1,A2
         000056c0     6000  
    1751 000056d0     5621          CLR     A1
    1752 000056e0     0581          MOVE    A1,@CMAPSEL,W                   ;SELECT COLOR MAP 0
         000056f0 01a80080  
    1753 00005710     09e1          MOVI    SCREEN,A1,L
         00005720 00000000  
    1754 00005740     09e2          MOVI    (SCRNE-SCREEN)/32,A2,L
         00005750 00010000  
    1755 00005770     9201  SCRLP   MOVE    A0,*A1+,L
    1756 00005780     3c42          DSJS    A2,SCRLP
    1757 00005790     09af          MMFM    SP,A1,A2
         000057a0     0006  
    1758 000057b0     0960          RETS
    1759                    
    1760                    *
    1761                    *LAST2CLR - CLEAR LAST TWO LINES OF BIT MAP(I.E. SET AUTO ERASE COLOR)
    1762 000057c0           LAST2CLR
    1763 000057c0     5600          CLR     A0
    1764                    *
    1765                    *LAST2FIL - FILL LAST TWO LINES OF BIT MAP
    1766                    *A0 = FILL COLOR
    1767 000057d0           LAST2FIL
    1768 000057d0     0580          MOVE    A0,@ERASELOC,W                  ;STUFF DA COLOR
         000057e0 01800ff0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   40

    1769 00005800     0960          RETS
    1770                    **************************************************************************
    1771                    *                                                                        *
    1772                    * SETPPROC - SETUP TI'S PIXEL PROCESSING REGISTER'S (BFILE), TO MATCH    *
    1773                    *          THE ZUNIT SYSTEM.                                             *
    1774                    * NOTE:    IF YOU WANT TO DO ANY SPECIAL TRICKS, DON'T USE THIS.         *
    1775                    *                                                                        *
    1776                    **************************************************************************
    1777 00005810           SETPPROC
    1778 00005810                   PUSH    A0
    1779 00005820     09d4          MOVI    OFFSETVAL,B4    ;Set up OFFSET register
         00005830     0000  
    1780 00005840     09d8          MOVI    0,B8                    ;Set background color
         00005850     0000  
    1781 00005860     09c0          MOVI    SCRN_PTCH,A0            ;Get Screen Pitch
         00005870     1000  
    1782 00005880     4e01          MOVE    A0,B1
    1783 00005890     4e03          MOVE    A0,B3
    1784 000058a0     6a00          LMO     A0,A0                   ;Convert in temporary register
    1785 000058b0     0580          MOVE    A0,@CONVSP              ;Move to CONVSP io register
         000058c0 c0000130  
    1786 000058e0     0580          MOVE    A0,@CONVDP              ;Move to CONVDP io register
         000058f0 c0000140  
    1787 00005910                   PULL    A0
    1788 00005930     0960          RETS
    1789                    
    1790                    
    1791                    ************  CLEAR SCREEN ROUTINE  *********************
    1792 00005940           CLR_SCRN
    1793 00005940           clr_scrn:
    1794 00005940     5600          CLR     A0
    1795 00005950     098f          MMTM    SP,A1,A2,A3
         00005960     7000  
    1796 00005970     05a3          MOVE    @DISPLAYON,A3,W
         00005980 00000000! 
    1797 000059a0     5621          CLR     A1
    1798 000059b0     0581          MOVE    A1,@DISPLAYON,W
         000059c0 00000000! 
    1799 000059e0     0d3f          CALLR   DMAQWAIT                        ;WAIT ON DMA
         000059f0     ff83  
    1800 00005a00     5621          CLR     A1
    1801 00005a10     0581          MOVE    A1,@CMAPSEL,W                   ;SELECT COLOR MAP 0
         00005a20 01a80080  
    1802 00005a40     09e1          MOVI    SCREEN,A1,L
         00005a50 00000000  
    1803 00005a70     09e2          MOVI    ((SCRNE-2000H)-SCREEN)/32,A2,L
         00005a80 0000ff00  
    1804 00005aa0     9201  CLRLP   MOVE    A0,*A1+,L
    1805 00005ab0     3c42          DSJS    A2,CLRLP
    1806 00005ac0     0583          MOVE    A3,@DISPLAYON,W
         00005ad0 00000000! 
    1807 00005af0     09af          MMFM    SP,A1,A2,A3
         00005b00     000e  
    1808 00005b10     0960          RETS
    1809                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   41

    1810                    *       color to clear to stored in Lines 510 and 511
    1811                    *****   MOVE    A13,-*SP,L      ;STACK THIS
    1812                    *****   PUSHST
    1813                    *****   DINT
    1814                    *****   CALLA   DMAWAIT         ;WAIT FOR THE DMA TO BE DONE
    1815                    *****
    1816                    *****   MMTM    SP,B12,B13
    1817                    *****   move    @convdp,b12
    1818                    *****   MOVE    @DPYCTL,b13,0           ;Copy display control reg.
    1819                    *****   mmtm    sp,b13,b12,B4,B3
    1820                    *****   move    b13,a13                 ; save in A file 
    1821                    *****   movi    SCRN_PTCH*2,B3  ;Get Screen Pitch
    1822                    *****   movi    12H,b12
    1823                    *****   move    b12,@CONVDP             ;Move to CONVDP io register
    1824                    *****
    1825                    ****** Set SRT=1.  This converts pixel accesses to VRAM SR transfer cycles.
    1826                    *****
    1827                    *****   ANDNI   SRE+ENV,a13             ;Turn off screen refresh
    1828                    *****   ORI     SRT,a13                 ;Enable SR transfers
    1829                    *****   MOVE    a13,@DPYCTL,0           ;Load new display control
    1830                    *****   MOVE    @DPYCTL,a13,0           ;Read back to be safe!
    1831                    *****
    1832                    ****** Load frame buffer for 1st line into VRAM shift registers.
    1833                    *****
    1834                    *****   CLR     B4                      ;Origin at start of memory
    1835                    *****   movi    (255*Y),daddr                   ; zero line
    1836                    *****   cvxyl   daddr,daddr
    1837                    *****   PIXT    *DADDR,daddr            ;Load VRAM shift registers
    1838                    *****
    1839                    ****** Transfer contents of VRAM shift registers to rest of frame buffer.
    1840                    *****
    1841                    *****   clr     daddr
    1842                    *****   MOVI    (1*X)+(200*Y),DYDX      ;Set B7 = (1,200)
    1843                    *****   FILL     XY                             ;200 SR-to-memory transfers
    1844                    *****
    1845                    ****** Restore previous contents of registers.
    1846                    *****
    1847                    *****   mmfm    sp,b13,b12,B4,B3
    1848                    *****   move    b12,@convdp
    1849                    *****           MOVE    b13,@DPYCTL,0           ;Copy display control reg.
    1850                    *****   MMFM    SP,B12,B13
    1851                    *****   POPST
    1852                    *****   MOVE    *SP+,A13,L              
    1853                    *****   rets
    1854                    
    1855                    **************************************************************************
    1856                    *                                                                        *
    1857                    * ENINIT - ENEMY DATA STRUCTURE AND OBJECT INITIALIZATION                *
    1858                    *                                                                        *
    1859                    * A6  = PTR TO MAIN ANIMATION TABLE                                      *
    1860                    * A5  = WALKING YX VELOCITY, IF APPLICABLE                               *
    1861                    * A13 = PTR TO PROC BLOC                                                 *
    1862                    * A14 = PTR TO INIT TABLE                                                *
    1863                    * RETURN(S)                                                              *
    1864                    * A0  = PTR TO OBJECT SHADOW                                             *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   42

    1865                    * A8  = PTR TO OBJECT BLOCK                                              *
    1866                    * A9  = CLEARED FRAME PTR                                                *
    1867                    * A11 = CLEARED TEMP                                                     *
    1868                    * A10 = ENEMY FLAGS                                                      *
    1869                    * Z BIT CLR = EVERYTHING WENT FINE                                       *
    1870                    * Z BIT SET = OBJECT OR PALETTE CREATE ERROR                             *
    1871                    * --------------------------------------------------------------------   *
    1872                    * ENEMY DATA STRUCTURE:                                                  *
    1873                    * MNEM. PBLOCK LOCATION REGISTER        DESCRIP.                         *
    1874                    * ----- --------------- --------        --------                         *
    1875                    * ETEMP  (PDATA)        A11             TEMP STORAGE FOR SLEEPS          *
    1876                    * EFLAGS (PDATA+20H)    A10             FLAGS                            *
    1877                    * EFRM   (PDATA+40H)    A9              CURRENT FRAME(IF ANIMATING)      *
    1878                    * EOBJ   (PDATA+60H)    A8              OBJECT BLOCK PTR                 *
    1879                    * ESWTCH (PDATA+80H)    A7              [FRANIM COMMAND,SWITCH BITS]     *
    1880                    * EMAINT (PDATA+A0H)    A6              PTR TO MAIN ANIMATION TABLE      *
    1881                    * EYXVEL (PDATA+C0H)    A5              THIS TEMP. HOLDS MOVING YX VEL.  *
    1882                    *                                                                        *
    1883                    **************************************************************************
    1884                    *ENTRY POINT; A1  = INITIAL ENEMY POSITION [Y,X] UPPER LEFT IN WORLD COORDS
    1885 00005b20           ENINITUL
    1886 00005b20     098f          MMTM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         00005b30     7f04  
    1887 00005b40     099f          MMTM    SP,B0,B1
         00005b50     c000  
    1888 00005b60     1830          MOVK    1,B0    
    1889 00005b70     5631          CLR     B1
    1890 00005b80     c024          JRUC    ENEMYINI
    1891                    *ENTRY POINT; A1  = INITIAL ENEMY POSITION [Y,X] LOWER LEFT IN WORLD COORDS
    1892 00005b90           ENINITLL
    1893 00005b90     098f          MMTM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         00005ba0     7f04  
    1894 00005bb0     099f          MMTM    SP,B0,B1
         00005bc0     c000  
    1895 00005bd0     09d0          MOVI    -1,B0   
         00005be0     ffff  
    1896 00005bf0     5631          CLR     B1
    1897 00005c00     c01c          JRUC    ENEMYINI
    1898                    *ENTRY POINT; A1  = INITIAL ENEMY POSITION [Y,X] ANIMATION POINT IN WORLD COORDS
    1899 00005c10           ENINIT
    1900 00005c10     098f          MMTM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         00005c20     7f04  
    1901 00005c30     099f          MMTM    SP,B0,B1
         00005c40     c000  
    1902 00005c50     5610          CLR     B0      
    1903 00005c60     5631          CLR     B1
    1904 00005c70     c015          JRUC    ENEMYINI
    1905                    *ENTRY POINT(NO SHADOW); A1 = ENEMY POSITION [Y,X] UPPER LEFT
    1906 00005c80           ESINITUL
    1907 00005c80     098f          MMTM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         00005c90     7f04  
    1908 00005ca0     099f          MMTM    SP,B0,B1
         00005cb0     c000  
    1909 00005cc0     1830          MOVK    1,B0    
    1910 00005cd0     1831          MOVK    1,B1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   43

    1911 00005ce0     c00e          JRUC    ENEMYINI
    1912                    *ENTRY POINT(NO SHADOW); A1 = ENEMY POSITION [Y,X] LOWER LEFT
    1913 00005cf0           ESINITLL
    1914 00005cf0     098f          MMTM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         00005d00     7f04  
    1915 00005d10     099f          MMTM    SP,B0,B1
         00005d20     c000  
    1916 00005d30     09d0          MOVI    -1,B0   
         00005d40     ffff  
    1917 00005d50     1831          MOVK    1,B1
    1918 00005d60     c006          JRUC    ENEMYINI
    1919                    *ENTRY POINT(NO SHADOW); A1  = ENEMY POSITION [Y,X] ANIMATION POINT
    1920 00005d70           ESINIT
    1921 00005d70     098f          MMTM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         00005d80     7f04  
    1922 00005d90     099f          MMTM    SP,B0,B1
         00005da0     c000  
    1923 00005db0     5610          CLR     B0      
    1924 00005dc0     1831          MOVK    1,B1
    1925                    *ENEMYINI - MAIN ENTRY POINT FOR ENEMY INITIALIZATION
    1926                    *A14 = ENEMY POSITION SPEC:
    1927                    *       0 = [Y,X] POSITION OF ANIMATION POINT
    1928                    *       1 = [Y,X] POSITION OF UPPER LEFT CORNER
    1929                    *       2 = [Y,X] POSITION OF LOWER LEFT CORNER
    1930 00005dd0           ENEMYINI
    1931                    *INITIALIZE PALETTE
    1932 00005dd0     0d5f          CALLA   GPALOBJ
         00005de0 00000030' 
    1933 00005e00     ca3a          JRZ     ENINITX         ;BR = FAILURE ON PALETTE CREATION
    1934 00005e10     4c08          MOVE    A0,A8           ;PTR FOR INSERTION TO DATA BLOCK
    1935 00005e20     b3a0          MOVE    A13,*A0(OPLINK),L       ;LINK HOME
         00005e30     01f0  
    1936                    
    1937 00005e40     56e7          CLR     A7              ;FRANIM FRAME STEP : CLEAR SWITCHES
    1938 00005e50     5729          CLR     A9              ;CLEAR FRAME PTR
    1939 00005e60     574a          CLR     A10             ;CLEAR FLAGS
    1940 00005e70     576b          CLR     A11             ;CLEAR TEMP
    1941                    
    1942 00005e80     0b0d          ADDI    EINIEND,A13
         00005e90     0160  
    1943 00005ea0     5684          CLR     A4              ;CLEAR EBCNTRS
    1944 00005eb0     098d          MMTM    A13,A4,A5,A6,A7,A8,A9,A10,A11   ;STUFF THE DATA BLOCK
         00005ec0     0ff0  
    1945                    
    1946                    *INITIALIZE THE ENEMYS OBJECT BLOCK
    1947 00005ed0     0d5f          CALLA   STFOBJ
         00005ee0 00000000! 
    1948                    
    1949 00005f00                   TEST    B0
    1950 00005f10     ca07          JREQ    ENEMYINR
    1951 00005f20     ce10          JRN     ENEMYILL
    1952                    *CALLED WITH UPPER LEFT CORNER AS AN INITIAL POSITION
    1953 00005f30           ENEMYIUL
    1954 00005f30     b020          MOVE    A1,*A0(OXPOS),W         ;SET INITIAL POSITION
         00005f40     0090  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   44

    1955 00005f50     2e01          SRL     16,A1
    1956 00005f60     b020          MOVE    A1,*A0(OYPOS),W
         00005f70     00b0  
    1957 00005f80     c012          JRUC    ENEMYIST
    1958                    *CALLED WITH ANIMATION POINT AS A POSITION
    1959 00005f90           ENEMYINR
    1960 00005f90     5642          CLR     A2
    1961 00005fa0     ee22          MOVY    A1,A2                   ;Y POSITION
    1962 00005fb0     ec23          MOVX    A1,A3
    1963 00005fc0     2603          SLL     16,A3                   ;X POSITION
    1964 00005fd0     b404          MOVE    *A0(OFLAGS),A4,W        ;SAME FLAGS
         00005fe0     0100  
    1965 00005ff0     0d5f          CALLA   GANISAG                 ;ADJUST NEW POSITION
         00006000 00000000! 
    1966 00006020     c008          JRUC    ENEMYIST
    1967                    *CALLED WITH LOWER LEFT CORNER AS AN INITIAL POSITION
    1968 00006030           ENEMYILL
    1969 00006030     b020          MOVE    A1,*A0(OXPOS),W         ;X IS COOL
         00006040     0090  
    1970 00006050     b402          MOVE    *A0(OSIZEY),A2,W        ;GET THE IMAGE HEADER
         00006060     0150  
    1971 00006070     2e01          SRL     16,A1
    1972 00006080     e241          SUBXY   A2,A1                   ;MOVE TO THE Y TOP
    1973 00006090     b020          MOVE    A1,*A0(OYPOS),W
         000060a0     00b0  
    1974                    
    1975 000060b0           ENEMYIST
    1976 000060b0     0d3f          CALLR   SETZPOS                 ;NOW SET THE Z POSITION
         000060c0     fb01  
    1977 000060d0     0d5f          CALLA   INSOBJ                  ;PUT THE OBJECT ON THE LIST      
         000060e0 00000000! 
    1978 00006100     09e1          MOVI    ENEMIES,A1
         00006110 00000000! 
    1979 00006130     0d3f          CALLR   ADDSUPP
         00006140     fcfb  
    1980 00006150     4c31          MOVE    B1,B1
    1981 00006160     cb03          JRNE    ENNOSH                  ;BR = DON'T CREATE THE SHADOW   
    1982 00006170     0d5f          CALLA   SHADST                  ;GIVE THIS GUY A SHADOW
         00006180 00000000! 
    1983 000061a0           ENNOSH
    1984 000061a0                   TEST    A8                      ;CLEAR ZERO BIT
    1985 000061b0           ENINITX
    1986 000061b0     09bf          MMFM    SP,B0,B1
         000061c0     0003  
    1987 000061d0     09af          MMFM    SP,A1,A2,A3,A4,A5,A6,A7,A13
         000061e0     20fe  
    1988 000061f0     0960          RETS
    1989                    **************************************************************************
    1990                    *                                                                        *
    1991                    * DOOR ROUTINES                                                          *
    1992                    *                                                                        *
    1993                    **************************************************************************
    1994                    *
    1995                    *GETDOOR - GET A BACKGROUND DOOR ON SCREEN
    1996                    *A8 RETURNED WITH DOOR OBJECT POINTER
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   45

    1997                    *EQ MEANS NO DOOR FOUND
    1998                    *
    1999 00006200           GETDOOR:
    2000 00006200     098f          MMTM    SP,A0,A1
         00006210     c000  
    2001 00006220     07a8          MOVE    @BACKSLST,A8,L          ;LOOK THROUGH THE BACKGROUND
         00006230 00000000! 
    2002 00006250     ca20          JREQ    GDFAIL                  ;NOBODY HOME
    2003 00006260           GDOORL0:
    2004 00006260     b500          MOVE    *A8(OID),A0,W           ;CHECK THIS GUY
         00006270     01a0  
    2005 00006280     4c01          MOVE    A0,A1
    2006 00006290     2f80          SRL     4,A0
    2007 000062a0     2480          SLL     4,A0                    ;WIPE OUT SPECIFIC I.D.
    2008 000062b0     0b40          CMPI    BGDCID,A0               ;IS IT A DOOR
         000062c0     faff  
    2009 000062d0     cb15          JRNE    GDOORL
    2010 000062e0     2781          SLL     28,A1
    2011 000062f0     2c81          SRL     28,A1
    2012 00006300     0b41          CMPI    SAFEDRL,A1
         00006310     fffb  
    2013 00006320     ca10          JREQ    GDOORL                  ;BR = SAFE DOORS, SPECIAL CASE THESE
    2014 00006330     0b41          CMPI    SAFEDRR,A1
         00006340     fffa  
    2015 00006350     ca0d          JREQ    GDOORL                  ;BR = SAFE DOOR
    2016 00006360     0b41          CMPI    SUBDOORL,A1
         00006370     fff9  
    2017 00006380     ca0a          JREQ    GDOORL                  ;BR = SUBWAY DOORS, SPECIAL CASE THESE
    2018 00006390     0b41          CMPI    SUBDOORR,A1
         000063a0     fff8  
    2019 000063b0     ca07          JREQ    GDOORL                  ;BR = SUBWAY DOOR
    2020 000063c0     0d5f          CALLA   SCRTST
         000063d0 00000000! 
    2021 000063f0     cb03          JRNE    GDOORL                  ;DOOR NOT ON SCREEN
    2022 00006400     09c0          MOVI    1,A0                    ;SET NE BIT
         00006410     0001  
    2023 00006420     c003          JRUC    GOTDOOR
    2024 00006430           GDOORL:
    2025 00006430     b708          MOVE    *A8(OSLINK),A8,L        ;LET'S SEARCH FOR A DOOR
         00006440     0020  
    2026 00006450     cbe0          JRNE    GDOORL0
    2027 00006460           GOTDOOR:
    2028 00006460           GDFAIL:
    2029 00006460     09af          MMFM    SP,A0,A1
         00006470     0003  
    2030 00006480     0960          RETS
    2031                    *
    2032                    *CLOZDOOR - PROCESS TO CLOSE THE DOOR
    2033                    *A8=DOOR OBJECT
    2034 00006490           CLOZDOOR:
    2035 00006490                   SLEEP   40H
    2036 000064e0                   JSRP    DOORCLOZ
    2037 00006550     c080          JAUC    SUCIDE
         00006560 00000000! 
    2038                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   46

    2039                    **************************************************************************
    2040                    *                                                                        *
    2041                    * DOORRITE - GET THE UPPER LEFT CORNER STARTING POSITION OF AN ENEMY     *
    2042                    *          SO THAT HE IS STANDING JUST TO THE RIGHT OF THE DOOR          *
    2043                    * A8 = PTR TO DOOR                                                       *
    2044                    * A14= PTR TO ENEMY INIT TABLE                                           *
    2045                    * RETURNS:                                                               *
    2046                    * A1 = [Y,X] UPPER LEFT STARTING POSITION                                *
    2047                    *                                                                        *
    2048                    **************************************************************************
    2049 00006580           DOORRITE
    2050 00006580                   PUSH    A2
    2051 00006590     b701          MOVE    *A8(ODMAXY),A1,L
         000065a0     0210  
    2052 000065b0     b702          MOVE    *A8(OSIZE),A2,L
         000065c0     0140  
    2053 000065d0     e041          ADDXY   A2,A1                   
    2054 000065e0     14a1          SUBK    5,A1                    ;FUDGE FACTOR THE X POSITION
    2055 000065f0     b7c2          MOVE    *A14(INITIMG),A2,L
         00006600     00a0  
    2056 00006610     b442          MOVE    *A2(ISIZEY),A2,W
         00006620     0010  
    2057 00006630     2602          SLL     16,A2
    2058 00006640     e241          SUBXY   A2,A1                   ;THIS IS THE STARTING POSITION
    2059 00006650                   PULL    A2
    2060 00006670     0960          RETS
    2061                    *
    2062                    *OUTDOOR - OUT THE DOOR YOU GO
    2063                    *A2=OXVEL, A8=OBJECT, A9=ANIMATION TABLE (FRANIM), A13=PROCESS
    2064                    *RETURNS WHEN OBJECT IS OUT OF THE DOOR
    2065                    *NOTE: CALL WITH JSRP
    2066                    *
    2067 00006680           OUTDOOR:
    2068 00006680     b32d          MOVE    A9,*A13(ETEMP6),L       ;SAVE START FRAME
         00006690     0220  
    2069 000066a0     b50a          MOVE    *A8(OXPOS),A10,W        ;FLIP IN PLACE
         000066b0     0090  
    2070 000066c0     b504          MOVE    *A8(OYPOS),A4,W
         000066d0     00b0  
    2071 000066e0     0d5f          CALLA   YFLP
         000066f0 00004cf0' 
    2072 00006710     b148          MOVE    A10,*A8(OXPOS),W
         00006720     0090  
    2073 00006730     b088          MOVE    A4,*A8(OYPOS),W
         00006740     00b0  
    2074 00006750     b248          MOVE    A2,*A8(OXVEL),L         ;GIVE HIM SOME VELOCITY
         00006760     0040  
    2075 00006770           OUTDOOR1:
    2076 00006770     b7a9          MOVE    *A13(ETEMP6),A9,L       ;GET START FRAME
         00006780     0220  
    2077 00006790           OUTDOOR2:
    2078 00006790     b701          MOVE    *A8(OIMG),A1,L          ;RESET SIZE TO AVOID CONFUSION
         000067a0     0180  
    2079 000067b0     b422          MOVE    *A1(ISIZE),A2,W
         000067c0     0000  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   47

    2080 000067d0     b048          MOVE    A2,*A8(OSIZEX),W
         000067e0     0140  
    2081 000067f0     1881          MOVK    4,A1    
    2082 00006800                   JSRP    FRANIM
    2083 00006870     c8ef          JRC     OUTDOOR1
    2084 00006880     4c0b          MOVE    A0,A11
    2085 00006890           OUTDOORL:
    2086 00006890     b701          MOVE    *A8(OIMG),A1,L          ;RESET SIZE TO AVOID CONFUSION
         000068a0     0180  
    2087 000068b0     b504          MOVE    *A8(OFLAGS),A4,W
         000068c0     0100  
    2088 000068d0     b422          MOVE    *A1(ISIZE),A2,W
         000068e0     0000  
    2089 000068f0     b048          MOVE    A2,*A8(OSIZEX),W
         00006900     0140  
    2090 00006910     0bc4          XORI    M_NODIS,A4              ;FAKE ANI INTO ANIMATING YOURSELF
         00006920 00000100  
    2091 00006940     0d5f          CALLA   ANI                     ;ANIMATE TO YOURSELF, RESETTING CLIP
         00006950 00000000! 
    2092 00006970     b423          MOVE    *A1(ISIZE),A3,W
         00006980     0000  
    2093 00006990     b502          MOVE    *A8(OXPOS),A2,W
         000069a0     0090  
    2094 000069b0     4542          SUB     A10,A2
    2095 000069c0     4062          ADD     A3,A2                   ;NO MORE REAL CLIP?
    2096 000069d0     c60a          JRLE    OUTDOORX                        ;DONE...
    2097 000069e0     5663          CLR     A3
    2098 000069f0     0d5f          CALLA   CLIPOBJ
         00006a00 00000000! 
    2099 00006a20                   SLEEP   1
    2100 00006a60     3fcb          DSJS    A11,OUTDOORL
    2101 00006a70     c0d1          JRUC    OUTDOOR2
    2102 00006a80           OUTDOORX:
    2103 00006a80                   RETP
    2104                    
    2105                    **************************************************************************
    2106                    *                                                                        *
    2107                    * DOOROPEN - OPEN THE DOOR                                               *
    2108                    * A8 = OBLOCK OF DOOR                                                    *
    2109                    * NOTE: CALL WITH JSRP                                                   *
    2110                    *                                                                        *
    2111                    **************************************************************************
    2112 00006ab0           DOOROPEN
    2113 00006ab0     098c          MMTM    A12,A9,A10
         00006ac0     0060  
    2114 00006ad0     b50a          MOVE    *A8(OID),A10,W
         00006ae0     01a0  
    2115 00006af0     278a          SLL     28,A10
    2116 00006b00     2c8a          SRL     28,A10                  ;KEEP DOOR I.D.
    2117 00006b10     09c9          MOVI    BGDOMID,A9
         00006b20     0520  
    2118 00006b30     4149          ADD     A10,A9
    2119 00006b40     b128          MOVE    A9,*A8(OID),W           ;MARK IT AS OPENING
         00006b50     01a0  
    2120 00006b60     09e0          MOVI    DOOROSND,A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   48

         00006b70 00000000! 
    2121 00006b90     0d5f          CALLA   ONESND
         00006ba0 00000000! 
    2122                    
    2123 00006bc0     09e9          MOVI    DOOROTAB,A9
         00006bd0 00006d50' 
    2124 00006bf0     4d40          MOVE    A10,A0
    2125 00006c00     24a0          SLL     5,A0
    2126 00006c10     4009          ADD     A0,A9
    2127 00006c20     8729          MOVE    *A9,A9,L                ;GET ANIMATION TABLE
    2128                    
    2129 00006c30     1821          MOVK    1,A1
    2130 00006c40                   JSRP    FRANIM
    2131 00006cb0     09c9          MOVI    BGDOID,A9
         00006cc0     0510  
    2132 00006cd0     4149          ADD     A10,A9
    2133 00006ce0     b128          MOVE    A9,*A8(OID),W           ;MARK IT AS OPEN
         00006cf0     01a0  
    2134 00006d00     09ac          MMFM    A12,A9,A10
         00006d10     0600  
    2135 00006d20                   RETP
    2136                    *
    2137                    *TABLE OF DOOR OPEN ANIMATIONS
    2138 00006d50           DOOROTAB
    2139 00006d50 00007270'         .LONG   CHINAOP,ARMDROP,HOTWINOP,BIGDROP
    2140 00006dd0 00007270'         .LONG   CHINAOP,CHINAOP,CHINAOP,CHINAOP
    2141 00006e50 00007270'         .LONG   CHINAOP,CHINAOP,CHINAOP,CHINAOP
    2142 00006ed0 00007270'         .LONG   CHINAOP,CHINAOP,CHINAOP,CHINAOP
    2143                    
    2144                    **************************************************************************
    2145                    *                                                                        *
    2146                    * DOORCLOZ - CLOSE THE DOOR                                              *
    2147                    * A8 = OBLOCK OF DOOR                                                    *
    2148                    * NOTE: CALL WITH JSRP                                                   *
    2149                    *                                                                        *
    2150                    **************************************************************************
    2151 00006f50           DOORCLOZ
    2152 00006f50     098c          MMTM    A12,A9,A10
         00006f60     0060  
    2153 00006f70     b50a          MOVE    *A8(OID),A10,W
         00006f80     01a0  
    2154 00006f90     278a          SLL     28,A10
    2155 00006fa0     2c8a          SRL     28,A10                  ;KEEP DOOR I.D.
    2156 00006fb0     09c9          MOVI    BGDCMID,A9
         00006fc0     0530  
    2157 00006fd0     4149          ADD     A10,A9
    2158 00006fe0     b128          MOVE    A9,*A8(OID),W           ;MARK IT AS OPENING
         00006ff0     01a0  
    2159                    
    2160 00007000     09e9          MOVI    DOORCTAB,A9
         00007010 000071f0' 
    2161 00007030     4d40          MOVE    A10,A0
    2162 00007040     24a0          SLL     5,A0
    2163 00007050     4009          ADD     A0,A9
    2164 00007060     8729          MOVE    *A9,A9,L                ;GET ANIMATION TABLE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   49

    2165                    
    2166 00007070     1821          MOVK    1,A1
    2167 00007080                   JSRP    FRANIM
    2168 000070f0     09c9          MOVI    BGDCID,A9
         00007100     0500  
    2169 00007110     4149          ADD     A10,A9
    2170 00007120     b128          MOVE    A9,*A8(OID),W           ;MARK IT AS OPEN
         00007130     01a0  
    2171 00007140     09e0          MOVI    DOORCSND,A0
         00007150 00000000! 
    2172 00007170     0d5f          CALLA   ONESND
         00007180 00000000! 
    2173 000071a0     09ac          MMFM    A12,A9,A10
         000071b0     0600  
    2174 000071c0                   RETP
    2175                    *
    2176                    *TABLE OF DOOR CLOSE ANIMATIONS
    2177 000071f0           DOORCTAB
    2178 000071f0 000072f0'         .LONG   CHINACL,ARMDRCL,HOTWINCL,BIGDRCL
    2179                    
    2180                    *CHINA DOOR ANIMATIONS
    2181 00007270           CHINAOP
    2182 00007270 00000000!         .LONG   CHINADR2
    2183 00007290     0007          .WORD   7
    2184 000072a0 00000000!         .LONG   CHINADR3
    2185 000072c0     0007          .WORD   7
    2186 000072d0 00000000          .LONG   0
    2187 000072f0           CHINACL
    2188 000072f0 00000000!         .LONG   CHINADR2
    2189 00007310     0007          .WORD   7
    2190 00007320 00000000!         .LONG   CHINADR1
    2191 00007340     0007          .WORD   7
    2192 00007350 00000000          .LONG   0
    2193                    *ARMOR DOOR ANIMATIONS
    2194 00007370           ARMDROP
    2195 00007370 00000000!         .LONG   ARMDR2
    2196 00007390     0007          .WORD   7
    2197 000073a0 00000000!         .LONG   ARMDR3
    2198 000073c0     0007          .WORD   7
    2199 000073d0 00000000          .LONG   0
    2200 000073f0           ARMDRCL
    2201 000073f0 00000000!         .LONG   ARMDR2
    2202 00007410     0007          .WORD   7
    2203 00007420 00000000!         .LONG   ARMDR1
    2204 00007440     0007          .WORD   7
    2205 00007450 00000000          .LONG   0
    2206                    *MR. BIG OFFICE DOOR ANIMATIONS
    2207 00007470           BIGDROP
    2208 00007470 00000000!         .LONG   BIGDOOR2
    2209 00007490     0007          .WORD   7
    2210 000074a0 00000000!         .LONG   BIGDOOR3
    2211 000074c0     0007          .WORD   7
    2212 000074d0 00000000          .LONG   0
    2213 000074f0           BIGDRCL
    2214 000074f0 00000000!         .LONG   BIGDOOR2
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   50

    2215 00007510     0007          .WORD   7
    2216 00007520 00000000!         .LONG   BIGDOOR1
    2217 00007540     0007          .WORD   7
    2218 00007550 00000000          .LONG   0
    2219                    
    2220                    *HOTEL WINDOW OPEN ANIMATIONS
    2221 00007570           HOTWINOP
    2222 00007570 00000000!         .LONG   HOTWIN1
    2223 00007590     0007          .WORD   7
    2224 000075a0 00000000          .LONG   0
    2225                    
    2226 000075c0           HOTWINCL
    2227 000075c0 00000000!         .LONG   HOTWIN1
    2228 000075e0     0007          .WORD   7
    2229 000075f0 00000000          .LONG   0
    2230                    
    2231                    **************************************************************************
    2232                    *                                                                        *
    2233                    * SLIDCLOZ - CLOZ THE SLIDING DOOR                                       *
    2234                    * A8 = OBLOCK OF DOOR                                                    *
    2235                    * NOTE: CALL WITH JSRP, ALSO, DOOR SHOULD BE CLIPPED TO 1 PIXEL IN Y     *
    2236                    *                                                                        *
    2237                    **************************************************************************
    2238 00007610           SLIDCLOZ
    2239 00007610                   PUSHP   A9
    2240 00007620     09c9          MOVI    BGDCMID,A9
         00007630     0530  
    2241 00007640     b128          MOVE    A9,*A8(OID),W           ;MARK IT AS CLOSING
         00007650     01a0  
    2242 00007660     b709          MOVE    *A8(OIMG),A9,L          ;GET IMAGE HEADER
         00007670     0180  
    2243 00007680     b529          MOVE    *A9(ISIZE+16),A9,W      ;GET THE YSIZE
         00007690     0010  
    2244 000076a0     1429          DEC     A9
    2245 000076b0           SLIDC1
    2246 000076b0     5642          CLR     A2
    2247 000076c0     09e3          MOVI    0FFFF0000H,A3
         000076d0 ffff0000  
    2248 000076f0     0d5f          CALLA   CLIPOBJ                 ;CLIP ONE OFF THE TOP
         00007700 00000000! 
    2249 00007720     b500          MOVE    *A8(OYPOS),A0,W         ;GET THE CURRENT YPOS
         00007730     00b0  
    2250 00007740     1020          INC     A0                      ;AND MOVE UP
    2251 00007750     b008          MOVE    A0,*A8(OYPOS),W         
         00007760     00b0  
    2252 00007770                   SLEEP   1
    2253 000077b0     3e29          DSJS    A9,SLIDC1
    2254 000077c0     09c9          MOVI    BGDCID,A9
         000077d0     0500  
    2255 000077e0     b128          MOVE    A9,*A8(OID),W           ;MARK IT AS CLOSED
         000077f0     01a0  
    2256 00007800     09e0          MOVI    DOORCSND,A0     
         00007810 00000000! 
    2257 00007830     0d5f          CALLA   ONESND
         00007840 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   51

    2258 00007860                   PULLP   A9
    2259 00007880                   RETP
    2260                    
    2261                    *
    2262                    *GETCPLY - GET CLOSEST PLAYER
    2263                    *CALLING PARAMS: A8=ENEMY OBJECT
    2264                    *RETURNS: A0= CLOSEST PLAYER DATA STRUCT.
    2265                    *
    2266 000078b0           GETCPLY:
    2267 000078b0     098f          MMTM    SP,A1,A2,A3,A4,A5
         000078c0     7c00  
    2268 000078d0     09e1          MOVI    0FFFFH,A1               ;PLAYER 1 DISTANCE
         000078e0 0000ffff  
    2269 00007900     09e2          MOVI    0FFFFH,A2               ;PLAYER 2 DISTANCE
         00007910 0000ffff  
    2270 00007930     09e0          MOVI    P1DATA,A0               ;LOOKING FOR PLAYER 1
         00007940 00000000! 
    2271 00007960     b603          MOVE    *A0(POBJ),A3,L          ;GET PLAYERS OBJECT     
         00007970     00a0  
    2272 00007980     ca0f          JRZ     GETCP2                  ;ZERO INDICATES INACTIVE
    2273 00007990     b501          MOVE    *A8(OXPOS),A1,W         ;FIND DELTA X PLAYER 1
         000079a0     0090  
    2274 000079b0     b465          MOVE    *A3(OXPOS),A5,W
         000079c0     0090  
    2275 000079d0     44a1          SUB     A5,A1
    2276 000079e0     0381          ABS     A1
    2277 000079f0     b504          MOVE    *A8(OZPOS),A4,W         ;FIND DELTA Z PLAYER 1
         00007a00     00d0  
    2278 00007a10     b465          MOVE    *A3(OZPOS),A5,W
         00007a20     00d0  
    2279 00007a30     44a4          SUB     A5,A4                   
    2280 00007a40     0384          ABS     A4
    2281 00007a50     4824          CMP     A1,A4                   ;FIND GREATEST DX OR DZ
    2282 00007a60     c201          JRLS    GETCP2
    2283 00007a70     4c81          MOVE    A4,A1
    2284 00007a80           GETCP2:
    2285 00007a80     09e0          MOVI    P2DATA,A0       
         00007a90 00000000! 
    2286 00007ab0     b603          MOVE    *A0(POBJ),A3,L          ;GET EXPECTED PLAYERS OBJECT    
         00007ac0     00a0  
    2287 00007ad0     ca11          JRZ     GETCPX1                 ;INACTIVE, GO FOR #1
    2288 00007ae0     b502          MOVE    *A8(OXPOS),A2,W         ;FIND DELTA X PLAYER 2
         00007af0     0090  
    2289 00007b00     b465          MOVE    *A3(OXPOS),A5,W
         00007b10     0090  
    2290 00007b20     44a2          SUB     A5,A2
    2291 00007b30     0382          ABS     A2
    2292 00007b40     b504          MOVE    *A8(OZPOS),A4,W         ;FIND DELTA Z PLAYER 2
         00007b50     00d0  
    2293 00007b60     b465          MOVE    *A3(OZPOS),A5,W
         00007b70     00d0  
    2294 00007b80     44a4          SUB     A5,A4                   
    2295 00007b90     0384          ABS     A4
    2296 00007ba0     4844          CMP     A2,A4                   ;FIND GREATEST DX OR DZ
    2297 00007bb0     c201          JRLS    GETCP3
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   52

    2298 00007bc0     4c82          MOVE    A4,A2
    2299 00007bd0           GETCP3:
    2300 00007bd0     4822          CMP     A1,A2                   ;WHICH IS CLOSER?
    2301 00007be0     c203          JRLS    GETCPX
    2302 00007bf0           GETCPX1:
    2303 00007bf0     09e0          MOVI    P1DATA,A0               ;PLAYER 1 CLOSER
         00007c00 00000000! 
    2304 00007c20           GETCPX:
    2305 00007c20     09af          MMFM    SP,A1,A2,A3,A4,A5
         00007c30     003e  
    2306 00007c40     0960          RETS
    2307                    
    2308                    **************************************************************************
    2309                    *                                                                        *
    2310                    * SELCTPLY - SELECT A PLAYER TO GO AFTER                                 *
    2311                    * RETURNS:                                                               *
    2312                    * A11 = PTR TO PLAYER DATA BLOCK                                         *
    2313                    *                                                                        *
    2314                    **************************************************************************
    2315 00007c50           SELCTPLY
    2316 00007c50     098f          MMTM    SP,A0,A1
         00007c60     c000  
    2317 00007c70     0d5f          CALLA   RANDOM                  ;Random numbers always do me right
         00007c80 00003790' 
    2318 00007ca0     ce04          JRN     SELCTP1                 ;50/50
    2319                    
    2320 00007cb0     09eb          MOVI    P2DATA,A11              ;MAKE HIM GO FOR PLAYER 2
         00007cc0 00000000! 
    2321 00007ce0     c003          JRUC    SELCTPXX
    2322 00007cf0           SELCTP1
    2323 00007cf0     09eb          MOVI    P1DATA,A11              ;OR PLAYER 1
         00007d00 00000000! 
    2324 00007d20           SELCTPXX
    2325 00007d20     09af          MMFM    SP,A0,A1
         00007d30     0003  
    2326 00007d40     0960          RETS
    2327                    
    2328                    **************************************************************************
    2329                    *                                                                        *
    2330                    * INPYRNG - IS THE ENEMY IN FIRING Y RANGE OF THE PLAYER.                *
    2331                    * A8 = PTR TO ENEMY OBLOCK                                               *
    2332                    * A11 = PTR TO PLAYER'S DATA BLOCK                                       *
    2333                    * RETURNS                                                                *
    2334                    * CARRY SET = IN RANGE                                                   *
    2335                    *                                                                        *
    2336                    **************************************************************************
    2337 00007d50           INPYRNG
    2338 00007d50     098f          MMTM    SP,A0,A1,A2,A3
         00007d60     f000  
    2339 00007d70     4d60          MOVE    A11,A0
    2340 00007d80     0d3f          CALLR   GETPBOTY                ;GET PLAYERS FOOT POSITION
         00007d90     0031  
    2341 00007da0     4c22          MOVE    A1,A2
    2342 00007db0     4c43          MOVE    A2,A3
    2343                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   53

    2344                    *                                                                        *
    2345                    *       SUBK    3,A2                    ;OPEN A Y BANDWIDTH              *
    2346                    *                                                                        *
    2347                    **************************************************************************
    2348 00007dc0     10e3          ADDK    7,A3                    ;SHOOT FOR THE GUT
    2349 00007dd0     0d5f          CALLA   GETBOTY                 ;GET LOFFY'S FOOT
         00007de0 00000850' 
    2350 00007e00     0d3f          CALLR   CHKRANGE
         00007e10     005e  
    2351 00007e20     09af          MMFM    SP,A0,A1,A2,A3
         00007e30     000f  
    2352 00007e40     0960          RETS
    2353                    
    2354                    **************************************************************************
    2355                    *                                                                        *
    2356                    * INPXRNG - IS THE ENEMY IN A FIXED X RANGE OF THE PLAYER.               *
    2357                    * A8 = PTR TO ENEMY OBLOCK                                               *
    2358                    * A11 = PTR TO PLAYER'S DATA BLOCK                                       *
    2359                    * RETURNS                                                                *
    2360                    * CARRY SET = IN RANGE                                                   *
    2361                    *                                                                        *
    2362                    **************************************************************************
    2363 00007e50           INPXRNG
    2364 00007e50     098f          MMTM    SP,A0,A1,A2,A3
         00007e60     f000  
    2365 00007e70     4d60          MOVE    A11,A0
    2366 00007e80     0d3f          CALLR   GETPCENT                ;GET PLAYERS CENTER POINT
         00007e90     005e  
    2367 00007ea0     ec22          MOVX    A1,A2
    2368 00007eb0     0522          ZEXT    A2                      ;CLEAR TOP 16 BITS
    2369 00007ec0     0be2          SUBI    60,A2   
         00007ed0     ffc3  
    2370 00007ee0     ec23          MOVX    A1,A3
    2371 00007ef0     0523          ZEXT    A3                      ;CLEAR Y
    2372 00007f00     0b03          ADDI    60,A3                   ;OPEN X BANDWIDTH
         00007f10     003c  
    2373 00007f20     b501          MOVE    *A8(OXPOS),A1,W
         00007f30     0090  
    2374 00007f40     0d3f          CALLR   CHKRANGE
         00007f50     004a  
    2375 00007f60     09af          MMFM    SP,A0,A1,A2,A3
         00007f70     000f  
    2376 00007f80     0960          RETS
    2377                    **************************************************************************
    2378                    *                                                                        *
    2379                    * GPLAYERD - GET THE PLAYER DATA BLOCK PTR                               *
    2380                    * A8 = PTR TO PLAYER OBJECT(TORSO OR LEG)                                *
    2381                    * RETURNS:                                                               *
    2382                    * A2 = PLINDX (0=WASN'T A PLAYER)                                        *
    2383                    *                                                                        *
    2384                    **************************************************************************
    2385 00007f90           GPLAYERD
    2386 00007f90     b502          MOVE    *A8(OID),A2,W           ;LOOK @ OBJECT I.D.
         00007fa0     01a0  
    2387 00007fb0     0b42          CMPI    P1OID,A2
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   54

         00007fc0     efff  
    2388 00007fd0     cb04          JRNE    GPD1
    2389 00007fe0     09e2          MOVI    P1DATA,A2               ;LOAD PLAYER 1 PLINDX
         00007ff0 00000000! 
    2390 00008010     0960          RETS
    2391 00008020           GPD1
    2392 00008020     0b42          CMPI    P2OID,A2
         00008030     dfff  
    2393 00008040     cb04          JRNE    GPD2
    2394 00008050     09e2          MOVI    P2DATA,A2               ;LOAD PLAYER 2 PLINDX
         00008060 00000000! 
    2395 00008080     0960          RETS
    2396 00008090           GPD2
    2397 00008090     5642          CLR     A2
    2398 000080a0     0960          RETS
    2399                    **************************************************************************
    2400                    *                                                                        *
    2401                    * GETPBOTY - GET PLAYERS FOOT Y POSITION                                 *
    2402                    * A0 = PTR TO PLAYER DATA BLOCK                                          *
    2403                    * RETURN(S)                                                              *
    2404                    * A1 = BOTTOM Y OF CURRENT PLAYER IMAGE                                  *
    2405                    *                                                                        *
    2406                    **************************************************************************
    2407 000080b0           GETPBOTY
    2408 000080b0     098f          MMTM    SP,A0,A8
         000080c0     8080  
    2409 000080d0     0d3f          CALLR   GETPLYR                 ;GET AN ACTIVE PLAYER
         000080e0     0020  
    2410 000080f0     b608          MOVE    *A0(PLOBJ),A8,L         ;<---- RIP THE CHECKS OUT
         00008100     0120  
    2411 00008110     cb02          JRNE    GETPBY1                 ;BR = LEGS ARE ACTIVE
    2412 00008120     b608          MOVE    *A0(POBJ),A8,L
         00008130     00a0  
    2413 00008140           GETPBY1
    2414 00008140     0d5f          CALLA   GETBOTY                 ;GET THE PLAYERS BOTTOM Y
         00008150 00000850' 
    2415 00008170     09af          MMFM    SP,A0,A8
         00008180     0101  
    2416 00008190     0960          RETS
    2417                    
    2418                    **************************************************************************
    2419                    *                                                                        *
    2420                    * FACEPLYR - MAKE SURE THE ENEMY FACES THE PLAYER                        *
    2421                    *          HE WANTS TO BLOW AWAY.                                        *
    2422                    * A0 = PTR TO SELECTED PLAYER DATA BLOCK                                 *
    2423                    * A8 = PTR TO ENEMY                                                      *
    2424                    *                                                                        *
    2425                    **************************************************************************
    2426 000081a0           FACEPLYR
    2427 000081a0     098f          MMTM    SP,A1,A2
         000081b0     6000  
    2428 000081c0     0d3f          CALLR   GETPCENT                ;GET THE PLAYER'S CENTER POINT
         000081d0     002a  
    2429 000081e0     4c22          MOVE    A1,A2
    2430 000081f0     0502          SEXT    A2                      ;A2 = PLAYER X CENTER
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   55

    2431 00008200     0d3f          CALLR   GETCPNT
         00008210     f86c  
    2432 00008220     0501          SEXT    A1                      ;A1 = ENEMY X CENTER
    2433                    
    2434 00008230     4841          CMP     A2,A1                   ;COMPARE THE TWO
    2435 00008240     c705          JRGT    FACEP1
    2436                    
    2437 00008250     0d3f          CALLR   NOYFLP
         00008260     fcb0  
    2438 00008270     09af          MMFM    SP,A1,A2
         00008280     0006  
    2439 00008290     0960          RETS
    2440 000082a0           FACEP1
    2441 000082a0     0d3f          CALLR   YFLP
         000082b0     fca3  
    2442 000082c0     09af          MMFM    SP,A1,A2
         000082d0     0006  
    2443 000082e0     0960          RETS
    2444                    **************************************************************************
    2445                    *                                                                        *
    2446                    * GETPLYR-TAKES THE POINTER TO A PLAYERS DATA BLOCK, IF THAT PLAYER      *
    2447                    *         IS ACTIVE, THEN THAT POINTER IS RETURNED, OTHERWISE THE        *
    2448                    *         POINTER TO THE OTHER PLAYER IS RETURNED.                       *
    2449                    * A0 = PTR TO EXPECTED PLAYER DATA BLOCK                                 *
    2450                    * RETURN(S)                                                              *
    2451                    * A0 = PLAYER CLOSEST ACTIVE PLAYER                                      *
    2452                    * NOTE: AT LEAST ONE PLAYER MUST BE ACTIVE WHEN CALLING THIS ROUTINE     *
    2453                    *                                                                        *
    2454                    **************************************************************************
    2455 000082f0     a30f  GETPLYR MOVE    A8,-*SP,L
    2456 00008300     b608          MOVE    *A0(POBJ),A8,L          ;GET EXPECTED PLAYERS OBJECT    
         00008310     00a0  
    2457 00008320     cb0b          JRNE    GETPLYX                 ;NON-ZERO INDICATES ACTIVE
    2458                    
    2459 00008330     0b60          CMPI    P1DATA,A0               ;LOOKING FOR PLAYER 1?
         00008340 ffffffff! 
    2460 00008360     ca04          JREQ    GETPLY2                 ;YES, GET PLAYER 2
    2461                    
    2462 00008370     09e0          MOVI    P1DATA,A0               ;OTHERWISE PLAYER ONE
         00008380 00000000! 
    2463 000083a0     c003          JRUC    GETPLYX
    2464                    
    2465 000083b0     09e0  GETPLY2 MOVI    P2DATA,A0
         000083c0 00000000! 
    2466 000083e0     97e8  GETPLYX MOVE    *SP+,A8,L
    2467 000083f0     0960          RETS
    2468                    
    2469                    **************************************************************************
    2470                    *                                                                        *
    2471                    * CHKRANGE - CHECK TO SEE IF 32 BIT # IS IN A GIVEN RANGE (INCLUSIVE)    *
    2472                    * A1 = #                                                                 *
    2473                    * A2 = LOWER BOUND                                                       *
    2474                    * A3 = UPPER BOUND                                                       *
    2475                    * RETURN(S)                                                              *
    2476                    * CARRY CLEAR (JxNC) = OUT OF RANGE                                      *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   56

    2477                    * CARRY SET   (JxC)  = IN RANGE                                          *
    2478                    *                                                                        *
    2479                    **************************************************************************
    2480 00008400           CHKRANGE
    2481 00008400     4841          CMP     A2,A1                   ;CHECK LOWER BOUND
    2482 00008410     c404          JRLT    OUTOFRNG                ;BR = # TOO LOW
    2483 00008420     4861          CMP     A3,A1
    2484 00008430     c702          JRGT    OUTOFRNG                ;BR = # TOO HIGH
    2485                    
    2486 00008440     0de0          SETC                            ;# IN RANGE, YEAH!
    2487 00008450     0960          RETS
    2488 00008460           OUTOFRNG
    2489 00008460     0320          CLRC
    2490 00008470     0960          RETS
    2491                    
    2492                    **************************************************************************
    2493                    *                                                                        *
    2494                    * GETPCENT - GET CENTER POINT OF PLAYERS IMAGE                           *
    2495                    * A0 = PTR TO PLAYER DATA BLOCK                                          *
    2496                    * RETURN(S)                                                              *
    2497                    * A1 = CENTERY:CENTERX                                                   *
    2498                    *                                                                        *
    2499                    **************************************************************************
    2500 00008480           GETPCENT
    2501 00008480     098f          MMTM    SP,A0,A2,A8
         00008490     a080  
    2502 000084a0     0d3f          CALLR   GETPLYR                 ;GET ACTIVE PLAYER
         000084b0     ffe3  
    2503                    
    2504 000084c0     b608          MOVE    *A0(PLOBJ),A8,L         ;<---- RIP THE CHECKS OUT
         000084d0     0120  
    2505 000084e0     cb02          JRNE    GETPCNT1                ;BR = LEGS ARE ACTIVE
    2506 000084f0     b608          MOVE    *A0(POBJ),A8,L
         00008500     00a0  
    2507 00008510           GETPCNT1
    2508 00008510     0d5f          CALLA   GETBOTY                 ;GET THE PLAYERS BOTTOM Y
         00008520 00000850' 
    2509                    
    2510 00008540     b608          MOVE    *A0(POBJ),A8,L
         00008550     00a0  
    2511                    
    2512 00008560     b500          MOVE    *A8(OYPOS),A0,W
         00008570     00b0  
    2513 00008580     e201          SUBXY   A0,A1
    2514 00008590     2600          SLL     16,A0
    2515 000085a0     b502          MOVE    *A8(OXPOS),A2,W
         000085b0     0090  
    2516 000085c0     ec40          MOVX    A2,A0                   ;A0 = UL [Y,X]
    2517                            
    2518 000085d0     b702          MOVE    *A8(OSIZE),A2,L
         000085e0     0140  
    2519 000085f0     2601          SLL     16,A1
    2520 00008600     ec41          MOVX    A2,A1                   ;A1 = [Y,X] SIZE
    2521                    
    2522 00008610     0d3f          CALLR   GETCENT
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   57

         00008620     f83a  
    2523 00008630     2600          SLL     16,A0
    2524 00008640     ee01          MOVY    A0,A1
    2525                    
    2526 00008650     09af          MMFM    SP,A0,A2,A8
         00008660     0105  
    2527 00008670     0960          RETS
    2528                    
    2529                    **************************************************************************
    2530                    *                                                                        *
    2531                    * MOVEINPX - RETURNS THE CORRECT DIRECTION (L OR R) TO MOVE              *
    2532                    *          TO GET TO THE PLAYER IN X. RETURNED DIRECTION                 *
    2533                    *          IS IN THE FORM OF JOYSTICK BITS                               *
    2534                    * A0 = PTR TO PLAYER DATA BLOCK                                          *
    2535                    * A8 = PTR TO ATTACKING OBJECT                                           *
    2536                    * RETURN(S)                                                              *
    2537                    * A1 = CORRECT JOYSTICK BITS                                             *
    2538                    *                                                                        *
    2539                    **************************************************************************
    2540 00008680           MOVEINPX
    2541 00008680     098f          MMTM    SP,A0,A2
         00008690     a000  
    2542 000086a0     0d3f          CALLR   GETPCENT                ;GET PLAYER'S CENTER    
         000086b0     ffdc  
    2543 000086c0     ec22          MOVX    A1,A2
    2544 000086d0     0d5f          CALLA   GETCPNT                 ;GET ATTACKER'S CENTER
         000086e0 000008e0' 
    2545 00008700     e441          CMPXY   A2,A1
    2546 00008710                   JRXLT   MOVERT                  ;MOVE RIGHT TO GET THERE
    2547                    
    2548 00008720     1881          MOVK    PLEFT,A1
    2549 00008730     c001          JRUC    MOVEINXX
    2550                    
    2551 00008740     1901  MOVERT  MOVK    PRYTE,A1
    2552 00008750           MOVEINXX
    2553 00008750     09af          MMFM    SP,A0,A2
         00008760     0005  
    2554 00008770     0960          RETS
    2555                    
    2556                    **************************************************************************
    2557                    *                                                                        *
    2558                    * MVAWAYPX - RETURNS THE CORRECT DIRECTION (L OR R) TO MOVE              *
    2559                    *          TO GET AWAY FROM THE PLAYER IN X. RETURNED DIRECTION          *
    2560                    *          IS IN THE FORM OF JOYSTICK BITS                               *
    2561                    * A0 = PTR TO PLAYER DATA BLOCK                                          *
    2562                    * A8 = PTR TO ATTACKING OBJECT                                           *
    2563                    * RETURN(S)                                                              *
    2564                    * A1 = CORRECT JOYSTICK BITS                                             *
    2565                    *                                                                        *
    2566                    **************************************************************************
    2567 00008780           MVAWAYPX
    2568 00008780     098f          MMTM    SP,A0,A2,A7,A14
         00008790     a102  
    2569 000087a0     0d3f          CALLR   GETPLYR                 ;A0 = GET THE PLAYER I'M AFTER
         000087b0     ffb3  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   58

    2570 000087c0     b60e          MOVE    *A0(POBJ),A14,L         ;A14 = PLAYER OBJECT BLOCK PTR
         000087d0     00a0  
    2571 000087e0     0d3f          CALLR   GETPCENT                ;GET PLAYER'S CENTER    
         000087f0     ffc8  
    2572 00008800     ec22          MOVX    A1,A2
    2573 00008810     0d5f          CALLA   GETCPNT                 ;GET ATTACKER'S CENTER
         00008820 000008e0' 
    2574                    
    2575 00008840     b7c7          MOVE    *A14(OXVEL),A7,L        ;SEE WHICH WAY THIS CAT IS GOING
         00008850     0040  
    2576 00008860     c705          JRGT    MVAWAYLT                ;BR = MOVE TO THE LEFT TO GET AWAY
    2577 00008870     ce02          JRN     MVAWAYRT                ;BR = MOVE TO THE RIGHT TO GET AWAY
    2578                    
    2579 00008880     e441          CMPXY   A2,A1                   ;CHECK TO SEE WHICH SIDE OF THE P WE ARE ON
    2580 00008890                   JRXLT   MVAWAYLT                ;MOVE LEFT TO GET AWAY QUICKEST
    2581                    
    2582 000088a0           MVAWAYRT
    2583 000088a0     1901          MOVK    PRYTE,A1
    2584 000088b0     c001          JRUC    MVAWAYXX
    2585                    
    2586 000088c0           MVAWAYLT
    2587 000088c0     1881          MOVK    PLEFT,A1
    2588 000088d0           MVAWAYXX
    2589 000088d0     09af          MMFM    SP,A0,A2,A7,A14
         000088e0     4085  
    2590 000088f0     0960          RETS
    2591                    
    2592                    **************************************************************************
    2593                    *                                                                        *
    2594                    * MOVEINPY - RETURNS THE CORRECT DIRECTION (U OR D) TO MOVE              *
    2595                    *          TO GET TO THE PLAYER IN X. RETURNED DIRECTION                 *
    2596                    *          IS IN THE FORM OF JOYSTICK BITS                               *
    2597                    * A0 = PTR TO PLAYER DATA BLOCK                                          *
    2598                    * A8 = PTR TO ATTACKING OBJECT                                           *
    2599                    * RETURN(S)                                                              *
    2600                    * A1 = CORRECT JOYSTICK BITS                                             *
    2601                    *                                                                        *
    2602                    **************************************************************************
    2603 00008900           MOVEINPY
    2604 00008900     a24f          MOVE    A2,-*SP,L
    2605 00008910     0d3f          CALLR   GETPBOTY                ;GET ACTIVE PLAYERS BOTTOM Y
         00008920     ff78  
    2606 00008930     4c22          MOVE    A1,A2                   
    2607 00008940     0d5f          CALLA   GETBOTY                 ;NOW THE ATTACKERS
         00008950 00000850' 
    2608 00008970     4841          CMP     A2,A1
    2609 00008980     c402          JRLT    MOVEDN                  ;MOVE DOWN TO GET THERE
    2610                    
    2611 00008990     1821          MOVK    PUP,A1
    2612 000089a0     c001          JRUC    MOVEINYX
    2613 000089b0     1841  MOVEDN  MOVK    PDOWN,A1
    2614 000089c0           MOVEINYX
    2615 000089c0     97e2          MOVE    *SP+,A2,L
    2616 000089d0     0960          RETS
    2617                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   59

    2618                    **************************************************************************
    2619                    *                                                                        *
    2620                    * ISPBULLT - CHECKS TO SEE IF AN OBJECT IS IN RANGE OF A PLAYERS BULLET  *
    2621                    * A0 = PLAYER DATA BLOCK                                                 *
    2622                    * A8 = OBJECT TO CHECK                                                   *
    2623                    * RETURN(S)                                                              *
    2624                    * CARRY CLEAR (JxNC) = NO BULLET IN SIGHT                                *
    2625                    * CARRY SET   (JxC)  = WATCH OUT BUDDY                                   *
    2626                    *                                                                        *
    2627                    **************************************************************************
    2628 000089e0           ISPBULLT
    2629 000089e0     098f          MMTM    SP,A1,A2,A3,A4,A5,A6
         000089f0     7e00  
    2630 00008a00     b604          MOVE    *A0(POBJ),A4,L
         00008a10     00a0  
    2631 00008a20     ca1d          JREQ    NOPBULLT                ;PLAYER NON-EXISTANT, NO BULLETS
    2632                    
    2633 00008a30     09e4          MOVI    OBJLST,A4               
         00008a40 00000000! 
    2634 00008a60     b501          MOVE    *A8(OZPOS),A1,W         ;GET OBJECTS ZPOS
         00008a70     00d0  
    2635                    
    2636 00008a80     0b60          CMPI    P1DATA,A0               ;CHECK AGAINST PLAYER 1?
         00008a90 ffffffff! 
    2637 00008ab0     cb03          JRNE    ISP2B                   ;NO, PLAYER 2
    2638                    
    2639 00008ac0     09c5          MOVI    B1OID,A5
         00008ad0     0b10  
    2640 00008ae0     c002          JRUC    ISPLSTC
    2641                    
    2642 00008af0     09c5  ISP2B   MOVI    B2OID,A5
         00008b00     0b20  
    2643                    
    2644 00008b10     8684  ISPLSTC MOVE    *A4,A4,L                ;GET NEXT OBJECT
    2645 00008b20     ca0d          JREQ    NOPBULLT                ;NO BULLETS FOUND
    2646                    
    2647 00008b30     b486          MOVE    *A4(OID),A6,W           ;GET THIS OBJECTS I.D.
         00008b40     01a0  
    2648 00008b50     e4a6          CMPXY   A5,A6
    2649 00008b60                   JRXNE   ISPLSTC                 ;NOT A BULLET
    2650                    
    2651 00008b70     b482          MOVE    *A4(OZPOS),A2,W         ;GET BULLETS Z
         00008b80     00d0  
    2652 00008b90     4c43          MOVE    A2,A3
    2653                            
    2654 00008ba0     1542          SUBK    10,A2
    2655 00008bb0     1143          ADDK    10,A3                   ;SET BANDWIDTH
    2656                    
    2657 00008bc0     0d3f          CALLR   CHKRANGE
         00008bd0     ff82  
    2658 00008be0     c802          JRC     PBULLTX                 ;THIS BULLETS COM'N OUR WAY
    2659                    
    2660 00008bf0     c0f1          JRUC    ISPLSTC
    2661                    
    2662 00008c00           NOPBULLT
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   60

    2663 00008c00     0320          CLRC                            ;NO BULLETS
    2664                    
    2665 00008c10     09af  PBULLTX MMFM    SP,A1,A2,A3,A4,A5,A6
         00008c20     007e  
    2666 00008c30     0960          RETS
    2667                                                                              
    2668                    **************************************************************************
    2669                    *                                                                        *
    2670                    * WHICHSID - FIND WHICH SIDE (LEFT OR RIGHT) OF THE OBJECT IN A8,        *
    2671                    *          OBJECT IN A0 EXISTS ON, BASED ON THE CENTER LINES.            *
    2672                    * A0 = OBJECT IN ?                                                       *
    2673                    * A8 = OBJECT TO CHECK AGAINST                                           *
    2674                    * RETURNS:                                                               *
    2675                    * CARRY SET = RIGHT OF OBJECT IN A8                                      *
    2676                    * CARRY CLR = LEFT OR ON TOP OF OBJECT IN A8                             *
    2677                    *                                                                        *
    2678                    **************************************************************************
    2679 00008c40           WHICHSID
    2680 00008c40     098f          MMTM    SP,A1,A2,A8
         00008c50     6080  
    2681 00008c60     0d3f          CALLR   GETCPNT         ;GET CENTER POINT OF A8 OBJECT
         00008c70     f7c6  
    2682 00008c80     5642          CLR     A2
    2683 00008c90     ec22          MOVX    A1,A2
    2684 00008ca0     4c08          MOVE    A0,A8
    2685 00008cb0     0d3f          CALLR   GETCPNT         ;GET CENTER POINT OF A0 OBJECT
         00008cc0     f7c1  
    2686 00008cd0     0521          ZEXT    A1
    2687 00008ce0     4841          CMP     A2,A1           
    2688 00008cf0     c904          JRHS    WHICHR
    2689 00008d00     0320          CLRC
    2690 00008d10     09af          MMFM    SP,A1,A2,A8
         00008d20     0106  
    2691 00008d30     0960          RETS
    2692 00008d40           WHICHR
    2693 00008d40     0de0          SETC    
    2694 00008d50     09af          MMFM    SP,A1,A2,A8
         00008d60     0106  
    2695 00008d70     0960          RETS
    2696                    
    2697                    *
    2698                    *CKBUST - CHECK FOR A BUST
    2699                    *A8=OBJECT
    2700                    *CARRY SET IF A BUST
    2701                    *A6 RETURNED WITH PDATA OF BUSTING PLAYER
    2702                    *
    2703 00008d80           CKBUST:
    2704 00008d80     098f          MMTM    SP,A0,A1,A2,A3,A4,A5
         00008d90     fc00  
    2705 00008da0     05a0          MOVE    @GAMSTATE,A0,W  ;GET RID OF THIS KLUDGE KUICKLY
         00008db0 00000000! 
    2706 00008dd0     0b40          CMPI    INMSU,A0
         00008de0     ffe5  
    2707 00008df0     cb03          JRNE    CKBUSTOK
    2708 00008e00     0320          CLRC
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   61

    2709 00008e10     5600          CLR     A0
    2710 00008e20     c021          JRUC    CKBSTX
    2711 00008e30           CKBUSTOK
    2712 00008e30     09e0          MOVI    P1DATA,A0
         00008e40 00000000! 
    2713                    ***     CALLR   CKMAXBST        ;SEE IF PLAYER 1 HAS MAXED OUT
    2714                    ***     JRNC    CKBST1          ;BR = NO MORE BUSTS FOR THIS CAT
    2715 00008e60     0d3f          CALLR   CKBSUB
         00008e70     0020  
    2716 00008e80     c916          JRNC    CKBST1          ;NO BUST FOR PLAYER 1
    2717 00008e90     4043          ADD     A2,A3           ;SAVE TOTAL DELTA
    2718 00008ea0     098f          MMTM    SP,A0,A3        ;CHECK WHO'S CLOSEST
         00008eb0     9000  
    2719 00008ec0     09e0          MOVI    P2DATA,A0
         00008ed0 00000000! 
    2720 00008ef0     0d3f          CALLR   CKBSUB
         00008f00     0017  
    2721 00008f10     c803          JRC     CKBST0
    2722 00008f20     09af          MMFM    SP,A0,A3        ;NO BUST PLAYER 2
         00008f30     0009  
    2723 00008f40     c008          JRUC    CKBST00
    2724 00008f50           CKBST0:
    2725 00008f50     4062          ADD     A3,A2
    2726 00008f60     09af          MMFM    SP,A0,A3
         00008f70     0009  
    2727 00008f80     4843          CMP     A2,A3
    2728 00008f90     c80a          JRC     CKBSTX          ;PLAYER 1 CLOSEST
    2729 00008fa0     09e0          MOVI    P2DATA,A0       ;PLAYER 2 CLOSEST
         00008fb0 00000000! 
    2730 00008fd0           CKBST00:
    2731 00008fd0     0de0          SETC
    2732 00008fe0     c005          JRUC    CKBSTX
    2733 00008ff0           CKBST1:
    2734 00008ff0     09e0          MOVI    P2DATA,A0
         00009000 00000000! 
    2735                    ***     CALLR   CKMAXBST
    2736                    ***     JRNC    CKBSTX          ;NO MORE BUSTS CHIEF
    2737 00009020     0d3f          CALLR   CKBSUB
         00009030     0004  
    2738 00009040           CKBSTX:
    2739 00009040     4c06          MOVE    A0,A6
    2740 00009050     09af          MMFM    SP,A0,A1,A2,A3,A4,A5
         00009060     003f  
    2741 00009070     0960          RETS
    2742                    *
    2743                    *CKBSUB - CHECK BUST SUBROUTINE
    2744                    *CALLING PARAMETERS
    2745                    *A0=PLAYER DATA AREA
    2746                    *A8=ENEMY OBJECT
    2747                    *RETURNS CARRY SET IF BUSTED, CARRY CLEAR IF NO BUST
    2748                    *
    2749 00009080           CKBSUB:
    2750 00009080     b601          MOVE    *A0(POBJ),A1,L
         00009090     00a0  
    2751 000090a0     ca17          JREQ    CKBSX                   ;NO BUST, PLAYER NON-EXISTANT
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   62

    2752 000090b0     b402          MOVE    *A0(PIRQFLAG),A2,W
         000090c0     0080  
    2753 000090d0     0b82          ANDI    MJUMP2|MDRIVER|MPASSEN,A2
         000090e0 ffffe7fb  
    2754 00009100     cb11          JRNE    CKBSX
    2755 00009110     b402          MOVE    *A0(PEXEFLAG),A2,W
         00009120     0090  
    2756 00009130     0b82          ANDI    MDHOLD|MDEAD,A2
         00009140 ffffffbb  
    2757 00009160     cb0b          JRNE    CKBSX
    2758                    
    2759 00009170                   PUSH    A0
    2760 00009180     4c20          MOVE    A1,A0
    2761 00009190     09c5          MOVI    30,A5
         000091a0     001e  
    2762 000091b0     09c6          MOVI    24,A6
         000091c0     0018  
    2763 000091d0     0d3f          CALLR   XZCHK                   ;CALC DX,DZ
         000091e0     f72e  
    2764 000091f0                   PULL    A0
    2765 00009210     0960          RETS
    2766 00009220           CKBSX
    2767 00009220     0320          CLRC
    2768 00009230     0960          RETS
    2769                    
    2770              0032  PMAXBUST .EQU   50
    2771                    **************************************************************************
    2772                    *                                                                        *
    2773                    * CKMAXBST - CHECK IF A PLAYER HAS ACHIEVED THE MAXIMUM ALLOWED BUSTS.   *
    2774                    * A0 = PTR TO PLAYER DATA AREA                                           *
    2775                    * RETURNS:                                                               *
    2776                    *       CARRY CLR = MAXED OUT                                            *
    2777                    *       CARRY SET = O.K. TO BUST                                         *
    2778                    *                                                                        *
    2779                    **************************************************************************
    2780 00009240           CKMAXBST
    2781 00009240                   PUSH    A1
    2782 00009250     b401          MOVE    *A0(PBUSTS),A1,W
         00009260     0230  
    2783 00009270     0b41          CMPI    PMAXBUST,A1
         00009280     ffcd  
    2784 00009290     c804          JRLO    CKMAXOK
    2785 000092a0     0320          CLRC
    2786 000092b0                   PULL    A1
    2787 000092d0     0960          RETS
    2788 000092e0           CKMAXOK
    2789 000092e0     0de0          SETC
    2790 000092f0                   PULL    A1
    2791 00009310     0960          RETS
    2792                    *
    2793                    *GBUST - GET BUSTED
    2794                    *A9=BUST ANIMATION
    2795                    *A8=ENEMY
    2796                    *A2=PROBABILITY OF ESCAPE
    2797                    *NOTE: CALL WITH JSRP
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   63

    2798                    *
    2799 00009320           GBUST:
    2800 00009320     18c0          MOVK    6,A0
    2801 00009330     0d5f          CALLA   RANDU           ;GET A RANDOM SOUND
         00009340 000038f0' 
    2802 00009360     1420          DEC     A0
    2803 00009370     24a0          SLL     5,A0            ;ADJUST FOR TABLE LENGTH
    2804 00009380     0b20          ADDI    BSTSNDTAB,A0
         00009390 00009850' 
    2805 000093b0     8600          MOVE    *A0,A0,L        ;GET SOUND ADDRESS
    2806 000093c0     0d5f          CALLA   ONESND
         000093d0 00000000! 
    2807                    
    2808                    *MAKE NO SOUND ENTRY POINT
    2809 000093f0           GBSTNSND:
    2810 000093f0     0d5f          CALLA   PSTOP
         00009400 00004920' 
    2811 00009420     a04c          MOVE    A2,-*A12,W      ;SAVE ESCAPE % ON PROCESS STACK
    2812 00009430           GBUSTL:
    2813 00009430     0d3f          CALLR   CKBUST
         00009440     ff93  
    2814 00009450     c93a          JRNC    BUSTX           ;NO LONGER BUSTED, RUN AWAY
    2815                            
    2816 00009460     4cc0          MOVE    A6,A0
    2817 00009470     0d3f          CALLR   CKMAXBST
         00009480     ffdb  
    2818 00009490     c936          JRNC    BUSTX           ;BR = MAXIMUM BUSTS, NO MORE
    2819                    
    2820 000094a0     4ccb          MOVE    A6,A11          ;A6 RETURNED WITH BUST PLAYER DATA PTR 
    2821 000094b0     5621          CLR     A1
    2822 000094c0                   JSRP    FRANIM
    2823 00009530     c80f          JRC     GBUST1          ;FINISHED GETTING BUSTED
    2824                    
    2825 00009540     8580          MOVE    *A12,A0,W       ;CHECK RANDOM ESCAPE %
    2826 00009550     0d5f          CALLA   RANDPER
         00009560 00003b00' 
    2827 00009580     c827          JRC     BUSTX
    2828                    
    2829 00009590     b762          MOVE    *A11(PFLAGS),A2,L       ;SQUAT WALK?
         000095a0     0080  
    2830 000095b0     1f22          BTST    BSWALK,A2
    2831 000095c0     cae6          JREQ    GBUSTL                  ;NO
    2832                    
    2833 000095d0     8580          MOVE    *A12,A0,W               ;DOUBLE ESCAPE %
    2834 000095e0     0d5f          CALLA   RANDPER
         000095f0 00003b00' 
    2835 00009610     c81e          JRC     BUSTX
    2836 00009620     c0e0          JRUC    GBUSTL
    2837                    
    2838 00009630           GBUST1:
    2839 00009630     120c          ADDK    10H,A12         ;PULL CRUD OF STACK
    2840 00009640     09ee          MOVI    DUMCOLL,A14
         00009650 0000eda0' 
    2841 00009670     b3c8          MOVE    A14,*A8(OCVECT),L       ;COLLISION POINTER NULL FOR NOW
         00009680     01d0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   64

    2842 00009690     4d6a          MOVE    A11,A10 
    2843                    
    2844 000096a0           BSTRYAGN
    2845 000096a0                   CREATE  INDPIDW,BUSTAMP         ;STAMP OUT A BUST
    2846 00009720     cb07          JRNE    BUSTMT                  ;BR = SUCCESSFUL CREATE
    2847 00009730                   SLOOP   1,BSTRYAGN
    2848 000097a0           BUSTMT
    2849 000097a0     0d3f          CALLR   DROPSTUF
         000097b0     0019  
    2850 000097c0     0de0          SETC                            ;HE IS TRULY DEAD
    2851 000097d0                   RETP
    2852 00009800           BUSTX:
    2853 00009800     120c          ADDK    10H,A12         ;PULL CRUD OF STACK
    2854 00009810     0320          CLRC                    ;HE IS FREE
    2855 00009820                   RETP
    2856                    *
    2857                    *BUST SOUND TABLE
    2858                    *
    2859 00009850           BSTSNDTAB:
    2860 00009850 00000000!         .LONG   SPRDSND,SPRDSND,YBUSTSND,POLSND,FREZSND,YBUSTSND
    2861 00009910     f420  POLSND  .WORD   0F400H|SPEAKPRI,1FH,8029H,0     ;"POLICE"
    2862                    *
    2863                    *DROPSTUF - DROP ALL YOUR STUFF
    2864                    *A8=ENEMY OBJECT POINTER
    2865                    *A13=ENEMY PROCESS POINTER
    2866                    *
    2867 00009950           DROPSTUF:
    2868 00009950     098f          MMTM    SP,A0,A6,A1,A7
         00009960     c300  
    2869 00009970     afa6          MOVB    *A13(EBUCK),A6          ;GET THE # OF BUCKS
         00009980     0140  
    2870 00009990     ca09          JREQ    DRPS1A2
    2871 000099a0           DRPS1A1
    2872 000099a0                   CREATE  0EAH,DROPBUCK           ;CREATE A MONEY DROPPING
    2873 00009a20     3d26          DSJS    A6,DRPS1A1
    2874 00009a30           DRPS1A2
    2875 00009a30     afa6          MOVB    *A13(EDRUG),A6          ;GET THE # OF DRUGS
         00009a40     0148  
    2876 00009a50     ca09          JREQ    DRPS1A4
    2877 00009a60           DRPS1A3
    2878 00009a60                   CREATE  0EAH,DROPDRUG           ;CREATE A DRUG DROPPING
    2879 00009ae0     3d26          DSJS    A6,DRPS1A3
    2880 00009af0           DRPS1A4
    2881 00009af0     afa6          MOVB    *A13(EROCK),A6          ;GET THE # OF ROCKS
         00009b00     0150  
    2882 00009b10     ca09          JREQ    DRPS1A6
    2883 00009b20           DRPS1A5
    2884 00009b20                   CREATE  0EAH,DROPROCK           ;CREATE A ROCKET BOMB DROPPING
    2885 00009ba0     3d26          DSJS    A6,DRPS1A5
    2886 00009bb0           DRPS1A6
    2887 00009bb0     afa6          MOVB    *A13(ECLIP),A6          ;GET THE # OF CLIPS
         00009bc0     0158  
    2888 00009bd0     ca09          JREQ    DRPS1A8
    2889 00009be0           DRPS1A7
    2890 00009be0                   CREATE  0EAH,DROPCLIP           ;CREATE A CLIP DROPPING
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   65

    2891 00009c60     3d26          DSJS    A6,DRPS1A7
    2892 00009c70           DRPS1A8
    2893 00009c70     09af          MMFM    SP,A0,A6,A1,A7
         00009c80     00c3  
    2894 00009c90     0960          RETS
    2895                    
    2896                    **************************************************************************
    2897                    *                                                                        *
    2898                    * CARDCHEK - CHECK TO SEE IF ENEMY SHOULD DROP A CARD                    *
    2899                    * A0 = ENEMY COUNTER - THIS ENEMY                                        *
    2900                    * A8 = PTR TO ENEMY OBJECT                                               *
    2901                    *                                                                        *
    2902                    **************************************************************************
    2903 00009ca0           CARDCHEK
    2904 00009ca0     098f          MMTM    SP,A0,A1,A7,A9
         00009cb0     c140  
    2905 00009cc0     4c00          MOVE    A0,A0
    2906 00009cd0     cb1b          JRNZ    CARDCKX                 ;BR = THERE'S MORE LEFT
    2907 00009ce0     05a7          MOVE    @CARDHOLD,A7,W          ;GET THE CARD HOLDER I.D.
         00009cf0 00000000! 
    2908 00009d10     4ce9          MOVE    A7,A9
    2909 00009d20     2f87          SRL     4,A7                    ;STRIP CARD TYPE
    2910 00009d30     2487          SLL     4,A7
    2911 00009d40     ca14          JRZ     CARDCKX                 ;NO HOLDER CURRENTLY
    2912 00009d50     b501          MOVE    *A8(OID),A1,W
         00009d60     01a0  
    2913 00009d70     2f81          SRL     4,A1
    2914 00009d80     2481          SLL     4,A1
    2915 00009d90     4827          CMP     A1,A7
    2916 00009da0     cb0e          JRNE    CARDCKX                 ;NOT THE CORRECT ENEMY
    2917 00009db0     2789          SLL     28,A9
    2918 00009dc0     2c89          SRL     28,A9
    2919 00009dd0                   CREATE  0EAH,DROPCARD
    2920 00009e50     56e7          CLR     A7
    2921 00009e60     0587          MOVE    A7,@CARDHOLD,W
         00009e70 00000000! 
    2922 00009e90           CARDCKX
    2923 00009e90     09af          MMFM    SP,A0,A1,A7,A9
         00009ea0     0283  
    2924 00009eb0     0960          RETS
    2925                    
    2926                    **************************************************************************
    2927                    *                                                                        *
    2928                    * WALKING ENEMY DIE PROCESS                                              *
    2929                    * A8=OBJECT PTR OF ENEMY                                                 *
    2930                    * A9=XVEL OF KILLER                                                      *
    2931                    * A10=YVEL OF KILLER                                                     *
    2932                    * A11=OID OF KILLER                                                      *
    2933                    * PDATA     = UPPER LEFT X OF KILLER                                     *
    2934                    * PDATA+10H = UPPER LEFT Y OF KILLER                                     *
    2935                    * PDATA+20H = CURRENT X SIZE OF KILLER                                   *
    2936                    * PDATA+30H = CURRENT Y SIZE OF KILLER                                   *
    2937                    * PDATA+A0H = ADDRESS OF MAIN ANIMATION TABLE                            *
    2938                    * PDATA+E0H = # OF CLIPS:# OF ROCKS:# OF BUCKS:# OF DRUGS                *
    2939                    * I.D. = $ED                                                             *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   66

    2940                    *                                                                        *
    2941                    **************************************************************************
    2942 00009ec0           WENDIE
    2943 00009ec0     0d3f          CALLR   SCRKIL                  ;SCORE THE KILL                                                 
         00009ed0     0634  
    2944                    
    2945 00009ee0     4d63          MOVE    A11,A3                  ;COPY OF I.D.
    2946 00009ef0     2783          SLL     28,A3
    2947 00009f00     2c83          SRL     28,A3
    2948                    
    2949 00009f10     0b43          CMPI    ROCKETID,A3,W
         00009f20     fffb  
    2950 00009f30     ca00          JREQ    WROCK                   ;DEATH BY ROCKET
         00009f40     00a3  
    2951                    
    2952 00009f50     0b43          CMPI    EXPLODID,A3,W
         00009f60     fffd  
    2953 00009f70     ca00          JREQ    WEXPD                   ;DEATH BY EXPLOSION
         00009f80     0102  
    2954                    
    2955 00009f90     b500          MOVE    *A8(OXVEL+16),A0,W
         00009fa0     0050  
    2956 00009fb0     ce05          JRN     WEND1A                  ;BR = OBJECT HAD A NEGATIVE VELOCITY
    2957                    
    2958 00009fc0     4d29          MOVE    A9,A9
    2959 00009fd0     ce05          JRN     WEND1C                  ;BR = OBJECT HIT FROM FRONT
    2960                    
    2961 00009fe0     29c9  WEND1B  SRA     18,A9                   ;OBJECT MOVING IS SAME DIRECTION
    2962 00009ff0     2bca          SRA     2,A10                   ;DIVIDE VELS. BY 4
    2963 0000a000     c004          JRUC    WEND1D
    2964                    
    2965 0000a010     4d29  WEND1A  MOVE    A9,A9
    2966 0000a020     cefb          JRN     WEND1B
    2967                    
    2968 0000a030     29a9  WEND1C  SRA     19,A9                   ;OBJECTS MOVING IN OPPOSITE DIREC.
    2969 0000a040     2bca          SRA     2,A10                   ;DIVIDE INTEGER VELS. BY 8
    2970                    
    2971 0000a050           WEND1D
    2972 0000a050     b500          MOVE    *A8(OXVEL+16),A0,W
         0000a060     0050  
    2973 0000a070     4120          ADD     A9,A0
    2974 0000a080     b008          MOVE    A0,*A8(OXVEL+16),W
         0000a090     0050  
    2975                    ;       MOVE    *A8(OYVEL),A0,L
    2976                    ;       add     A10,A0
    2977                    ;       MOVE    A0,*A8(OYVEL),L
    2978                    ;       MOVE    A10,*A8(OZVEL),L
    2979 0000a0a0     b700          MOVE    *A8(OYVEL),A0,L
         0000a0b0     0060  
    2980 0000a0c0     b701          MOVE    *A8(OZVEL),A1,L
         0000a0d0     00e0  
    2981 0000a0e0     4420          SUB     A1,A0
    2982 0000a0f0     b208          MOVE    A0,*A8(OYVEL),L
         0000a100     0060  
    2983 0000a110     5621          CLR     A1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   67

    2984 0000a120     b228          MOVE    A1,*A8(OZVEL),L
         0000a130     00e0  
    2985                    
    2986 0000a140     b7a6          MOVE    *A13(EMAINT),A6,L       ;GET THE MAIN ANIMATION TABLE
         0000a150     0100  
    2987 0000a160     1840          MOVK    DFRAME,A0                                                
    2988 0000a170     0d3f          CALLR   BASFRM                                                   
         0000a180     04e8  
    2989                    
    2990 0000a190     24a3          SLL     5,A3
    2991 0000a1a0     4066          ADD     A3,A6                   ;AND OFFSET INTO THE ANIMATION TABLE
    2992 0000a1b0     86c9          MOVE    *A6,A9,L                ;FRAME TABLE L O A D E D
    2993                    
    2994 0000a1c0     0d3f          CALLR   GRUNTRND                ;MAKE A RANDOM GRUNT NOISE
         0000a1d0     0217  
    2995 0000a1e0     0d3f          CALLR   DROPSTUF                ;DROP THE BOOTY
         0000a1f0     ff75  
    2996                                                    
    2997 0000a200           WEND1F
    2998 0000a200     b701          MOVE    *A8(OYVEL),A1,L
         0000a210     0060  
    2999 0000a220     b700          MOVE    *A8(OZVEL),A0,L
         0000a230     00e0  
    3000 0000a240     4401          SUB     A0,A1
    3001 0000a250     ce12          JRN     WENFALL
    3002 0000a260     0d5f          CALLA   DFRMGRND
         0000a270 00000770' 
    3003 0000a290     0b41          CMPI    5,A1
         0000a2a0     fffa  
    3004 0000a2b0     c70c          JRGT    WENFALL
    3005                    
    3006 0000a2c0           WEND1
    3007 0000a2c0     5600          clr     A0
    3008 0000a2d0     b208          move    A0,*A8(OYVEL),L
         0000a2e0     0060  
    3009 0000a2f0     1821          MOVK    1,A1
    3010 0000a300                   JSRP    FRANIM                  ;DO DEATH FRAMES
    3011 0000a370     c045          jruc    WEND2
    3012 0000a380           WENFALL
    3013 0000a380     574a          clr     A10
    3014 0000a390           WFLp
    3015 0000a390     4d4a          move    A10,A10
    3016 0000a3a0     cb0f          jrnz    SkAnim
    3017 0000a3b0     1881          movk    4,A1                    ;* one frame, no sleepin
    3018 0000a3c0                   PUSHP   A9
    3019 0000a3d0                   jsrp    FRANIM
    3020 0000a440                   PULLP   A2
    3021 0000a460     8721          move    *A9,A1,L
    3022 0000a470     cb01          jrnz    LISTLEFT
    3023 0000a480     4c49          move    A2,A9                   ;KEEP LAST FRAME
    3024                    ;       movi    0FFFFFFFFH,A0,L         ;fall without any more FRANIM
    3025 0000a490           LISTLEFT:
    3026 0000a490     4c0a          move    A0,A10
    3027 0000a4a0           SkAnim
    3028 0000a4a0                   SLEEP   1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   68

    3029 0000a4e0     142a          dec     A10
    3030 0000a4f0     b700          move    *A8(OYVEL),A0,L
         0000a500     0060  
    3031 0000a510     ce08          jrn     GOINGUP
    3032 0000a520     0d5f          calla   DFRMGRND
         0000a530 00000770' 
    3033 0000a550     0b41          cmpi    5,A1
         0000a560     fffa  
    3034 0000a570     c40b          jrlt    HitGRND
    3035 0000a580     b700          move    *A8(OYVEL),A0,L
         0000a590     0060  
    3036 0000a5a0           GOINGUP:
    3037 0000a5a0     0b20          addi    08000H,A0
         0000a5b0 00008000  
    3038 0000a5d0     b208          move    A0,*A8(OYVEL),L
         0000a5e0     0060  
    3039 0000a5f0     0d5f          calla   UpdShadV
         0000a600 00000000! 
    3040 0000a620     c0d6          jruc    WFLp
    3041 0000a630           HitGRND:
    3042 0000a630     5600          clr     A0
    3043 0000a640     b208          move    A0,*A8(OYVEL),L
         0000a650     0060  
    3044 0000a660     0d3f          CALLR   PSTOP                                                    
         0000a670     fa2a  
    3045 0000a680     4d00          move    A8,A0
    3046 0000a690     0d5f          calla   SETZPOS
         0000a6a0 000010e0' 
    3047 0000a6c0     0d5f          CALLA   DELSHAD
         0000a6d0 00000000! 
    3048 0000a6f0     4d40          move    A10,A0
    3049 0000a700     ca04          jrz     SkSlp
    3050 0000a710     ce03          jrn     SkSlp
    3051 0000a720     0d5f          calla   PRCSLP
         0000a730 00000000! 
    3052 0000a750           SkSlp:
    3053 0000a750     1821          MOVK    1,A1
    3054 0000a760                   JSRP    FRANIM                  ;Finish DEATH FRAMES
    3055 0000a7d0           WEND2
    3056 0000a7d0     0d3f          CALLR   PSTOP                                                    
         0000a7e0     fa13  
    3057 0000a7f0           WEND3
    3058 0000a7f0     4d00          MOVE    A8,A0
    3059 0000a800     0d5f          CALLA   SETZPOS
         0000a810 000010e0' 
    3060 0000a830     0d5f          CALLA   DELSHAD
         0000a840 00000000! 
    3061 0000a860                   SLEEP   10
    3062 0000a8a0     09e9          MOVI    [1,1],A9
         0000a8b0 00010001  
    3063 0000a8d0                   CREATE  0DFh,ESINK              ;CREATE THE DEADMAN SINK         
    3064 0000a950                   DIE                             ;AND ME                                                         
    3065                    
    3066                    **************************************************************************
    3067                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   69

    3068                    * WROCK - DEATH BY ROCKET                                                *
    3069                    * A3 = TYPE DESCRIPTOR OF THING THAT KILLED HIM                          *
    3070                    * A8 = OBJECT BLOCK PTR OF ENEMY                                         *
    3071                    *                                                                        *
    3072                    **************************************************************************
    3073 0000a980     0d5f  WROCK   CALLA   PSTOP                                                    
         0000a990 00004920' 
    3074                    
    3075                    *PUT OUT THE INITIAL CREOSOTE FRAME
    3076 0000a9b0     b7a6          MOVE    *A13(EMAINT),A6,L       ;GET THE MAIN ANIMATION TABLE
         0000a9c0     0100  
    3077 0000a9d0     1840          MOVK    DFRAME,A0                                                
    3078 0000a9e0     0d3f          CALLR   BASFRM                                                   
         0000a9f0     0461  
    3079                    
    3080 0000aa00     24a3          SLL     5,A3                    ;DESCRIPTOR * 32
    3081 0000aa10     4066          ADD     A3,A6                   ;AND OFFSET INTO THE ANIMATION TABLE
    3082                    
    3083 0000aa20     86c9          MOVE    *A6,A9,L                ;GET THE FRAMES
    3084                    
    3085 0000aa30     05a0          MOVE    @DEATHCNT,A0,W
         0000aa40 00000000! 
    3086 0000aa60     1020          INC     A0
    3087 0000aa70     0580          MOVE    A0,@DEATHCNT,W          ;BIG DEATH CNT INCREMENT
         0000aa80 00000000! 
    3088                    
    3089 0000aaa0     1821          MOVK    1,A1
    3090 0000aab0                   JSRP    FRANIM                  ;ANIMATE THIS
    3091                    
    3092                    *SEND THE BODY PARTS FLYING
    3093                    
    3094 0000ab20     b7a6          MOVE    *A13(EMAINT),A6,L       ;GET THE MAIN ANIMATION TABLE
         0000ab30     0100  
    3095 0000ab40     1860          MOVK    FFRAME,A0                                                
    3096 0000ab50     0d3f          CALLR   BASFRM                                                   
         0000ab60     044a  
    3097                    
    3098 0000ab70                   ADJUST  ADJGORE
    3099 0000abc0     cb39          JRNZ    PARTSKIP
    3100                    
    3101 0000abd0     05a0          MOVE    @OVERLOAD,A0
         0000abe0 00000000! 
    3102 0000ac00     0b40          CMPI    3,A0
         0000ac10     fffc  
    3103 0000ac20     ca33          JREQ    PARTSKIP                ;SKIP DUE TO OVERLOAD
    3104                    
    3105 0000ac30     098f          MMTM    SP,A9,A10,A11
         0000ac40     0070  
    3106                    
    3107 0000ac50     0d5f          CALLA   GETCPNT                 ;GET ENEMY'S CENTER
         0000ac60 000008e0' 
    3108 0000ac80     ee2b          MOVY    A1,A11
    3109 0000ac90     ec2b          MOVX    A1,A11                  ;SET UP STARTING POSITION
    3110                    
    3111 0000aca0     4d65          MOVE    A11,A5                  ;SAVE CENTER POSITION 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   70

    3112                    
    3113 0000acb0     09e7          MOVI    TRAJEC,A7               ;PROCESS FOR FRAGMENTS AND DOOR
         0000acc0 0000d570' 
    3114 0000ace0     5621          CLR     A1                      ;ZERO I.D.
    3115                    
    3116 0000acf0     b50e          MOVE    *A8(OZPOS),A14,W
         0000ad00     00d0  
    3117 0000ad10     09e0          MOVI    DMAWNZ,A0       
         0000ad20 00008002  
    3118 0000ad40     2600          SLL     16,A0
    3119 0000ad50     edc0          MOVX    A14,A0                  ;A0 = [DMA FLAGS,ZPOS]
    3120 0000ad60     4e05          MOVE    A0,B5                   ;CONSTANT THROUGHOUT FRAGMENT CREATION
    3121 0000ad70     09ee          MOVI    DBOUNCE,A14             ;SAME HERE              
         0000ad80 0000de40' 
    3122 0000ada0     574a          CLR     A10                     ;USE DEFAULT INIT TABLE
    3123 0000adb0     5631          CLR     B1                      ;NOW 2nd ANIMATION
    3124                    
    3125 0000adc0     86c9          MOVE    *A6,A9,L
    3126 0000add0     ca16          JREQ    WROCKPX
    3127                    
    3128 0000ade0     09c0  PIECER1 MOVI    50,A0                   ;RANDOMIZE POSITION & VELOCITY
         0000adf0     0032  
    3129 0000ae00     0d5f          CALLA   RANDU
         0000ae10 000038f0' 
    3130 0000ae30     1fe0          BTST    0,A0
    3131 0000ae40     ca01          JREQ    PIECER2                 ;SEND PART RIGHT
    3132 0000ae50     03a0          NEG     A0                      ;SEND PART LEFT
    3133 0000ae60           PIECER2
    3134 0000ae60     0520          ZEXT    A0                      ;BLOW OFF THE SIGN
    3135 0000ae70     e00b          ADDXY   A0,A11                  ;ADD FOR NEW POSITION
    3136 0000ae80     0500          SEXT    A0                      ;RE-SIGN FOR DIVIDE
    3137                    
    3138 0000ae90     2580          SLL     12,A0                   ;DIVIDE VELOCITY
    3139 0000aea0     caf3          JREQ    PIECER1                 ;NO ZEROZ
    3140 0000aeb0     4e04          MOVE    A0,B4                   ;XVEL IS LOADED
    3141 0000aec0     0d3f          CALLR   GETYZVEL                ;GET A RANDOM Y AND Z VELOCITY
         0000aed0     0174  
    3142 0000aee0     0d3f          CALLR   MAKTPROC
         0000aef0     0243  
    3143                    
    3144 0000af00     4cab          MOVE    A5,A11                  ;RESTORE CENTER
    3145 0000af10     1006          ADDK    32,A6
    3146 0000af20     86c9          MOVE    *A6,A9,L
    3147 0000af30     cbea          JRNE    PIECER1
    3148 0000af40           WROCKPX
    3149 0000af40     09af          MMFM    SP,A9,A10,A11
         0000af50     0e00  
    3150 0000af60           PARTSKIP
    3151 0000af60     0d3f          CALLR   DELENEMY
         0000af70     012d  
    3152 0000af80     c080          JAUC    SUCIDE
         0000af90 00000000! 
    3153                    
    3154                    **************************************************************************
    3155                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   71

    3156                    * WEXPD - WALKING BAD GUY, DEATH BY EXPLOSION                            *
    3157                    * A3 = TYPE DESCRIPTOR OF THING THAT KILLED HIM                          *
    3158                    * A8 = OBJECT BLOCK PTR OF ENEMY                                         *
    3159                    * PDATA = UPPER LEFT [Y,X] OF KILLER                                     *
    3160                    * PDATA+20H = [Y,X] SIZE OF KILLER                                       *
    3161                    *                                                                        *
    3162                    **************************************************************************
    3163 0000afb0     0d3f  WEXPD   CALLR   PSTOP
         0000afc0     f995  
    3164                    
    3165 0000afd0     b7a0          MOVE    *A13(PDATA),A0,L        ;GET DMA XY POSITION OF KILLER
         0000afe0     0060  
    3166 0000aff0     b7a1          MOVE    *A13(PDATA+20H),A1,L    ;GET DMA XY SIZE OF KILLER
         0000b000     0080  
    3167                    
    3168 0000b010     0d3f          CALLR   DROPSTUF                ;DROP THE BOOTY
         0000b020     fe92  
    3169                    
    3170 0000b030     0d3f          CALLR   GETCENT
         0000b040     f598  
    3171                    
    3172 0000b050     4c22          MOVE    A1,A2                   ;KEEP CENTER OF KILLER
    3173 0000b060     0d3f          CALLR   GETCPNT                 ;GET ENEMY'S CENTER
         0000b070     f586  
    3174                    
    3175 0000b080     b7a6          MOVE    *A13(EMAINT),A6,L       ;GET THE MAIN ANIMATION TABLE
         0000b090     0100  
    3176 0000b0a0     1840          MOVK    DFRAME,A0                                                
    3177 0000b0b0     0d3f          CALLR   BASFRM                                                   
         0000b0c0     03f4  
    3178 0000b0d0     24a3          SLL     5,A3                    ;DESCRIPTOR * 32
    3179 0000b0e0     4066          ADD     A3,A6                   ;AND OFFSET INTO THE ANIMATION TABLE
    3180                    
    3181 0000b0f0     0501          SEXT    A1                      ;JUST DEAL WITH X CENTER
    3182 0000b100     4441          SUB     A2,A1                   ;A1 = ENEMY XCENT - KILLER XCENT
    3183 0000b110     4c22          MOVE    A1,A2
    3184 0000b120     4c44          MOVE    A2,A4
    3185 0000b130     0384          ABS     A4
    3186 0000b140     0b44          CMPI    50,A4                   ;BURN 'EM DOWN IF YOU CAN
         0000b150     ffcd  
    3187 0000b160     c61c          JRLE    WEXSPIN                 ;HE'S CLOSE ENOUGH TO SPIN
    3188 0000b170     0d3f          CALLR   DFRMGRND                ;GET THE DISTANCE FROM THE GROUND
         0000b180     f55e  
    3189 0000b190     0b41          CMPI    5,A1
         0000b1a0     fffa  
    3190 0000b1b0     c717          JRGT    WEXSPIN                 ;BR = HE'S IN THE AIR ALREADY
    3191 0000b1c0                   SOUND1  FSIZZSND
    3192 0000b220     2b42          SRA     6,A2
    3193 0000b230     b048          MOVE    A2,*A8(OXVEL+16),W
         0000b240     0050  
    3194 0000b250     4d00          move    A8,A0
    3195 0000b260     1406          SUBK    32,A6                   ;GET BACK TO THE FLAMER FRAMES
    3196 0000b270     86c9          MOVE    *A6,A9,L
    3197 0000b280     1881          MOVK    4,A1
    3198 0000b290                   JSRP    FRANIM                  ;DO 1st FRAME so DFRMGRND is valid
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   72

    3199 0000b300     86c9          MOVE    *A6,A9,L
    3200 0000b310     c000          JRUC    WEND1F                  ;JUST ANIMATE AND CRUISE
         0000b320     feed  
    3201 0000b330           WEXSPIN
    3202 0000b330     4c42          MOVE    A2,A2
    3203 0000b340     cf01          JRNN    WEXPD1A                 ;BR = SPIN LIKE IT IS   
    3204                    
    3205 0000b350     1006          ADDK    32,A6                   ;OTHERWISE REVERSE SPIN IS REQUIRED
    3206                    
    3207 0000b360     86c9  WEXPD1A MOVE    *A6,A9,L                ;FRAME TABLE L O A D E D
    3208                    
    3209 0000b370     2b62          SRA     5,A2                    ;DIVIDE
    3210 0000b380     b048          MOVE    A2,*A8(OXVEL+16),W      ;MAKE DCENTERS A VELOCITY
         0000b390     0050  
    3211                    
    3212 0000b3a0     0d3f          CALLR   GETYZVEL                ;GET A RANDOM Y & Z VELOCITY
         0000b3b0     0126  
    3213 0000b3c0     4f00          MOVE    A8,B0
    3214 0000b3d0     b250          MOVE    B2,*B0(OZVEL),L
         0000b3e0     00e0  
    3215 0000b3f0     b270          MOVE    B3,*B0(OYVEL),L         ;STUFF THE ILL GOTTEN BOOTY
         0000b400     0060  
    3216                    
    3217 0000b410                   SOUND1  SIZZAIR                 ;SUPER SCREEEEEEEAM
    3218 0000b470     05a0          MOVE    @DEATHCNT,A0,W
         0000b480 00000000! 
    3219 0000b4a0     1020          INC     A0
    3220 0000b4b0     0580          MOVE    A0,@DEATHCNT,W          ;INCREMENT THE DEATH
         0000b4c0 00000000! 
    3221                    
    3222 0000b4e0     b32d          MOVE    A9,*A13(PDATA+70H),L    ;KEEP FOR MULTIPLE ANIMATIONS
         0000b4f0     00d0  
    3223 0000b500     186b          MOVK    3,A11
    3224                    
    3225 0000b510           WEXPD1
    3226 0000b510                   PUSHP   A11
    3227 0000b520     1881          MOVK    4,A1
    3228 0000b530                   JSRP    FRANIM
    3229 0000b5a0     c816          JRC     WEXPD3                  ;THE END WAS HIT
    3230                    
    3231 0000b5b0           WEXPDS
    3232 0000b5b0                   SLEEP   1
    3233 0000b5f0     0d3f          CALLR   CKZADJST
         0000b600     f8f2  
    3234 0000b610     b703          MOVE    *A8(OYVEL),A3,L         ;GET THE CURRENT Y VELOCITY
         0000b620     0060  
    3235 0000b630     c603          JRLE    WEXPD1B                 ;BR = NOT GOING DOWN, DON'T CHECK GROUND HIT
    3236                    
    3237 0000b640     0d3f          CALLR   DFRMGRND                ;DID HE HIT THE GROUND?
         0000b650     f511  
    3238 0000b660     c610          JRLE    LEXPHIT                 ;BR = YES
    3239                    
    3240 0000b670           WEXPD1B
    3241 0000b670     b700          MOVE    *A8(OYVEL),A0,L         ;DECREASE Y VELOCITY
         0000b680     0060  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   73

    3242 0000b690     0b00          ADDI    GRAVITY,A0
         0000b6a0     2400  
    3243 0000b6b0     b208          MOVE    A0,*A8(OYVEL),L
         0000b6c0     0060  
    3244                    
    3245 0000b6d0     3e6b          DSJS    A11,WEXPDS              
    3246 0000b6e0                   PULLP   A11
    3247 0000b700     c0e0          JRUC    WEXPD1
    3248                    
    3249 0000b710     b7a9  WEXPD3  MOVE    *A13(PDATA+70H),A9,L    ;POINT TO THE HEAD OF THE LIST
         0000b720     00d0  
    3250 0000b730                   PULLP   A11
    3251 0000b750     102b          INC     A11                     ;INCREMENT SLEEP TIME
    3252 0000b760     c0da          JRUC    WEXPD1
    3253                    
    3254 0000b770           LEXPHIT
    3255 0000b770     0d3f          CALLR   PSTOP
         0000b780     f919  
    3256 0000b790     4d00          move    A8,A0
    3257 0000b7a0     0d5f          calla   SETZPOS
         0000b7b0 000010e0' 
    3258 0000b7d0     0d5f          calla   SHADUPD
         0000b7e0 00000000! 
    3259                    
    3260 0000b800     56e7          clr     A7              ;Do sizzle sound
    3261 0000b810     b509          move    *A8(OID),A9,W
         0000b820     01a0  
    3262 0000b830     2609          sll     16,A9
    3263 0000b840     2d89          srl     20,A9
    3264 0000b850     0b49          cmpi    BUGEOID/16,A9
         0000b860     ff1f  
    3265 0000b870     ca04          jreq    BugBurn
    3266 0000b880     09e9          MOVI    LDEXP1,A9               ;GET BURN FRAMES
         0000b890 00000000! 
    3267 0000b8b0     c00d          jruc    GotBurn
    3268 0000b8c0           BugBurn:
    3269 0000b8c0     09e9          MOVI    BUGBURN,A9
         0000b8d0 00000000! 
    3270 0000b8f0     1827          movk    1,A7            ;don't sizzle bug
    3271 0000b900     0d5f          CALLA   GETANIXY                ;GET THE ANIMATION POINT
         0000b910 00000000! 
    3272 0000b930     b504          MOVE    *A8(OFLAGS),A4,W                                         
         0000b940     0100  
    3273 0000b950     0b84          ANDNI   M_FLIPV,A4              ;NO UPSIDE-DOWN FIRES ALLOWED    
         0000b960 00000020  
    3274 0000b980     c01c          jruc    SkSizz
    3275 0000b990           GotBurn:
    3276                    
    3277 0000b990     0d5f          CALLA   GETANIXY                ;GET THE ANIMATION POINT
         0000b9a0 00000000! 
    3278                    
    3279 0000b9c0     0d02          SUBI    [50H,0],A2              ;OFFSET TO Y
         0000b9d0 ffafffff  
    3280                    
    3281 0000b9f0     b504          MOVE    *A8(OFLAGS),A4,W                                         
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   74

         0000ba00     0100  
    3282 0000ba10     0b84          ANDNI   M_FLIPV,A4              ;NO UPSIDE-DOWN FIRES ALLOWED    
         0000ba20 00000020  
    3283                    
    3284 0000ba40     1f64          BTST    B_FLIPH,A4
    3285 0000ba50     ca04          JREQ    WEXPD4                  ;NON-CENTERED A-POINTS ARE A B-I-T-C-H
    3286                    
    3287 0000ba60     0d03          SUBI    [30H,0],A3
         0000ba70 ffcfffff  
    3288 0000ba90     c003          JRUC    WEXPD5
    3289                    
    3290 0000baa0     0b23  WEXPD4  ADDI    [30H,0],A3
         0000bab0 00300000  
    3291 0000bad0           WEXPD5
    3292                    
    3293 0000bad0     4ce7          move    A7,A7
    3294 0000bae0     cb06          jrnz    SkSizz
    3295 0000baf0                   SOUND1  SIZZSND                 ;SIZZLE,SIZZLE, TOIL AND GRIZZLE
    3296 0000bb50           SkSizz:
    3297                    
    3298 0000bb50     4d00          MOVE    A8,A0
    3299 0000bb60     0d5f          CALLA   GANISAG                 ;SHOW THE NEW ADJUSTMENTS
         0000bb70 00000000! 
    3300 0000bb90     0d5f          CALLA   DELSHAD                 ;DELETE THE SHADOW
         0000bba0 00000000! 
    3301                    
    3302 0000bbc0     1881          MOVK    4,A1
    3303 0000bbd0                   JSRP    FRANIM                  ;ANIMATE THE FIRST PART OF THE BURN
    3304 0000bc40     c800          JRC     WEND2
         0000bc50     feb7  
    3305 0000bc60     4c05          MOVE    A0,A5
    3306 0000bc70     4d00          MOVE    A8,A0
    3307 0000bc80     0d5f          CALLA   SETZPOS                 ;LAY ME DOWN TO BURN
         0000bc90 000010e0' 
    3308                    ;       MOVE    *A8(OZPOS),A0,W
    3309                    ;       SUBK    20,A0                   ;GET IT CLOSER TO THE GROUND
    3310                    ;       MOVE    A0,*A8(OZPOS),W
    3311 0000bcb0                   SLEEPR  A5
    3312 0000bcf0     1821          MOVK    1,A1
    3313 0000bd00                   JSRP    FRANIM                  ;ANIMATE THE REST S.V.P.
    3314 0000bd70     c000          JRUC    WEND2
         0000bd80     fea4  
    3315                            
    3316                    *****************************************************************
    3317 0000bd90           ADDBUCKS:
    3318                    ;       A0 - Amount of $$ desired for enemy
    3319                    ;       A13 - Ptr to enemies proc block
    3320                    ;moves the minimum of money available and money requested
    3321                    ;from pool of available money to enemies ctr
    3322 0000bd90                   PUSH    A1
    3323 0000bda0     05a1          move    @BUCKCNT,A1,W
         0000bdb0 00000000! 
    3324 0000bdd0     4401          sub     A0,A1
    3325 0000bde0     cf02          jrnn    EnufBuck
    3326 0000bdf0     4020          add     A1,A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   75

    3327 0000be00     5621          clr     A1
    3328 0000be10           EnufBuck:
    3329 0000be10     0581          move    A1,@BUCKCNT,W
         0000be20 00000000! 
    3330 0000be40     afa1          movb    *A13(EBUCK),A1
         0000be50     0140  
    3331 0000be60     4001          add     A0,A1
    3332 0000be70     ac2d          movb    A1,*A13(EBUCK)
         0000be80     0140  
    3333 0000be90                   PULL    A1      
    3334 0000beb0     0960          rets
    3335                    *****************************************************************
    3336                    
    3337                    *****************************************************************
    3338 0000bec0           ADDDRUGS:
    3339                    ;       A0 - Amount of Drug desired for enemy
    3340                    ;       A13 - Ptr to enemies proc block
    3341                    ;moves the minimum of money available and money requested
    3342                    ;from pool of available money to enemies ctr
    3343 0000bec0                   PUSH    A1
    3344 0000bed0     05a1          move    @DRUGCNT,A1,W
         0000bee0 00000000! 
    3345 0000bf00     4401          sub     A0,A1
    3346 0000bf10     cf02          jrnn    EnufDrug
    3347 0000bf20     4020          add     A1,A0
    3348 0000bf30     5621          clr     A1
    3349 0000bf40           EnufDrug:
    3350 0000bf40     0581          move    A1,@DRUGCNT,W
         0000bf50 00000000! 
    3351 0000bf70     afa1          movb    *A13(EDRUG),A1
         0000bf80     0148  
    3352 0000bf90     4001          add     A0,A1
    3353 0000bfa0     ac2d          movb    A1,*A13(EDRUG)
         0000bfb0     0148  
    3354 0000bfc0                   PULL    A1      
    3355 0000bfe0     0960          rets
    3356                    *****************************************************************
    3357                    
    3358                    *****************************************************************
    3359 0000bff0           ADDROCKS:
    3360                    ;       A0 - Amount of Rockets desired for enemy
    3361                    ;       A13 - Ptr to enemies proc block
    3362                    ;moves the minimum of money available and money requested
    3363                    ;from pool of available money to enemies ctr
    3364 0000bff0                   PUSH    A1
    3365 0000c000     05a1          move    @ROCKCNT,A1,W
         0000c010 00000000! 
    3366 0000c030     4401          sub     A0,A1
    3367 0000c040     cf02          jrnn    EnufRock
    3368 0000c050     4020          add     A1,A0
    3369 0000c060     5621          clr     A1
    3370 0000c070           EnufRock:
    3371 0000c070     0581          move    A1,@ROCKCNT,W
         0000c080 00000000! 
    3372 0000c0a0     afa1          movb    *A13(EROCK),A1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   76

         0000c0b0     0150  
    3373 0000c0c0     4001          add     A0,A1
    3374 0000c0d0     ac2d          movb    A1,*A13(EROCK)
         0000c0e0     0150  
    3375 0000c0f0                   PULL    A1      
    3376 0000c110     0960          rets
    3377                    *****************************************************************
    3378                    
    3379                    *****************************************************************
    3380 0000c120           ADDCLIPS:
    3381                    ;       A0 - Amount of Clips desired for enemy
    3382                    ;       A13 - Ptr to enemies proc block
    3383                    ;moves the minimum of money available and money requested
    3384                    ;from pool of available money to enemies ctr
    3385 0000c120                   PUSH    A1
    3386 0000c130     05a1          move    @CLIPCNT,A1,W
         0000c140 00000000! 
    3387 0000c160     4401          sub     A0,A1
    3388 0000c170     cf02          jrnn    EnufClip
    3389 0000c180     4020          add     A1,A0
    3390 0000c190     5621          clr     A1
    3391 0000c1a0           EnufClip:
    3392 0000c1a0     0581          move    A1,@CLIPCNT,W
         0000c1b0 00000000! 
    3393 0000c1d0     afa1          movb    *A13(ECLIP),A1
         0000c1e0     0158  
    3394 0000c1f0     4001          add     A0,A1
    3395 0000c200     ac2d          movb    A1,*A13(ECLIP)
         0000c210     0158  
    3396 0000c220                   PULL    A1      
    3397 0000c240     0960          rets
    3398                    *****************************************************************
    3399                    
    3400                    *
    3401                    *DELENEMY - DELETE YENEMY FROM THE OBJECT LIST AND ENEMIES LIST,
    3402                    *                ALSO DELETE THE SHADOW FROM THE OBJLST.
    3403                    *A8 = PTR TO ENEMY OBLOCK
    3404 0000c250           DELENEMY
    3405 0000c250                   PUSH    A1
    3406 0000c260     09e1          MOVI    ENEMIES,A1
         0000c270 00000000! 
    3407 0000c290     4d00          MOVE    A8,A0
    3408 0000c2a0     0d5f          CALLA   DELPAL
         0000c2b0 00000000! 
    3409 0000c2d0     0d3f          CALLR   DELSUPP
         0000c2e0     f6ef  
    3410 0000c2f0     0d5f          CALLA   DELSOBJ
         0000c300 00000000! 
    3411 0000c320                   PULL    A1
    3412 0000c340     0960          RETS
    3413                    
    3414                    **************************************************************************
    3415                    *                                                                        *
    3416                    * GRUNTRND - MAKE A RANDOM GRUNT NOISE IN THE CORRECT SPEAKER.           *
    3417                    * A8 = PTR TO ENEMY OBJECT                                               *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   77

    3418                    *                                                                        *
    3419                    **************************************************************************
    3420 0000c350           GRUNTRND
    3421 0000c350     098f          MMTM    SP,A0,A1
         0000c360     c000  
    3422 0000c370     18a0          MOVK    5,A0
    3423 0000c380     0d3f          CALLR   RANDU                   ;GET A # 1-3
         0000c390     f755  
    3424 0000c3a0     1420          DEC     A0
    3425 0000c3b0     09e1          MOVI    GRUNTTAB,A1     
         0000c3c0 0000c470' 
    3426 0000c3e0     24a0          SLL     5,A0
    3427 0000c3f0     4020          ADD     A1,A0
    3428 0000c400     8600          MOVE    *A0,A0,L                ;GET DAT SOUND
    3429 0000c410     0d5f          CALLA   ONESND                  ;MAKE SOUND ON THE CORRECT SIDE
         0000c420 00000000! 
    3430 0000c440     09af          MMFM    SP,A0,A1
         0000c450     0003  
    3431 0000c460     0960          RETS
    3432                    
    3433 0000c470 00000000! GRUNTTAB .LONG  GRUNT1R,GRUNT2R,GRUNT3R,GRUNT4R,GRUNT5R
    3434                    **************************************************************************
    3435                    *                                                                        *
    3436                    * GETLZVEL - GET A RANDOM LANDING POSITION, AND SET THE Z VELOCITY       *
    3437                    *          ACCORDING TO THE RELATIONSHIP OF THE LANDING POSITION         *
    3438                    *          TO THE BOTTOM Y OF THE OBJECT.                                *
    3439                    * A8 = PTR TO OBJECT BLOCK                                               *
    3440                    * RETURNS                                                                *
    3441                    * A10 = LANDING Y LINE (16 BITS)                                         *
    3442                    *                                                                        *
    3443                    **************************************************************************
    3444 0000c510           GETLZVEL
    3445 0000c510                   PUSH    A1
    3446 0000c520     0d3f          CALLR   GETLAND
         0000c530     004a  
    3447 0000c540     0d3f          CALLR   GETBOTY
         0000c550     f42f  
    3448 0000c560     4941          CMP     A10,A1
    3449 0000c570     ca07          JREQ    GETLZX                  ;BR = LAND RIGHT HERE BUDDY
    3450 0000c580     c702          JRGT    GETLNZ                  ;BR = NEGATIVE Z VELOCITY
    3451 0000c590     1821          MOVk    1,A1
    3452 0000c5a0     c002          JRUC    GETLZIN
    3453 0000c5b0     09c1  GETLNZ  MOVI    -1,A1
         0000c5c0     ffff  
    3454 0000c5d0           GETLZIN
    3455 0000c5d0     b028          MOVE    A1,*A8(OZVEL+16),W
         0000c5e0     00f0  
    3456 0000c5f0           GETLZX
    3457 0000c5f0                   PULL    A1
    3458 0000c610     0960          RETS
    3459                    
    3460                    **************************************************************************
    3461                    *                                                                        *
    3462                    * GETYZVEL - GET A RANDOM UPWARD Y VELOCITY, THEN A RANDOM Z VELOCITY    *
    3463                    *          THAT WILL KEEP THE OBJECT IN THE PLAYFIELD AREA ALONG         *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   78

    3464                    *          ITS TRAJECTORY.                                               *
    3465                    * A8 = PTR TO OBJECT BLOCK                                               *
    3466                    * RETURNS                                                                *
    3467                    * B2 = Z VELOCITY (32 BITS)                                              *
    3468                    * B3 = Y VELOCITY (32 BITS)                                              *
    3469                    *                                                                        *
    3470                    **************************************************************************
    3471 0000c620           GETYZVEL
    3472 0000c620     098f          MMTM    SP,A0,A1,A3,A4,A5
         0000c630     dc00  
    3473 0000c640     099f          MMTM    SP,B0,B1
         0000c650     c000  
    3474                    
    3475 0000c660     09f0          MOVI    040000H,B0
         0000c670 00040000  
    3476 0000c690     09f1          MOVI    0A0000H,B1
         0000c6a0 000a0000  
    3477 0000c6c0     0d3f          CALLR   RANGRAND                ;GET A RANDOM # BETWEEN 11 & 16
         0000c6d0     f735  
    3478 0000c6e0     4e03          MOVE    A0,B3
    3479 0000c6f0     03b3          NEG     B3                      ;-YVEL IS UP
    3480                    
    3481 0000c700     4c01          MOVE    A0,A1                   ;NEED THIS HERE FOR 32 BIT DIVIDE
    3482                    
    3483 0000c710     2fe0          SRL     1,A0
    3484 0000c720     0185          GETST   A5                      ;SAVE THE STATUS
    3485                    
    3486 0000c730     09c0          MOVI    GRAVITY/2,A0
         0000c740     1200  
    3487 0000c750     5a01          DIVU    A0,A1                   ;A1 = YDURATION                 
    3488                    
    3489 0000c760     1c25          BTST    30,A5   
    3490 0000c770     cb0a          JRNE    GETZVPL                 ;BR = WE WANT A POSITIVE Z VEL.
    3491                    
    3492 0000c780     b703          MOVE    *A8(OZVAL),A3,L
         0000c790     00c0  
    3493 0000c7a0           GETZDMIN
    3494 0000c7a0     05a4          MOVE    @PLZMIN,A4,W            ;SET UP FOR NEGATIVE Z VEL
         0000c7b0 00000000! 
    3495 0000c7d0     2604          SLL     16,A4
    3496 0000c7e0     4883          CMP     A4,A3
    3497 0000c7f0     c70c          JRGT    GETZABV
    3498 0000c800     4c64          MOVE    A3,A4
    3499 0000c810     c002          JRUC    GETZDPL 
    3500 0000c820           GETZVPL
    3501 0000c820     b704          MOVE    *A8(OZVAL),A4,L
         0000c830     00c0  
    3502 0000c840           GETZDPL
    3503 0000c840     05a3          MOVE    @PLZMAX,A3,W            ;SET UP FOR POSITIVE Z VEL
         0000c850 00000000! 
    3504 0000c870     2603          SLL     16,A3
    3505 0000c880     4864          CMP     A3,A4
    3506 0000c890     c402          JRLT    GETZABV
    3507 0000c8a0     4c83          MOVE    A4,A3
    3508 0000c8b0     c0ee          JRUC    GETZDMIN
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   79

    3509 0000c8c0           GETZABV
    3510 0000c8c0     4483          SUB     A4,A3                   ;A3 = Z DISTANCE
    3511                            
    3512 0000c8d0     5a23          DIVU    A1,A3                   ;A3 = MAX Z VELOCITY
    3513 0000c8e0     4e61          MOVE    A3,B1                   
    3514 0000c8f0     1031          INC     B1                      ;MAKE SURE THIS RANGE IS NOT ZERO
    3515 0000c900     09d0          MOVI    0800H,B0                ;MIN Z VELOCITY IS A CONSTANT
         0000c910     0800  
    3516 0000c920     4011          ADD     B0,B1                   ;INSURE POSITIVE RANGE
    3517 0000c930     0d3f          CALLR   RANGRAND                ;GET A VELOCITY
         0000c940     f70e  
    3518 0000c950     4e02          MOVE    A0,B2
    3519                    
    3520 0000c960     1c25          BTST    30,A5
    3521 0000c970     cb01          JRNE    GETYZX  
    3522                    
    3523 0000c980     03b2          NEG     B2                      ;OH, MAKE IT NEGATIVE
    3524 0000c990           GETYZX
    3525 0000c990     09bf          MMFM    SP,B0,B1
         0000c9a0     0003  
    3526 0000c9b0     09af          MMFM    SP,A0,A1,A3,A4,A5
         0000c9c0     003b  
    3527 0000c9d0     0960          RETS
    3528                    
    3529                    **************************************************************************
    3530                    *                                                                        *
    3531                    * GETLAND - GET A RANDOM LANDING POSITION.                               *
    3532                    *                                                                        *
    3533                    * RETURNS                                                                *
    3534                    * A10 = LANDING Y LINE (16 BITS)                                         *       *
    3535                    *                                                                        *
    3536                    **************************************************************************
    3537 0000c9e0           GETLAND
    3538 0000c9e0                   PUSH    A0
    3539 0000c9f0     099f          MMTM    SP,B0,B1
         0000ca00     c000  
    3540 0000ca10     05b0          MOVE    @PLYMIN,B0,W                    ;LOWER BOUNDRY
         0000ca20 00000000! 
    3541 0000ca40     05b1          MOVE    @PLYMAX,B1,W                    ;UPPER BOUNDRY
         0000ca50 00000000! 
    3542 0000ca70     0d3f          CALLR   RANGRAND
         0000ca80     f6fa  
    3543 0000ca90     4c0a          MOVE    A0,A10
    3544 0000caa0     09bf          MMFM    SP,B0,B1
         0000cab0     0003  
    3545 0000cac0                   PULL    A0
    3546 0000cae0     0960          RETS
    3547                    
    3548                    
    3549                    **************************************************************************
    3550                    *                                                                        *
    3551                    * GCUBEVEL - GET VELOCITIES FROM COLLIDING WITH A CUBE.                  *
    3552                    * A8 = PTR TO OBJECT THAT HIT THE BIG CUBE                               *
    3553                    * A10 = PTR TO OBJECT THAT MAKES THIS CUBE                               *
    3554                    * RETURNS:                                                               *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   80

    3555                    * A1 = 32 BIT XVEL                                                       *
    3556                    * A2 = 32 BIT YVEL                                                       *
    3557                    * A3 = 32 BIT ZVEL                                                       *
    3558                    *                                                                        *
    3559                    **************************************************************************
    3560 0000caf0           GCUBEVEL
    3561 0000caf0                   PUSH    A0
    3562 0000cb00     099f          MMTM    SP,B0,B1
         0000cb10     c000  
    3563 0000cb20     b540          MOVE    *A10(OXPOS),A0,W
         0000cb30     0090  
    3564 0000cb40     b541          MOVE    *A10(OSIZEX),A1,W
         0000cb50     0140  
    3565 0000cb60     4001          ADD     A0,A1
    3566 0000cb70     b502          MOVE    *A8(OXPOS),A2,W
         0000cb80     0090  
    3567 0000cb90     b503          MOVE    *A8(OSIZEX),A3,W
         0000cba0     0140  
    3568 0000cbb0     4043          ADD     A2,A3
    3569 0000cbc0     5610          CLR     B0
    3570 0000cbd0     4802          CMP     A0,A2
    3571 0000cbe0     c808          JRLO    GCUBEV00                ;BR = HIT OBJECT IS BEHIND
    3572 0000cbf0     4823          CMP     A1,A3
    3573 0000cc00     c30a          JRHI    GCUBEV01                ;BR = HIT OBJECT IS AHEAD
    3574 0000cc10     09f1          MOVI    08000H,B1
         0000cc20 00008000  
    3575 0000cc40     b742          MOVE    *A10(OXVEL),A2,L
         0000cc50     0040  
    3576 0000cc60     c00a          JRUC    GCUBEV2
    3577 0000cc70           GCUBEV00
    3578 0000cc70     b742          MOVE    *A10(OXVEL),A2,L
         0000cc80     0040  
    3579 0000cc90     cf0e          JRNN    GCUBEV20                ;BR = NO FUNKY BOUNCE
    3580 0000cca0     c003          JRUC    GCUBEV1
    3581 0000ccb0           GCUBEV01
    3582 0000ccb0     b742          MOVE    *A10(OXVEL),A2,L
         0000ccc0     0040  
    3583 0000ccd0     ce0a          JRN     GCUBEV20                ;BR = AGAIN, NO FUNKY BOUNCE    
    3584 0000cce0           GCUBEV1
    3585 0000cce0     09f1          MOVI    18000H,B1
         0000ccf0 00018000  
    3586 0000cd10           GCUBEV2
    3587 0000cd10     0d5f          CALLA   RANGRAND
         0000cd20 00003a30' 
    3588 0000cd40     4c01          MOVE    A0,A1
    3589 0000cd50     2be2          SRA     1,A2
    3590 0000cd60     c704          JRGT    GCUBEV3
    3591 0000cd70     c402          JRLT    GCUBEV2A
    3592 0000cd80           GCUBEV20
    3593 0000cd80     5621          CLR     A1
    3594 0000cd90     c002          JRUC    GCUBEV4
    3595 0000cda0           GCUBEV2A
    3596 0000cda0     03a1          NEG     A1
    3597 0000cdb0           GCUBEV3
    3598 0000cdb0     4041          ADD     A2,A1                   ;BR = X VELOCITY IS LOADED
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   81

    3599 0000cdc0           GCUBEV4
    3600 0000cdc0     b743          MOVE    *A10(OYVEL),A3,L        ;THIS WILL BE THE Y BASE
         0000cdd0     0060  
    3601 0000cde0     0383          ABS     A3
    3602 0000cdf0     4c22          MOVE    A1,A2
    3603 0000ce00     0382          ABS     A2      
    3604 0000ce10     4062          ADD     A3,A2
    3605 0000ce20     03a2          NEG     A2                      ;THIS IS THE Y VELOCITY
    3606 0000ce30     cb02          JRNZ    GCUBEV5
    3607 0000ce40     5663          CLR     A3                      ;IF THERE'S NO Y, THERE'S NO Z
    3608 0000ce50     c00f          JRUC    GCUBEV6
    3609 0000ce60           GCUBEV5
    3610 0000ce60     0d5f          CALLA   GETZMID                 ;GET MIDPOINT OF OBJECT
         0000ce70 00000cb0' 
    3611 0000ce90     4c03          MOVE    A0,A3
    3612 0000cea0                   SWAP    A10,A8
    3613 0000ced0     0d5f          CALLA   GETZMID                 ;GET MIDPOINT OF CUBE
         0000cee0 00000cb0' 
    3614 0000cf00                   SWAP    A10,A8
    3615 0000cf30     4403          SUB     A0,A3                   ;DIFFERENCE IN Z CENTERS
    3616 0000cf40     2b83          SRA     4,A3                    ;THIS IS THE Z VELOCITY 
    3617 0000cf50           GCUBEV6
    3618 0000cf50     09bf          MMFM    SP,B0,B1        
         0000cf60     0003  
    3619 0000cf70                   PULL    A0
    3620 0000cf90     0960          RETS
    3621                    
    3622                    **************************************************************************
    3623                    *                                                                        *
    3624                    * GIBOX - GET THE INTERSECTION BOX OF TWO OBJECTS. OBJECTS MUST          *
    3625                    *       BE INTERSECTING IF THIS ROUTINE IS CALLED.                       *
    3626                    * A0 = PTR TO OBJECT 0                                                   *
    3627                    * A8 = PTR TO OBJECT 1                                                   *
    3628                    * RETURNS                                                                *
    3629                    * A1 = [ULY,ULX]                                                         *
    3630                    * A2 = [LRY,LRX]                                                         *
    3631                    *                                                                        *
    3632                    **************************************************************************
    3633 0000cfa0           GIBOX
    3634 0000cfa0     098f          MMTM    SP,A3,A4,A5
         0000cfb0     1c00  
    3635 0000cfc0     b401          MOVE    *A0(OXPOS),A1,W
         0000cfd0     0090  
    3636 0000cfe0     b502          MOVE    *A8(OXPOS),A2,W
         0000cff0     0090  
    3637 0000d000     0521          ZEXT    A1
    3638 0000d010     0522          ZEXT    A2
    3639 0000d020     0d3f          CALLR   MAXIMUM
         0000d030     0023  
    3640 0000d040     ec64          MOVX    A3,A4
    3641 0000d050     b403          MOVE    *A0(OSIZEX),A3,W
         0000d060     0140  
    3642 0000d070     4061          ADD     A3,A1
    3643 0000d080     b503          MOVE    *A8(OSIZEX),A3,W
         0000d090     0140  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   82

    3644 0000d0a0     4062          ADD     A3,A2
    3645 0000d0b0     0d3f          CALLR   MINIMUM
         0000d0c0     0020  
    3646 0000d0d0     ec65          MOVX    A3,A5
    3647 0000d0e0     b401          MOVE    *A0(OYPOS),A1,W
         0000d0f0     00b0  
    3648 0000d100     b502          MOVE    *A8(OYPOS),A2,W
         0000d110     00b0  
    3649 0000d120     0521          ZEXT    A1
    3650 0000d130     0522          ZEXT    A2
    3651 0000d140     0d3f          CALLR   MAXIMUM
         0000d150     0011  
    3652 0000d160     2603          SLL     16,A3
    3653 0000d170     ee64          MOVY    A3,A4
    3654 0000d180     b403          MOVE    *A0(OSIZEY),A3,W
         0000d190     0150  
    3655 0000d1a0     4061          ADD     A3,A1
    3656 0000d1b0     b503          MOVE    *A8(OSIZEY),A3,W
         0000d1c0     0150  
    3657 0000d1d0     4062          ADD     A3,A2
    3658 0000d1e0     0d3f          CALLR   MINIMUM
         0000d1f0     000d  
    3659 0000d200     2603          SLL     16,A3
    3660 0000d210     ee65          MOVY    A3,A5
    3661 0000d220     4c81          MOVE    A4,A1
    3662 0000d230     4ca2          MOVE    A5,A2
    3663 0000d240     09af          MMFM    SP,A3,A4,A5
         0000d250     0038  
    3664 0000d260     0960          RETS
    3665                    
    3666                    **************************************************************************
    3667                    *                                                                        *
    3668                    * MAXIMUM - RETURNS THE UNSIGNED MAXIMUM OF TWO 32 BIT #'S               *
    3669                    * A1 = #                                                                 *
    3670                    * A2 = #                                                                 *
    3671                    * RETURNS                                                                *
    3672                    * A3 = MAX                                                               *
    3673                    *                                                                        *
    3674                    **************************************************************************
    3675 0000d270           MAXIMUM
    3676 0000d270     4822          CMP     A1,A2
    3677 0000d280     c302          JRHI    MAXI1
    3678 0000d290     4c23          MOVE    A1,A3
    3679 0000d2a0     0960          RETS
    3680 0000d2b0           MAXI1
    3681 0000d2b0     4c43          MOVE    A2,A3
    3682 0000d2c0     0960          RETS
    3683                    **************************************************************************
    3684                    *                                                                        *
    3685                    * MINIMUM - RETURNS THE UNSIGNED MINIMUM OF TWO 32 BIT #'S               *
    3686                    * A1 = #                                                                 *
    3687                    * A2 = #                                                                 *
    3688                    * RETURNS                                                                *
    3689                    * A3 = MIN                                                               *
    3690                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   83

    3691                    **************************************************************************
    3692 0000d2d0           MINIMUM
    3693 0000d2d0     4822          CMP     A1,A2
    3694 0000d2e0     c802          JRLO    MINI1
    3695 0000d2f0     4c23          MOVE    A1,A3
    3696 0000d300     0960          RETS
    3697 0000d310           MINI1
    3698 0000d310     4c43          MOVE    A2,A3
    3699 0000d320     0960          RETS
    3700                    
    3701                    **************************************************************************
    3702                    *                                                                        *
    3703                    * MAKTPROC - MAKE THE TRAJECTORY PROCESS, OR ANY WITH THE SAME PARAMS.   *
    3704                    * A1 = ID OF PROCESS TO CREATE (16 BITS)                                 *
    3705                    * A7 = ADDRESS OF PROCESS TO CREATE                                      *
    3706                    * A9 = INITIAL ANIMATION LIST                                            *
    3707                    * A10 = PTR TO OBJECT INITIALIZATION TABLE(IF = 0 THEN DEFAULT IS USED   *
    3708                    * A11 = INITIAL YPOS:XPOS                                                *
    3709                    * A14 = PROCESS TO CREATE UPON DEATH                                     *
    3710                    * B1 = 2nd ANIMATION SCRIPT                                              *
    3711                    * B2 = ZVEL                                                              *
    3712                    * B3 = YVEL                                                              *
    3713                    * B4 = XVEL                                                              *
    3714                    * B5 = [DMA FLAGS,ZPOS]                                                  *
    3715                    * RETURN(S)                                                              *
    3716                    * Z BIT CLR = ACCOMPLISHED                                               *
    3717                    *             A0 = PROCESS CREATED                                       *
    3718                    * Z BIT SET = FAILURE                                                    *
    3719                    *                                                                        *
    3720                    **************************************************************************
    3721 0000d330           MAKTPROC
    3722 0000d330     0d5f          CALLA   GETPRC                  ;GET A PROCESS
         0000d340 00000000! 
    3723 0000d360     ca0b          JRZ     MAKTPRX                 ;BR = PROC FAIL
    3724 0000d370                   PUSH    B0
    3725 0000d380     b3c0          MOVE    A14,*A0(PDATA+0A0H),L
         0000d390     0100  
    3726 0000d3a0     4e00          MOVE    A0,B0
    3727 0000d3b0     0b10          ADDI    PDATA+0A0H,B0
         0000d3c0     0100  
    3728 0000d3d0     0990          MMTM    B0,B1,B2,B3,B4,B5
         0000d3e0     7c00  
    3729 0000d3f0                   PULL    B0
    3730 0000d410     4c00          MOVE    A0,A0
    3731 0000d420           MAKTPRX
    3732 0000d420     0960          RETS
    3733                    
    3734                    *TRAJECTORY PROCESS DEFAULT INITABLE
    3735 0000d430           TRAJINIT
    3736 0000d430 00000000          .LONG   0,0,0,0
    3737 0000d4b0     0000          .WORD   0,0
    3738 0000d4d0 00000000!         .LONG   BGDTHF5,0,DUMCOLL
    3739 0000d530     8002          .WORD   DMAWNZ,0
    3740 0000d550 00000000          .LONG   0
    3741                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   84

    3742                    *                                                                        *
    3743                    * TRAJECTORY PROCESS, CREATES AN OBJECT SENDING IT ALONG THE TRAJECTORY  *
    3744                    * DETERMINED BY THE GIVEN INITIAL X AND Y VELOCITIES. TWO ANIMATION LIST *
    3745                    * POINTERS MUST BE PASSED, ONE FOR THE FLYING ANIMATION AND ONE FOR THE  *
    3746                    * ANIMATION WHEN IT HITS THE GROUND.                                     *
    3747                    * WHEN THE FIRST LIST IS ANIMATED, THE FIRST TIME THROUGH SLEEP = 1,     *
    3748                    * THE 2nd, SLEEP = 2 ... THIS IS FOR SPINNING ANIMATIONS.                *
    3749                    * ENTRYPOINTS                                                            *
    3750                    *       TRAJEC  - CREATES A NEW OBJECT WITH THE GIVEN VEL AND POS PARAMS *
    3751                    *       TRAJEC1 - JUST DOES THE TRAJECTORY WITH AN EXISTING OBJECT       *
    3752                    * A8 = RESERVED FOR OBJECT BLOCK POINTER                                 *
    3753                    * A9 = INITIAL ANIMATION LIST                                            *
    3754                    * A10 = PTR TO OBJECT INITIALIZATION TABLE(IF = 0 THEN DEFAULT IS USED   *
    3755                    * A11 = INITIAL YPOS:XPOS                                                *
    3756                    * PDATA      = [DMA FLAGS,INITIAL Z-POSITION]                            *
    3757                    * PDATA+20H  = INITIAL X-VELOCITY (32 BITS)                              *
    3758                    * PDATA+40H  = INITIAL Y-VELOCITY (32 BITS)                              *
    3759                    * PDATA+60H  = INTIIAL Z-VELOCITY (32 BITS)                              *
    3760                    * PDATA+80H  = SECOND ANIMATION LIST (32 BITS)                           *                              
    3761                    * PDATA+A0H  = PROCESS TO CREATE UPON DEATH (32 BITS)                    *
    3762                    *                                                                        *
    3763                    **************************************************************************
    3764 0000d570           TRAJEC
    3765 0000d570     4d4e          MOVE    A10,A14                 ;GET INIT TAB
    3766 0000d580     cb03          JRNE    TRAJECS                 ;BR = NON-EXISTANT
    3767 0000d590     09ee          MOVI    TRAJINIT,A14
         0000d5a0 0000d430' 
    3768 0000d5c0           TRAJECS
    3769 0000d5c0     0d5f          CALLA   GPALOBJ                 ;TRY FOR A PALETTE
         0000d5d0 00000030' 
    3770 0000d5f0     ca80          JAZ     DUMDIE                  ;BR = NO PLACE FOR THIS FRAGMENT
         0000d600 00000000! 
    3771 0000d620     0d5f          CALLA   STFOBJ
         0000d630 00000000! 
    3772                    
    3773 0000d650     4dae          MOVE    A13,A14
    3774 0000d660     0b0e          ADDI    PDATA,A14
         0000d670     0060  
    3775 0000d680     09ae          MMFM    A14,A3,A4,A5,A6         ;LOAD X&Y VELOCITIES,ZPOS,FLAGS
         0000d690     0078  
    3776                    
    3777 0000d6a0     b2a0          MOVE    A5,*A0(OXVEL),L
         0000d6b0     0040  
    3778 0000d6c0     b280          MOVE    A4,*A0(OYVEL),L
         0000d6d0     0060  
    3779 0000d6e0     b260          MOVE    A3,*A0(OZVEL),L         ;STUFF X,Y & Z VELOCITIES
         0000d6f0     00e0  
    3780                    
    3781 0000d700     b0c0          MOVE    A6,*A0(OZPOS),W
         0000d710     00d0  
    3782 0000d720     4cc4          MOVE    A6,A4
    3783 0000d730     2e04          SRL     16,A4                   ;FLAGS FOR GANISAG
    3784                            
    3785 0000d740     5642          CLR     A2
    3786 0000d750     ef62          MOVY    A11,A2
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   85

    3787 0000d760     ed63          MOVX    A11,A3
    3788 0000d770     2603          SLL     16,A3                   ;INITIAL X & Y APOINT POSITIONS
    3789                    
    3790 0000d780     bb20          MOVE    *A9(0),*A0(OIMG),L
         0000d790     0000  
         0000d7a0     0180  
    3791 0000d7b0     0d5f          CALLA   GANISAG                 ;SETUP EVERYTHING
         0000d7c0 00000000! 
    3792                                                                                             
    3793 0000d7e0     b3a0          MOVE    A13,*A0(OPLINK),L       ;PROCESS LINK                    
         0000d7f0     01f0  
    3794                                                                                             
    3795 0000d800     0d5f          CALLA   INSOBJ                                                   
         0000d810 00000000! 
    3796 0000d830     4c08          MOVE    A0,A8
    3797 0000d840     0d5f          CALLA   SHADST                  ;GIVE US A SHADOW PREEEZE
         0000d850 00000000! 
    3798                    
    3799                    *SECOND ENTRY, NOTE: INITIAL VELOCITIES MUST BE IN PLACE AT THIS POINT
    3800 0000d870           TRAJEC1
    3801 0000d870     b32d          MOVE    A9,*A13(PDATA+0C0H),L   ;KEEP FOR MULTIPLE ANIMATIONS
         0000d880     0120  
    3802 0000d890     182b          MOVK    1,A11
    3803                    
    3804 0000d8a0           TRAJW1
    3805 0000d8a0                   PUSHP   A11
    3806 0000d8b0     1881          MOVK    4,A1
    3807 0000d8c0                   JSRP    FRANIM
    3808 0000d930     c817          JRC     TRAJW3                  ;THE END WAS HIT
    3809                    
    3810 0000d940           TRAJWS
    3811 0000d940                   SLEEP   1
    3812                    
    3813 0000d980     0d5f          CALLA   CKZADJST
         0000d990 00004530' 
    3814                    
    3815 0000d9b0     b703          MOVE    *A8(OYVEL),A3,L         ;GET THE CURRENT Y VELOCITY
         0000d9c0     0060  
    3816 0000d9d0     c603          JRLE    TRAJW1B                 ;BR = NOT GOING DOWN, DON'T CHECK GROUND HIT
    3817                    
    3818 0000d9e0     0d3f          CALLR   DFRMGRND                ;DID HE HIT THE GROUND?
         0000d9f0     f2d7  
    3819 0000da00     c610          JRLE    TRAJEND                 ;BR = YES
    3820                    
    3821 0000da10           TRAJW1B
    3822 0000da10     b700          MOVE    *A8(OYVEL),A0,L         ;DECREASE Y VELOCITY
         0000da20     0060  
    3823 0000da30     0b00          ADDI    GRAVITY,A0
         0000da40     2400  
    3824 0000da50     b208          MOVE    A0,*A8(OYVEL),L
         0000da60     0060  
    3825                    
    3826 0000da70     3e8b          DSJS    A11,TRAJWS              
    3827 0000da80                   PULLP   A11
    3828 0000daa0     c0df          JRUC    TRAJW1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   86

    3829                    
    3830 0000dab0           TRAJW3
    3831 0000dab0     b7a9          MOVE    *A13(PDATA+0C0H),A9,L   ;POINT TO THE HEAD OF THE LIST
         0000dac0     0120  
    3832 0000dad0                   PULLP   A11
    3833 0000daf0     102b          INC     A11                     ;INCREMENT SLEEP TIME
    3834 0000db00     c0d9          JRUC    TRAJW1
    3835                    
    3836 0000db10           TRAJEND
    3837                    ***     CALLR   PSTOP
    3838 0000db10     0d5f          CALLA   GETANIXY                ;GET THE ANIMATION POINT
         0000db20 00000000! 
    3839 0000db40     b504          MOVE    *A8(OFLAGS),A4,W                                         
         0000db50     0100  
    3840 0000db60     0b84          ANDNI   M_FLIPV,A4              ;NO UPSIDE-DOWNERS ALLOWED       
         0000db70 00000020  
    3841                    
    3842 0000db90     4d00          MOVE    A8,A0
    3843 0000dba0     0d5f          CALLA   GANISAG                 ;SHOW THE NEW ADJUSTMENTS
         0000dbb0 00000000! 
    3844                    ***     CALLR   SETZPOS                 ;RESET THE Z POSITION            
    3845                    ***     CALLA   DELSHAD                 ;DELETE THE SHADOW
    3846                    
    3847 0000dbd0                   PUSHP   A9
    3848 0000dbe0     b7a9          MOVE    *A13(PDATA+80H),A9,L    ;GET THE SECOND ANIMATION LIST
         0000dbf0     00e0  
    3849 0000dc00     ca13          JREQ    TRAJE1                  ;NON-EXISTANT
    3850                    
    3851 0000dc10     0d3f          CALLR   PSTOP
         0000dc20     f6cf  
    3852 0000dc30     4d00          MOVE    A8,A0
    3853 0000dc40     0d3f          CALLR   SETZPOS                 ;RESET THE Z POSITION            
         0000dc50     f348  
    3854 0000dc60     0d5f          CALLA   DELSHAD                 ;DELETE THE SHADOW
         0000dc70 00000000! 
    3855 0000dc90     0d5f          CALLA   CKZADJST                ;MAKE SURE IT IS IN BOUNDS
         0000dca0 00004530' 
    3856                    
    3857 0000dcc0     1821          MOVK    1,A1
    3858 0000dcd0                   JSRP    FRANIM                  ;ANIMATE FROM TOP TO BOTTOM
    3859                    
    3860 0000dd40           TRAJE1
    3861 0000dd40                   PULLP   A9
    3862 0000dd60     b7a7          MOVE    *A13(PDATA+0A0H),A7,L   ;PROCESS TO CREATE TO HANDLE DELETION
         0000dd70     0100  
    3863 0000dd80     ca01          JREQ    TRAJE2                  ;NOBODY HOME
    3864                    
    3865 0000dd90     0167          JUMP    A7                      ;SO JUMP THERE                  
    3866                    
    3867 0000dda0     4d00  TRAJE2  MOVE    A8,A0                   ;DEFAULT SIMPLE DELETE
    3868 0000ddb0     0d5f          CALLA   DELPAL
         0000ddc0 00000000! 
    3869 0000dde0     0d5f          CALLA   DELSOBJ
         0000ddf0 00000000! 
    3870 0000de10                   DIE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   87

    3871                    
    3872                    **************************************************************************
    3873                    *                                                                        *
    3874                    * DBOUNCE - BOUNCE AN OBJECT A COUPLE FEW TIMES THEN SINK IT             *
    3875                    * A8 = PTR TO OBLOCK                                                     *
    3876                    * A9 = PTR TO CURRENT ANIMATION FRAME                                    *
    3877                    * A11 = CURRENT SLEEP TICKS                                              *
    3878                    * PDATA+0C0H = PTR TO ANIMATION LIST                                     *
    3879                    *                                                                        *
    3880                    **************************************************************************
    3881 0000de40           DBOUNCE
    3882 0000de40     b700          MOVE    *A8(OYVEL),A0,L
         0000de50     0060  
    3883 0000de60     2bc0          SRA     2,A0
    3884 0000de70     0b60          CMPI    [1,0],A0
         0000de80 fffeffff  
    3885 0000dea0     c436          JRLT    DBHIT1
    3886 0000deb0     03a0          NEG     A0
    3887 0000dec0     b701          MOVE    *A8(OXVEL),A1,L
         0000ded0     0040  
    3888 0000dee0     2be1          SRA     1,A1                    ;HALVE THESE GUYS
    3889 0000def0     b228          MOVE    A1,*A8(OXVEL),L
         0000df00     0040  
    3890 0000df10     b701          MOVE    *A8(OZVEL),A1,L
         0000df20     00e0  
    3891 0000df30     2be1          SRA     1,A1
    3892 0000df40     b228          MOVE    A1,*A8(OZVEL),L
         0000df50     00e0  
    3893 0000df60     0d5f          CALLA   SHVELCPY
         0000df70 000001d0' 
    3894 0000df90     b208          MOVE    A0,*A8(OYVEL),L
         0000dfa0     0060  
    3895 0000dfb0           DBNCE1
    3896 0000dfb0                   PUSHP   A11
    3897 0000dfc0     1881          MOVK    4,A1
    3898 0000dfd0                   JSRP    FRANIM
    3899 0000e040     c817          JRC     DBNCE3                  ;THE END WAS HIT
    3900 0000e050           DBNCE1A
    3901 0000e050                   SLEEP   1
    3902 0000e090     0d5f          CALLA   CKZADJST
         0000e0a0 00004530' 
    3903 0000e0c0     b703          MOVE    *A8(OYVEL),A3,L ;GET THE CURRENT Y VELOCITY
         0000e0d0     0060  
    3904 0000e0e0     c603          JRLE    DBNCE2          ;BR = NOT GOING DOWN, DON'T CHECK GROUND HIT
    3905 0000e0f0     0d3f          CALLR   DFRMGRND        ;DID HE HIT THE GROUND?
         0000e100     f266  
    3906 0000e110     c6d2          JRLE    DBOUNCE         ;BR = YES
    3907 0000e120           DBNCE2
    3908 0000e120     b700          MOVE    *A8(OYVEL),A0,L         ;DECREASE Y VELOCITY
         0000e130     0060  
    3909 0000e140     0b00          ADDI    GRAVITY,A0
         0000e150     2400  
    3910 0000e160     b208          MOVE    A0,*A8(OYVEL),L
         0000e170     0060  
    3911 0000e180     3e8b          DSJS    A11,DBNCE1A             
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   88

    3912 0000e190                   PULLP   A11
    3913 0000e1b0     c0df          JRUC    DBNCE1
    3914 0000e1c0           DBNCE3
    3915 0000e1c0     b7a9          MOVE    *A13(PDATA+0C0H),A9,L   ;POINT TO THE HEAD OF THE LIST
         0000e1d0     0120  
    3916 0000e1e0                   PULLP   A11
    3917 0000e200     c0da          JRUC    DBNCE1
    3918 0000e210           DBHIT1
    3919 0000e210     0d5f          CALLA   PSTOP                   ;STOP THE SUCKER   
         0000e220 00004920' 
    3920 0000e240     4d00          MOVE    A8,A0                   ;OBJECT IN A0 FOR SETZPOS
    3921 0000e250     0d5f          CALLA   SETZPOS                 ;ADJUST THE MUTHA
         0000e260 000010e0' 
    3922 0000e280     0d5f          CALLA   DELSHAD                 ;RESET SHADOW
         0000e290 00000000! 
    3923 0000e2b0     c06c          JRUC    DSINK
    3924                    
    3925                    **************************************************************************
    3926                    *                                                                        *
    3927                    * DTBOUNCE - BOUNCE A TIRE OBJECT THEN ROLL IT OFF OF THE SCREEN         *
    3928                    * A8 = PTR TO TIRE OBLOCK                                                *
    3929                    * PDATA+0C0H = PTR TO HEAD OF SPINNING ANIMATION SCRIPT                  *
    3930                    *                                                                        *
    3931                    **************************************************************************
    3932 0000e2c0           DTBOUNCE
    3933 0000e2c0     09e5          MOVI    28000H,A5
         0000e2d0 00028000  
    3934 0000e2f0     b70b          MOVE    *A8(OXVEL),A11,L
         0000e300     0040  
    3935 0000e310     cf06          JRNN    DTBNCEA
    3936 0000e320     0d3f          CALLR   YFLP
         0000e330     f69b  
    3937 0000e340     03a5          NEG     A5
    3938 0000e350     48ab          CMP     A5,A11
    3939 0000e360     c408          JRLT    DTBNCEB
    3940 0000e370     c004          JRUC    DTBNCEA1
    3941 0000e380           DTBNCEA
    3942 0000e380     0d3f          CALLR   NOYFLP
         0000e390     f69d  
    3943 0000e3a0     48ab          CMP     A5,A11
    3944 0000e3b0     c703          JRGT    DTBNCEB
    3945 0000e3c0           DTBNCEA1
    3946 0000e3c0     4cab          MOVE    A5,A11
    3947 0000e3d0     b368          MOVE    A11,*A8(OXVEL),L
         0000e3e0     0040  
    3948 0000e3f0           DTBNCEB
    3949 0000e3f0     2e0b          SRL     16,A11
    3950 0000e400     050b          SEXT    A11
    3951 0000e410     b7a9          MOVE    *A13(PDATA+0C0H),A9,L
         0000e420     0120  
    3952 0000e430     038b          ABS     A11
    3953 0000e440     150b          SUBK    8,A11
    3954 0000e450     038b          ABS     A11
    3955 0000e460                   CREATE  INDPID,ANIMATOR
    3956 0000e4e0     b208          MOVE    A0,*A8(OPLINK),L
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   89

         0000e4f0     01f0  
    3957 0000e500           DTBNCEC
    3958 0000e500     b700          MOVE    *A8(OYVEL),A0,L
         0000e510     0060  
    3959 0000e520     2be0          SRA     1,A0
    3960 0000e530     0b60          CMPI    8000H,A0
         0000e540 ffff7fff  
    3961 0000e560     c41f          JRLT    DTBHIT1
    3962 0000e570     03a0          NEG     A0
    3963 0000e580     b701          MOVE    *A8(OZVEL),A1,L
         0000e590     00e0  
    3964 0000e5a0     2be1          SRA     1,A1
    3965 0000e5b0     b228          MOVE    A1,*A8(OZVEL),L
         0000e5c0     00e0  
    3966 0000e5d0     0d5f          CALLA   SHVELCPY
         0000e5e0 000001d0' 
    3967 0000e600     b208          MOVE    A0,*A8(OYVEL),L
         0000e610     0060  
    3968 0000e620           DTBNCE1
    3969 0000e620                   SLEEP   1
    3970 0000e660     0d5f          CALLA   CKZADJST
         0000e670 00004530' 
    3971 0000e690     b703          MOVE    *A8(OYVEL),A3,L ;GET THE CURRENT Y VELOCITY
         0000e6a0     0060  
    3972 0000e6b0     c603          JRLE    DTBNCE2         ;BR = NOT GOING DOWN, DON'T CHECK GROUND HIT
    3973 0000e6c0     0d3f          CALLR   DFRMGRND        ;DID HE HIT THE GROUND?
         0000e6d0     f209  
    3974 0000e6e0     c6e1          JRLE    DTBNCEC         ;BR = NO
    3975 0000e6f0           DTBNCE2
    3976 0000e6f0     b700          MOVE    *A8(OYVEL),A0,L         ;DECREASE Y VELOCITY
         0000e700     0060  
    3977 0000e710     0b00          ADDI    GRAVITY,A0
         0000e720     2400  
    3978 0000e730     b208          MOVE    A0,*A8(OYVEL),L
         0000e740     0060  
    3979 0000e750     c0ec          JRUC    DTBNCE1
    3980 0000e760           DTBHIT1
    3981 0000e760     0d5f          CALLA   PSTOPYZ                 ;KEEP IT FLIPPED THE SUCKER   
         0000e770 00004be0' 
    3982 0000e790     4d00          MOVE    A8,A0                   ;OBJECT IN A0 FOR SETZPOS
    3983 0000e7a0     0d5f          CALLA   SETZPOS                 ;ADJUST THE MUTHA
         0000e7b0 000010e0' 
    3984 0000e7d0     0d5f          CALLA   DELSHAD                 ;RESET SHADOW
         0000e7e0 00000000! 
    3985 0000e800           DTBHIT4
    3986 0000e800                   SLEEP   8
    3987 0000e840     0d5f          CALLA   SCRTST
         0000e850 00000000! 
    3988 0000e870     caf8          JREQ    DTBHIT4
    3989 0000e880     b700          MOVE    *A8(OPLINK),A0,L
         0000e890     01f0  
    3990 0000e8a0     ca03          JRZ     DTBHIT5
    3991 0000e8b0     0d5f          CALLA   KILL
         0000e8c0 00000000! 
    3992 0000e8e0           DTBHIT5
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   90

    3993 0000e8e0     4d00          MOVE    A8,A0
    3994 0000e8f0     0d5f          CALLA   DELPAL
         0000e900 00000000! 
    3995 0000e920     0d5f          CALLA   DELSOBJ
         0000e930 00000000! 
    3996 0000e950                   DIE
    3997                    
    3998                    **************************************************************************
    3999                    *                                                                        *
    4000                    * SINK AN OBJECT OUT OF EXISTENCE, OBJECT IS DELETED SO IS IT'S PALETTE. *
    4001                    * A8=OBLOCK POINTER.                                                     *
    4002                    * I.D. = $DF                                                             *
    4003                    **************************************************************************
    4004 0000e980           DSINK
    4005 0000e980     09e9          MOVI    [1,1],A9
         0000e990 00010001  
    4006 0000e9b0                   JSRP    OSINK
    4007 0000ea20     4d00          MOVE    A8,A0
    4008 0000ea30     0d5f          CALLA   DELPAL
         0000ea40 00000000! 
    4009 0000ea60     0d5f          CALLA   DELSOBJ                 ;GET RID OF THIS THING
         0000ea70 00000000! 
    4010 0000ea90     c080          JAUC    SUCIDE
         0000eaa0 00000000! 
    4011                    
    4012                    *
    4013                    *SINK ENEMY OBJECT INTO GROUND PROCESS
    4014                    *A8=OBJECT
    4015                    *A9=SLEEP TIME: SINK RATE PIX/SLEEP
    4016                    *
    4017 0000eac0           ESINK
    4018 0000eac0                   JSRP    OSINK
    4019 0000eb30     4d00          MOVE    A8,A0                   ;GET OBJECT DESCRIPTOR
    4020 0000eb40     0d5f          CALLA   DELENEMY                ;DELETE OBJECT AND QUIT
         0000eb50 0000c250' 
    4021 0000eb70     c080          JAUC    SUCIDE
         0000eb80 00000000! 
    4022                    
    4023                    **************************************************************************
    4024                    *                                                                        *
    4025                    * OSINK - SINK OBJECT INTO GROUND PROCESS SUBROUTINE                     *
    4026                    * A8=OBJECT                                                              *
    4027                    * A9=SLEEP TIME: SINK RATE PIX/SLEEP                                     *
    4028                    * NOTE: CALL WITH JSRP                                                   *
    4029                    *                                                                        *
    4030                    **************************************************************************
    4031 0000eba0           OSINK:  
    4032 0000eba0                   PUSHP   A10
    4033 0000ebb0     4d00          MOVE    A8,A0
    4034 0000ebc0     0d5f          CALLA   PSTOP
         0000ebd0 00004920' 
    4035 0000ebf0     0d5f          CALLA   DELSHAD                 ;CAN THE SHADOW
         0000ec00 00000000! 
    4036 0000ec20     4d2a          MOVE    A9,A10
    4037 0000ec30     0529          ZEXT    A9
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   91

    4038 0000ec40     2e0a          SRL     16,A10
    4039 0000ec50           OSINKL:
    4040 0000ec50     b500          MOVE    *A8(OSIZEY),A0,W
         0000ec60     0150  
    4041 0000ec70     4520          SUB     A9,A0
    4042 0000ec80     c20c          JRLS    OSINKX                  ;SINKING IS DONE
    4043 0000ec90     b008          MOVE    A0,*A8(OSIZEY),W        ;ADJUST HT.
         0000eca0     0150  
    4044 0000ecb0     b501          MOVE    *A8(OYPOS),A1,W         ;ADJUST TOP LEFT Y
         0000ecc0     00b0  
    4045 0000ecd0     4121          ADD     A9,A1
    4046 0000ece0     b028          MOVE    A1,*A8(OYPOS),W
         0000ecf0     00b0  
    4047 0000ed00     4d40          MOVE    A10,A0                  ;GET SLEEP TIME
    4048 0000ed10     0d5f          CALLA   PRCSLP                  ;SLEEP YOUR BIT
         0000ed20 00000000! 
    4049 0000ed40     c0f0          JRUC    OSINKL
    4050 0000ed50           OSINKX:
    4051 0000ed50                   PULLP   A10
    4052 0000ed70                   RETP
    4053                    *
    4054                    *COLLISION VECTOR LISTS
    4055 0000eda0     0000  DUMCOLL .WORD   0
    4056 0000edb0 0000edd0'         .LONG   DUMRTSG
    4057                    
    4058 0000edd0           DUMRTSG
    4059 0000edd0     5600          CLR     A0                      ;DON'T STOP SCAN
    4060 0000ede0     0320          CLRC                            ;AND DON'T DELETE
    4061 0000edf0     0960          RETS    
    4062                    
    4063                    **************************************************************************
    4064                    *                                                                        *
    4065                    * CKYBOUND - CHECK OBJECT AGAINST Y BOUNDRIES. THE VELOCITY IS           *
    4066                    *            ZERO'D IF A BOUNDRY IS HIT.                                 *
    4067                    * A8 = OBJECT BLOCK PTR                                                  *
    4068                    *                                                                        *
    4069                    **************************************************************************
    4070 0000ee00           CKYBOUND
    4071 0000ee00     098f          MMTM    SP,A1,A2
         0000ee10     6000  
    4072                                                                                             
    4073 0000ee20     b501          MOVE    *A8(OZPOS),A1,W         ;GET THE Z POSITION
         0000ee30     00d0  
    4074                    
    4075 0000ee40     b702          MOVE    *A8(OZVEL),A2,L
         0000ee50     00e0  
    4076 0000ee60     ca10          JREQ    CKYBNDX                 ;BR = NO VELOCITY, NO CHECK
    4077 0000ee70     ce08          JRN     CKUYBND                 ;BR = NEGATIVE, CHECK YMIN
    4078                    
    4079 0000ee80     05a2          MOVE    @PLZMAX,A2,W            ;GET THE MAX Z
         0000ee90 00000000! 
    4080 0000eeb0     4841          CMP     A2,A1                   ;HIT ROCK BOTTOM?
    4081 0000eec0     c40a          JRLT    CKYBNDX                 ;BR = NO
    4082 0000eed0     0d3f          CALLR   PSTOPYZ                 ;ZERO Y VELOCITY
         0000eee0     f5cf  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   92

    4083 0000eef0     c007          JRUC    CKYBNDX
    4084                    
    4085 0000ef00           CKUYBND
    4086 0000ef00     05a2          MOVE    @PLZMIN,A2,W
         0000ef10 00000000! 
    4087 0000ef30     4841          CMP     A2,A1                   ;AT THE TOP?
    4088 0000ef40     c702          JRGT    CKYBNDX                 ;BR = NO
    4089 0000ef50     0d3f          CALLR   PSTOPYZ
         0000ef60     f5c7  
    4090                    
    4091 0000ef70     09af  CKYBNDX MMFM    SP,A1,A2
         0000ef80     0006  
    4092 0000ef90     0960          RETS
    4093                    
    4094                    **************************************************************************
    4095                    *                                                                        *
    4096                    * GSCRIPT - LOAD AN ANIMATION SCRIPT FROM MAIN ANIMATION TABLE           *
    4097                    * A0 = FRAME TYPE                                                        *
    4098                    * A6 = PTR TO MAIN ANIMATION TABLE                                       *
    4099                    * RETURN(S):                                                             *
    4100                    * A9 = PTR TO HEAD OF ANIMATION LIST                                     *
    4101                    *                                                                        *
    4102                    **************************************************************************
    4103 0000efa0           GSCRIPT
    4104 0000efa0     a2cf          MOVE    A6,-*SP,L
    4105 0000efb0     0d5f          CALLA   BASFRM          ;OFFSET INTO LIST TABLE
         0000efc0 0000f010' 
    4106 0000efe0     86c9          MOVE    *A6,A9,L        ;POINT TO THE LIST
    4107 0000eff0     97e6          MOVE    *SP+,A6,L
    4108 0000f000     0960          RETS
    4109                    
    4110                    **************************************************************************
    4111                    *                                                                        *
    4112                    * BASFRM - GET THE BASE OF THE ANIMATION TABLE POINTERS                  *
    4113                    * A0 = OFFSET TO THE OFFSET TABLE                                        *
    4114                    * A6 = MAIN ANIMATION TABLE                                              *
    4115                    * RETURNS                                                                *
    4116                    * A6 = PTR TO BASE OF ANIMATION TABLE                                    *
    4117                    *                                                                        *
    4118                    **************************************************************************
    4119 0000f010     098f  BASFRM  MMTM    SP,A0,A1
         0000f020     c000  
    4120 0000f030     2480          SLL     4,A0                    ;OFFSET*32
    4121 0000f040     86c1          MOVE    *A6,A1,L                ;GET THE OFFSET TABLE PTR
    4122 0000f050     4001          ADD     A0,A1
    4123 0000f060     8421          MOVE    *A1,A1,W                
    4124 0000f070     24a1          SLL     5,A1
    4125 0000f080     4026          ADD     A1,A6                   ;A6 IS INDEXED TO THE BASE FRAMES
    4126 0000f090     09af          MMFM    SP,A0,A1
         0000f0a0     0003  
    4127 0000f0b0     0960          RETS
    4128                    
    4129                    **************************************************************************
    4130                    *                                                                        *
    4131                    * EFRAME - STUFF A FRAME                                                 *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   93

    4132                    * A8 = POINTER TO OBJECT BLOCK                                           *
    4133                    * A9 = PTR TO CURRENT FRAME                                              *
    4134                    * RETURNS                                                                *
    4135                    * CARRY SET IF THE END WAS HIT                                           *
    4136                    * A0 = CANNED FRAME DURATION                                             *
    4137                    *                                                                        *
    4138                    **************************************************************************
    4139 0000f0c0     098f  EFRAME  MMTM    SP,A1,A4
         0000f0d0     4800  
    4140 0000f0e0     9721          MOVE    *A9+,A1,L               ;GET THE FRAME
    4141 0000f0f0     ca0e          JREQ    EFRMX                   ;BR = END WAS HIT
    4142                    
    4143 0000f100     b704          MOVE    *A8(OIMG),A4,L  
         0000f110     0180  
    4144 0000f120     4881          CMP     A4,A1
    4145 0000f130     ca05          JREQ    EFRMATCH                ;BR = SAME FRAME TWO TIME IN A ROW
    4146                    
    4147 0000f140     b504          MOVE    *A8(OFLAGS),A4,W
         0000f150     0100  
    4148 0000f160     0d5f          CALLA   ANI
         0000f170 00000000! 
    4149 0000f190           EFRMATCH
    4150 0000f190     9520          MOVE    *A9+,A0,W               ;GET THE SLEEP TIME
    4151 0000f1a0     0320          CLRC
    4152 0000f1b0     09af          MMFM    SP,A1,A4
         0000f1c0     0012  
    4153 0000f1d0     0960          RETS
    4154                    
    4155 0000f1e0     0de0  EFRMX   SETC
    4156 0000f1f0     09af          MMFM    SP,A1,A4
         0000f200     0012  
    4157 0000f210     0960          RETS
    4158                    
    4159                    **************************************************************************
    4160                    *                                                                        *
    4161                    * FRANIM - ANIMATION SCRIPT PROCESSOR                                    *
    4162                    * A1 = COMMAND: 00 = PROCESS CURRENT FRAME.                              *
    4163                    *               01 = PROCESS TO END OF LIST.                             *
    4164                    *               02 = PROCESS X # OF FRAMES OR TO END. A1 = [# FRMS,CMD]  *
    4165                    *               03 = INFINITELY LOOP ON THE LIST.                        *
    4166                    *               04 = PROCESS CURRENT FRAME, NO SLEEP(TIME RETRN'D IN A0) *
    4167                    * A8 = PTR TO OBJECT BLOCK                                               *
    4168                    * A9 = PTR TO CURRENT FRAME                                              *
    4169                    * RETURN(S)                                                              *
    4170                    * CARRY SET IF END OF ANIMATION LIST WAS HIT                             *
    4171                    * A9 = POINTING TO NEXT FRAME, IF NOT AT END OF LIST                     *
    4172                    * SETS EPARENT OF THE SPAWNED CHILD POINTING TO THIS PROCESS             *
    4173                    * NOTE: CALL WITH JSRP, IT SLEEPS                                        *
    4174                    *                                                                        *
    4175                    * ANIMATION SCRIPT FORMAT                                                *
    4176                    *       .LONG   IMAGE_HEADER<-- IF = 0 END OF SCRIPT                     *
    4177                    *       .WORD   SLEEP_TIME  <-- BITS 0 - 7 ARE THE SLEEP TIME.           *
    4178                    *                           <-- BITS 8 -15 ARE THE FLAGS:                *
    4179                    *                                BIT #          FLAG                     *
    4180                    *                                -----          ----                     *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   94

    4181                    *                                  8           UNUSED                    *
    4182                    *                                  9           UNUSED                    *
    4183                    *                                 10           UNUSED                    *
    4184                    *                                 11     DELTA Y WORD IS PRESENT         *
    4185                    *                                 12    PACKED DELTAS FOR X&Z PRESENT    *
    4186                    *                                 13    NEW PALETTE ADDRESS IS SPECIFIED *
    4187                    *                                 14    NEW FLIP BITS ARE SPECIFIED      *
    4188                    *                                 15    SPAWN PROCESS W/OFFSETS          *
    4189                    *                                          .WORD XOFF,YOFF,PROCID        *
    4190                    *                                          .LONG PROCADDR                *
    4191                    *                               FLAG HIERARCHY: 15 --> 8                 *
    4192                    *                                OPTIONS SHOULD FOLLOW IN THIS ORDER.    *
    4193                    *                                                                        *
    4194                    **************************************************************************
    4195 0000f220           FRANIM
    4196 0000f220     098c          MMTM    A12,A3,A11
         0000f230     1010  
    4197 0000f240     4d2b          MOVE    A9,A11          ;SAVE ENTRYPOINT FOR INFINITE CASE              
    4198 0000f250           FRAN1
    4199 0000f250     4c23          MOVE    A1,A3
    4200 0000f260     9721          MOVE    *A9+,A1,L               ;GET THE FRAME
    4201 0000f270     ca75          JREQ    FRANND                  ;BR = END WAS HIT
    4202                    
    4203 0000f280     098f          MMTM    SP,A2,A4,A5,A6,A7,A10,A14
         0000f290     2f22  
    4204                    
    4205 0000f2a0     9520          MOVE    *A9+,A0,W
    4206 0000f2b0     4c0e          MOVE    A0,A14                  ;XFER FLAGS HERE        
    4207 0000f2c0     2700          SLL     24,A0
    4208 0000f2d0     2d00          SRL     24,A0                   ;WIPE OFF THE FLAGS
    4209 0000f2e0     260e          SLL     16,A14                  ;MOVE FLAGGIES UP HERE
    4210                    
    4211 0000f2f0     242e          SLL     1,A14
    4212 0000f300     c90a          JRNC    FRANNOSP
    4213                    *SPAWN A PROCESS
    4214 0000f310     098f          MMTM    SP,A0,A1
         0000f320     c000  
    4215 0000f330     972a          MOVE    *A9+,A10,L      ;X AND Y FIRING OFFSETS PASSED IN A10
    4216 0000f340     9521          MOVE    *A9+,A1,W       ;GET PROCESS ID
    4217 0000f350     9727          MOVE    *A9+,A7,L       ;PROCESS STARTING ADDRESS
    4218 0000f360     0d5f          CALLA   GETPRC          ;SPAWN THE PROCESS
         0000f370 00000000! 
    4219                    ***     JREQ    FRSPAWNF        ;BR = FAILED TO SPAWN
    4220                    ***     MOVE    A13,*A0(EPARENT),L      ;RETURN LINK TO PARENT PROCESS  
    4221 0000f390           FRSPAWNF
    4222 0000f390     09af          MMFM    SP,A0,A1        
         0000f3a0     0003  
    4223 0000f3b0           FRANNOSP
    4224 0000f3b0     242e          SLL     1,A14
    4225 0000f3c0     c908          JRNC    FRANNOBI
    4226                    *STUFF SOME NEW FLAGS
    4227 0000f3d0     9522          MOVE    *A9+,A2,W               ;GET THE NEW FLIP FLAGS
    4228 0000f3e0     b504          MOVE    *A8(OFLAGS),A4,W        ;GET THE OLD FLIP FLAGS
         0000f3f0     0100  
    4229 0000f400     0b84          ANDNI   (M_FLIPV+M_FLIPH),A4    ;CLEAR THE CURRENT FLIP STATUS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   95

         0000f410 00000030  
    4230 0000f430     5444          OR      A2,A4                   ;SET DESIRED BITS
    4231 0000f440     c002          JRUC    FRAN2A                          
    4232 0000f450           FRANNOBI
    4233 0000f450     b504          MOVE    *A8(OFLAGS),A4,W        ;NORMAL FLAGS TO BE USED
         0000f460     0100  
    4234 0000f470           FRAN2A
    4235 0000f470     242e          SLL     1,A14
    4236 0000f480     c90f          JRNC    FRANNOPA
    4237                    *ACTIVATE A NEW PALETTE
    4238 0000f490                   PUSH    A0                      
    4239 0000f4a0     9720          MOVE    *A9+,A0,L               ;GET THE PALETTE ADDRESS
    4240 0000f4b0     0d5f          CALLA   GETFPAL                 ;GET A COLOR MAP ASSIGNMENT
         0000f4c0 00000000! 
    4241 0000f4e0     ca07          JRZ     FRAN2B                  ;NO PALETTE AVAILABLE
    4242 0000f4f0     4c07          MOVE    A0,A7                   ;SAVE HERE
    4243 0000f500     4d00          MOVE    A8,A0
    4244 0000f510     0d5f          CALLA   DELPAL
         0000f520 00000000! 
    4245 0000f540     b0e8          MOVE    A7,*A8(OPAL),W          ;STORE THE NEW PALETTE
         0000f550     0160  
    4246 0000f560           FRAN2B
    4247 0000f560                   PULL    A0
    4248 0000f580           FRANNOPA
    4249 0000f580     242e          SLL     1,A14
    4250 0000f590     c91c          JRNC    FRANNDXZ
    4251                    *ADD DELTA X AND Z
    4252 0000f5a0     9527          MOVE    *A9+,A7,W               ;GET THE DELTAS
    4253 0000f5b0     4ce6          MOVE    A7,A6
    4254 0000f5c0     2706          SLL     24,A6
    4255 0000f5d0     2906          SRA     24,A6                   ;BRING THE SIGN BACK DOWN
    4256 0000f5e0     ca08          JRZ     FNODX                   ;BR = THERE'S NO DELTA HERE
    4257 0000f5f0     1f64          BTST    B_FLIPH,A4
    4258 0000f600     ca01          JREQ    FNOFDX
    4259 0000f610     03a6          NEG     A6                      ;HE'S FLIPPED, NEGATE
    4260 0000f620           FNOFDX
    4261 0000f620     b505          MOVE    *A8(OXPOS),A5,W
         0000f630     0090  
    4262 0000f640     40c5          ADD     A6,A5
    4263 0000f650     b0a8          MOVE    A5,*A8(OXPOS),W         ;ADJUST X POSITION
         0000f660     0090  
    4264 0000f670           FNODX
    4265 0000f670     2b07          SRA     8,A7
    4266 0000f680     ca0d          JRZ     FRANNDXZ                ;BR = NO Z OFFSET
    4267 0000f690     1f44          BTST    B_FLIPV,A4
    4268 0000f6a0     ca01          JREQ    FNOFDZ
    4269 0000f6b0     03a7          NEG     A7
    4270 0000f6c0           FNOFDZ
    4271 0000f6c0     b505          MOVE    *A8(OZPOS),A5,W
         0000f6d0     00d0  
    4272 0000f6e0     40e5          ADD     A7,A5
    4273 0000f6f0     b0a8          MOVE    A5,*A8(OZPOS),W         ;ADJUST Z POSITION
         0000f700     00d0  
    4274 0000f710     b505          MOVE    *A8(OYPOS),A5,W
         0000f720     00b0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   96

    4275 0000f730     40e5          ADD     A7,A5
    4276 0000f740     b0a8          MOVE    A5,*A8(OYPOS),W         ;ADJUST MATCHING Y POSITION
         0000f750     00b0  
    4277 0000f760           FRANNDXZ
    4278 0000f760     242e          SLL     1,A14
    4279 0000f770     c90a          JRNC    FRANNDY
    4280                    *ADD DELTA Y
    4281 0000f780     9527          MOVE    *A9+,A7,W
    4282 0000f790     ca08          JRZ     FRANNDY
    4283 0000f7a0     1f44          BTST    B_FLIPV,A4
    4284 0000f7b0     ca01          JREQ    FNOFDY
    4285 0000f7c0     03a7          NEG     A7
    4286 0000f7d0           FNOFDY
    4287 0000f7d0     b505          MOVE    *A8(OYPOS),A5,W
         0000f7e0     00b0  
    4288 0000f7f0     40e5          ADD     A7,A5
    4289 0000f800     b0a8          MOVE    A5,*A8(OYPOS),W         ;ADJUST Y POSITION
         0000f810     00b0  
    4290 0000f820           FRANNDY
    4291 0000f820     0d5f          CALLA   ANI             ;SETUP NEW ANIMATION
         0000f830 00000000! 
    4292                    
    4293 0000f850     09af          MMFM    SP,A2,A4,A5,A6,A7,A10,A14
         0000f860     44f4  
    4294                    
    4295 0000f870     4c61          MOVE    A3,A1           ;GET THE COMMAND BACK
    4296 0000f880     0b41          CMPI    4,A1            ;ONE FRAME, NO SLEEP?
         0000f890     fffb  
    4297 0000f8a0     ca10          JREQ    FRAN3           ;YES
    4298                    
    4299 0000f8b0                   PUSHP   A1
    4300 0000f8c0     0d5f          CALLA   PRCSLP          ;SLEEP THE PROPER TIME
         0000f8d0 00000000! 
    4301 0000f8f0                   PULLP   A1
    4302                    
    4303 0000f910     0b41          CMPI    1,A1
         0000f920     fffe  
    4304 0000f930     ca91          JREQ    FRAN1           ;BR = LOOP 'TIL END OF LIST
    4305 0000f940     c406          JRLT    FRAN3           ;BR = ONE FRAME AT A TIME
    4306                    
    4307 0000f950     0d01          SUBI    010000h,A1      ;DECREMENT FRAME COUNT
         0000f960 fffeffff  
    4308 0000f980     5600          CLR     A0
    4309 0000f990     e401          CMPXY   A0,A1
    4310 0000f9a0     c38a          JRYGT   FRAN1           ;FRAME COUNT HAS NOT BEEN EXHAUSTED
    4311                    
    4312 0000f9b0     0320  FRAN3   CLRC                    ;CLEAR END FLAG
    4313 0000f9c0     c007          JRUC    FRANX                   
    4314                    
    4315 0000f9d0     4c61  FRANND  MOVE    A3,A1
    4316 0000f9e0     0b41          CMPI    3,A1
         0000f9f0     fffc  
    4317 0000fa00     cb02          JRNE    FRAN4           ;BR = EXIT
    4318                    
    4319 0000fa10     4d69          MOVE    A11,A9          ;GET THE STARTING POINTER BACK
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   97

    4320 0000fa20     c082          JRUC    FRAN1           ;LOOP INFINITELY
    4321                    
    4322 0000fa30     0de0  FRAN4   SETC                    ;OTHERWISE, RETURN WITH END FLAG SET
    4323 0000fa40           FRANX
    4324 0000fa40     09ac          MMFM    A12,A3,A11
         0000fa50     0808  
    4325 0000fa60                   RETP
    4326                    
    4327                    **************************************************************************
    4328                    *                                                                        *
    4329                    * FRAMSKIP - SKIP TO THE NEXT FRAME OF AN ANIMATION SCRIPT               *
    4330                    * A9 = SCRIPT PTR                                                        *
    4331                    * RETURNS:                                                               *
    4332                    *       C CLR = A9 IS POINTING TO NEXT FRAME                             *
    4333                    *       C SET = SCRIPT END WAS HIT, A9 POINTS TO NEXT WORD               *
    4334                    *                                                                        *
    4335                    **************************************************************************
    4336 0000fa90           FRAMSKIP
    4337 0000fa90     098f          MMTM    SP,A1
         0000faa0     4000  
    4338 0000fab0     9721          MOVE    *A9+,A1,L               ;GET THE FRAME
    4339 0000fac0     ca14          JREQ    FRAMSSC                 ;BR = END WAS HIT
    4340 0000fad0     9521          MOVE    *A9+,A1,W
    4341 0000fae0     2601          SLL     16,A1                   ;MOVE FLAGGIES UP HERE
    4342 0000faf0     2421          SLL     1,A1
    4343 0000fb00     c902          JRNC    FRAMSNSP
    4344 0000fb10     0b09          ADDI    32+16+32,A9             ;PROCESS SPAWN
         0000fb20     0050  
    4345 0000fb30           FRAMSNSP
    4346 0000fb30     2421          SLL     1,A1
    4347 0000fb40     c901          JRNC    FRAMSNF
    4348 0000fb50     1209          ADDK    16,A9                   ;NEW FLAGS
    4349 0000fb60           FRAMSNF
    4350 0000fb60     2421          SLL     1,A1
    4351 0000fb70     c901          JRNC    FRAMSNP
    4352 0000fb80     1009          ADDK    32,A9                   ;NEW PALETTE
    4353 0000fb90           FRAMSNP
    4354 0000fb90     2421          SLL     1,A1
    4355 0000fba0     c901          JRNC    FRAMSNXZ
    4356 0000fbb0     1209          ADDK    16,A9                   ;DELTA X & DELTA Z
    4357 0000fbc0           FRAMSNXZ
    4358 0000fbc0     2421          SLL     1,A1
    4359 0000fbd0     c901          JRNC    FRAMSNY
    4360 0000fbe0     1209          ADDK    16,A9                   ;DELTA Y
    4361 0000fbf0           FRAMSNY
    4362 0000fbf0     0320          CLRC    
    4363 0000fc00     c001          JRUC    FRAMSND
    4364 0000fc10           FRAMSSC
    4365 0000fc10     0de0          SETC
    4366 0000fc20           FRAMSND
    4367 0000fc20     09af          MMFM    SP,A1
         0000fc30     0002  
    4368 0000fc40     0960          RETS
    4369                    **************************************************************************
    4370                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   98

    4371                    * ANIMATOR - INDEPENDENT ANIMATION PROCESS, PROCESSES AN ANIMATION       *
    4372                    *            SCRIPT INFINITELY.                                          *
    4373                    * A8 = OBJECT TO ANIMATE                                                 *
    4374                    * A9 = SCRIPT                                                            *
    4375                    * A11 = # OF TICKS PER FRAME (IF NEG. HOLD CURRENT FRAME)                *
    4376                    *                                                                        *
    4377                    **************************************************************************
    4378 0000fc50           ANIMATOR
    4379 0000fc50                   PUSHP   A9              ;SAVE BEGINNING OF SCRIPT
    4380 0000fc60           ANIMATO1
    4381 0000fc60     4d6b          MOVE    A11,A11
    4382 0000fc70     cf07          JRNN    ANIMATO0        ;BR = O.K. TO ANIMATE
    4383 0000fc80                   SLOOP   1,ANIMATO1
    4384 0000fcf0           ANIMATO0
    4385 0000fcf0     1881          MOVK    4,A1
    4386 0000fd00                   JSRP    FRANIM
    4387 0000fd70     c809          JRC     ANIMATO3        ;BR = HIT END OF SCRIPT
    4388 0000fd80     09e7          MOVI    ANIMATO1,A7
         0000fd90 0000fc60' 
    4389 0000fdb0     4d60          MOVE    A11,A0
    4390 0000fdc0     cb01          JRNZ    ANIMATO2        ;NO EXTRA SLEEP
    4391 0000fdd0     1820          MOVK    1,A0
    4392 0000fde0           ANIMATO2
    4393 0000fde0     c080          JAUC    PRCLSP          ;SLEEP ADDITIONAL TIME
         0000fdf0 00000000! 
    4394 0000fe10           ANIMATO3        
    4395 0000fe10                   PULLP   A9              ;RESTORE LIST POINTER
    4396 0000fe30     c0e1          JRUC    ANIMATOR
    4397                    
    4398                    **************************************************************************
    4399                    *                                                                        *
    4400                    * ANIMATCK - INDEPENDENT ANIMATION PROCESS, PROCESSES AN ANIMATION       *
    4401                    *            SCRIPT INFINITELY, BUT DOESN'T ANIMATE IF OFF SCREEN.       *
    4402                    *            THE SCREEN CHECK IS ONLY IN X FOR SPEED.                    *
    4403                    * A8 = OBJECT TO ANIMATE                                                 *
    4404                    * A9 = SCRIPT                                                            *
    4405                    * A11 = # OF TICKS PER FRAME (IF NEG. HOLD CURRENT FRAME)                *
    4406                    *                                                                        *
    4407                    **************************************************************************
    4408 0000fe40           ANIMATCK
    4409 0000fe40                   PUSHP   A9              ;SAVE BEGINNING OF SCRIPT
    4410 0000fe50           ANIMCKO1
    4411 0000fe50     4d6b          MOVE    A11,A11
    4412 0000fe60     cf07          JRNN    ANIMCKO0        ;BR = O.K. TO ANIMATE
    4413 0000fe70                   SLOOP   1,ANIMCKO1
    4414 0000fee0           ANIMCKO0
    4415 0000fee0     0d3f          CALLR   SCRTSTX         ;ON SCREEN?
         0000fef0     001a  
    4416 0000ff00     ca04          JREQ    ANIMCKON
    4417 0000ff10     0d3f          CALLR   FRAMSKIP        ;SKIP TO THE NEXT ANIMATION FRAME
         0000ff20     ffb6  
    4418 0000ff30     c813          JRC     ANIMCKO3        ;HIT THE END
    4419 0000ff40     c009          JRUC    ANIMCKOF
    4420 0000ff50           ANIMCKON
    4421 0000ff50     1881          MOVK    4,A1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE   99

    4422 0000ff60                   JSRP    FRANIM
    4423 0000ffd0     c809          JRC     ANIMCKO3        ;BR = HIT END OF SCRIPT
    4424 0000ffe0           ANIMCKOF
    4425 0000ffe0     09e7          MOVI    ANIMCKO1,A7
         0000fff0 0000fe50' 
    4426 00010010     4d60          MOVE    A11,A0
    4427 00010020     cb01          JRNZ    ANIMCKO2        ;NO EXTRA SLEEP
    4428 00010030     1820          MOVK    1,A0            ;DEFAULT TO 1
    4429 00010040           ANIMCKO2
    4430 00010040     c080          JAUC    PRCLSP          ;SLEEP ADDITIONAL TIME
         00010050 00000000! 
    4431 00010070           ANIMCKO3        
    4432 00010070                   PULLP   A9              ;RESTORE LIST POINTER
    4433 00010090     c0da          JRUC    ANIMATCK
    4434                    
    4435                    **************************************************************************
    4436                    *                                                                        *
    4437                    * SCRTSTX - SCREEN TEST ONLY IN X                                        *
    4438                    * A8 = OBJECT TO TEST                                                    *
    4439                    * RETURNS:                                                               *
    4440                    *       EQ = ON SCREEN                                                   *
    4441                    *       NE = OFF                                                         *
    4442                    *                                                                        *
    4443                    **************************************************************************
    4444 000100a0           SCRTSTX
    4445 000100a0     098f          MMTM    SP,A0,A2,A3
         000100b0     b000  
    4446 000100c0     b500          MOVE    *A8(OXPOS),A0,W
         000100d0     0090  
    4447 000100e0     05a2          MOVE    @WORLDTLX+16,A2,W       ;COMPARE ONLY TO FULL WIDTH
         000100f0 00000010! 
    4448 00010110     4c43          MOVE    A2,A3
    4449 00010120     0b03          ADDI    512,A3                  ;AND 512 IS IT
         00010130     0200  
    4450 00010140     4860          CMP     A3,A0
    4451 00010150     c707          JRGT    SCRTSTXOFF              ;OFF THE RIGHT SIDE
    4452 00010160     b503          MOVE    *A8(OSIZEX),A3,W        
         00010170     0140  
    4453 00010180     4060          ADD     A3,A0
    4454 00010190     4840          CMP     A2,A0
    4455 000101a0     c402          JRLT    SCRTSTXOFF              ;OFF THE LEFT
    4456 000101b0     5600          CLR     A0
    4457 000101c0     c002          JRUC    SCRTSTXXX
    4458 000101d0           SCRTSTXOFF
    4459 000101d0     5600          CLR     A0
    4460 000101e0     1020          INC     A0
    4461 000101f0           SCRTSTXXX
    4462 000101f0     09af          MMFM    SP,A0,A2,A3
         00010200     000d  
    4463 00010210     0960          RETS
    4464                            
    4465                    **************************************************************************
    4466                    *                                                                        *
    4467                    * SCRKIL - GIVE APPROPRIATE SCORE FOR ENEMY KILL                         *
    4468                    * A8 = OBLOCK PTR OF ENEMY                                               *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE  100

    4469                    * A11 = OID OF KILLER                                                    *
    4470                    *                                                                        *
    4471                    **************************************************************************
    4472 00010220     098f  SCRKIL  MMTM    SP,A0,A1,A2,A11
         00010230     e010  
    4473 00010240     2f8b          SRL     4,A11
    4474 00010250     248b          SLL     4,A11                   ;MASK OFF WEAPON
    4475 00010260     052b          ZEXT    A11                     ;MUST CLEAR HONORABLE HIGH WORD
    4476                    
    4477 00010270     0b4b          CMPI    P1OID,A11
         00010280     efff  
    4478 00010290     ca03          JREQ    SCRK1A
    4479 000102a0     0b4b          CMPI    B1OID,A11
         000102b0     f4ef  
    4480 000102c0     cb04          JRNE    SCRK1                   ;BR = NO
    4481 000102d0           SCRK1A
    4482 000102d0     09e2          MOVI    P1DATA,A2               
         000102e0 00000000! 
    4483 00010300     c011          JRUC    SCRK2
    4484                    
    4485 00010310     0b4b  SCRK1   CMPI    B2OID,A11
         00010320     f4df  
    4486 00010330     ca03          JREQ    SCRK2A                  ;NOPE KILLED BY A NOBODY        
    4487 00010340     0b4b          CMPI    P2OID,A11
         00010350     dfff  
    4488 00010360     cb04          JRNE    SCRKCAR
    4489 00010370           SCRK2A
    4490 00010370     09e2          MOVI    P2DATA,A2
         00010380 00000000! 
    4491 000103a0     c007          JRUC    SCRK2
    4492                    *CHECK VEHICLE I.D.'S
    4493 000103b0           SCRKCAR
    4494 000103b0     0b4b          CMPI    TRAN1OID,A11
         000103c0     f3cf  
    4495 000103d0     ca12          JREQ    SCRKBOTH                ;BR = CAR, SCORE BOTH PLAYERS
    4496 000103e0     0b4b          CMPI    TRAN2OID,A11
         000103f0     f3bf  
    4497 00010400     ca0f          JREQ    SCRKBOTH                ;BR = HELICOPTER, SCORE BOTH PLAYERS
    4498 00010410     c01b          JRUC    SCRKX
    4499                    
    4500 00010420     09e1  SCRK2   MOVI    ESCRTAB,A1              ;POINT TO THE SCORE TABLE
         00010430 00000000" 
    4501 00010450     b500          MOVE    *A8(OID),A0,W
         00010460     01a0  
    4502 00010470     2f80          SRL     4,A0
    4503 00010480     2780          SLL     28,A0
    4504 00010490     2d20          SRL     23,A0                   ;MASK OFF AND MULTIPLY BY 32
    4505 000104a0     4001          ADD     A0,A1                   
    4506 000104b0     8621          MOVE    *A1,A1,L                ;GET THE SCORE
    4507 000104c0     0d5f          CALLA   SCORE                   ;AND SCORE IT
         000104d0 00000000! 
    4508 000104f0     c00d          JRUC    SCRKX
    4509                    *
    4510                    *GIVE SCORE TO BOTH PLAYER'S IF THEY'RE IN A VEHICLE
    4511 00010500           SCRKBOTH
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:18:41 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< NARC GENERAL PURPOSE SUBROUTINES >>>                            PAGE  101

    4512 00010500     09e1          MOVI    ESCRTAB,A1              ;POINT TO THE SCORE TABLE
         00010510 00000000" 
    4513 00010530     b500          MOVE    *A8(OID),A0,W
         00010540     01a0  
    4514 00010550     2f80          SRL     4,A0
    4515 00010560     2780          SLL     28,A0
    4516 00010570     2d20          SRL     23,A0                   ;MASK OFF AND MULTIPLY BY 32
    4517 00010580     4001          ADD     A0,A1                   
    4518 00010590     8621          MOVE    *A1,A1,L                ;GET THE SCORE
    4519 000105a0     0d5f          CALLA   SCORE2P                 ;AND SCORE IT
         000105b0 00000000! 
    4520                    
    4521 000105d0     09af  SCRKX   MMFM    SP,A0,A1,A2,A11
         000105e0     0807  
    4522 000105f0     0960          RETS
    4523                    
    4524                    ***** DATA SECTION ******
    4525 00000000                   .data
    4526                    
    4527                    *ENEMY SCORING TABLE, INDEXED BY TYPE
    4528 00000000 00000050  ESCRTAB .LONG   050h            ;TYPE 0 ENEMY (BUG)
    4529 00000020 00000100          .LONG   0100h           ;TYPE 1 ENEMY (LOF)
    4530 00000040 00000250          .LONG   0250h           ;TYPE 2 ENEMY (GANGSTER)
    4531 00000060 00000500          .LONG   0500h           ;TYPE 3 ENEMY (PIMP)
    4532 00000080 00001000          .LONG   01000H          ;TYPE 4 ENEMY (HYPOMAN)
    4533 000000a0 00002500          .LONG   02500h          ;TYPE 5 ENEMY (DUMPSTER-MAN)
    4534 000000c0 00002500          .LONG   02500h          ;TYPE 6 ENEMY (CLOWN)
    4535 000000e0 00000200          .LONG   00200h          ;TYPE 7 ENEMY (DOG)
    4536 00000100 00001750          .LONG   01750h          ;TYPE 8 ENEMY
    4537 00000120 00002000          .LONG   02000H          ;TYPE 9 ENEMY
    4538 00000140 00005000          .LONG   05000H          ;TYPE A ENEMY
    4539 00000160 00000000          .LONG   0H              ;TYPE B ENEMY (HOOKER)
    4540 00000180 00025000          .LONG   025000h
    4541 000001a0 00050000          .LONG   050000h
    4542 000001c0 00100000          .LONG   0100000h
    4543                    
    4544                    
    4545                            .END                                                                     

 No Errors,  No Warnings
