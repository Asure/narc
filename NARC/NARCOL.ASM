	.FILE	"NARCOL.ASM"
	.TITLE	" <<< N  A  R  C -- COLLISION ROUTINES >>>"

**************************************************************************
*                                                                        *
* 	COPYRIGHT (C) 1988 WILLIAMS ELECTRONICS GAMES, INC. 		 *
* 	ALL RIGHTS RESERVED.						 *
*                                                                        *
**************************************************************************

	.WIDTH	132
	.MNOLIST

	.INCLUDE	"\video\DISPEQU.ASM"	;Display processor equates
	.INCLUDE	\video\MACROS.HDR
	.INCLUDE	\video\GSP.INC
	.INCLUDE	\video\sys.inc
	.INCLUDE	\video\MPROCEQU.ASM
	.INCLUDE	NARCEQU.ASM

*
*GLOBALS IN THIS FILE
	.GLOBAL	CPCOLADJ

*
*EXTERNALS
	.GLOBAL	CKLBADJ,P_INBNDS

	.TEXT

**************************************************************************
*                                                                        *
* PRESCAN0 - SETS UP OBJECT 0 PARAMETERS FOR COLXY AND COLXYZ		 *
* A0 = PTR TO OBJECT 0							 *
* RETURNS:								 *
* 	CARRY CLEAR = DON'T SCAN THIS OBJECT				 *
* 			A4 - A5 UNTOUCHED				 *
* 	CARRY SET = SCAN AWAY						 *
* 	A3 = [ULY,ULX]							 *
* 	A4 = [LRY,LRX]							 *
* 	A4 = INWARD Z							 *
* 	A5 = OUTWARD Z							 *
* NOTE: ALWAYS TRASHES A14						 *
*                                                                        *
**************************************************************************
PRESCAN0
	MOVE	*A0(OFLAGS),A14,W	
	BTST	B_NOCOLL,A14		;IS THIS DUDE COLLIDABLE?
	JRNE	PRESCANF		;BR = NO, DON'T WORRY ABOUT HIM
	SLL	28,A14
	JRZ	PRESCANF		;HE'S NOT EVEN TURNED ON
	MOVE	*A0(ODMAXY),A3,L	;SET UP OBJECT 0 BOX ULX,ULY
	JREQ	PRESCANF		;DMA VALUES ARE YET UNINITIALIZED

	MOVE	*A0(OSIZE),A4,L		;GET HIS SIZE
	ADDXY	A3,A4			;OBJECT 0 LRX,LRY
*Z STUFF
	MOVE	*A0(OZPOS),A5,W		;GET Z MIDPOINT
	MOVE	*A0(OZMINUS),A14,W	;GET Z SIZE IN NEGATIVE DIRECTION
	MOVE	A5,A6
	SUB	A14,A5			;INWARD Z
	MOVE	*A0(OZPLUS),A14,W	;Z SIZE IN POSITIVE DIRECTION
	ADD	A14,A6 			;OUTWARD Z
	SETC
	RETS
PRESCANF
	CLRC
	RETS
**************************************************************************
*                                                                        *
* COLLISION CHECK IN 3-SPACE						 *
* A0 =POINTER TO OBJECT BLOCK OF OBJECT TO BE CHECKED(OBJECT 0)		 *
* A1 =POINTER TO SPECIAL LIST TO SCAN AGAINST (OBJECT 1)		 *
* RETURN(S)								 *
* Z BIT - J*NE = COLLISION, J*EQ = NO COLLISION				 *
* IF A COLLISION IS DETECTED, THE OBJECTS COLLISION ROUTINE IS CALLED.	 *
*                                                                        *
**************************************************************************
*2-D ENTRY PROVIDING OBJECT 0 PARAMS
COLXYP
	MMTM	SP,A0,A2,A3,A4,A5,A6,A7,A8,A9,A11,A14
	CLR	A9
	JRUC	COLLPREG
*3-D ENTRY PROVIDING OBJECT 0 PARAMS
COLXYZP
	MMTM	SP,A0,A2,A3,A4,A5,A6,A7,A8,A9,A11,A14
       	MOVK	1,A9
	JRUC	COLLPREG
*2-D ENTRY PROVIDING NOTHING
COLXY:
	MMTM	SP,A0,A2,A3,A4,A5,A6,A7,A8,A9,A11,A14
	CLR	A9			;2 SPACE COLLISION
	JRUC	COLXYZ0
*3-D ENTRY PROVIDING NOTHING
COLXYZ:
	MMTM	SP,A0,A2,A3,A4,A5,A6,A7,A8,A9,A11,A14
	MOVK	1,A9			;SET FOR 3 SPACE COLLISION
COLXYZ0:
	MOVE	*A0(OFLAGS),A14,W	
	BTST	B_NOCOLL,A14		;IS THIS DUDE COLLIDABLE?
	JRNE	COLLX			;BR = NO, DON'T WORRY ABOUT HIM
	SLL	28,A14
	JRZ	COLLX			;HE'S NOT EVEN TURNED ON
	MOVE	*A0(ODMAXY),A3,L	;SET UP OBJECT 0 BOX ULX,ULY
	JREQ	COLLX			;DMA VALUES ARE YET UNINITIALIZED
	MOVE	*A0(OSIZE),A4,L		;GET HIS SIZE
	ADDXY	A3,A4			;OBJECT 0 LRX,LRY
*Z STUFF
	MOVE	*A0(OZPOS),A5,W		;GET Z MIDPOINT
	MOVE	*A0(OZMINUS),A14,W	;GET Z SIZE IN NEGATIVE DIRECTION
	MOVE	A5,A6
	SUB	A14,A5			;INWARD Z
	MOVE	*A0(OZPLUS),A14,W	;Z SIZE IN POSITIVE DIRECTION
	ADD	A14,A6 			;OUTWARD Z
COLLPREG
	CLR	A11			;CLEAR A11
	MOVE	*A1,A8,L		;GET OBJECT LIST
	JRZ	COLLX			;LIST IS NULL
COLLP:
	MOVE	*A8(OFLAGS),A14,W	
	BTST	B_NOCOLL,A14		;IS THIS DUDE COLLIDABLE?
	JRNE	COLLNO			;BR = NO, DON'T WORRY ABOUT HIM
	SLL	28,A14
	JRZ	COLLNO			;NOT TURNED ON
	CMP	A0,A8
	JREQ	COLLNO			;BR = SAME DAMN OBJECT DUDE

	MOVE	*A8(ODMAXY),A7,L	;GET OBJECT 1 ULY,ULX
	JREQ	COLLNO			;BR = DON'T MESS
	CMPXY	A4,A7			;COMPARE 0:(LRX,LRY) TO 1:(ULX,ULY)
	JRXGE	COLLNO
	JRYGE	COLLNO

	MOVE	*A8(OSIZE),A14,L	;GET DISPLAYED SIZE
	ADDXY	A14,A7			;OBJECT 1 LRX,LRY

	CMPXY	A3,A7			;COMPARE 0:(ULX,ULY) TO 1:(LRX,LRY) 
	JRXLE	COLLNO
	JRYLE	COLLNO

*CHECK FOR Z COLLISION
	MOVE	A9,A9
	JREQ	COLLYES			;THIS IS A 2D COLLISION
	MOVE	*A8(OZPOS),A7		;GET Z MIDPOINT
	MOVE	*A8(OZMINUS),A14,W	;SIZE IN THE MINUS DIRECTION

	SUB	A14,A7		;GET INWARD Z1

	CMP	A7,A6		;COMPARE
	JRLE	COLLNO		;OUTWARD Z0 < INWARD Z1

	ADD	A14,A7		;GET BACK TO "MIDPOINT"

	MOVE	*A8(OZPLUS),A14,W	;SIZE IN PLUS DIRECTION
	ADD	A14,A7		

	CMP	A7,A5
	JRLT	COLLYES		;OUTWARD Z1 > INWARD Z0
COLLNO:
	MOVE	*A8(OSLINK),A8,L
	JRNZ	COLLP
COLLX:
	MOVE	A11,A11
	MMFM	SP,A0,A2,A3,A4,A5,A6,A7,A8,A9,A11,A14
	RETS

COLLYES:
*
*COLLISION VECTOR IS CALLED WITH THESE PARAMETERS
*A0 = PTR TO OBJECT 0
*A1 = I.D. OF OBJECT THAT COLLIDED WITH YOU (0 = DEFAULT CASE)
*A8 = PTR TO OBJECT 1
*A14 = TYPE OF COLLISION (FOR COMPATIBILITY WITH THE OLD COLLISION ROUTINES)
*    IF = 0 THEN THIS IS A COLLISION CALL AS OBJECT 0
*    IF = 1 THEN THIS IS A COLLISION CALL AS OBJECT 1
	CALLR	PIXSCAN		;CHECK PIXEL SCAN
	JRNC	COLLNO		;NO COLLISION ...
	INC	A11		;RETURN A COLLISION
	PUSH	A10
	MOVE	*A8(OSLINK),A10,L	;GET THE NEXT OBJECT IN THE LIST NOW!
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MMTM	SP,A0,A8	;SAVE THESE JUST IN CASE
	MOVE	*A0(OCVECT),A6,L
	MOVE	*A8(OID),A1,W	;GET THE OBJECT I.D. TO MATCH
	CLR	A14		;MARK AS COLLISION 0 ROUTINE
	CALLR	COLLCALL
	MMFM	SP,A0,A8
	JRNE	COLLENDR	;THIS MEANS END SCAN AFTER THE NEXT VECTOR CALL

	SWAP	A0,A8
	MOVE	*A0(OCVECT),A6,L
	MOVE	*A8(OID),A1,W	;GET THE OBJECT I.D. TO MATCH
	MOVK	1,A14
	CALLR	COLLCALL
	JRNE	COLLNDR1	;BR = NO, TIME TO END SCAN
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MOVE	A10,A8		;NEXT OBJECT, IS IT ZERO?
	MMFM	SP,A10
	JRNZ	COLLP		;NO, KEEP ON TRUCKIN'
	JRUC	COLLX		
*
*CEASE SCAN AFTER THIS COLLISION VECTOR CALL
COLLENDR
	SWAP	A0,A8
	MOVE	*A0(OCVECT),A6,L
	MOVE	*A8(OID),A1,W	;GET THE OBJECT I.D. TO MATCH
	MOVK	1,A14
	CALLR	COLLCALL
COLLNDR1
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MMFM	SP,A10
	JRUC	COLLX

*
*COLLCALL - CALL THE CORRECT COLLISION ROUTINE
*A0 = PTR TO OBJECT 0
*A1 = I.D. TO SCAN FOR IN THE VECTOR LIST
*A6 = COLLISION VECTOR LIST
*A8 = PTR TO OBJECT 1
*A14 = COLLISION TYPE FLAG
*NOTE: IF ROUTINE CALLED RETURNS WITH THE Z BIT CLEAR THEN THE
*	COLLISION SCAN WILL END AFTER THIS.
COLLCALL
	MOVE	*A6+,A2,W		;GET THE FIRST MATCH I.D.
	JREQ	COLLDEF			;AHHH THE DEFAULT CASE
	CMP	A1,A2
	JREQ	COLLDEF
	ADDK	32,A6			;SKIP PAST COLLISION VECTOR
	JRUC	COLLCALL		
COLLDEF
	MOVE	*A6,A6,L		;GET THE VECTOR
	JUMP	A6			;CALL THE ROUTINE

ODMAIMG	.SET	OIMG
ODMAFLG	.SET	OFLAGS
*
*COLLISION ROUTINE
*A0=OBJECT ZERO
*A8=OBJECT ONE
*RETURNS: CS= COLLISION, CC= NO COLLISION
*
PIXSCAN:
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MMTM	SP,B0,B1
	MOVE	*A0(OFLAGS),A14,W
	BTST	B_PIXSCAN,A14
	JRNE	PIXSCANG		;BR = THIS GUY WANTS TO SCAN FOR SURE
	MOVE	*A8(OFLAGS),A14,W
	BTST	B_PIXSCAN,A14		;CHECK TO SEE IF OBJECT 1 IS PIXABLE
	JREQ	CSFLAGS			;BR = NO PIXSCAN, JUST RETURN YES
*CREATE TIME SLICE WHILE LOCKING OUT INTERRUPTS
PIXSCANG
	PUSHST
	DINT
	MOVE	*A0(ODMAIMG),A9,L		;GET IMAGE 0 POINTER
	MOVE	*A8(ODMAIMG),A7,L		;GET IMAGE 1 POINTER
	MOVE	*A0(ODMAXY),A3,L		;SET UP OBJECT BOX ULX,ULY
	MOVE	*A8(ODMAXY),A4,L
	MOVE	*A0(ODMAFLG),A6
	MOVE 	A6,B0				;FLAGS FOR OBJECT 0
	MOVE	*A8(ODMAFLG),A6
	MOVE	A6,B1				;FLAGS OBJECT 1
	POPST

	MOVE	*A9(ISIZE),A5,L
	MOVE	*A7(ISIZE),A6,L
	ADDXY	A3,A5				;NOW WE HAVE LRX0 AND LRY0
	ADDXY	A4,A6				;LRX1,LRY1
	CMPXY	A6,A3		;COMPARE (LRX1,LRY1) TO (TLX0,TLY0)
	JRXGE	CSFAIL
	JRYGE	CSFAIL
	CMPXY	A4,A5		;COMPARE (TLX1,TLY1) TO (LRX0,LRY0) 
	JRXLE	CSFAIL
	JRYLE	CSFAIL
	MOVE	A0,A10
*
*BOX HAS INTERSECTED
*PERFORM PIXEL SCAN
*A3=TLX0,TLY0
*A4=TLX1,TLY1
*A5=LRX0,LRX1
*A6=LRX1,LRY1
*A7=IMAGE 1 DATA HEADER POINTER
*A8=IMAGE 1 OBJECT POINTER
*A9=IMAGE 0 DATA HEADER POINTER
*A10=IMAGE 0 OBJECT POINTER
*B0=FLAGS OBJECT 0
*B1=FLAGS OBJECT 1
*
*CALCULATE XOFF0,XOFF1,XSCAN
*A11=XOFF0
*A12=XOFF1
*A13=XSCAN
*
	MOVE	A3,A2	
	SUBXY	A4,A2
	SEXT	A2,W
	JRNN    CLX1    
	NEG	A2
	MOVE	A2,A11	;OBJECT 1 TO THE RIGHT
	CLR	A12
	MOVE	A4,A13	;RIGHTMOST TOP LEFT
	JRUC	CLX2
CLX1:			;OBJECT 0 TO THE RIGHT
	MOVE	A2,A12
	CLR	A11
	MOVE	A3,A13	;RIGHTMOST TOP LEFT
CLX2:
	CMPXY	A5,A6	;FIND LEFTMOST LOWER RIGHT
	JRXN	CLX3
	SUBXY	A5,A13
	JRUC	CLX4
CLX3:
	SUBXY	A6,A13
CLX4:
	SEXT	A13,W
	NEG	A13

*CALCULATE YOFF0,YOFF1,YSCAN
*A3=TLX0,TLY0
*A4=TLX1,TLY1
*A5=LRX0,LRX1
*A6=LRX1,LRY1
*COMPUTE:
*A2=YOFF0
*A3=YOFF1
*A14=YSCAN
	SRA	16,A3	;BLOW AWAY X COORDS
	SRA	16,A4
	SRA	16,A5
	SRA	16,A6
	MOVE	A3,A2
	SUB	A4,A2
	JRNN    CLY1    
	NEG	A2
	CLR	A3	;OBJECT 1 TO THE RIGHT
	MOVE	A4,A14	;RIGHTMOST TOP LEFT
	JRUC	CLY2
CLY1:			;OBJECT 0 TO THE RIGHT
	MOVE	A3,A14
	MOVE	A2,A3
	CLR	A2
CLY2:
	CMP	A5,A6	;FIND LEFTMOST LOWER RIGHT
	JRN	CLY3
	SUB	A5,A14
	JRUC	CLY4
CLY3:
	SUB	A6,A14
CLY4:
	NEG	A14
*
*A2=YOFF0
*A3=YOFF1
*A4=IMAGE SOURCE ADDRESS TEMP
*A5=WIDTH TEMP
*A7=IMAGE 1 DATA HEADER POINTER
*A8=IMAGE 1 OBJECT POINTER
*A9=IMAGE 0 DATA HEADER POINTER
*A10=IMAGE 0 OBJECT POINTER
*A11=XOFF0
*A12=XOFF1
*A13=XSCAN
*A14=YSCAN
*
*CALCULATE OBJECT 0 STARTAD, HINC0, VINC0
*
	MOVE	*A9(ISAG),A4,L	;GET IMAGE SOURCE ADDRESS
	MOVE	*A9(ISIZE),A5,W
	ADDK	3,A5		;CORRECT ERRONEOUS WIDTH (THANX, WARREN)
	ANDI	0FFFFFFFCH,A5
	
*CHECK OBJECT 0 FLIPS
*
	BTST	B_FLIPH,B0
	JRNE	CL0HF		;HORIZONTAL FLIP
	BTST	B_FLIPV,B0
	JRNE	CL0VF		;VERTICAL FLIP
*	
*NO FLIP CASE
*A2=HINC0=8 (BYTE AT A TIME)
*A5=VINC0=W0-XSCAN
*A4=STARTAD0=IMAGEAD0+(YOFF0 X W0) + XOFF
*
	MOVE	A5,A1		;GET WIDTH
	MPYU	A2,A1		;MULT WIDTH X YOFF
	ADD	A11,A1		;ADD IN X OFFSET
	SLL	3,A1		;CORRECT FOR BYTE ADDRESSING
	ADD	A1,A4		;ADD TO SOURCE ADDRESS
	MOVK	8,A2		;HINC0
	SUB	A13,A5		;VINC0=W0-XSCAN
	SLL	3,A5		;CORRECT FOR PIXEL ADDRESSING
	JRUC	CLOBJ1
*
*HORIZONTAL FLIP
*
*A2=HINC0=-8
*A5=VINC0=W0+XSCAN
*A4=STARTAD0=IMAGEAD0+(YOFF0 X W0) + W0-XOFF0-1
CL0HF	BTST	B_FLIPV,B0	;VERT FLIP TOO?
	JRNE	CL0HVF		;HORIZ AND VERT FLIP
	MOVE	A5,A1		;GET WIDTH
	MPYU	A2,A1		;MULT WIDTH X Y OFFSET
	ADD	A5,A1		;ADD IN WIDTH
	SUB	A11,A1		;SUBTRACT X OFFSET
	DEC	A1		;-1 MORE
	SLL	3,A1		;CORRECT FOR BYTE ADDRESSING
	ADD	A1,A4
	MOVI	-8,A2		;HINC0
	ADD	A13,A5		;VINC0=W0+XSCAN
	SLL	3,A5		;CORRECT FOR PIXEL ADDRESSING
	JRUC	CLOBJ1
*
*VERTICAL FLIP
*
*A2=HINC0=8
*A5=VINC0=-W0-XSCAN
*A4=STARTAD0=IMAGEAD0+(H0-YOFF0-1)W0+XOFF0
CL0VF:	MOVE 	*A9(ISIZE+010H),A1	;GET HEIGHT
	SUB	A2,A1			;SUBTRACT YOFF0
	DEC	A1
	MPYU	A5,A1		;MULTIPLY BY WIDTH
	ADD	A11,A1		;ADD IN X OFFSET
	SLL	3,A1		;CORRECT FOR PIXEL ADDRESSING
	ADD	A1,A4		;ADD TO SOURCE ADDRESS
	NEG	A5		;-W0
	SUB	A13,A5		;-XSCAN
	SLL	3,A5		;CORRECT FOR PIXEL ADDRESSING
	MOVK	8,A2		;HINC0
	JRUC	CLOBJ1
*
*VERTICAL AND HORIZONTAL FLIP
*
*A2=HINC0=-8
*A5=VINC0=-W0-XSCAN
*A4=STARTAD0=(H0-YOFF0-1)W0+W0-XOFF0-1
CL0HVF:	MOVE	*A9(ISIZE+010H),A1	;GET HEIGHT
	SUB	A2,A1			;SUBTRACT YOFF0
	DEC	A1
	MPYU	A5,A1		;MULTIPLY BY WIDTH
	ADD	A5,A1		;ADD IN WIDTH (W0)
	SUB	A11,A1		;SUBTRACT XOFF0
	DEC	A1
	SLL	3,A1		;CORRECT FOR PIXEL ADDRESSING
	ADD	A1,A4		;ADD TO SOURCE ADDRESS
	NEG	A5		;-W0
	ADD	A13,A5		;+XSCAN
	SLL	3,A5		;CORRECT FOR PIXEL ADDRESSING
	MOVI	-8,A2		;HINC0
*
*CALCULATE OBJECT 1 STARTAD, HJUMP, VJUMP		
*	
*
*A2=HINC0
*A3=YOFF1, HINC1
*A4=STARTAD0
*A5=VINC0
*A6=STARTAD1
*A7=IMAGE 1 DATA HEADER POINTER
*A8=IMAGE 1 OBJECT POINTER
*A9=IMAGE 0 DATA HEADER POINTER
*A10=IMAGE 0 OBJECT POINTER
*A11=W1, VINC1
*A12=XOFF1
*A13=XSCAN
*A14=YSCAN
CLOBJ1:
	MOVE	*A7(ISAG),A6,L	;GET IMAGE SOURCE ADDRESS
	MOVE	*A7(ISIZE),A11
	ADDK	3,A11		;CORRECT ERRONEOUS WIDTH (THANX, WARREN)
	ANDI	0FFFFFFFCH,A11
*	
*CHECK OBJECT 1 FLIPS
*
	BTST	B_FLIPH,B1
	JRNE	CL1HF		;HORIZONTAL FLIP
	BTST	B_FLIPV,B1
	JRNE	CL1VF		;VERTICAL FLIP
*	
*NO FLIP CASE
*A3=HINC1=8 (BYTE AT A TIME)
*A11=VINC1=W1-XSCAN
*A6=STARTAD1=IMAGEAD1+(YOFF1 X W1) + XOFF1
*
	MOVE	A11,A1		;GET WIDTH
	MPYU	A3,A1		;MULT WIDTH X YOFF
	ADD	A12,A1		;ADD IN X OFFSET
	SLL	3,A1		;CORRECT FOR BYTE ADDRESSING
	ADD	A1,A6		;ADD TO SOURCE ADDRESS
	MOVK	8,A3		;HINC1
	SUB	A13,A11		;VINC1=W1-XSCAN
	SLL	3,A11		;CORRECT FOR PIXEL ADDRESSING
	JRUC	CSH
*
*HORIZONTAL FLIP
*
*A3=HINC1=-8
*A11=VINC1=W1+XSCAN
*A6=STARTAD1=IMAGEAD1+(YOFF1 X W1) + W1-XOFF1-1
CL1HF	BTST	B_FLIPV,B1	;VERT FLIP TOO?
	JRNE	CL1HVF		;HORIZ AND VERT FLIP
	MOVE	A11,A1		;GET WIDTH
	MPYU	A3,A1		;MULT WIDTH X Y OFFSET
	ADD	A11,A1		;ADD IN WIDTH
	SUB	A12,A1		;SUBTRACT X OFFSET
	DEC	A1		;-1 MORE
	SLL	3,A1		;CORRECT FOR BYTE ADDRESSING
	ADD	A1,A6
	MOVI	-8,A3		;HINC1
	ADD	A13,A11		;VINC1=W1+XSCAN
	SLL	3,A11		;CORRECT FOR PIXEL ADDRESSING
	JRUC	CSH
*
*VERTICAL FLIP
*
*A3=HINC1=8
*A11=VINC1=-W1-XSCAN
*A6=STARTAD1=IMAGEAD1+(H1-YOFF1-1)W1+XOFF1
CL1VF:	MOVE 	*A7(ISIZE+010H),A1	;GET HEIGHT
	SUB	A3,A1			;SUBTRACT YOFF1
	DEC	A1
	MPYU	A11,A1		;MULTIPLY BY WIDTH
	ADD	A12,A1		;ADD IN X OFFSET
	SLL	3,A1		;CORRECT FOR PIXEL ADDRESSING
	ADD	A1,A6		;ADD TO SOURCE ADDRESS
	NEG	A11		;-W1
	SUB	A13,A11		;-XSCAN
	SLL	3,A11		;CORRECT FOR PIXEL ADDRESSING
	MOVK	8,A3		;HINC1
	JRUC	CSH
*
*VERTICAL AND HORIZONTAL FLIP
*
*A3=HINC1=-8
*A11=VINC1=-W1-XSCAN
*A6=STARTAD1=(H1-YOFF1-1)W1+W1-XOFF1-1
CL1HVF:	MOVE	*A7(ISIZE+010H),A1	;GET HEIGHT
	SUB	A3,A1			;SUBTRACT YOFF1
	DEC	A1
	MPYU	A11,A1		;MULTIPLY BY WIDTH
	ADD	A11,A1		;ADD IN WIDTH (W1)
	SUB	A12,A1		;SUBTRACT XOFF1
	DEC	A1
	SLL	3,A1		;CORRECT FOR PIXEL ADDRESSING
	ADD	A1,A6		;ADD TO SOURCE ADDRESS
	NEG	A11		;-W1
	ADD	A13,A11		;+XSCAN
	SLL	3,A11		;CORRECT FOR PIXEL ADDRESSING
	MOVI	-8,A3		;HINC1
*
*SCAN COLLISION BOX AREA
*
*A0= TEMP DATA HOLDER
*A1= WIDTH COUNTER XSCAN
*A2=H INCREMENT IMAGE 0
*A3=H INCREMENT IMAGE 1
*A4=INDEX TO IMAGE 0
*A5=V INCREMENT IMAGE 0
*A6=INDEX TO IMAGE 1
*A7=IMAGE 1 DATA HEADER POINTER
*A8=IMAGE 1 OBJECT POINTER
*A9=IMAGE 0 DATA HEADER POINTER
*A10=IMAGE 0 OBJECT POINTER
*A11=V INCREMENT IMAGE 1
*A13=WIDTH COUNT XSCAN
*A14=HEIGHT COUNT YSCAN
*
CSH:
	CMPI	080H,A14	  	;NO SCAN IF XSCAN, YSCAN VALUES OUT OF RANGE
	JRHS	CSFAIL
	CMPI	080H,A13
	JRHS	CSFAIL
	PUSHST
	DINT			;STOP DMA FUCK
	MOVE	@INTENB,A0,W
	ANDNI	X1E,A0
	MOVE	A0,@INTENB,W
	POPST
CSH0:	
	MOVE	@DMACTRL,A0,W	;DMA BUSY?
	JRN	CSH0		;YES, WAIT
CSH1:
	MOVE	A13,A1		;LOAD LINE COUNTDOWN HORIZ COUNTER
CSHL:	MOVB	*A4,A0		;CHECK IMAGE 0 CORRESPONDING NON ZEROES
	JREQ	CSNXH
	MOVB	*A6,A0		;CHECK IMAGE 1
	JRNE	CSHIT		;GOT A HIT
CSNXH:
	ADD	A2,A4		;ADD HORIZ INCREMENTS HINC0
	ADD	A3,A6		;HINC1
	DSJS	A1,CSHL		;LOOP UNTIL HOR LINE DONE

	ADD	A5,A4		;ADD VERT INCREMENTS
	ADD	A11,A6
	DSJS	A14,CSH1		;LOOP UNTIL VERT DONE
CSFAIL:
	MOVE	B13,B13
	JRZ	CSFNODMA	;DON'T REACTIVATE DMA INTS
	PUSHST
	DINT
	MOVE	@INTENB,A0,W
	ORI	X1E,A0
	MOVE	A0,@INTENB,W
	POPST
****	EINT
CSFNODMA
	CLRC
	JRUC	CSHXXX
CSHIT: 
	MOVE	B13,B13
	JRZ	CSFLAGS		;DON'T REACTIVATE DMA INTS
	PUSHST
	DINT
	MOVE	@INTENB,A0,W
	ORI	X1E,A0
	MOVE	A0,@INTENB,W
	POPST
****	EINT
CSFLAGS
	SETC
CSHXXX:
	MMFM	SP,B0,B1
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	RETS

**************************************************************************
*                                                                        *
* COLLISION CHECK IN 3-SPACE, SCAN STOPS AFTER FIRST COLLISION.		 *
*   THIS SCAN WILL NOT CALL ANY COLLISION VECTORS.			 *
*	THE OBJECT IN A0'S COLLISION CUBE IS CREATED USING THE YSIZ,ZSIZ *
*	OF THE OBJECT AND A FUDGED X SIZE.				 *
*	ALSO, XVAL & YVAL ARE USED RATHER THAN THE DMA UPPER LEFT.	 *
* A0 =POINTER TO OBJECT BLOCK OF OBJECT TO BE CHECKED(OBJECT 0)		 *
* A1 =POINTER TO SUPPLEMENTAL LIST TO SCAN AGAINST (OBJECT 1)		 *
* RETURN(S)								 *
* Z BIT - J*NE = COLLISION, J*EQ = NO COLLISION				 *
*  CASE: COLLISION 							 *
*  A5 = [ULY,ULX] OF OBJECT 1						 *
*  A6 = [LRY,LRX] OF OBJECT 1						 *
*  A7 = [INZ,OUTZ] OF OBJECT 1						 *
*  A8 = PTR TO OBJECT COLLIDED WITH					 *
*  CASE: NO COLLISION							 *
*  A5-A7 = GARBAGE							 *
*  A8 = NULL								 *
*                                                                        *
**************************************************************************
COLSCAN1
	MMTM	SP,A0,A2,A3,A4,A9,A11,A13,A14
	CLR	A11			;CLEAR COLLISION FLAG
	MOVE	A8,A5
	MOVE	A0,A8
	CALLA	GETANIXY		;GET THE ANIMATION POINT
	SWAP	A5,A8
	MOVE	*A0(OYPOS),A2,W
	SLL	16,A2
	SRL	16,A3
	MOVX	A3,A2
	MOVE	A2,A3			;COPY FOR LOWER
	SUBK	12,A2			;A2 = [ULY,ULX]
	MOVE	*A0(OSIZEY),A4,W
	SLL	16,A4
	ADDK	12,A4			;ADD SIZE FUDGE FACTOR
	ADDXY	A4,A3			;A3 = [LRY,LRX]
	MOVE	*A0(OZPOS),A4,W		;GET Z MIDPOINT
	MOVE	A4,A5
	MOVE	*A0(OZMINUS),A14,W	;GET Z SIZE IN NEGATIVE DIRECTION
	SUB	A14,A5			;INWARD Z
	MOVE	*A0(OZPLUS),A14,W	;Z SIZE IN POSITIVE DIRECTION
	ADD	A14,A4 			;OUTWARD Z
	SLL	16,A4
	MOVX	A5,A4			;A4 = [OUTZ,INZ]
	MOVE	*A1,A8,L		;GET OBJECT LIST
	JRZ	COLSCANX		;LIST IS NULL
COLSCANP:
	MOVE	*A8(OFLAGS),A14,W	
	BTST	B_NOCOLL,A14		;IS THIS DUDE COLLIDABLE?
	JRNE	COLSCANNO		;BR = NO, DON'T WORRY ABOUT HIM
	SLL	28,A14
	JRZ	COLSCANNO		;NOT TURNED ON
	CMP	A0,A8
	JREQ	COLSCANNO		;BR = SAME DAMN OBJECT DUDE
	MOVE	*A8(ODMAXY),A5,L	;GET OBJECT 1 ULY,ULX
	JREQ	COLSCANNO		;BR = DON'T MESS
	CMPXY	A3,A5			;COMPARE 0:(LRX,LRY) TO 1:(ULX,ULY)
	JRXGE	COLSCANNO
	JRYGE	COLSCANNO
	MOVE	*A8(OSIZE),A14,L	;GET DISPLAYED SIZE
	MOVE	A5,A6
	ADDXY	A14,A6			;OBJECT 1 LRX,LRY
	CMPXY	A2,A6			;COMPARE 0:(ULX,ULY) TO 1:(LRX,LRY) 
	JRXLE	COLSCANNO
	JRYLE	COLSCANNO
*CHECK FOR Z COLLISION
	MOVE	*A8(OZPOS),A7,W		;GET Z MIDPOINT
	MOVE	A7,A13
	MOVE	*A8(OZPLUS),A14,W	;GET Z SIZE IN NEGATIVE DIRECTION
	ADD	A14,A13			;OUTWARD Z
	MOVE	*A8(OZMINUS),A14,W	;Z SIZE IN POSITIVE DIRECTION
	SUB	A14,A7 			;INWARD Z
	SLL	16,A7
	MOVX	A13,A7			;A7 = [INZ,OUTZ]
	CMPXY	A7,A4
	JRXGE	COLSCANNO		;INWARD Z0 >= OUTWARD Z1
	JRYLE	COLSCANNO		;OUTWARD Z0 <= INWARD Z1
	INC	A11			;COLLISION
COLSCANX:
	MOVE	A11,A11
	MMFM	SP,A0,A2,A3,A4,A9,A11,A13,A14
	RETS
COLSCANNO:
	MOVE	*A8(OSLINK),A8,L
	JRNZ	COLSCANP
	JRUC	COLSCANX

**************************************************************************
*                                                                        *
* CKOBJXY - CHECK FOR A COLLISION BETWEEN TWO OBJECTS IN THREE SPACE.	 *
* 	    A0 OBJECT USES A FUDGED XSIZ CENTERED BY THE ANIMATION PNT.	 *
* 	    AND WITH FUDGED SIZE. POSITIONS ARE TAKEN FROM XVAL & YVAL.  *
* A0 = OBJECT TO CHECK							 *
* A5 = [ULY,ULX] TO CHECK AGAINST					 *
* A6 = [LRY,LRX] TO CHECK AGAINST					 *
* A7 = [INZ,OUTZ] TO CHECK AGAINST 					 *
* RETURNS:								 *
* A0 INTACT								 *
* Z BIT SET, NO COLLISION(JxEQ)						 *
* Z BIT CLR, COLLISION(JxNE)						 *
*                                                                        *
**************************************************************************
CKOBJXY
	MMTM	SP,A1,A2,A3,A4,A8,A11,A14
	CLR	A11			;CLEAR COLLISION FLAG
	MOVE	A0,A8
	CALLA	GETANIXY		;GET THE ANIMATION POINT
	MOVE	*A0(OYPOS),A2,W
	SLL	16,A2
	SRL	16,A3
	MOVX	A3,A2
	MOVE	A2,A3			;COPY FOR LOWER
	SUBK	12,A2			;A2 = [ULY,ULX]
	MOVE	*A0(OSIZEY),A4,W
	SLL	16,A4
	ADDK	12,A4			;ADD SIZE FUDGE FACTOR
	ADDXY	A4,A3			;A3 = [LRY,LRX]
	MOVE	*A0(OZPOS),A4,W		;GET Z MIDPOINT
	MOVE	A4,A1
	MOVE	*A0(OZMINUS),A14,W	;GET Z SIZE IN NEGATIVE DIRECTION
	SUB	A14,A1			;INWARD Z
	MOVE	*A0(OZPLUS),A14,W	;Z SIZE IN POSITIVE DIRECTION
	ADD	A14,A4 			;OUTWARD Z
	SLL	16,A4
	MOVX	A1,A4			;[OUTZ,INZ]
*SCAN FOR A 2D BOX COLLISION
	CMPXY	A3,A5			;COMPARE 0:(LRX,LRY) TO 1:(ULX,ULY)
	JRXGE	CKOBJXYN
	JRYGE	CKOBJXYN
	CMPXY	A2,A6			;COMPARE 0:(ULX,ULY) TO 1:(LRX,LRY) 
	JRXLE	CKOBJXYN
	JRYLE	CKOBJXYN
*CHECK FOR Z COLLISION
	CMPXY	A7,A4
	JRXGE	CKOBJXYN		;INWARD Z0 >= OUTWARD Z1
	JRYLE	CKOBJXYN		;OUTWARD Z0 <= INWARD Z1
	INC	A11			;COLLISION
CKOBJXYN
	MOVE	A11,A11
	MMFM	SP,A1,A2,A3,A4,A8,A11,A14
	RETS


**************************************************************************
*                                                                        *
* COLLISION DETECT PROCESS FOR THE PLAYERS				 *
*                                                                        *
**************************************************************************
*
*THIS PROCESS WILL ADJUST THE PLAYER IN BOUNDS IF THEY ARE OUT, EVERY
*SECOND, AND SCAN FOR PLAYER COLLISIONS EVERY TICK.
CPCOLADJ
	CLR	A0
	MOVE	A0,*A13(PDATA),W	;KEEP THE PLAYER RESET COUNTER HERE
CPDETECT
	SLEEP	1
*CHECK TO SEE IF WE SHOULD ADJUST PLAYERS IN BOUNDS
	MOVE	*A13(PDATA),A0,W
	INC	A0
	CMPI	60,A0			;READY TO RESET?
	JRLO	CPDRS1			;BR = NO
	MOVI	P1DATA,A2
	CALLA	P_INBNDS		;SHOULD WE RESET PLAYER 1?
	JRNC	CPDNRS1			;BR = NO
	CALLA	CKLBADJ			;COME TO ME PLAYER 1
CPDNRS1
	MOVI	P2DATA,A2
	CALLA	P_INBNDS		;HOWS ABOUT PLAYER 2
	JRNC	CPDNRS2			;BR = NO
	CALLA	CKLBADJ			;BRING PLAYER 2 INTO THE LIGHT
CPDNRS2
	CLR	A0			;NOW RESET THE ADJUST COUNTER	
CPDRS1
	MOVE	A0,*A13(PDATA),W

	MOVI	PLAYERS,A0		
	MOVE	*A0,A0,L
	JREQ	CPD3			;THERE ARE NO PLAYERS
	JRUC	CPD2
CPD1	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CPD3			;END OF LIST
CPD2
	CALLR	PRESCAN0
	JRNC	CPD1
	MOVI	ENEMY_BULLETS,A1
	CALLR	COLXYZP
	JRNE	CPD3
	MOVI	EXPLOSIONS,A1
	CALLR	COLXYZP
	MOVI	CARLIST,A1
	CALLR	COLXYZP
	JRUC	CPD1			;CONTINUE PROCESSING
CPD3
	MOVI	PLAYER_BULLETS,A0		
	MOVE	*A0,A0,L
	JREQ	CPDETECT		;SCAN BULLETS AGAINST BULLETS
	JRUC	CPD5
CPD4	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CPDETECT		;END OF LIST
CPD5
	CALLR	PRESCAN0
	JRNC	CPD4

	MOVI	CARLIST,A1
	CALLR	COLXYZP
	JRNE	CPDETECT

	MOVI	ENEMIES,A1
	CALLR	COLXYZP
	JRNE	CPDETECT

	MOVI	ENEMY_BULLETS,A1
	CALLR	COLXYZP
	JRNE	CPDETECT

	MOVI	BACKSLST,A1
	CALLR	COLXYZP
	JRNE	CPDETECT

	MOVI	PLAYERS,A1
	CALLR	COLXYZP
	JRNE	CPDETECT

	MOVI	EXPLOSIONS,A1
	CALLR	COLXYZP
	JRNE	CPDETECT

	JRUC	CPD4			;CONTINUE PROCESSING

**************************************************************************
*                                                                        *
* ENEMY COLLISION DETECT PROCESS					 *
*                                                                        *
**************************************************************************
CEDETECT
	SLEEP	3
	MOVI	ENEMIES,A0
	MOVE	*A0,A0,L
	JREQ	CEDETECT		;THERE ARE NO ENEMIES
	JRUC	CED2
CED1	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CEDETECT		;END OF LIST
CED2
	CALLR	PRESCAN0
	JRNC	CED1
	MOVI	PLAYERS,A1
	CALLR	COLXYZP
	MOVI	EXPLOSIONS,A1
	CALLR	COLXYZP
	MOVI	CARLIST,A1
	CALLR	COLXYZP
	JRUC	CED1			;CONTINUE PROCESSING

**************************************************************************
*                                                                        *
* CBDETECT - BACKGROUND COLLISION DETECT PROCESS			 *
*                                                                        *
**************************************************************************
CBDETECT
	SLEEP	3
	MOVI	BACKSLST,A0
	MOVE	*A0,A0,L
	JREQ	CBDTECT1		;THERE ARE NO BACKGROUND OBJECTS
	JRUC	CBD2

CBD1	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CBDTECT1		;END OF LIST
CBD2
	CALLR	PRESCAN0		;THRASHES A3-A6,A14
	JRNC	CBD1			;DON'T SCAN	
	MOVI	ENEMY_BULLETS,A1
	CALLR	COLXYZP			;SCAN AGAINST BULLETS
	MOVI	PLAYERS,A1
	CALLR	COLXYZP			;SCAN AGAINST PLAYERS
	MOVI	ENEMIES,A1
	CALLR	COLXYZP			;SCAN AGAINST ENEMIES
	MOVI	CARLIST,A1
	CALLR	COLXYZP			;SCAN AGAINST ENEMIES
	MOVI	EXPLOSIONS,A1
	CALLR	COLXYZP			;SCAN AGAINST BULLETS
	JRUC	CBD1			;CONTINUE PROCESSING

CBDTECT1
	MOVI	BOOTY,A0
	MOVE	*A0,A0,L
	JREQ	CBDETECT		;THERE IS NO BOOTY 
	JRUC	CBD4
CBD3	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CBDETECT		;END OF LIST
CBD4
	CALLR	PRESCAN0		;THRASHES A3-A6,A14
	JRNC	CBD3			;DON'T SCAN	

	MOVI	PLAYERS,A1
	CALLR	COLXYZP			;SCAN FOR FIRST COLLISION
	JRNE	CBDETECT

	MOVI	CARLIST,A1
	CALLR	COLXYZP			;NOW AGAINST VEHICLES
	JRNE	CBDETECT

	MOVI	EXPLOSIONS,A1
	CALLR	COLXYZP			;ENEMY BULLETS

	JRUC	CBD3			;CONTINUE PROCESSING

**************************************************************************
*                                                                        *
* CEBDETCT - ENEMY BULLET COLLISION DETECT ROUTINE			 *
*                                                                        *
**************************************************************************
CEBDETCT
	SLEEP	4
	MOVI	EXPLOSIONS,A0
	MOVE	*A0,A0,L
	JREQ	CEXDETCT		;THERE ARE NO EXPLOSIONS
	JRUC	CEBD2
CEBD1	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CEXDETCT		;END OF LIST
CEBD2
	CALLR	PRESCAN0		;THRASHES A3-A6,A14
	JRNC	CEBD1			;DON'T SCAN	

	MOVI	CARLIST,A1
	CALLR	COLXYZP
	JREQ	CEBD1			;CONTINUE PROCESSING

CEXDETCT
	MOVI	ENEMY_BULLETS,A0
	MOVE	*A0,A0,L
	JREQ	CEBDETCT		;THERE ARE NO ENEMY BULLETS
	JRUC	CEXD2
CEXD1	MOVE	*A0(OSLINK),A0,L	;SCAN ENEMY LIST FOR OBJECTS
	JREQ	CEBDETCT		;END OF LIST
CEXD2
	CALLR	PRESCAN0		;THRASHES A3-A6,A14
	JRNC	CEXD1			;DON'T SCAN	

	MOVI	CARLIST,A1
	CALLR	COLXYZP
	JRNE	CEBDETCT
	JRUC	CEXD1

	.END
