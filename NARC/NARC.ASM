	.FILE	'NARC.ASM'
	.TITLE	" <<< N  A  R  C  -- 1.0  EPJ & GNP 8/1/87 >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**************************************************************************
*                                                                        *
* 			N A R C						 *
* 			-------						 *
* 									 *
* 	DESIGNED BY:	EUGENE P. JARVIS				 *
* 		   	GEORGE N. PETRO					 *
* 		   	TODD R. ALLEN					 *
* 			JACK E. HAEGER					 *
* 									 *
* 	PROGRAMMED BY:	EUGENE P. JARVIS				 *
* 		   	GEORGE N. PETRO					 *
* 		   	TODD R. ALLEN					 *
* 		   	LAWRENCE E. DEMAR				 *
* 									 *
* 	ARTWORK BY:	JACK E. HAEGER					 *
* 			JOHN R. NEWCOMER				 *
* 			LIN YOUNG					 *
* 			TIMOTHY J. ELLIOT				 *
* 									 *
* 	Z-UNIT BY:	MARK "THE LARGE ONE" LOFFREDO			 *
* 			GLENN A. MILLION (SHIPP)			 *
* 									 *
* 	STARTED:	8/1/87						 *
* 	RELEASED 2.00:	1/16/89						 *
* 									 *
* 	COPYRIGHT (C) 1988 WILLIAMS ELECTRONICS GAMES, INC. 		 *
* 	ALL RIGHTS RESERVED.						 *
* 									 *
* 	11/22/88 - GNP							 *
* 	SEE NARCREVS.DOC FOR REVISION LIST.				 *
*                                                                        *
**************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"\video\MPROCEQU.ASM"	;MPROC equates
	.INCLUDE	"\video\DISPEQU.ASM"	;Display processor equates
	.INCLUDE	"\video\GSP.INC"	;GSP assembler equates
	.INCLUDE	"\video\SYS.INC"	;Zunit system equates
	.INCLUDE	"\video\MACROS.HDR"	;Macros, Yeah!
*	LOCAL STUFF
	.INCLUDE	"NARCEQU.ASM"		;NARC Equates
	.INCLUDE	"NARCAUDN.ASM"		;NARC Audit Equates
	.INCLUDE	"IMGTBL.GLO"		;Image Label Equates
****	.INCLUDE	"BGNDTBL.GLO"		;Background Block Equates			

*
*GLOBALS IN THIS FILE
	.GLOBAL	NRAMINIT,WARMSET,SURVCNT,ADDBUY,CLRGCARD,CLRMBIGS
	.GLOBAL	ROM_CHK, CPU_CHK, SW_CHK, COL_BARS, CROSS_H, BURN_IN
*
*EXTERNALS
	.GLOBAL	E_GAME,TOD_TAB,INIT_TAB,ALL_TAB,ISHSTD,CRCMESS
	.GLOBAL	DIAG,CHK_CMOS,GET_ADJ,AUD,AUD1,CASHBUT,KILLCHOY
	.GLOBAL	LCOIN,RCOIN,CCOIN,SLAM_SW,CR_STRTP,CR_CONTP,P_START,P_CONT
	.GLOBAL	CRED_P,CRD_SCRN,ADD_DUMP,GAMEOTXT,AUDPLWAV, RT_RET, UNIT_CLR
	.GLOBAL	GET_AUD,DEF_PAGE,ROM_RET,OUTMBIGS,C_FLAGS,PBOMBP1,PBOMBP2
	.GLOBAL	CPCOLADJ,PIXQINIT,CLRSNDDB

*************************************************************************
*        SCROLLING / FADING GLOBALS                                    ;*
*                                                                      ;*
	.GLOBAL	        SCRL_GO, SCRL_SRT, SCRL_END
         .GLOBAL         SCRL_DIV, SCRL_DIR, SCRL_FRC                  ;*
         .GLOBAL         Y_CORR, FADE_RAM                              ;*
*                                                                      ;*
*        END OF SCROLLING / FADING GLOBALS                             ;*
*************************************************************************
*************************************************************************
*        SCROLLING / FADING RAM                                        ;*
*                                                                      ;*
         .BSS    SCRL_GO,16                                            ;*
         .BSS    SCRL_SRT,16                                           ;*
         .BSS    SCRL_END,16                                           ;*
         .BSS    SCRL_DIV,16                                           ;*
         .BSS    SCRL_DIR,16                                           ;*
         .BSS    SCRL_FRC,32      ;FRAME COUNTER FOR SCROLL            ;*
         .BSS    Y_CORR,32                                             ;*
         .BSS    FADE_RAM,32       ;POINTER TO PALETTE RAM TO DIM      ;*
*                                                                      ;*
*        END OF SCROLLING / FADING RAM                                 ;*
*************************************************************************

	.BSS	MAINLED,16
	.BSS	IRQLED,16
	.BSS	SINTRAM,16	;TEMP FOR LAST SCORE AREA INTERRUPT LINE
	.BSS	SURVCNT,16	;GAME MODE RECYCLE SURVIVAL COUNT
	.BSS	WDOGRAM,32	;INITIALIZED LONG FOR WATCH DOG DETECT
	.BSS	SPTEMP,32	;STACK PTR TEMP FOR DIAGNOSTICS

WDOGNUM	.SET	01A2B3C4DH	;"SYSTEM INITIALIZED" MARKER

	.EVEN
	.TEXT

*
*JUMP VECTORS FOR TEST HOOK RETURNS
*
ROMTRET	JAUC	ROMTESTR
CPUTRET	JAUC	CPUTESTR
SWTRET	JAUC	SWTESTR
CBTRET	JAUC	COLORBRR
CHTRET	JAUC	CROSSHCHR	
POWRRET	JAUC	SETUP			;MAKE THIS LAST
*
*MAKE SURE WE'RE IN THE FFF0 ROM
	.SECT	"POWERON"
*
*POWER UP ENTRY POINT FOR FINAL VERSION
POWERUP:	
	DINT
	SETF	16,1,0	;WORD SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVI	STCKST,SP,L
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	A0,@SYSCOPY,W		;KEEP A COPY IN RAM
	MOVE	@WDOGRAM,A0,L		;GET THE DOG INITIALIZATION
	CMPI	WDOGNUM,A0		;BEEN HERE BEFORE?
	JRNE	NEWSETUP		;NO
	AUDIT	AUDDOGGY		;CLICK A WATCH DOG RESET
	CALLERR2  0			;LOG SOME SHIT	
NEWSETUP
	JAUC	PWRONTST	

	.WORD	0,0,0,0			;RESERVED WORDS FOR FFF0 CKSUM PATCH

	.STRING	"NNAARRCC  CCOOPPYYRRIIGGHHTT  ((CC))  11998888  "
    .STRING "WWIILLLLIIAAMMSS  EELLEECCTTRROONNIICCSS  GGAAMMEESS,,  IINNCC.."  
	.EVEN

	.TEXT
*
*SYSTEM INITIALIZE AFTER POWER ON TESTING IS DONE
*
SETUP:	
	DINT
	SETF	16,1,0	;WORD SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVI	STCKST,SP,L

	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	A0,@SYSCOPY,W		;KEEP A COPY IN RAM

	CALLR	WDOGDIS			;DISABLE WATCH DOG

	CALLA	CLRPINIT
	CREATE	INDPID,CHK_CMOS
	MOVI	INDIAG,A0
	MOVE	A0,@GAMSTATE,W
	CALLA	CRINIT			;INIT COLOR RAM 
	JRUC	ALLSET
*CHECK OUT AUDIT PAGE
WARMSET
	DINT
	SETF	16,1,0	;WORD NO SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVI	STCKST,SP,L
	CALLA	CLRPINIT
	MOVI	INAMODE,A0
	MOVE	A0,@GAMSTATE,W
	MOVI	WDOGNUM,A0
	MOVE	A0,@WDOGRAM,L		;MARK SYSTEM AS INITIALIZED 
*RESET THE SOUND BOARD
	CALLA	SNDRES
ALLSET
	CALLR	INITIO			;INITIALIZE THE I/O REGS
*SET UP TI PIXEL PROCESSING REGS
	CALLA	SETPPROC
*INIT COLOR RAM 
	CLR	A0
	MOVE	A0,@DMACTRL	  	;OFF DMA
	MOVE	A0,@CMAPSEL		;CLEAR COLOR MAP SELECT
	MOVE	A0,@IRQLED
	MOVE	A0,@MAINLED

*CLEAR THE ENTIRE BITMAP
	CALLA	SCRCLR
*INITIALIZE RANDOM SEED
	MOVI	81261A8CH,A0
	MOVE	A0,@RAND,L
*ENABLE DISPLAY, EXT1 INTERRUPT
	MOVI  	DIE,A0
	MOVE  	A0,@intenb		;enable display interrupts
*INITIALIZE SWITCH STACK
	MOVI	SWSTST,A0
	MOVE	A0,@SWSTACK,L
*PREVIOUS SWITCH SCAN OFF PLEASE
	MOVI	0FFFFh,A0
	MOVE	A0,@PSWTMP1
*INITIALIZE SYSTEM CONTROL REGISTER
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	A0,@SYSCOPY,W		;KEEP A COPY IN RAM
*CLEAR OUT TODAYS HIGH SCORES
	MOVI	TOD_TAB,A8           ;ALWAYS CLEAR OUT TODAYS TABLE
	CALLA	INIT_TAB
*CLEAR ALL PLAYER DATA AREAS
	CALLR	CLRALLPD
*INITIALIZE SCORE AREA INTERRUPT RAM
	MOVI	SCOREINT,A0
	MOVE	A0,@SINTRAM,W
*
*PROCESS TEST LOOP
*
MAIN:
***	CALLA	PINIT 		;INIT PROCESS LIST
	CALLA	MYOINIT		;INITIALIZE THE OBJECT LIST
	EINT			;ENABLE INTERRUPTS AND WE'RE OFF

	CALLA	ATSTRT		;START ATTRACT MODE
MAINLP:	
	CALLA	PRCDSP		;DISPATCH PROCESSES
	MOVE	A13,A13
	JRZ	MAINPOK
	CALLERR	0		;LOG PRE-MATURE RETURN ERROR
MAINPOK
	CALLA	SNDPRC		;PROCESS THE SOUNDS
*
*UNSTACK THE SWITCHES  (EXEC LOOP)
*
	MOVI	ACTIVE,A13,L
	MOVE	@SWSTACK,A3,L
UNSTKL	CMPI	SWSTST,A3,L	;STACK AT START?
	JREQ	UNSTKX		;YES, EXIT
	MOVE	@FREE,A0,L
	JRZ	UNSTKX		;NO PROCESSES LEFT, TRY NEXT TIME AROUND
	MOVE	*A3+,A0,W	;GET ENTRY
	MOVE	A3,@SWSTACK,L	;UPDATE STACK
	MOVE	A0,A2
	ADD	A0,A2
	ADD	A0,A2		;MULT BY 3
	SLL	4,A2		;ADJUST FOR WORD SIZE (16)
	ADDI	SWTAB,A2
	MOVE	*A2+,A1		;GET PID
	MOVE	*A2+,A7,L	;GET STARTING ADDR
	JREQ	UNSTKL 		;NULL ENTRY
	CALLA	GETPRC
	JRUC	UNSTKL
UNSTKX:	
	CALLA	RANDOM		;NEW SEED PLEASE

	MOVE	@MAINLED,A0,W
	INC	A0
	MOVE	A0,@MAINLED,W
	CMPI	5,A0
	JRLT	MAINLP
	CLR	A0
	MOVE	A0,@MAINLED,W

	PUSHST
	DINT
	MOVE	@SYSCOPY,A0,W	;BLINK L.E.D. TO ACK OPERATION
	XORI	9000H,A0
	MOVE	A0,@SYSCOPY,W
	MOVE	A0,@SYSCTRL,W
	POPST
	JRUC	MAINLP

**************************************************************************
*                                                                        *
* WDOGDIS - WATCH DOG DISABLE						 *
* NOTE: CALL WHILE INTERRUPTS ARE TURNED OFF.				 *
*                                                                        *
**************************************************************************
WDOGDIS
	MMTM	SP,A0,A1,A2,A3
	MOVI	WDISTAB,A1	
	MOVK	1,A3
	MOVE	@SYSCOPY,A2,W
	MOVE	*A1+,A0,W		
WDOGSL
	OR	A2,A0	
	MOVE	A0,@SYSCTRL,W
	XOR	A3,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	*A1+,A0,W
	JRNN	WDOGSL
	MOVE	A2,@SYSCTRL,W
	MMFM	SP,A0,A1,A2,A3
	RETS
*
*WATCH DOG DISABLE TABLE
WDISTAB
	.WORD	0
	.WORD	0
	.WORD	0
	.WORD	0

	.WORD	2
	.WORD	0
	.WORD	2
	.WORD	0
	.WORD	0FFFFH

**************************************************************************
*                                                                        *
* CLRPINIT - CLEAR SCRATCH PAD AND THEN PINIT				 *
* NOTE: DESTROYS A0,A1,A2,A3						 *
*                                                                        *
**************************************************************************
CLRPINIT
	PULL	A3
*CLEAR SCRATCHPAD RAM
	CLR	A0
	MOVI	SCRATCH,A1,L
	MOVI	>8000,A2,L	  	;CLEAR TWO AT A TIME
SCTLP	MOVE	A0,*A1+,L
	DSJS	A2,SCTLP
	CALLA	PINIT	
	JUMP	A3

**************************************************************************
*                                                                        *
* PxSTART - PLAYER START SWITCH PROCESSES				 *
*                                                                        *
**************************************************************************
*PLAYER 1 START
P1START
	MOVI	P1DATA,A2
	JRUC	PXSTART
*PLAYER 2 START
P2START
	MOVI	P2DATA,A2
	JRUC	PXSTART
PXSTART
	MOVE	@GAMSTATE,A0,W
	CMPI	INDIAG,A0
	JRNE	P1STARTG
	DIE
P1STARTG
	CALLR	ADDBUY
	MOVE	*A2(PBUYINS),A4,W
	JRZ	PDIE1
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	PXSTART1	;ATTRACT MODE ALWAYS STARTS
	MOVE	*A2(POBJ),A4,L
	JREQ	PXSTART1	;BR = NO PLAYER EXISTS YET, TRY TO START
	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5	
	JREQ	PDIE1		;THIS GUY IS NOTHING, NOBODY, NOHOW!
PXSTART1
	MOVE	*A2(PSCORE),A0,L
	JRZ	PXSTRT		;NO SCORE, THIS IS A VIRGIN START
	MOVE	@GAMSTATE,A0,W
	CMPI	INGAMEOV,A0
	JREQ	PXSTRT
	CMPI	INAMODE,A0
	JREQ	PXSTRT
	CALLA	CR_CONTP	;CONTINUATION, UGH, CALL/CC
	JRLO	PDIE1
	CALLA	P_CONT
	JRUC	P1STARTA
PXSTRT
	CALLA	CR_STRTP
	JRLO	PDIE1
	CALLA	P_START
P1STARTA
	CMPI	P1DATA,A2
	JRNE	P2STARTA
	MOVE	A4,A4
	JREQ	P1GAME		;ATTEMPT TO START PLAYER ONE
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	P1GAME		;BR = GAME IS OVER COLD START
	CMPI	INGAMEOV,A0
	JREQ	P1GAME		;BR = GAME IS OVER COLD START
	JRUC	P1BUYIN		;BUY IN TIME
P2STARTA
	MOVE	A4,A4
	JREQ	P2ONLY		;ATTEMPT TO START PLAYER ONE
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	P2ONLY		;BR = GAME IS OVER COLD START
	CMPI	INGAMEOV,A0
	JREQ	P2ONLY		;BR = GAME IS OVER COLD START
	JRUC	P2BUYIN		;BUY IN TIME
PDIE1
	JAUC	SUCIDE

**************************************************************************
*                                                                        *
* ADDBUY - CHECK TO SEE IF THIS IS A VIRGIN GAME START.			 *
*                                                                        *
**************************************************************************
ADDBUY
	PUSH	A0
	MOVE	@GAMSTATE,A0,W
	CMPI	INGAMEOV,A0
	JREQ	ADDBUY1
	CMPI	INAMODE,A0
	JRNE	ADDBUYX
ADDBUY1
	MOVI	IBUYINS,A0
	MOVE	A0,@P1DATA+PBUYINS,W
	MOVE	A0,@P2DATA+PBUYINS,W
ADDBUYX
	PULL	A0
	RETS
**************************************************************************
*                                                                        *
* SYSTEM ROUTINES AND PROCESSES						 *
*                                                                        *
**************************************************************************
       
*NARC RAM INITIALIZATION
NRAMINIT
	MMTM	SP,A0,A1,A2	
	MOVI	NRAMSTRT,A1
	MOVI	NRAMEND,A2
	JRUC	RAMINIT
*GAME RAM INITIALIZATION
GRAMINIT
	MMTM	SP,A0,A1,A2	
	MOVI	GRAMSTRT,A1
	MOVI	GRAMEND,A2
	JRUC	RAMINIT
*WAVE RAM INITIALIZATION
WRAMINIT
	MMTM	SP,A0,A1,A2	
	MOVI	WRAMSTRT,A1
	MOVI	WRAMEND,A2
RAMINIT
	CLR	A0
RAMLOOP
	MOVE	A0,*A1+,W	;16 BITS AT A TIME, NO EXTRANEOUS CLEARS
	CMP	A2,A1		;DONE?
	JRLO	RAMLOOP		;NO!
	MMFM	SP,A0,A1,A2
	RETS

**************************************************************************
*                                                                        *
* SYSINITL - INITIALIZE LOW BYTE OF SYSTEM CONTROL REGISTER		 *
*                                                                        *
**************************************************************************
SYSINITL
	MMTM	SP,A0,A1
	MOVE	@SYSCOPY,A0,W
	MOVI	SYSCINIT,A1
	SLL	24,A1
	SRL	24,A1
	OR	A1,A0
	MOVE	A0,@SYSCOPY,W		;RE-INITIALIZE SYSTEM CONTROL REG
	MOVE	A0,@SYSCTRL,W
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* TWO PLAYER GAME START							 *
* IF THE GAME IS IN PLAY, THEN PLAYER TWO WILL BE ADDED, OTHERWISE	 *
* A NEW 2 PLAYER GAME WILL RESULT.					 *
**************************************************************************
P2ONLY
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	GAUD2STR		;COLD START PLAYER 2
	MOVE	@GAMSTATE,A0,W
	CMPI	INGAMEOV,A0
	JRNE	G2STRBUY		;GAME IN SESSION
GAUD2STR
	MOVK	2,A2
	AUDIT	AUD2STRT		;AUDIT A PLAYER 2 START
	JRUC	GAMESTR			;AND FIRE UP THE GAME
G2STRBUY
	MOVI	P2DATA,A2
	MOVE	*A2(PSCORE),A0,L
	JRNZ	P2GBUY			;SCORE INDICATES CONTINUE
	AUDIT	AUD2STRT
	JRUC	P2GINIT
P2GBUY
       	AUDIT	AUD2CONT
P2GINIT
	MOVI	P2PID,A0
	MOVI	0FF00h,A1
	CALLA	KILALL			;KILL ALL PLAYER 2 SUBORDINATES

	CALLA	P2LLINIT
	JRNZ	P2GAMEB			;FAILED SOMEWHERE
	MOVE	A2,A11
	CREATE	P2PID|PMPID,PRESCONT	;START THE PRESS MESSAGE
	JRUC	P2GAMEDI
P2GAMEB
	MOVE	@NPLYRS,A0,W
	INC	A0
	MOVE	A0,@NPLYRS,W		;KICK THE PLAYER COUNT
	CALLA	AUDPLWAV		;SHOW THIS GUY THE WAY IN
	SOUND1	PLYINSND
	JRUC	P2MIDGAM
*
*PLAYER 2 BUYIN
P2BUYIN
	AUDIT	AUD2CONT
	MOVI	P2PID,A0
	MOVI	0FF00h,A1
	CALLA	KILALL			;KILL ALL PLAYER 2 SUBORDINATES
	CALLA	PLREINIT		;JUST DO A REINIT
P2MIDGAM
	MOVE	@GAMSTATE,A0,W
	CMPI	INMSU,A0
	JREQ	P2MIDG1
****	CALLA	P2SSAREA		;CLEAR THE AREA
	CALLA	UPDSL			;UPDATE STATUS
P2MIDG1
P2GAMEDI
	JAUC	SUCIDE
**************************************************************************
* ONE PLAYER GAME START							 *
* IF THE GAME IS IN PLAY, PLAYER ONE WILL BE ADDED, OTHERWISE A NEW      *
* ONE PLAYER GAME WILL RESULT.						 *
**************************************************************************
P1GAME
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	GAUD1STR		;COLD START GAME, PLAYER 1 ONLY
	CMPI	INGAMEOV,A0
	JRNE	G1STRBUY		;GAME IS IN SESSION
GAUD1STR
	MOVK	1,A2
	AUDIT	AUD1STRT		;AUDIT A PLAYER 2 START
	JRUC	GAMESTR			;AND FIRE UP THE GAME
G1STRBUY
	MOVI	P1DATA,A2
	MOVE	*A2(PSCORE),A0,L
	JRNZ	P1GBUY			;SCORE, MARK THIS AS A CONTINUE
	AUDIT	AUD1STRT
	JRUC	P1GINIT
P1GBUY
       	AUDIT	AUD1CONT
P1GINIT
	MOVI	P1PID,A0
	MOVI	0FF00h,A1
	CALLA	KILALL			;KILL ALL PLAYER 1 PROCESSES

	CALLA	P1LLINIT
	JRNZ	P1GAMEB
	MOVE	A2,A11			;FAILURE MODE
	CREATE	P1PID|PMPID,PRESCONT	;START THE PRESS MESSAGE
	JRUC	P1GAMEDI
P1GAMEB
	MOVE	@NPLYRS,A0,W
	INC	A0
	MOVE	A0,@NPLYRS,W		;KICK THE PLAYER COUNT
	CALLA	AUDPLWAV		;SHOW THIS GUY THE WAY IN
	SOUND1	PLYINSND
	JRUC	P1MIDGAM
*
*ENTRY POINT FOR PLAYER 1 BUYIN
P1BUYIN
	AUDIT	AUD1CONT
	MOVI	P1PID,A0
	MOVI	0FF00h,A1
	CALLA	KILALL			;KILL ANY PLAYER 1 PROCESSES
	CALLA	PLREINIT 		;JUST DO A REINIT
P1MIDGAM
	MOVE	@GAMSTATE,A0,W
	CMPI	INMSU,A0
	JREQ	P1MIDG1
***	CALLA	P1SSAREA		;CLEAR THE AREA
	CALLA	UPDSL			;UPDATE STATUS
P1MIDG1
P1GAMEDI
	JAUC	SUCIDE

*
*GAME START PROCESS
*A2 = PLAYERS TO START, 0 = NONE?,1 = PLAYER 1,2 = PLAYER 2,3 = BOTH
GAMESTR
	CALLA	SNDRESP
	CALLR	WIPEOUT			;WIPE OUT THE WORLD
	CALLR	GRAMINIT		;INITIALIZE GAME RAM
	CALLR	CLRALLPD		;INITIALIZE PLAYER DATA AREAS

	CLR	A0
	MOVE	A0,@SURVCNT,W		;CLEAR THE SURVIVAL COUNT

	MOVI	INMSU,A0
	MOVE	A0,@GAMSTATE,W		;FLAG THE INTRO

PAUDDUN
	MOVI	P1DATA,A11
	SRL	1,A2
	JRNC	GAME2STR
	CALLA	P1LLINIT
	JRZ	GAME2STR		;BR = PLAYER 1 START FAIL
	MOVE	@NPLYRS,A0,W
	INC	A0
	MOVE	A0,@NPLYRS,W		;KICK THE PLAYER COUNT
GAME2STR
	MOVI	P2DATA,A11
	SRL	1,A2
	JRNC	GAME4STR
	CALLA	P2LLINIT
	JRZ	GAME4STR		;BR = PLAYER 2 START FAIL
	MOVE	@NPLYRS,A0,W
	INC	A0
	MOVE	A0,@NPLYRS,W		;KICK THE PLAYER COUNT
GAME4STR
	MOVI	P1DATA,A2
	MOVI	P1SCRAD,A4
	MOVE	A4,*A2(PSCRAD),L	;SET UP THE SCORE ADDRESS
	MOVI	P1PID,A4
	MOVE	A4,*A2(PPID),W
	MOVI	P2DATA,A2
	MOVI	P2SCRAD,A4
	MOVE	A4,*A2(PSCRAD),L	;SET UP THE SCORE ADDRESS
	MOVI	P2PID,A4
	MOVE	A4,*A2(PPID),W

	MOVK	1,A0
***	MOVK	3,A0
	MOVE	A0,@WAVE,W	;WAVE #1
	JSRP	WAVEINIT	;INITIALIZE THE WAVE BABY
	CALLA	COLRSTRT	;START THE COLORS
GAMSTX
	JAUC	SUCIDE
*PLAYER INITIAL BUYIN START SOUND
PLYINSND .WORD	>F400|>D0,>23,>80D0,0    	;HIGH PRIORITY "LET'S GO!"

**************************************************************************
*                                                                        *
* WIPEOUT - WIPES THE SYSTEM CLEAR OF ALL OTHER PROCESSES, OBJECTS	 *
* 	  AND COORDINATES. IT RETURNS WITH AUTO-ERASE SHUT OFF,		 *
* 	  COLOR RAM CLEARED, AND THE BIT MAP WIPED CLEAN.		 *
* 	  THIS IS NICE TO USE WHEN SWITCHING BETWEEN STUFF.		 *
*		ALSO, NULLS POBJ IN BOTH PLAYERS, SO DON'T USE THIS      *                                                                        *
*			DURING GAME PLAY!				 *
**************************************************************************
WIPEOUT
	MMTM	SP,A0,A1
        CLR     A0
        MOVE    A0,@SCRL_FRC,W		;CLEAR LINKY SCROLL THING
	MOVE	A0,@P1CTRL,W
	MOVE	A0,@P2CTRL,W		;CLEAR PLAYER CPU CONTROLS
	MOVE	A0,@P1DATA+POBJ,L
	MOVE	A0,@P1DATA+PLOBJ,L
	MOVE	A0,@P2DATA+POBJ,L
	MOVE	A0,@P2DATA+PLOBJ,L
	MOVE	A0,@PLAYPAGE,W		;CLEAR THE ATTRACT MODE PLAY PAGE

	MOVI	08000h,A1
	CLR	A0
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT FOR COINS
***	SOUND1	ALLOFF
***	SOUND1	MUSICOFF
	CLR	A0
	MOVE	A0,@SOUNDSUP,W		;MAKE SURE SOUNDS ARE ALLOWED
	MOVE	A0,@GAMERASE,W
	CALLA	AUTOEOFF
	CLR	A0
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROCESSOR OFF
	CALLA	DMAQWAIT
	PUSHST
	DINT
	CALLA	CLRSWPRC
	CALLA	MYOINIT			;RE-INIT THE OBJECT LIST
	CALLA	CLRWORLD		;RESET THE WORLD
	CALLR	SYSINITL
	POPST
	CALLA	SYNCFULL		;NOW WAIT FOR VBLANK TO ZAP CMAP
***	CALLA	CMAPRS
	CALLA	CLR_SCRN		;WIPE OUT THE BIT MAP
	MOVI	0FFFCH,A0
	MOVE	A0,@DPYSTRT,W		;RESET DISPLAY START POINT
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* CLRSWPRC - MAKE ALL SWITCH TRIGGERED PROCESSES DUMDIE ENTRIES		 *
* NOTE: CALL WHEN INTERRUPTS ARE TURNED OFF				 *
*                                                                        *
**************************************************************************
CLRSWPRC
	MMTM	SP,A0,A1,A3
	CLR	A1		;USE SWTAB ENTRY 0 FOR DUMDIE PROC
	MOVE	@SWSTACK,A3,L
CLRSTKL	CMPI	SWSTST,A3,L	;STACK AT START?
	JREQ	CLRSTKX		;YES, EXIT
	MOVE	*A3+,A0,W
	CMPI	31,A0
	JRLS	CLRSTKL		;THIS ENTRY IS A REAL SWITCH
	MOVE	A1,*A3(-10H),W	;STORE THE DUMDIE CALL
	JRUC	CLRSTKL
CLRSTKX
	MMFM	SP,A0,A1,A3
	RETS
	
**************************************************************************
*                                                                        *
* BONUSNOW - START BONUS ROUTINE FOR WARM RESET. JUMPED TO FROM IRQ	 *
* 		LOCK DETECT.						 *
*                                                                        *
**************************************************************************
BONUSNOW
	DINT
	CLR	A0
	MOVE	A0,@GAMERASE,W
	MOVE	A0,@DISPLAYON,W
	MOVE	A0,@PLAYCAR,L
	MOVE	A0,@PUPDATE,W
	
	CALLA	AUTOEOFF
	CALLA	DMAHALT
	CALLA	PINIT
	CALLA	MYOINIT
	MOVI	STCKST,SP,L
	CALLA	CLRPLAY
	CALLA	PIXQINIT		;RESET PIXEL QUEUE
	CALLA	CLRSNDDB		;RESET SOUND DATA BASE

	MOVI	100,A0
	MOVE	A0,@WORLDTL,L
	SLL	16,A0
	MOVE	A0,@WORLDTLX,L

	MOVE	@WAVE,A0,W
	CMPI	NWAVES,A0
	JRHI	BONRESW2
	JRLO	BONNEXTW
	MOVI	NWAVES-1,A0
	JRUC	BONREWAV
BONRESW2
	MOVK	2,A0
BONREWAV
	MOVE	A0,@WAVE,W
BONNEXTW
	MOVI	P1DATA,A2
	CALLR	VALIDBOOTY
	MOVI	P2DATA,A2
	CALLR	VALIDBOOTY

	MOVE	@HOOKCNT,A2,W
	CMPI	15,A2
	JRLS	BONWJCR
       	MOVI	15,A2
	MOVE	A2,@HOOKCNT,W
BONWJCR
	CREATE	INDPID,JUMPWAVE
	CALLA	COLRSTRT
	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W
	MOVE	A0,@TIMER,W		;RESET THE TIMER VALUE
	MOVE	@INTENB,A0,W		;ENABLE DISPLAY INTERRUPT
	ORI	DIE,A0
	MOVE	A0,@INTENB,W
	MOVI	INGAME,A0
	MOVE	A0,@GAMSTATE,W
	EINT
	JRUC	MAINLP	

**************************************************************************
*                                                                        *
* JUMPWAVE - JUMP RIGHT TO THE NEXT WAVE PLEASE.			 *
*                                                                        *
**************************************************************************
JUMPWAVE
	CALLA	SCORAREA
	JAUC	WAVEEND
**************************************************************************
*                                                                        *
* VALIDBOOTY - MAKE SURE THE PLAYERS BOOTY COUNTERS ARE VALID		 *
*                                                                        *
**************************************************************************
VALIDBOOTY
	MMTM	SP,A0,A1
	MOVI	50,A1
	MOVE	*A2(PDRUGS),A0,W
	CMP	A1,A0
	JRLS	VB1
	MOVE	A1,*A2(PDRUGS),W	
VB1
	MOVE	*A2(PMONEY),A0,W
	CMP	A1,A0
	JRLS	VB2
	MOVE	A1,*A2(PMONEY),W	
VB2
	MOVE	*A2(PBUSTS),A0,W
	CMP	A1,A0
	JRLS	VB3
	MOVE	A1,*A2(PBUSTS),W	
VB3
	MOVE	*A2(PGOLD),A0,W
	CMP	A1,A0
	JRLS	VB4
	MOVE	A1,*A2(PGOLD),W	
VB4
	MOVE	*A2(PLIVES),A0,W
	CMPI	10,A0
	JRLS	VB5
	MOVK	10,A1
	MOVE	A1,*A2(PLIVES),W
VB5
	MOVE	*A2(PROCKETS),A0,W
	CMPI	40,A0
	JRLS	VB6
	MOVI	40,A1
	MOVE	A1,*A2(PROCKETS),W
VB6
	MOVE	*A2(PENERGY+16),A0,W
	CMPI	IENERGY+20,A0
	JRLS	VB7
	MOVI	IENERGY+20,A1
	SLL	16,A1
	MOVE	A1,*A2(PENERGY),L
VB7
	MOVE	*A2(PWEED),A0,W
	CMPI	30,A0
	JRLS	VB8
	MOVI	30,A1
	MOVE	A1,*A2(PWEED),W
VB8
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* MASTERDP - MASTER DISPATCH PROCESS.					 *
* 		INITIAL DISPATCH:					 *
* 			THESE PROCS ARE DISPATCHED ONE TIME AT WAVE STAR *
* 		POSITION DISPATCH:					 *
* 			BASED ON THE CURRENT WORLD POSITION THE		 *
* 			 POSITION TABLE IS USED TO DISPATCH THESE PROCS. *
* 		TIME DISPATCH:						 *
* 			DISPATCHES FROM THE TIME TABLE BASED ON THE	 *
* 			 ELAPSED WAVE TIME.				 *
* 		POSITION BAITERS:					 *
* 			A PROCESS IS FIRED THAT LOOPS ON THIS TIME TAB.	 *
* 			 IF A POSITION DISPATCH IS NOT MADE WITHIN	 *
* 			 THE POSITION TIME SPECIFIED. THIS BAITER PROC	 *
* 			 IS KILLED WHEN THE NEXT POSITION DISPATCH IS	 *
* 			 MADE.						 *
* 		ENFORCER BAITERS:					 *
* 			A PROCESS IS CREATED THAT LOOPS ON THE ENFORCER	 *
* 			 TIME TAB. WHEN THE SPECIFIED ENFORCER TIME	 *
* 			 IS REACHED. ONCE THIS STARTS THE PROCESS	 *
* 			 LOOPS UNTIL WAVE END.				 *
* 									 *
* 	FOR INFO ON THE WAVE TABLE SETUP, SEE NARCDATA.ASM		 *
*                                                                        *
**************************************************************************
MASSTIME	.EQU	3	;MASTER DISPATCH SLEEP TIME CONSTANT

MASTERDP
	MOVI	WAVEDPTB,A2	;GET THE WAVE DISPATCH TABLE	
	MOVE	@WAVE,A0,W
	DEC	A0		;ZERO BASED WAVE # PLEASE
	SLL	28,A0		;<---- 4 BIT SIGNIFICANCE, CHANGE PLEASE
	SRL	23,A0
	ADD	A0,A2
	MOVE	*A2,A2,L
*MASTER DISPATCH ENTRY FOR ARBITRARY DISPATCH TABLE
*A2 = PTR TO DISPATCH TABLE
MASTERG
	MOVI	MASTERID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL		;MAKE SURE NO OTHER DISPATCHERS ARE PRESENT
	CALLR	TESTDISP	;DISPATCH ALL OF THE COMMON PROCS
MASTINIL
	MOVE	*A2+,A4,L	;GET THE ROUTINE
	JRZ	MASTPT		;BR = DONE WITH INITIAL STUFF
	MOVE	*A2+,A5,L
	MOVE	*A2+,A6,L
	MOVE	*A2+,A14,L	;PTR TO THE PARAMETER LIST
	MMTM	SP,A2
	CALL	A4		;DO THE ROUTINE
	MMFM	SP,A2
	JRUC	MASTINIL
MASTPT
	MOVE	*A2+,A8,L	;GET THE POSITION TABLE
	MOVE	*A2+,A9,L	;AND THE TIME TABLE
	MOVE	*A2+,A11,L
	MOVE	A11,*A13(PDATA),L	;STORE THE POSITION BAITER TABLE PTR
	MOVE	*A2+,A11,L
	MOVE	A11,*A13(PDATA+20H),L	;STORE THE ENFORCER BAITER TABLE PTR
	MOVE	*A2+,A11,L
	MOVE	A11,*A13(PDATA+40H),L	;STORE THE TIMES 'TIL BAITERS
	MOVE	A11,*A13(PDATA+60H),W	;STORE BAITER INITIAL TIMEOUTS
	CLR	A11		;CLEAR LOCAL TIMER
	MOVE	A11,@WAVETIME,W	;CLEAR MASTER WAVE TIMER
*
*MASTER DISPATCH LOOP
MASTDPL
	MOVE	*A8,A1,L	;GET THE [Y,X] DISPATCH COORDINATE
	JRZ	MASTXYF		;BR = DONE, WITH MORE POSITION BAITER DISPATCH
***	JRZ	MASTDPTM	;BR = DONE, NO MORE POSITION BAITER DISPATCH
	MOVY	A1,A4
	SRA	16,A4
	SEXT	A1
	JRNZ	MASTCKX		;BR = CHECK X RANGE
MASTCKY
	MOVE	A4,A1
	JRZ	MASTXYD		;BR = PLEASE DISPATCH 
	MOVE	@WORLDTLY+16,A2,W	;LET'S TRY X FIRST	
	MOVE	A2,A3	
	ADDI	400,A3		;Y RANGE
	CALLA	CHKRANGE	
	JRNC	MASTXYF		;BR = NOT IN RANGE
MASTXYD				;XY DISPATCH POINT
	ADDK	32,A8
	MOVE	*A8+,A4,L	;GET THE ROUTINE
	MOVE	*A8+,A5,L
	MOVE	*A8+,A6,L
	MOVE	*A8+,A14,L	;PTR TO THE PARAMETER LIST
	MMTM	SP,A8,A9,A10,A11
	CALL	A4		;DO THE ROUTINE
	MMFM	SP,A8,A9,A10,A11
	MOVE	*A13(PDATA+40H),*A13(PDATA+60H),W	;RESET POSITION TIMER
	MOVI	PBAITPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL		;KILL THE POSITION BAITER IF THERE IS ONE	
	JRUC	MASTDPTM	
MASTCKX
	MOVE	@WORLDTLX+16,A2,W	;LET'S TRY X FIRST	
	MOVE	A2,A3	
	ADDI	512,A3		;X RANGE
	CALLA	CHKRANGE
	JRC	MASTCKY		;BR = IN RANGE, TRY Y
MASTXYF				;XY DISPATCH FAILURE CHECK FOR P BAITER START
	MOVE	*A13(PDATA+60H),A0,W
	JRLE	MASTPBAI	;BR = ATTEMPT POSITION BAITER START
	SUBK	MASSTIME,A0
	MOVE	A0,*A13(PDATA+60H),W
	JRGT	MASTDPTM	;DO NOT, I REPEAT, DO NOT START POSITION BAIT
MASTPBAI
	MOVI	PBAITPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP		;KILL THE POSITION BAITER IF THERE IS ONE	
	JRNZ	MASTDPTM	;BR = POSITION BAITER PROCESS EXISTS	
	MOVE	*A13(PDATA+40H),*A13(PDATA+60H),W	;RESET POSITION TIMER
	CREATE	PBAITPID,BAITER
	JRZ	MASTDPTM	;PROCESS NOT CREATED
	MOVE	*A13(PDATA),*A0(PDATA),L	;PASS THE BAITER TABLE
*DISPATCH ACCORDING TO TIME
MASTDPTM
	MOVE	*A9,A1,W
	JRZ	MASTLTIM	;BR = CHECK AND INCREMENT TIMER
MASTTD2
	CMP	A11,A1
	JRGT	MASTTDSP
	ADDK	16,A9
	MOVE	*A9+,A4,L	;GET THE ROUTINE
	MOVE	*A9+,A5,L
	MOVE	*A9+,A6,L
	MOVE	*A9+,A14,L	;PTR TO THE PARAMETER LIST
	MMTM	SP,A8,A9,A10,A11
	CALL	A4		;DO THE ROUTINE
	MMFM	SP,A8,A9,A10,A11
MASTTDSP	
	CALLR	MASTTINC
	PUSHP	A8
	MOVI	MASSTIME,A8
MASTTDLS
	MOVE	@WAVETIME,A0,W
	INC	A0
	MOVE	A0,@WAVETIME,W
	SLEEP	1
	DSJS	A8,MASTTDLS
	PULLP	A8
	JRUC	MASTDPL
MASTLTIM
	MOVE	*A8,A1,L	;CHECK POSITION SHIT
	JRNZ	MASTTDSP	;THERE'S STILL POSITION SHIT TO GO
*HANG HERE AND INCREMENT TIMERS
MASTBAIT
	CALLR	MASTTINC
	PUSHP	A8
	MOVI	MASSTIME,A8
MASTBALS
	MOVE	@WAVETIME,A0,W
	INC	A0
	MOVE	A0,@WAVETIME,W
	SLEEP	1
	DSJS	A8,MASTBALS
	PULLP	A8
	JRUC	MASTBAIT
*
*MASTTINC - MASTER DISPATCH TIMER INCREMENT
MASTTINC
	ADDK	MASSTIME,A11	;ADD THE MASTER DISPATCH SLEEP TIME
	MOVE	*A13(PDATA+50H),A0,W
	JRLE	MASTEBAI	;BR = ATTEMPT ENFORCER BAITER
	SUBK	MASSTIME,A0
	MOVE	A0,*A13(PDATA+50H),W
	JRGT	MASTNOEB
MASTEBAI
	MOVI	EBAITPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP
	JRNZ	MASTNOEB
	CREATE	EBAITPID,BAITER	;CREATE THE ENFORCER BAITER
	JRZ	MASTNOEB	;CREATE FAIL
	MOVE	*A13(PDATA+20H),*A0(PDATA),L
MASTNOEB
	RETS

**************************************************************************
*                                                                        *
* BAITER - DISPATCH BAITER PER A TIME DISPATCH TABLE			 *
* *A13(PDATA) = PTR TO TIME TABLE					 *
*                                                                        *
**************************************************************************
BAITER
	MOVE	*A13(PDATA),A9,L	;LOAD TABLE
	JRNZ	BAITER0
BAITERH
	SLOOP	64,BAITERH		;HANG HERE TO FOOL THE DISPATCHER
BAITER0
	CLR	A11			;LOCAL TIMER
BAITERL
	MOVE	*A9,A1,W
	JRZ	BAITER		;BR = RE-LOAD TABLE
	CMP	A11,A1
	JRGT	BAITER1
	ADDK	16,A9
	MOVE	*A9+,A4,L	;GET THE ROUTINE
	MOVE	*A9+,A5,L
	MOVE	*A9+,A6,L
	MOVE	*A9+,A14,L	;PTR TO THE PARAMETER LIST
	MMTM	SP,A9,A11
	CALL	A4		;DO THE ROUTINE
	MMFM	SP,A9,A11
BAITER1	
	INC	A11
	SLOOP	1,BAITERL

**************************************************************************
*                                                                        *
* TESTDISP - THIS IS THE TEST DISPATCHER HOOK, CREATE YOUR OWN SHIT 	 *
* 	   HERE								 *
*                                                                        *
**************************************************************************
TESTDISP
	MMTM	SP,A0,A1,A2,A7
	MOVI	WAVEPROC,A2	;GET THE PROCESS TABLE
	MOVE	@WAVE,A0,W
	DEC	A0		;ZERO BASE

	SLL	28,A0		;ONLY SIGNIFICANT TO 4 BITS RIGHT NOW
	SRL	23,A0

***	SLL	5,A0
	ADD	A0,A2
	MOVE	*A2,A2,L
	MOVE	*A2+,A7,L
	JRZ	TESTDX
TESTDL
	MOVE	*A2+,A1,W
	CALLA	GETPRC		;GET THE PROCESS
	MOVE	*A2+,A7,L
	JRNZ	TESTDL		;MORE TO DOOOOOO MR.
	
TESTDX
	CREATE	INDPID,SCANNER	;MAKE THE SCANNER HAPPEN
	MMFM	SP,A0,A1,A2,A7
	RETS

**************************************************************************
*                                                                        *
* GAME OVER PROCESS							 *
*                                                                        *
**************************************************************************
GAMEOVER
	AUDITCNT AUDSURV,SURVCNT	;COUNT THE SURVIVES

	MOVI	INGAMEOV,A0
	MOVE	A0,@GAMSTATE,W
	CLR	A0
	MOVI	P1DATA,A14
	MOVE	A0,*A14(PSWTCH),L
	MOVI	P2DATA,A14
	MOVE	A0,*A14(PSWTCH),L
	MOVI	0FFFFh,A0
	MOVE	A0,@PSWTMP1		;CLEAR THE SWITCHES

	MOVE	@P1DATA+PBUYINS,A0,W	;CHECK FOR BUY-IN
	JRZ	GAMOVRGD		;DO GAME-OVER MESSAGE FOR SURE

	CALLA	ISHSTD
	JRNE	GAMEDETH		;HIGH SCORES, SKIP GAMEOVER MESSAGE
GAMOVRGD
	CALLA	UNIT_CLR		;CLEAR THE FACTIONS OF FRACTIONS
	CALLR	ADDBUY			;DO IT AGAIN FOR CERTAINTY
	CREATE	INDPID,GAMEOTXT
	SOUND1	GAMOVSND
	SLEEP	0FFH			;LET EVERYONE SEE PLEASE
GAMEDETH
	CALLR	ADDBUY			;RESET THE BUY-IN COUNTERS
	CALLA	UNIT_CLR		;CLEAR THE FACTIONS OF FRACTIONS

	MOVI	08000h,A1
	CLR	A0
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT FOR COINS
	SOUND1	ALLOFF			;KILL ALL SOUNDS
	SOUND1	MUSICOFF		;KILL MUSIC
	CLR	A0
	MOVI	P1DATA,A14
	MOVE	A0,*A14(POBJ),L
	MOVE	A0,*A14(PLOBJ),L
	MOVI	P2DATA,A14
	MOVE	A0,*A14(POBJ),L
	MOVE	A0,*A14(PLOBJ),L
	MOVE	A0,@GAMERASE,W
	CALLA	AUTOEOFF
	CALLA	SYNCHALF
	CALLA	SYNCFULL
	PUSHST
	DINT
	CALLA	DMAHALT
	CALLA	MYOINIT			;RE-INIT THE OBJECT LIST
	CALLA	CLRWORLD		;RESET THE WORLD
	CALLR	SYSINITL		;INITIALIZE LOW BYTE OF SYSTEM CONTROL	
	POPST
	CALLA	COLRSTRT
	CALLA	ISHSTD
	JREQ	GENDNOHS		;BR = NO HIGH SCORES MADE
*DO HIGH SCORE INTRO SHIT HERE
	MOVI	P1DATA,A11
	CREATE	P1PID|PMPID,PRESCONT	;PLAYER 1 PRESS MESSAGE
	MOVI	P2DATA,A11
	CREATE	P2PID|PMPID,PRESCONT	;PLAYER 2 PRESS MESSAGE	
	CALLR	CLRPLAY
	SLEEP	2
	SOUND1	HSTDTUNE
	JSRP	E_GAME
GENDNOHS
	CALLA	WIPEOUT
	CALLA	COLRSTRT
	CALLA	ATSTRT			;START ATTRACT MODE
	JAUC	SUCIDE
*
*CLEAR EVERYTHING UNDERNEATH THE STATUS AREA
CLRPLAY
	MMTM	SP,A0,A1,A2,A3
	CLR	A0
	MOVE	@DISPLAYON,A3,W
	MOVE	A0,@DISPLAYON,W
	CALLA	DMAQWAIT			;WAIT ON DMA
	CLR	A1
	MOVE	A1,@CMAPSEL,W			;SELECT COLOR MAP 0
	MOVI	SCREEN+(SKYTOPOF*>1000),A1,L
	MOVI	(SCRNE-(SCREEN+(SKYTOPOF*>1000)))/32,A2,L
CLRPLP	MOVE	A0,*A1+,L
	DSJS	A2,CLRPLP
	MOVE	A3,@DISPLAYON,W
	MMFM	SP,A0,A1,A2,A3
	RETS

**************************************************************************
*                                                                        *
* CLRALLPD - CLEAR ALL PLAYER DATA AREAS				 *
*                                                                        *
**************************************************************************
CLRALLPD
	PUSH	A2
	MOVI	P1DATA,A2
	CALLR	CLRPLYRD
	MOVI	P2DATA,A2
	CALLR	CLRPLYRD
	PULL	A2
	RETS

**************************************************************************
*                                                                        *
* CLRPLYRD - CLEAR THE PLAYER DATA AREA OF IT'S STATUS			 *
* A2 = PLAYER DATA AREA							 *
*                                                                        *
**************************************************************************
CLRPLYRD
	MMTM	SP,A0,A1,A3
	CLR	A0
	MOVE	A2,A1
	MOVI	PDSIZE,A3
	SRL	5,A3
	JRNC	CLRPD1			;BR = EVENLY DIVISIBLE BY 32
	MOVE	A0,*A1+,W		;KNOCK OFF ODD MAN
	MOVE	A3,A3	
CLRPD1
	JRZ	CLRPD2
CLRPDL
	MOVE	A0,*A1+,L		;CLEAR THE WHOLE BLOCK
	DSJS	A3,CLRPDL
CLRPD2
	ADJUST	ADJEXTRA		;GET THE EXTRA MAN LEVEL
****	MOVI	IREPLAY,A0
	MOVE	A0,*A2(PNEXTREP),L	;STORE INITIAL BCD REPLAY LEVEL

	MOVI	IBUYINS,A0
	MOVE	A0,*A2(PBUYINS),W	;AMOUNT TIMES BUYIN IS ALLOWED

	MOVI	PALGNTIM,A0
	MOVE	A0,*A2(PALIGNCT),W

	CMPI	P1DATA,A2
	JRNE	CLRPD3
	MOVI	P1SCRAD,A0
	MOVI	P1PID,A1
	JRUC	CLRPD4
CLRPD3
	MOVI	P2SCRAD,A0
	MOVI	P2PID,A1
CLRPD4
	MOVE	A0,*A2(PSCRAD),L
	MOVE	A1,*A2(PPID),W
	MMFM	SP,A0,A1,A3
	RETS

**************************************************************************
*                                                                        *
* CLRBUYIN - CLEAR THE PLAYERS BUYIN COUNTERS, I.E. NO MORE BUYIN ALLOWE *
*                                                                        *
**************************************************************************
CLRBUYIN
	PUSH	A0
	MOVE	@WAVE,A0,W
	CMPI	HEADWAVE,A0
	JREQ	CLRBALW			;ALWAYS CLEAR IN THE HEAD WAVE
	ADJUST	ADJBUYIN
	JRNZ	CLRBXX			;ADJUSTMENT SAYS NO CLEAR
CLRBALW
	CLR	A0
	MOVE	A0,@P1DATA+PBUYINS,W
	MOVE	A0,@P2DATA+PBUYINS,W
CLRBXX
	PULL	A0
	RETS

**************************************************************************
*                                                                        *
* CLRMBIGS - CLEAR THE PLAYERS MR. BIG KILLED COUNTERS			 *
*                                                                        *
**************************************************************************
CLRMBIGS
	MMTM	SP,A0,A2
	CLR	A0
	MOVI	P1DATA,A2
	MOVE	A0,*A2(PMBIGS),W
	CALLA	OUTMBIGS
	MOVI	P2DATA,A2
	MOVE	A0,*A2(PMBIGS),W
	CALLA	OUTMBIGS
	MMFM	SP,A0,A2
	RETS

**************************************************************************
*                                                                        *
* CLRGCARD - CLEAR THE PLAYERS GOLD CARD COUNTERS.			 *
*                                                                        *
**************************************************************************
CLRGCARD
	MMTM	SP,A0,A2
	CLR	A0
	MOVI	P1DATA,A2
	MOVB	A0,*A2(PGCARD)
	CALLA	OUTCARDS
	MOVI	P2DATA,A2
	MOVB	A0,*A2(PGCARD)
	CALLA	OUTCARDS
	MMFM	SP,A0,A2
	RETS

*THE HIGH SCORE TO DATE TUNE
HSTDTUNE
	.WORD	>F3FD,>01,>4020,>4060,>8004,0

**************************************************************************
*                                                                        *
* BONUS - DO BONUS COUNT						 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
WAVBONUS

*DRAW BORDER
***	MOVI	DMACAL,A5		;CONTROL
***	MOVI	2000000H,A4		;SAG
***	MOVI	[60+SKYTOPOF,40],A3	;DAG
***	MOVI	[1,432],A2		;SIZE
***	MOVI	0E0E00000H,A1		;[CONSTANT,PAL]
***	MOVK	5,A6
***BONBORD1
***	CALLA	DMAN
***	ADDI	[2,0],A3
***	ADDI	01010000H,A1
***	DSJS	A6,BONBORD1
***
***	MOVI	[70+SKYTOPOF,252],A3
***	MOVI	[220,1],A2
***	MOVI	0E0E00000H,A1		;[CONSTANT,PAL]
***	MOVK	5,A6
***BONBORD2
***	CALLA	DMAN
***	ADDI	[0,2],A3
***	ADDI	01010000H,A1
***	DSJS	A6,BONBORD2

	SLEEP	18H

*DO PLAYER BONUS(ES)
	JSRP	PBONUS
	RETP
	
P2BONOFF .EQU	243		;OFFSET TO PLAYER 2 BONUS AREA IN X
**************************************************************************
*                                                                        *
* PBONUS - COUNT DOWN A PLAYERS BONUSES					 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
PBONUS
	MOVI	RD15FONT,A11
	MOVK	1,A10

	CLR	A2
	MOVE	A2,*A13(PDATA),L
	MOVE	A2,*A13(PDATA+20H),L	;CLEAR PxDATA STORAGE AREAS
	MOVE	A2,*A13(PDATA+40H),L
	MOVE	A2,*A13(PDATA+60H),L	;CLEAR BONUS COUNT STORAGE

*
*DO PLAYER ONE BONUS
	MOVI	P1DATA,A2
	MOVE	*A2(POBJ),A1,L
	JREQ	P1NONEX			;BR = PLAYER ONE NON-EXISTANT
	MOVE	*A2(PSCORE),A1,L
	JREQ	P1NONEX			;BR = JUST STARTED
	MOVE	A2,*A13(PDATA),L	;STORE HERE

	CLR	A0
	MOVI	0F5F5H,A6
	MOVI	[42+SKYTOPOF,124],A9
	MOVI	PLYR1MSG,A8
	JSRP	STRLNRM			;"PLAYER 1" FLASH

	SOUND1	PBONSND			;PLAYER COUNTING SOUND
	SLEEP	2FH
	JSRP	CNT1BUCK		;COUNT UP THE BUCKS
	JSRP	CNT1DRUG		;COUNT UP THE DRUGS
	JSRP	CNT1BUST		;COUNT UP THE BUSTS
	SLEEP	20
	JSRP	CNT1HOOK
	JRZ	P1NOHK
	SLEEP	20
P1NOHK
	JSRP	CNT1WEED
	JRZ	P1NOWD
      	SLEEP	20
P1NOWD
	JSRP	CNT1GOLD

	CLR	A0
	MOVI	0C0C0H,A6
	MOVI	[42+SKYTOPOF,124],A9
	MOVI	PLYR1MSG,A8
	JSRP	STRLNRM			;TURN OFF "PLAYER 1"
	MOVE	*A13(PDATA+40H),A2,L	
	JRNE	P1NONEX			;BR = PLAYER HAS NO BONUS		
	CALLR	OUTP1NOB
	SLEEP	0FH

P1NONEX
*
*TRY PLAYER 2 BONUS
	MOVI	P2DATA,A2
	MOVE	*A2(POBJ),A1,L
	JREQ	P2NONEX			;BR = PLAYER ONE NON-EXISTANT

	MOVE	*A2(PSCORE),A1,L
	JREQ	P2NONEX			;BR = HE JUST STARTED, NO COUNT
	MOVE	A2,*A13(PDATA+20H),L	;STORE HERE

	CLR	A0
	MOVI	0F5F5H,A6
	MOVI	[42+SKYTOPOF,289],A9
	MOVI	PLYR2MSG,A8
	JSRP	STRLNRM			;"PLAYER 2" FLASH

	SOUND1	PBONSND			;PLAYER COUNTING SOUND
	SLEEP	2FH
	JSRP	CNT2BUCK		;COUNT UP THE BUCKS
	JSRP	CNT2DRUG		;COUNT UP THE DRUGS
	JSRP	CNT2BUST		;COUNT UP THE BUSTS
	SLEEP	20
	JSRP	CNT2HOOK
	JRZ	P2NOHK
	SLEEP	20
P2NOHK
	JSRP	CNT2WEED
	JRZ	P2NOWD
	SLEEP	20
P2NOWD
	JSRP	CNT2GOLD
	CLR	A0
	MOVI	0C0C0H,A6
	MOVI	[42+SKYTOPOF,289],A9
	MOVI	PLYR2MSG,A8
	JSRP	STRLNRM			;"PLAYER 2" NORMAL
	MOVE	*A13(PDATA+60H),A2,L	
	JRNE	P2NONEX		
	CALLR	OUTP2NOB
	SLEEP	0FH
	JRZ	PBONREFB
P2NONEX
*
*END OF BONUS ADD UP, TIME TO DUMP
	SLEEP	0FH
	MOVE	*A13(PDATA),A2,L
	MOVE	*A13(PDATA+20H),A1,L
	MOVE	*A13(PDATA+40H),A3,L
	MOVE	*A13(PDATA+60H),A5,L	;GET THE BONUSES AND WHAT NOT

	CLR	A0
	MOVI	0F5F5H,A6

	CMP	A3,A5			;FLASH THE HIGHEST BONUS EARNED
	JRHI	P2BIGBON		;MY, WHAT BIG BONUS YOU'VE GOT!
	JREQ	PXNFLSH			;NO FLASHY FOR = BONUS	

	MOVI	[42+SKYTOPOF,124],A9
	MOVI	PLYR1MSG,A8
       	JRUC	PXFLSHB
P2BIGBON
	MOVI	[42+SKYTOPOF,289],A9
	MOVI	PLYR2MSG,A8
PXFLSHB
	JSRP	STRLNRM			;TURN OFF "PLAYER 1"
PXNFLSH
	MOVE	*A13(PDATA+40H),A8,L
	MOVE	*A13(PDATA+60H),A11,L	;BONUSES IN HOLDABLE SPACE

	TEST	A8
	JRNZ	BONDUMPA
	TEST	A11
	JRZ	BONDUMPX		;BR = NO BONUSES EXIST	
BONDUMPA
	MOVI	150000,A0		;OVER 150K BONUS MERITS LONG SOUND
	CMP	A0,A8
	JRHI	BONDMPLN
	CMP	A0,A11
	JRHI	BONDMPLN
	SOUND1	BONCSND			;SHORT BONUS COUNTDOWN SOUND
	JRUC	BONDUMP
BONDMPLN
	SOUND1	BONCLSND		;LONG BONUS COUNTDOWN SOUND
BONDUMP
	CALLR	COUNT1K
	JRZ	BONDUMP1		;NOTHING WAS COUNTED
	CLR	A14
	CALLR	OUTPXBON
BONDUMP1
	SWAP	A1,A2
	SWAP	A8,A11
	CALLR	COUNT1K
	JRZ	BONDUMP2		;NOTHING WAS COUNTED
	MOVI	P2BONOFF,A14
	CALLR	OUTPXBON
BONDUMP2
	SWAP	A1,A2
	SWAP	A8,A11
*SLEEPY TIME 
	MMTM	A12,A1,A2
	SLEEP	1
	MMFM	A12,A1,A2
	TEST	A8
	JRNZ	BONDUMP
	TEST	A11
	JRNZ	BONDUMP1
BONDUMPX
	MOVE	A8,*A13(PDATA+40H),L
	MOVE	A11,*A13(PDATA+60H),L
*REPLENISH PLAYER BULLETS IF HE HAS LESS THAN THE INITIAL
PBONREFB
	SOUND1	MUSICOFF
	CLR	A0
	MOVI	0F5F5H,A6
	MOVI	[279+SKYTOPOF,141],A9
	MOVI	AMMOMSG,A8
	MOVI	RD7FONT,A11

	MOVE	*A13(PDATA),A2,L
	JRZ	PAMMONO1

****	MOVE	*A2(PBULLETS),A1,W
***	CMPI	25,A1
***	JRHS	PAMMONO1		;BR = NO NEED TO REPLENISH AMMO
***
***	MOVI	25,A1	 		;<---- CHANGE IBULLETS TO ADJUST
***	MOVE	A1,*A2(PBULLETS),W
***	CALLA	OUTBULLS
***	MMTM	A12,A6
***	SLEEP	8
***	MMFM	A12,A6
***	CLR	A0
***	JSRP	STRCNRM
***	SOUND1	BULLRSND
PAMMONO1
	MOVE	*A13(PDATA+20H),A2,L
	JRZ	PAMMONO2

***	MOVE	*A2(PBULLETS),A1,W
***	CMPI	25,A1
***	JRHS	PAMMONO2		;BR = NO NEED TO REPLENISH AMMO
***
***	MOVI	25,A1	 		;<---- CHANGE IBULLETS TO ADJUST
***	MOVE	A1,*A2(PBULLETS),W
***	CALLA	OUTBULLS
***	MMTM	A12,A6
***	SLEEP	10
***	MMFM	A12,A6
***	MOVI	AMMOMSG,A8
***	MOVI	[279+SKYTOPOF,141+P2BONOFF],A9
***	CLR	A0
***	JSRP	STRCNRM
***	SOUND1	BULLRSND

PAMMONO2
	RETP

**************************************************************************
*                                                                        *
* COUNT1K - SUBTRACT 1K FROM THE BONUS AND OUTPUT IT			 *
* A2 = PTR TO PLAYER DATA						 *
* A8 = CURRENT BONUS							 *
* RETURNS:								 *
* A8 = TO ADJUSTED BONUS						 *
*                                                                        *
**************************************************************************
COUNT1K
	MMTM	SP,A1
	TEST	A2	
	JRZ	NOP1BOND
	TEST	A8
	JRZ	NOP1BOND
	SUBI	1000,A8
	MOVI	1000H,A1
	CALLA	SCRIMM			;BCD SCORE 1K RIGHT NOW! 
	MOVE	A1,A1			;SET A NON-ZERO STATUS
NOP1BOND
	MMFM	SP,A1
	RETS

**************************************************************************
*                                                                        *
* OUTPBON - OUTPUT THE PLAYERS CURRENT BONUS				 *
* A8 = CURRENT BONUS IN HEX						 *
* A14 = OFFSET FROM PLAYER 1 X						 *
*                                                                        *
**************************************************************************

OUTP1BON
	MMTM	SP,A0,A2,A3,A4,A6,A8,A9,A10,A11,A14
	MOVE	*A13(PDATA+40H),A8,L
	CLR	A14
	JRUC	OUTPBON
OUTP2BON
	MMTM	SP,A0,A2,A3,A4,A6,A8,A9,A10,A11,A14
	MOVE	*A13(PDATA+60H),A8,L
	MOVI	P2BONOFF,A14
	JRUC	OUTPBON
OUTPXBON
	MMTM	SP,A0,A2,A3,A4,A6,A8,A9,A10,A11,A14
OUTPBON
	MOVI	[260+SKYTOPOF,31],A3
	ADDXY	A14,A3
	MOVI	[24,208],A4
	CALLA	BLNKAREA		;BLANK OLD SCORE
	MOVE	A8,A8
	JRZ	OUTPBONX		;DON'T OUTPUT 0'S THEY'RE NOT NICE
	CLR	A0
	MOVI	0F0F0H,A6
	MOVI	[260+SKYTOPOF,135],A9
	ADDXY	A14,A9
	MOVK	1,A10
	MOVI	RD20FONT,A11
	CALLA	HEXTOASC
	JSRP	STRCNRM
OUTPBONX
	MMFM	SP,A0,A2,A3,A4,A6,A8,A9,A10,A11,A14
	RETS

**************************************************************************
*                                                                        *
* OUTPNOB - OUTPUT NO BONUS MESSAGE IN A PLAYERS BONUS DISPLAY		 *
* A14 = OFFSET								 *
*                                                                        *
**************************************************************************
OUTP1NOB
	MMTM	SP,A0,A2,A4,A6,A8,A9,A10,A11,A14
	CLR	A14
	JRUC	OUTPNOB
OUTP2NOB
	MMTM	SP,A0,A2,A4,A6,A8,A9,A10,A11,A14
	MOVI	P2BONOFF,A14
OUTPNOB
	MOVI	[137+SKYTOPOF,31],A3
	ADDXY	A14,A3
	MOVI	[24,208],A4
	CALLA	BLNKAREA		;BLANK OLD SCORE
	MOVK	1,A10
	CLR	A0
	MOVI	0F1F1H,A6
	MOVI	RD20FONT,A11
	MOVI	NOBONMSG,A8
	MOVI	[137+SKYTOPOF,135],A9
	ADDXY	A14,A9
	JSRP	STRCNRM
	SOUND1	NOBONSND		;NO BONUS SOUND
	MMFM	SP,A0,A2,A4,A6,A8,A9,A10,A11,A14
	RETS

*
*OUTPUT BONUS HEADERS
*
*OUTPUT THE CASH BONUS HEADER
OUTC1HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[100+SKYTOPOF,100],A3
	MOVI	[99+SKYTOPOF,130],A9
	MOVI	P1DATA,A2
	JRUC	OUTCHEAD
OUTC2HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[100+SKYTOPOF,100+P2BONOFF],A3
	MOVI	[99+SKYTOPOF,130+P2BONOFF],A9
	MOVI	P2DATA,A2
OUTCHEAD
	MOVI	GETCASH1,A14
	ADDI	PMONEY,A2
	MOVI	X1KMSG,A8	
	JRUC	OUTHEADR		;"BUCK X 1000"

*
*OUTPUT THE DRUG COUNT HEADER
OUTD1HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[148+SKYTOPOF,101],A3
	MOVI	[152+SKYTOPOF,130],A9
	MOVI	P1DATA,A2
	JRUC	OUTDHEAD
OUTD2HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[148+SKYTOPOF,101+P2BONOFF],A3
	MOVI	[152+SKYTOPOF,130+P2BONOFF],A9
	MOVI	P2DATA,A2
OUTDHEAD
	MOVI	X2KMSG,A8
***	MOVI	GETDOPE,A14
	MOVE	@DOPESYM,A14,L
	ADDI	PDRUGS,A2
	JRUC	OUTHEADR		;"DOPE X 2,000"

*
*OUTPUT THE BUST COUNT HEADER
OUTB1HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[194+SKYTOPOF,92],A3
	MOVI	[196+SKYTOPOF,130],A9
	MOVI	P1DATA,A2
	JRUC	OUTBHEAD
OUTB2HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[194+SKYTOPOF,92+P2BONOFF],A3
	MOVI	[196+SKYTOPOF,130+P2BONOFF],A9
	MOVI	P2DATA,A2
OUTBHEAD
	MOVI	X5KMSG,A8
	MOVI	BUSTICON,A14
	ADDI	PBUSTS,A2
	JRUC	OUTHEADR

*
*OUTPUT THE HOOKER COUNT HEADER
OUTH1HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
***	MOVI	[76+SKYTOPOF,99],A3
***	MOVI	[82+SKYTOPOF,126],A9
	MOVI	[80+SKYTOPOF,126],A9
	MOVI	P1DATA,A2
	JRUC	OUTHHEAD
OUTH2HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
***	MOVI	[76+SKYTOPOF,(99+P2BONOFF-60)],A3
***	MOVI	[82+SKYTOPOF,(126+P2BONOFF-60)],A9
	MOVI	[80+SKYTOPOF,(126+P2BONOFF-60)],A9
	MOVI	P2DATA,A2
OUTHHEAD
	MOVI	HOOKMSG,A8
**	MOVI	HOOKHEAD,A14
	CLR	A14
	ADDI	PHOOKS,A2
	JRUC	OUTHEADR
*
*OUTPUT THE WEED COUNT HEADER
OUTW1HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[80+SKYTOPOF,111],A9
	MOVI	P1DATA,A2
	JRUC	OUTWHEAD
OUTW2HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[80+SKYTOPOF,(111+P2BONOFF-67)],A9
	MOVI	P2DATA,A2
OUTWHEAD
	MOVI	WEEDMSG,A8
	CLR	A14
	ADDI	PWEED,A2
	JRUC	OUTHEADR
*
*THE HOOKER MESSAGE
HOOKMSG
	.STRING	"INNOCENT BONUS"
	.BYTE	0
	.EVEN
*
*THE WEED MESSAGE
WEEDMSG
	.STRING	"GANJA BONUS X 5000"
	.BYTE	0
	.EVEN
*
*OUTPUT THE GOLD COUNT HEADER
OUTG1HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[72+SKYTOPOF,99],A3
	MOVI	[77+SKYTOPOF,157],A9
	MOVI	P1DATA,A2
	JRUC	OUTGHEAD
OUTG2HED
	MMTM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	MOVI	[72+SKYTOPOF,(99+P2BONOFF-60)],A3
	MOVI	[77+SKYTOPOF,(157+P2BONOFF-60)],A9
	MOVI	P2DATA,A2
OUTGHEAD
	MOVI	X25KMSG,A8
	MOVI	goldbr1,A14
	ADDI	PGOLD,A2
	JRUC	OUTHEADR

*OUTHEADR - OUTPUT A BONUS HEADER.
*A2 = POINTER TO COUNT STORAGE
*A3 = POSITION OF ICON
*A8 = POINTER TO TEXT, 0 = NO TEXT
*A9 = POSITION OF TEXT
*A14 = POINTER TO ICON IMAGE, 0 = NO IMAGE
OUTHEADR
	CLR	A0
	MOVI	DMAWNZ,A5
	MOVI	0F2F2H,A6
	MOVK	1,A10
	MOVI	RD7FONT,A11
	MOVE	*A2,A2,W
	JRZ	OUTHRNO1		;BR = NONE OF THIS
	GETST	A2
	MOVE	A14,A14
	JRZ	OUTHRNOH		;BR = NO HEADER
	CALLA	DMAWPAL			;DMA THE HEADER, PALETTE AND ALL
OUTHRNOH
	MOVE	A8,A8
	JRZ	OUTHRNOS		;BR = NO STRING
	JSRP	STRLNRM
OUTHRNOS
	PUTST	A2			;RESTORE STATUS
OUTHRNO1
	MMFM	SP,A0,A2,A3,A5,A6,A7,A9,A10,A11,A14
	RETS

**************************************************************************
*                                                                        *
* CNTBUCKS - COUNT BOTH PLAYER'S BUCKS SIMULTANEOUSLY			 *
*                                                                        *
**************************************************************************
CNT1BUCK
	MMTM	A12,A2,A8,A9,A10,A11
	CALLR	OUTC1HED
	JRZ	CNTBONXX
	MOVI	P1DATA,A2
	CLR	A14
	MOVI	ADDP1BON,A10
	JRUC	CNTBUCKS
CNT2BUCK
	MMTM	A12,A2,A8,A9,A10,A11
	CALLR	OUTC2HED
	JRZ	CNTBONXX
	MOVI	P2DATA,A2
	MOVI	P2BONOFF,A14
	MOVI	ADDP2BON,A10
CNTBUCKS
	MOVI	OUTBUCKS,A0
	MOVE	A0,*A13(PDATA+80H),L		;COUNT ROUNTINE TO DEC
	MOVI	CASHSND,A0
	MOVE	A0,*A13(PDATA+0A0H),L		;SOUND TO MAKE
	MOVI	[110+SKYTOPOF,43],A3
	ADDXY	A14,A3
	MOVE	A3,A8
	MOVI	GETCASH1,A0
	MOVE	A0,*A13(PDATA+0E0H),L		;STORE ICON HEADER
	MOVI	[136+SKYTOPOF,250],A9		;MAX POSITION
	ADDXY	A14,A9
	MOVI	1000,A0
	MOVE	A2,A11
	ADDI	PMONEY,A11
	JRUC	CNTBUCK2

*DO THE DRUGS
CNT1DRUG
	MMTM	A12,A2,A8,A9,A10,A11
	CALLR	OUTD1HED
	JRZ	CNTBONXX
	MOVI	P1DATA,A2
	CLR	A14
	MOVI	ADDP1BON,A10
	JRUC	CNTDRUGS
CNT2DRUG
	MMTM	A12,A2,A8,A9,A10,A11
	CALLR	OUTD2HED
	JRZ	CNTBONXX
	MOVI	P2DATA,A2
	MOVI	P2BONOFF,A14
	MOVI	ADDP2BON,A10

CNTDRUGS
	MOVI	OUTDRUGS,A0
	MOVE	A0,*A13(PDATA+80H),L		;COUNT ROUNTINE TO DEC
	MOVI	DRUGSND,A0
	MOVE	A0,*A13(PDATA+0A0H),L		;SOUND TO MAKE
	MOVI	[164+SKYTOPOF,38],A3
	ADDXY	A14,A3
	MOVE	A3,A8
***	MOVI	GETDOPE,A0
	MOVE	@DOPESYM,A0,L
	MOVE	A0,*A13(PDATA+0E0H),L		;STORE ICON HEADER
	MOVI	[180+SKYTOPOF,250],A9		;MAX POSITION
	ADDXY	A14,A9
	MOVI	2000,A0				;x 2000
	MOVE	A2,A11
	ADDI	PDRUGS,A11
	JRUC	CNTBUCK2

*
*DO BUSTS
CNT1BUST
	MMTM	A12,A2,A8,A9,A10,A11
	CALLR	OUTB1HED
	JRZ	CNTBONXX
	MOVI	P1DATA,A2
	CLR	A14
	MOVI	ADDP1BON,A10
	JRUC	CNTBUSTS
CNT2BUST
	MMTM	A12,A2,A8,A9,A10,A11
	CALLR	OUTB2HED
	JRZ	CNTBONXX
	MOVI	P2DATA,A2
	MOVI	P2BONOFF,A14
	MOVI	ADDP2BON,A10

CNTBUSTS
	MOVI	OUTBUSTS,A0
	MOVE	A0,*A13(PDATA+80H),L		;COUNT ROUNTINE TO DEC
	MOVI	BUSTBONS,A0
	MOVE	A0,*A13(PDATA+0A0H),L		;SOUND TO MAKE
	MOVI	[209+SKYTOPOF,33],A3
	ADDXY	A14,A3
	MOVE	A3,A8
	MOVI	BUSTICON,A0
	MOVE	A0,*A13(PDATA+0E0H),L		;STORE ICON HEADER
	MOVI	[254+SKYTOPOF,250],A9		;MAX POSITION
	ADDXY	A14,A9
	MOVI	5000,A0				;x 5000
	MOVE	A2,A11
	ADDI	PBUSTS,A11
       	JRUC	CNTBUCK2

**************************************************************************
*                                                                        *
* CNTHOOKS - COUNT UP THE REMAINING HOOKERS.				 *
*                                                                        *
**************************************************************************
CNT1HOOK
	MMTM	A12,A2,A8,A9,A10,A11
	MOVE	@HOOKCNT,A2,W
	JRZ	CNTBONXXX		;NO HOOKERS
	CALLR	CLRBAREA1		;CLEAR THE PLAYER 1 BONUS AREA
	MOVE	@HOOKCNT,@P1DATA+PHOOKS,W
	CALLR	OUTH1HED
	JRZ	CNTBONXXX
	MOVI	P1DATA,A2
	CLR	A14
	MOVI	ADDP1BON,A10
	JRUC	CNTHOOKS
CNT2HOOK
	MMTM	A12,A2,A8,A9,A10,A11
	MOVE	@HOOKCNT,A2,W
	JRZ	CNTBONXXX		;NO HOOKERS
	CALLR	CLRBAREA2		;CLEAR THE PLAYER 2 BONUS AREA
	MOVE	@HOOKCNT,@P2DATA+PHOOKS,W
	CALLR	OUTH2HED
	JRZ	CNTBONXXX
	MOVI	P2DATA,A2
	MOVI	P2BONOFF,A14
	MOVI	ADDP2BON,A10
CNTHOOKS
	CLR	A0
	MOVE	A0,*A13(PDATA+80H),L		;COUNT ROUNTINE TO DEC
	MOVI	HOOKSND,A0
	MOVE	A0,*A13(PDATA+0A0H),L		;SOUND TO MAKE
	MOVI	[105+SKYTOPOF,30],A3
	ADDXY	A14,A3
	MOVE	A3,A8
	MOVI	hook4,A0
	MOVE	A0,*A13(PDATA+0E0H),L		;STORE ICON HEADER
	MOVI	[259+SKYTOPOF,250],A9		;MAX POSITION
	ADDXY	A14,A9
	MOVI	5000,A0
	MOVE	A2,A11
	ADDI	PHOOKS,A11
	JRUC	CNTBUCK2

*
*SOUND FOR HOOKER BONUS COUNT
HOOKSND .WORD	>F000|SPEAKPRI,45,>80BB,0	;oooOOOOooOH!

**************************************************************************
*                                                                        *
* CNTWEED - COUNT UP THE WEED PLANTS COLLECTED.				 *
*                                                                        *
**************************************************************************
CNT1WEED
	MMTM	A12,A2,A8,A9,A10,A11
	MOVE	@P1DATA+PWEED,A2,W
	JRZ	CNTBONXXX		;NO WEED
	CALLR	CLRBAREA1		;CLEAR THE PLAYER 1 BONUS AREA
	CALLR	OUTW1HED
	JRZ	CNTBONXXX
	MOVI	P1DATA,A2
	CLR	A14
	MOVI	ADDP1BON,A10
	JRUC	CNTWEED
CNT2WEED
	MMTM	A12,A2,A8,A9,A10,A11
	MOVE	@P2DATA+PWEED,A2,W
	JRZ	CNTBONXXX		;NO WEED
	CALLR	CLRBAREA2		;CLEAR THE PLAYER 2 BONUS AREA
	CALLR	OUTW2HED
	JRZ	CNTBONXXX
	MOVI	P2DATA,A2
	MOVI	P2BONOFF,A14
	MOVI	ADDP2BON,A10
CNTWEED
	CLR	A0
	MOVE	A0,*A13(PDATA+80H),L		;COUNT ROUNTINE TO DEC
	MOVI	DRUGSND,A0
	MOVE	A0,*A13(PDATA+0A0H),L		;SOUND TO MAKE
	MOVI	[115+SKYTOPOF,40],A3
	ADDXY	A14,A3
	MOVE	A3,A8
	MOVI	WEED,A0
	MOVE	A0,*A13(PDATA+0E0H),L		;STORE ICON HEADER
	MOVI	[230+SKYTOPOF,250],A9		;MAX POSITION
	ADDXY	A14,A9
	MOVI	5000,A0
	MOVE	A2,A11
	ADDI	PWEED,A11
	JRUC	CNTBUCK2

**************************************************************************
*                                                                        *
* CNTGOLD - COUNT UP THE GOLD BONUS.					 *
*                                                                        *
**************************************************************************
CNT1GOLD
	MMTM	A12,A2,A8,A9,A10,A11
	MOVE	@P1DATA+PGOLD,A2,W
	JRZ	CNTBONXXX		;NO GOLD
	CALLR	CLRBAREA1		;CLEAR THE PLAYER 1 BONUS AREA
	CALLR	OUTG1HED
	JRZ	CNTBONXXX
	MOVI	P1DATA,A2
	CLR	A14
	MOVI	ADDP1BON,A10
	JRUC	CNTGOLD
CNT2GOLD
	MMTM	A12,A2,A8,A9,A10,A11
	MOVE	@P2DATA+PGOLD,A2,W
	JRZ	CNTBONXXX		;NO GOLD
	CALLR	CLRBAREA2		;CLEAR THE PLAYER 2 BONUS AREA
	CALLR	OUTG2HED
	JRZ	CNTBONXXX
	MOVI	P2DATA,A2
	MOVI	P2BONOFF,A14
	MOVI	ADDP2BON,A10
CNTGOLD
	CLR	A0
	MOVE	A0,*A13(PDATA+80H),L		;COUNT ROUNTINE TO DEC
	MOVI	CASHSND,A0
	MOVE	A0,*A13(PDATA+0A0H),L		;SOUND TO MAKE
	MOVI	[105+SKYTOPOF,30],A3
	ADDXY	A14,A3
	MOVE	A3,A8
	MOVI	goldbr1,A0
	MOVE	A0,*A13(PDATA+0E0H),L		;STORE ICON HEADER
	MOVI	[259+SKYTOPOF,250],A9		;MAX POSITION
	ADDXY	A14,A9
	MOVI	24000,A0
	MOVE	A2,A11
	ADDI	PGOLD,A11
	JRUC	CNTBUCK2

*GENERIC SECTION OF ICON COUNT
*RETURNS: Z BIT CLR
CNTBUCK2
	CALLR	ADDICON	
	JRN	CNTBUCK3
***	CALLR	ADDP1BON

	MOVE	A0,B0
	MOVE	*A13(PDATA+0A0H),A0,L
	JRZ	CNTBNSD
	CALLA	ONESND			;MAKE A SOUND
CNTBNSD
	MOVE	B0,A0
	CALL	A10			;ADD THE PLAYER'S BONUS
	MMTM	A12,A0,A1,A2,A3
	SLEEP	3	
	MMFM	A12,A0,A1,A2,A3
	JRUC	CNTBUCK2
CNTBUCK3
	SLEEP	10H
CNTBONXX
	CLR	A0
	INC	A0			;CLR THE Z BIT
CNTBONXXX
	MMFM	A12,A2,A8,A9,A10,A11
	RETP

**************************************************************************
*                                                                        *
* ADDPxBON - ADD A SPECIFIED AMOUNT TO A PLAYER'S BONUS			 *
* A0 = AMOUNT TO ADD							 *
*                                                                        *
**************************************************************************
ADDP1BON
	PUSH	A8
	MOVE	*A13(PDATA+40H),A8,L
	ADD	A0,A8
	MOVE	A8,*A13(PDATA+40H),L
	CALLR	OUTP1BON
	PULL	A8	
	RETS
ADDP2BON
	PUSH	A8
	MOVE	*A13(PDATA+60H),A8,L
	ADD	A0,A8
	MOVE	A8,*A13(PDATA+60H),L
	CALLR	OUTP2BON
	PULL	A8	
	RETS
	
**************************************************************************
*                                                                        *
* ADDICON - TACK ON ANOTHER GIVEN ICON					 *
* A8 = STARTING [Y,X] LOCATION OF THIS COUNT SECTION			 *
* A3 = POSITION OF ICON							 *
* A11 = MEMORY LOCATION OF COUNT					 *
* A14 = OFFSET FROM PLAYER 1 X						 *
* RETURNS:								 *
* A3 = NEXT ICON POSITION						 *
* N BIT SET IF NO BONUS WAS COUNTED					 *
*                                                                        *
**************************************************************************
ADDICON
	MMTM	SP,A0,A1,A5,A8,A9,A10,A14
	MOVE	*A11,A0,W
	DEC	A0
	JRN	ADDICONX 		;BR = DONE WITH THIS SHIT
	MOVE	A0,*A11,W		;STORE THE NEW COUNT
	MOVE	*A13(PDATA+0E0H),A14,L	;GET IMAGE

	MOVE	*A14(ISIZE),A1,W
	MOVE	A3,A0			;PRESERVE A3
	ADDXY	A1,A0
	CMPXY	A9,A0
	JRXLE	ADDIC1			;BR = O.K. TO DMA THIS ONE

	MOVE	*A14(ISIZE+16),A0,W
	SLL	16,A0
	ADDXY	A0,A3			;DO A LINE FEED
	ADDI	[2,0],A3		;GIVE ME SOME SPACE DAMN IT
	CMPXY	A9,A3
	JRYGT	ADDICNT			;BR = JUST COUNT 
	MOVX	A8,A3			;SIMULATE A CARRIAGE RETURN	
ADDIC1	
	MOVI	DMAWNZ,A5	
	CLR	A1
	CALLA	DMAWPAL			;DMA THE SUCKER, PALETTE AND ALL
	MOVE	*A14(ISIZE),A1,W	;GET THE X SIZE
	ADDK	3,A1			;ADD SOME SPACING
	ADDXY	A1,A3			;NEW POSITION
ADDICNT
	MOVE	*A13(PDATA+80H),A0,L
	JRZ	ADDINDR
	CALL	A0			;SHOW THE DECREMENTED COUNT
ADDINDR
	MOVE	*A11,A0,W		;SET STATUS
ADDICONX
	MMFM	SP,A0,A1,A5,A8,A9,A10,A14
	RETS

**************************************************************************
*                                                                        *
* DMAWPAL - DMA AN OBJECT, ALLOCATING IT'S PALETTE			 *
* A3 = POSITION(DAG)							 *
* A5 = OFFSET:FLAGS							 *
* A14 = PTR TO IMAGE HEADER						 *
*                                                                        *
**************************************************************************
DMAWPAL
	MMTM	SP,A0,A1,A2,A4
	MOVE	*A14(ICMAP),A0,L	;GET THE COLOR MAP WE WANT
	CALLA	GETFPAL			;GET A PALETTE
	JRZ	DMANOPAL
	MOVX	A0,A1			;TACK ON THE PALETTE
	JRUC	DMAWPNOW
DMANOPAL
	SRL	16,A1
	SLL	16,A1			;DEFAULT TO ZERO PALETTE
DMAWPNOW
	MOVE	*A14(ISIZE),A2,L
	MOVE	*A14(ISAG),A4,L
	CALLA	DMAN			;DMA THIS GUY
	MMFM	SP,A0,A1,A2,A4
	RETS

**************************************************************************
*                                                                        *
* CLRBAREA1 - CLEAR PLAYER 1 BONUS AREA					 *
*                                                                        *
**************************************************************************
CLRBAREA1
	MMTM	SP,A3,A4
	MOVI	[64+SKYTOPOF,90],A3
	MOVI	[109+SKYTOPOF,240]-[64+SKYTOPOF,90],A4
	CALLA	BLNKAREA

	MOVI	[110+SKYTOPOF,30],A3
	MOVI	[259+SKYTOPOF,240]-[110+SKYTOPOF,30],A4
	CALLA	BLNKAREA
	MMFM	SP,A3,A4
	RETS

**************************************************************************
*                                                                        *
* CLRBAREA2 - CLEAR PLAYER 2 BONUS AREA					 *
*                                                                        *
**************************************************************************
CLRBAREA2
	MMTM	SP,A3,A4
	MOVI	[64+SKYTOPOF,90+(P2BONOFF-60)],A3
     MOVI [109+SKYTOPOF,240+(P2BONOFF-60)]-[64+SKYTOPOF,90+(P2BONOFF-60)],A4
	CALLA	BLNKAREA

	MOVI	[110+SKYTOPOF,30+P2BONOFF],A3
	MOVI	[259+SKYTOPOF,239+P2BONOFF]-[110+SKYTOPOF,30+P2BONOFF],A4
	CALLA	BLNKAREA
	MMFM	SP,A3,A4
	RETS

   .STRING "NARC COPYRIGHT (C) 1988, WILLIAMS ELECTRONICS GAMES, INC."
	.EVEN

**************************************************************************
*                                                                        *
* DIRQ - DISPLAY IRQ, USES THE VALUE STORE @DPYINT TO DETERMINE		 *
*        WHICH INTERRUPT THIS IS, HALF OR FULL SCREEN. @DPYINT IS	 *
*        COMPARED AGAINST THE CONSTANT HSINT.				 *
*                                                                        *
**************************************************************************
DIRQ
	MMTM	SP,B0,B1,B2,B3,B4,B5
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	SETF	16,1,0		;WORD SIGN EXTEND

	MOVE	@INTPEND,A1,W	;CLEAR STUPID INTERRUPT PENDING
	ANDNI	DIE,A1
	MOVE	A1,@INTPEND,W

	MOVE	@INTENB,A1,W	;DISABLE DISPLAY INTERRUPT
	ANDNI	DIE,A1
	MOVE	A1,@INTENB,W
	EINT			;ENABLE OTHER INTERRUPTS

	MOVE	@DPYINT,A2  	;CHECK WHAT SCREEN HALF
	MOVE	@SINTRAM,A1,W	;GET THE LAST SCORE AREA INTERRUPT
	CMP	A1,A2
	JREQ	DIRQ2		;BR = END OF SCORE AREA INTERRUPT
	CMPI	HSINT,A2
	JRNE	DIRQ1		;BR = END OF SCREEN INTERRUPT
**************************************************************************
*                                                                        *
* DIRQ0 - HALF SCREEN INTERRUPT. TOP HALF OBJECTS ARE UPDATED, 		 *
* 	OBJECT VELOCITIES ARE ADDED, SWITCHES FOR PLAYER MOVEMENT ARE	 *
* 	SCANNED, AND PLAYERS ARE UPDATED.				 *
*                                                                        *
**************************************************************************
DIRQ0
	MOVI	EOSINT,A1  	;SET FOR EOSCRN INTERRUPT
	MOVE	A1,@DPYINT

	MOVE	@TIMER,A1	;HIT PROCESS TIMER
*KLUDGE WATCH DOG IN LIEU OF THE REAL ROVER

	MOVE	@GAMSTATE,A2,W
	CMPI	INDIAG,A2
	JREQ	DIRQ0NT		;DON'T TRAP WHILE IN DIAGNOSTICS
	CMPI	60,A1
	JRLO	DIRQ0NT

	CMPI	INPLAY,A2
	JREQ	DIRQ0BNW
	CMPI	INGAME,A2
	JRNE	DIRQ0WST	;WHO KNOWS WHERE WE ARE, JUST RESET

DIRQ0BNW
	CALLERR	21+1		;TAKE INTO ACCOUNT EXTRA PUSH FOR STATUS
	AUDIT	AUDBONE
	JAUC	BONUSNOW	;<--- GO TO THE BONUS SCREEN, RIGHT NOW

DIRQ0WST
	CALLERR1  21+1		;TAKE INTO ACCOUNT EXTRA PUSH FOR STATUS
	AUDIT	AUDLOCK
	JAUC	WARMSET		;<--- RESET THE GAME, SOMETHING HAPPENED 
DIRQ0NT
	INC	A1
	MOVE	A1,@TIMER

	MOVE	@INTSYNC0,A0,W
	INC	A0
	MOVE	A0,@INTSYNC0,W	;SYNC AT HALF SCREEN

	MOVE	@GAMERASE,A0,W
	CMPI	2,A0
	JRNE	DIRQ0NEO	;BR = NOT THE CORRECT PLACE TO TURN OFF

	MOVE	@SYSCOPY,A0,W
	ORI	AUTOERAS,A0  	;DISABLE AUTO ERASE
	MOVE	A0,@SYSCOPY,W	;STORE EVERYWHERE I DID GO
	MOVE	A0,@SYSCTRL,W
DIRQ0NEO
	CALLA	DISPQT

	MOVE	@GAMSTATE,A0,W	;OKAY TO MOVE THESE GUYS?
	CMPI	INMSU,A0
	JREQ	DIRQ0E		;DON'T UPDATE THE PLAYER'S NOW
	CMPI	INPLAY,A0
	JRNE	DIRQ0C		;BR = NO, DON'T SCAN THESE SWITCHES
*     	
*SCAN JOYSTICKS, ONE SCAN ON, TWO SCANS OFF,THIS SCANNER IS FOR PLAYER
*MOVEMENT ONLY.
	MOVE	@SWITCH,A0,W   	;CURRENT STATE T=N
	MOVE	@PSWTMP1,A1	;PREVIOUS STATE T=N-1
	MOVE	A0,@PSWTMP1	;STORE NEW PREVIOUS
	AND	A0,A1
	NOT	A1		;NONINVERTED
	MOVI	P1DATA+PSWTCH,A2
	MOVE	@P1DATA+PFLAGS,A3,L	
	BTST	BDHOLD,A3
	JREQ	DIRQP1NL	;BR = DON'T LATCH THE CONTROLS
	MOVE	*A2,A3,W
	OR	A3,A1
DIRQP1NL
	MOVB	@P1CTRL,A3
	OR	A3,A1		;OR IN PHONIES
	MOVB	A1,*A2		;GIVE PLAYER 1 HIS SWITCH BITS
	ADDI	PDSIZE,A2	;OFFSET TO PLAYER 2'S AREA
	SRL	8,A1		;ALIGN PLAYER 2'S SWITCH BITS
	MOVE	@P2DATA+PFLAGS,A3,L	
	BTST	BDHOLD,A3
	JREQ	DIRQP2NL	;BR = DON'T LATCH THE CONTROLS
	MOVE	*A2,A3,W
	OR	A3,A1
DIRQP2NL
	MOVB	@P2CTRL,A3
	OR	A3,A1		;SUCH MOCKERY		
	MOVB	A1,*A2		;AND STORE THEM
      	JRUC	DIRQ0D
*UPDATE THE PLAYERS
DIRQ0C
	CLR	A0
	MOVE	@P1CTRL,@P1DATA+PSWTCH,W
	MOVE	@P2CTRL,@P2DATA+PSWTCH,W
DIRQ0D
	MOVE	@PUPDATE,A0,W
	JRNZ	DIRQ0E		;DO NOT UPDATE PLAYERS
	MOVI	P1DATA,A0
	CALLA	PLLAYER		;UPDATE PLAYER ONE
	MOVI	P2DATA,A0
	CALLA	PLLAYER		;NOW PLAYER TWO
DIRQ0E
	CALLR	SWSCAN		;SCAN SWITCHES TO TRIGGER PROCS.
	CALLA	DISPLAY		;GOT TO MAKE THE DONUTS

	JRUC	DIRQX

**************************************************************************
*                                                                        *
* DIRQ1 - END OF SCREEN INTERRUPT ROUTINE. BOTTOM HALF OF SCREEN UPDATED *
* 	COLOR RAM IS CYCLED, AND SWITCHES ARE SCANNED.			 *
*                                                                        *
**************************************************************************
DIRQ1
***	MOVE	@GAMSTATE,A0,W	
***	CMPI	INAMODE,A0
***	JRNE	DIRQ1A		;BR = IN PLAY AUTO ERASE OFF 'TIL SCORE END

***	MOVI	HSINT,A0
***	JRUC	DIRQ1B
DIRQ1A
	MOVE	@GAMERASE,A0,W
	JREQ	DIRQ1NEO	;AUTO-ERASE IS NOT ENABLED!
	MOVE	@SYSCOPY,A0,W	;ALWAYS TURN OFF HERE JUST FOR YUKS
	ORI	AUTOERAS,A0  	;DISABLE AUTO ERASE
	MOVE	A0,@SYSCOPY,W	;STORE EVERYWHERE I DID GO
	MOVE	A0,@SYSCTRL,W
DIRQ1NEO
	MOVE	@IRQSKYE,@ERASELOC,W	;MOVE IN THE CORRECT COLOR
	MOVI	SCOREINT,A0
	MOVE	@DPYSTRT,A1,W

       .IF INTRLACE	
	SRA	5,A1		;DIVIDE BY AN EXTRA FACTOR OF 2 FOR INTERLACE
       .ELSE	
	SRA	4,A1
       .ENDIF	

	NOT	A1
	SUB	A1,A0
	JRNN	DIRQ1B		;BR = THIS IS AN O.K. INTERRUPT
	MOVI	1BH,A0
DIRQ1B
	MOVE	A0,@SINTRAM,W	;KEEP THE LAST ONE HERE
	MOVE	A0,@DPYINT,W	;RESET FOR HALF SCREEN INTERRUPT
	MOVE	@DPYCTL,A0,W 	;SHIFT REGISTER READ TO RESTART DMA
	ORI	SRT,A0
	MOVE	A0,@DPYCTL,W	;ENABLE SHIFT REG TRANSFER TO STOP DMA HALT
	CLR	A1
	PIXT	*A1,A2
	ANDNI	SRT,A0
	MOVE	A0,@DPYCTL,W
	CALLA	DISPH		;CALL END OF SCREEN DISPLAY ROUTINE

*
*UPDATE CYCLING COLOR RAM
	MOVI	COLRTEMP,A0	;GET NEW COLORS
	MOVI	CYCOLORS,A1	;GET ADDRESS OF CYCLE COLORS
	MOVE	*A0+,*A1+,W	;GET THE ODD MAN
	MOVK	12,A6		;COLOR COUNT/2
COLORUP
	MOVE	*A0+,*A1+,L
	DSJS	A6,COLORUP
	CALLA	PALTRANS	;XFER NEW PALETTES IF NECESSARY

**************************************************************************
*                                                                        *
*          BITCHIN' SCROLLING DRIVER                                     *
*                                                                        *
**************************************************************************
*
*
*        TO TURN ON, PUT THE FRAME DIVIDER (SCROLL EVERY "N" VIDEO
*        FRAMES) IN THE WORD SCRL_DIV .... and AT SCRL_GO.
*
*        TO STOP, CLEAR SCRL_DIV....and SCRL_GO.
*
*        NOTE THAT SCRL_DIR DETERMINES HOW MANY PIXELS PER
*        FRAME AND THE DIRECTION.  THE ONLY VALID VALUES ARE
*        AS FOLLOWS:
*
*        2000H - SCROLL UP 2 PIXELS
*        4000H - SCROLL UP 4 PIXELS
*        6000H - SCROLL UP 6 PIXELS
*       -2000H - SCROLL DOWN 2 PIXELS
*       -4000H - SCROLL DOWN 4 PIXELS
*       -6000H - SCROLL DOWN 6 PIXELS
*        8000H - SCROLL DOWN 8 PIXELS
*
*        once the other variables are set, store
*        the number of video frames to run for (distance times
*        the divider) at SCRL_FRC
*
*        THE BOUNDARYS ARE GUARANTEED TO WORK CORRECTLY
*        FOR UP AND DOWN 2 PIXELS.
*
*        FOR LARGER JUMPS, STAY AWAY FROM LINE ZERO BY THE SIZE
*        OF THE JUMP.
*
*
*        FOR FADING:
*
*        HOW OFTEN (FRAMES) IS STORED IN SCRL_DIV AND SCRL_GO
*        THE POINTER TO THE RAM PALETTE (OF 256 WORDS)
*        IS STORED AT FADE_RAM
*        LASTLY, 8020H SHOULD BE STORED AT SCRL_FRC
*        
BITCHIN_SCROLL
         MOVE    @SCRL_FRC,A0,W            ;SCROLL REQUESTED?
         JRZ     NO_SCROLL_NOW             ;NOPE.....SKIP

         MOVE    @SCRL_GO,A1,W              ;GET THE RAM DIVIDER
         DEC     A1                        ;1 LESS
         MOVE    A1,@SCRL_GO,W
         JRNZ    NO_SCROLL_NOW             ;NOT TIME YET.

         MOVE    @SCRL_DIV,A1,W            ;GET THE DIVIDER
         MOVE    A1,@SCRL_GO,W             ;REFRESH THE COUNTER

         DEC     A0                        ;ONE LESS FRAME TILL SCROLL
         MOVE    A0,@SCRL_FRC,W            ;PUT THIS ONE BACK
         JRNN    DO_SCROLL                 ;ITS POSITIVE....DO THE SCROLL
*
*        SCRL_FRC NEGATIVE.....RUN THE DIMMER
*
         ANDI    1FH,A0                    ;MASK TO CHECK FOR ZERO
         JRNZ    FADE_NOT_DONE
         MOVE    A0,@SCRL_FRC,W            ;DIM DONE....PUT THE ZERO OUT

FADE_NOT_DONE
         MOVE    A0,A1                     ;A0 HAS BLUE LEVEL
         SLL     5,A1                      ;A1 HAS GREEN
         MOVE    A0,A2
         SLL     10,A2                     ;A2 HAS RED LEVEL

         MOVE    @FADE_RAM,A3,L            ;GET A POINTER TO THE PALETTE RAM
         MOVI    256,A4                    ;COUNT 256 COLORS

         MOVI    1FH,A8                    ;BLUE MASK
         MOVI    3E0H,A9                   ;GREEN MASK
         MOVI    7C00H,A10                 ;BLUE MASK

NEXT_CRAM
         MOVE    *A3,A5,W                  ;FETCH A WORD

         MOVE    A5,A6                     ;COPY TO CHECK BLUE
         AND     A8,A6                     ;KEEP THE BLUE
         CMP     A0,A6                     ;IS IT TOO HIGH?
         JRLS    BLUE_OK

         MOVE    A0,A6                     ;USE THE FADER LEVEL

BLUE_OK  MOVE    A5,A7                     ;GET GREEN
         AND     A9,A7                     ;MASK OFF JUST GREEN
         CMP     A1,A7                     ;IS IT TOO HIGH?
         JRLS    GREEN_OK

         MOVE    A1,A7

GREEN_OK AND     A10,A5                  ;MASK RED
         CMP     A2,A5
         JRLS    RED_OK

         MOVE    A2,A5
RED_OK
         ADD     A6,A5
         ADD     A7,A5
         MOVE    A5,*A3+
         DSJS    A4,NEXT_CRAM

         JRUC    NO_SCROLL_NOW

DO_SCROLL
         MOVE    @SCRL_DIR,A6,W            ;GET DISTANCE PER FRAME
         JRN     SCROLL_DOWN_NOW           ;SCROLL THE STUFF DOWN!
*
*        SCROLL THE STUFF UP NOW.
*
         MOVE    @SCRL_SRT,A1,W            ;GET THE STARTING LINE
         MOVE    A1,A4                     ;COPY LINE START
         MOVE    @SCRL_END,A3,W            ;GET ENDING LINE
         MOVI    2000H,A8                  ;DIRECTION OF TRAVEL
         JRUC    SCR_BEG                   ;DO IT!

SCROLL_DOWN_NOW
         MOVE    @SCRL_END,A1,W            ;GET THE STARTING LINE
         MOVE    A1,A3                     ;COPY END LINE
         MOVE    @SCRL_SRT,A4,W            ;GET STARTING LINE
         MOVI    -2000H,A8                 ;DIRECTION OF TRAVEL

SCR_BEG
         SLL     12,A1                     ;SHIFT TO FORM Y COORDINATE
         MOVE    A1,A2                     ;A1 = DESTINATION  A2 = SOURCE
         ADD     A6,A2

* Set SRT=1.  This converts pixel accesses to VRAM SR transfer cycles.
         MOVE    @PSIZE,A7,W              ;SAVE PSIZE
         MOVK    16,A0
         MOVE    A0,@PSIZE,W              ;SET IT TO 16 PLEASE

         SUB     A4,A3                     ;NUMER OF LINES TO XFER IN A3

         SRA     1,A3                      ;DIVIDE BY 2.

         JRZ     NO_SCROLL_NOW             ;THANX FOR JRNP GSP GUYS
         JRN     NO_SCROLL_NOW

	MOVE	@DPYCTL,a14,0 	          ;GET THE CONTROL REGGIE
         MOVE    A14,A5                    ;SAVE DPYCTL REG
	ANDNI	SRE+ENV,a14	          ;Turn off screen refresh
	ORI	SRT,a14		          ;Enable SR transfers
	MOVE	A14,@DPYCTL,0        	;Load new display control
SCR_LOOP
         PIXT    *A2,A4                    ;MEMORY TO SHIFT REGGIES
         PIXT    A4,*A1                    ;SHIFTERS TO MEMORY
         ADD     A8,A1
         ADD     A8,A2                     ;PUSH TO NEXT SET
         DSJS    A3,SCR_LOOP

         MOVE    A5,@DPYCTL,W              ;WRITE THE CONTROL REG BACK OUT

         MOVE    @Y_CORR,A5,L
         SUB     A6,A5
         MOVE    A5,@Y_CORR,L        ;PUT IT IN MEMORY

         MOVE    A7,@PSIZE,W              ;RESTORE PSIZE
NO_SCROLL_NOW
*
*        COIN SWITCH INTERRUPT TIMING
*
*LC_FLAG  EQU     C_FLAGS
*CC_FLAG  EQU     C_FLAGS+BYTE_SIZE
*RC_FLAG  EQU     C_FLAGS+(2*BYTE_SIZE)
*XC_FLAG  EQU     C_FLAGS+(3*BYTE_SIZE)

         .IF     FOURTH_SLOT
         .GLOBAL XCOIN
         .ENDIF

RUN_TIME EQU     32                   ;2ND LONG WORD COUNTS DOWN LONG TIME
OPENS_LEFT EQU   2*32                 ;3RD LONG WORD COUNTS DOWN CONSEC OPENS

PULSE_MAX        EQU     700/16       ;FRAMES TILL ITS TOO LINE.
MIN_OPENS        EQU     4

ACC_LIMIT        EQU     80H          ;AFTER 2 SECONDS OF NO-REPLY....RE-SET FLAG!

COIN_SBIT        EQU     0
COIN_SUCC_BIT    EQU     1
COIN_FAIL_BIT    EQU     2
COIN_ACK_BIT     EQU     3

COIN_SFLAG       EQU     1
COIN_SUCC_VAL    EQU     2
COIN_FAIL_VAL    EQU     4
COIN_ACK_VAL     EQU     8

L_COIN_BIT       EQU     1H
C_COIN_BIT       EQU     4H
R_COIN_BIT       EQU     2H
X_COIN_BIT       EQU     80H

         MOVE    @C_FLAGS,A0,L        ;ANY FLAGS SET?
         JRZ     NO_COIN_WORK         ;NOPE!

         MOVI    C_FLAGS,A10          ;WALK THROUGH THE 3 COUNTERS
         MOVI    3,A9
         MOVI    L_COIN_BIT,A8        ;THIS IS THE BIT TO CHECK
*
*        I BELIEVE THAT LC_FLAG IS IN THE LOW BYTE...THEN CC_FLAG...THEN RC_FLAG
*
NEXT_SLOT
         MOVE    A0,A1                ;GET CURRENT BYTE IN A1
         SRL     8,A0                 ;SHIFT DOWN TO NEXT
         ANDI    0FFH,A1              ;JUST HOLD LEFT SWITCH
         JRZ     TRY_NEXT             ;NOT LEFT

         BTST     COIN_FAIL_BIT,A1    ;FAIL LOOKING FOR OPEN?
         JRZ      CHECK_START         ;YEP...THAT'S ALL WE NEED DO!
*
*        WE'RE IN A FAIL CONDITION SEE IF WE CAN CANCEL IT!
*
         BTST    COIN_ACK_BIT,A1      ;HAS IT BEEN ACKNOWLEDGED?
         JRNZ    FAIL_ACKED           ;YEP.....JUST RUN DOWN THE "OPEN" TIMER
*
*        HASN'T BEEN ACKNOWLEDGED.....TIME DOWN AND AUTO ACK IF
*        PROCESS IS DEAD!        THIS SHOULDN'T HAPPEN, BUT
*        DEADLOCKS ARE UGLY!
*
         MOVB    *A10(RUN_TIME),A3    ;WE'RE RUNNING OUT OF TIME
         DEC     A3
         MOVB    A3,*A10(RUN_TIME)    ;PUT IT BACK!
         JRNZ    TRY_TO_OPEN          ;NOW CONTINUE TO OPEN THE SWITCH
*
*        NO ACK IN ALL THIS TIME!
*        PROVIDE THE ACK OURSELVES!
*
         .IF     DEBUG                ;THIS IS A FAIL-SAFE...TRAP DURING DEBUG
                 JRUC    $
         .ENDIF

         ORI     COIN_ACK_VAL,A1      ;ADD IN THE ACK!
         MOVB    A1,*A10              ;AND STORE IT BACK!
*
*        WE HAVE ACK...HAVE WE HAD OUR OPEN?
*
FAIL_ACKED
         MOVB    *A10(OPENS_LEFT),A3       ;HAVE WE MADE IT?
         JRNZ    TRY_TO_OPEN               ;NOT YET...KEEP TRYING.
*
*        WERE OPEN AND HAVE OUR ACK CLEAR OUT THE FLAGS!
*
         MOVB    A3,*A10                   ;THIS CLEARS OUT THE FLAG
         JRUC    TRY_NEXT                  ;FLAGS ARE CLEAR...STEP TO NEXT

CHECK_START
         BTST    COIN_SBIT,A1         ;"START" FLAG?
         JRNZ    TIME_START           ;YEP......KEEP TIMING
*
*        HERE BY PROCESS OF ELIMINATION...ITS "SUCC" BIT OR
*        SOMTHING ELSE GOT SET.....SIMPLY TIME IT DOWN
*        IN CASE SOMEONE TRASHED IN ON THIS BYTE
*
         MOVB    *A10(RUN_TIME),A3    ;WE'RE RUNNING OUT OF TIME
         DEC     A3
         MOVB    A3,*A10(RUN_TIME)    ;PUT IT BACK!
         JRNZ    TRY_NEXT             ;WHEN IT HITS ZERO...WE'LL CLEAR OUT!

         .IF     DEBUG                ;THIS IS A FAIL-SAFE...TRAP DURING DEBUG
                 JRUC    $
         .ENDIF

         MOVB    A3,*A10              ;CLEAR OUT THE FLAGS...PROC IS GONE!
         JRUC    TRY_NEXT             ;MUST BE SUCCESS...NO ACTION.

TIME_START
         MOVB    *A10(RUN_TIME),A3    ;WE'RE RUNNING OUT OF TIME
         DEC     A3
         MOVB    A3,*A10(RUN_TIME)    ;PUT IT BACK!
         JRNZ    TRY_TO_OPEN          ;NOW CONTINUE TO OPEN THE SWITCH
*
*        THIS ONE TIMED OUT......ITS FAIL FLAG TIME!
*
         MOVI    COIN_FAIL_VAL,A3
         MOVB    A3,*A10              ;WE HAVE FAILURE

         MOVI    ACC_LIMIT,A3
         MOVB    A3,*A10(RUN_TIME)    ;THIS IS TIME LIMIT FOR PROCESS TO ANSWER!
*
TRY_TO_OPEN
         MOVE    @COINS,A2,W          ;THE SWITCH HAS 1/2 SECOND TO OPEN
         AND     A8,A2                ;A1 CONTIAINS ZERO FOR CLOSED
         JRZ     STILL_CLOSED         ;ITS CLOSED...RE-START THE OPEN COUNT
*
*        ITS OPEN
*
         MOVB    *A10(OPENS_LEFT),A3       ;HAVE WE MADE IT?
         JRZ     HIT_ZERO                  ;WE HAVE A LONG ENOUGH OPEN
         DEC     A3
         MOVB    A3,*A10(OPENS_LEFT)       ;PUT IT BACK
         JRNZ    TRY_NEXT                  ;TRY THE NEXT BYTE
*
*        WE HIT ZERO....IF "START FLAG" IS ON THEN WE HAVE SUCCESS
*
HIT_ZERO BTST    COIN_SBIT,A1         ;"START" FLAG?
         JRZ     TRY_NEXT             ;NOPE....

         MOVI    COIN_SUCC_VAL,A3
         MOVB    A3,*A10              ;INDICATE WE MADE IT!

         MOVI    ACC_LIMIT,A3
         MOVB    A3,*A10(RUN_TIME)    ;THIS IS TIME LIMIT FOR PROCESS TO ANSWER!

         JRUC    TRY_NEXT

STILL_CLOSED
         MOVI    MIN_OPENS,A1         ;THIS MANY FRAMES OF OPEN TIL OPEN
         MOVB    A1,*A10(OPENS_LEFT)

TRY_NEXT
         ADDI    8,A10                ;NEXT BYTE
         SLL     1,A8                 ;NEXT COIN BIT

         .IF     FOURTH_SLOT

         DEC     A9
         JRP     NEXT_SLOT            ;STILL ON 1ST 3...
         JRN     NO_COIN_WORK         ;IT WENT NEGATIVE....WE'RE DONE!
*
*        0....1ST 3 ARE DONE.....SETUP FOR 4TH!
*
         SLL     4,A8                 ;SKIP OVER TO THE 4TH ONE
         JRUC    NEXT_SLOT

         .ELSE

         DSJ     A9,NEXT_SLOT

         .ENDIF

NO_COIN_WORK
	DINT
	MOVE	@INTENB,A0,W	;ENABLE DISPLAY INTERRUPT
	ORI	DIE,A0
	MOVE	A0,@INTENB,W

	MOVE	@INTSYNC1,A0,W
	INC	A0
	MOVE	A0,@INTSYNC1,W	;SYNC UP AT END OF SCREEN
	CALLR	SWSCAN		;SCAN SWITCHES TO TRIGGER PROCS.

	MOVE	@IRQLED,A0,W
	INC	A0
	MOVE	A0,@IRQLED,W
	CMPI	8,A0
	JRLT	DIRQX
*
*DO EVERYTHING FROM HERE TO DIRQX EVERY 8 TICKS
	CLR	A0
	MOVE	A0,@IRQLED,W

	MOVE	@SYSCOPY,A0,W	;BLINK L.E.D. TO ACK OPERATION
	XORI	200H,A0
	MOVE	A0,@SYSCOPY,W
	MOVE	A0,@SYSCTRL,W

	MOVI	WDOGBONE,A1		;THROW ROVER A BONE	
	MOVK	1,A3
	MOVE	@SYSCOPY,A2,W
	MOVE	*A1+,A0,W		
ROVERL
	OR	A2,A0	
	MOVE	A0,@SYSCTRL,W
	XOR	A3,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	*A1+,A0,W
	JRNN	ROVERL
 	MOVE	A2,@SYSCTRL,W

DIRQX:
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MMFM	SP,B0,B1,B2,B3,B4,B5
	RETI

*
*WATCHDOG FEED TABLE
WDOGBONE
	.WORD	0
	.WORD	2
	.WORD	0
	.WORD	2
	.WORD	2
	.WORD	0FFFFH

**************************************************************************
*                                                                        *
* END OF SCORE AREA INTERRUPT, USED TO TURN AUTO-ERASE ON, ONLY DURING	 *
* 	GAME PLAY.							 *
*                                                                        *
**************************************************************************
DIRQ2
	MOVI	HSINT,A0
	MOVE	A0,@DPYINT	;RESET FOR HALF SCREEN INTERRUPT

	MOVE	@GAMERASE,A0
	JREQ	DIRQ2A		;DON'T ENABLE AUTOERASE 
	MOVE	@NOAUTOE,A0,W
	JRNE	DIRQ2A

	MOVE	@SYSCOPY,A0,W
	ANDNI	AUTOERAS,A0  	;AUTO ERASE IS ENABLED LOW
	MOVE	A0,@SYSCOPY,W	;STORE EVERYWHERE I DID GO
	MOVE	A0,@SYSCTRL,W
DIRQ2A
	DINT
	MOVE	@INTENB,A0,W	;ENABLE DISPLAY INTERRUPT
	ORI	DIE,A0
	MOVE	A0,@INTENB,W
	JRUC	DIRQX

*
*SWITCHES SCANNED HERE WILL ACTIVATE THE PROCESSES IN THE SWITCH PROCESS
*TABLE.
*BASHES A0,A1,A2 & A3 SO BEWARE!
SWSCAN:
	MOVE	@SWITCH,A0,L
	MOVE	@SWTEMP1,A1,L	;PREVIOUS STATE T=N-1
	MOVE	@SWTEMP2,A2,L	;PREVIOUS PREVIOUS T=N-2
	MOVE	A1,@SWTEMP2,L	;NEW PREVIOUS PREVIOUS
	MOVE	A0,@SWTEMP1,L	;NEW PREVIOUS
	AND	A1,A2
	ANDN	A0,A2		;LOOK FOR 110
	JREQ	SWSCX		;NO SWITCHES
	MOVE	@SWSTACK,A3,L	;SWITCH ACTIVATION STACK
SWSCLP:				;FIND BIT SET
	CMPI	SWSTMN,A3	;SWITCH STACK OVERFLOW?
	JREQ	SWSCX1		;YEP, QUIT
****	ZEXT	A2
	LMO	A2,A0		;1'S COMP LEFTMOST BIT
	RL	A0,A2		;GET RID OF BIT
	SLL	1,A2
	MOVK	31,A1		;CALC TRUE BIT #
	SUB	A0,A1
	MOVE	A1,-*A3		;PUSH SWITCH NUMBER ON STACK (0-15)
	RL	A1,A2		;RESTORE SWITCH WORD WITHOUT BIT
	JRNE	SWSCLP
SWSCX1:
	MOVE	A3,@SWSTACK,L	;RESTORE SWITCH STACK
SWSCX:
	RETS

*CYCLE DOWN SOME COLOR RAM
*A13 = FIRST COLOR OF STRING
*A1  = # OF COLORS TO CYCLE
CCYCDN	MOVE	*A13,A0		;SAVE THE FIRST
	MOVE	A13,A14
	ADDK	16,A14		;A14 = NEXT COLOR 
SUCK	MOVE	*A14+,*A13+	;CYCLE DOWN ONE
	DSJS	A1,SUCK
	MOVE	A0,*A13		;FIRST BECOMES LAST
	RETS

*LINES ALOT
*DRAW THE MORAY PATTERN
LINEC
	MMTM	A12,A8,A9
	CALLA	CLR_SCRN		;WIPE THE SCREEN
	CALLA	CMAPRS

	CLR	A0			;SELECT COLOR MAP 0
	MOVI	[200,256],A2					 
	MOVI	0E0E0E0E0h,A1					 
	MOVI	[18,10],A3					 
	CALLR	LINEX							 
									 
	MOVI	[19,512],A3					 
	CALLR	LINEY							 
									 
	MOVI	[390,10],A3					 
	CALLR	LINEX							 
									 
	MOVI	[19,10],A3						 
	CALLR	LINEY							 

	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROCESSOR ON

	MOVI	[200,256],A0
	MOVE	A0,@SCRNTL,L
	MOVE	A0,@SCRNLR,L		;MAKE THE SCREEN WINDOW A POINT

**************************************************************************
*                                                                        *
* 	MOVI	WILLINIT,A14						 *
* 	CALLA	INITPAL							 *
* 	CALLA	GETOBJ							 *
* 	MOVE	A0,A9							 *
* 	CALLA	STFOBJ							 *
* 	CALLA	INSOBJ							 *
* 	CALLA	INITPAL							 *
* 	CALLA	GETOBJ							 *
* 	MOVE	A0,A8							 *
* 	CALLA	STFOBJ							 *
* 	CALLA	INSOBJ							 *
* 	MMTM	A12,A8,A9,A10,A11					 *
* 	MOVI	[-4,-4],A8						 *
* 	MOVI	[4,4],A9						 *
* 	MOVI	SCRNST,A10						 *
* 	MOVI	SCRNEND,A11	;GET THESE FOR PROCESSING		 *
* 	JSRP	SCBLOWUP						 *
* 	MMFM	A12,A8,A9,A10,A11					 *
* 	SLEEP	10							 *
* 	MOVE	A8,A0							 *
* 	CALLA	DELPAL							 *
* 	CALLA	DELOBJ							 *
* 	MOVE	A9,A0							 *
* 	CALLA	DELPAL							 *
* 	CALLA	DELOBJ							 *
*                                                                        *
**************************************************************************
	MMFM	A12,A8,A9
	RETP

LINEX
	MMTM	SP,A1,A3,A4,A5
	MOVI	0EFEFEFEFH,A4
	MOVI	512,A5
LINEX1
	CALLA	LINE
	ADDK	3,A3
	CMP	A4,A1
	JRLO	LINEX2
	MOVI	0DFDFDFDFH,A1
LINEX2
	ADDI	01010101H,A1
	CMPXY	A5,A3
	JRXLE	LINEX1
	MMFM	SP,A1,A3,A4,A5
	RETS

LINEY 
	MMTM	SP,A1,A3,A4,A5
	MOVI	0EFEFEFEFH,A4
	MOVI	[389,0],A5
LINEY1
	CALLA	LINE
	ADDI	[3,0],A3
	CMP	A4,A1
	JRLO	LINEY2
	MOVI	0DFDFDFDFH,A1
LINEY2
	ADDI	01010101H,A1
	CMPXY	A5,A3
	JRYLE	LINEY1
	MMFM	SP,A1,A3,A4,A5
	RETS

**************************************************************************
*                                                                        *
* *									 *
* *INIT TABS FOR NARC LOGO						 *
* WILLINIT								 *
* 	.LONG	0,0,160*10000H,140*10000H				 *
* 	.WORD	1,0							 *
* 	.LONG	WILLBALL,0,DUMCOLL					 *
* 	.WORD	DMAWNZ,0						 *
* 	.LONG	0							 *
* NARCINIT								 *
* 	.LONG	0,0,256*10000H,200*10000H				 *
* 	.WORD	0,0							 *
* 	.LONG	NARC2A,0,DUMCOLL					 *
* 	.WORD	DMAWNZ,0						 *
* 	.LONG	0							 *
*                                                                        *
**************************************************************************

**************************************************************************
*                                                                        *
* ADVANCE - ADVANCE SWITCH PROCESS					 *
*                                                                        *
**************************************************************************
**************************************************************************
*                                                                        *
* ADVANCE								 *
* 	MOVE	@GAMSTATE,A0,W						 *
* 	CMPI	INDIAG,A0						 *
* 	JAEQ	WARMSET			;BR = ALREADY HERE		 *
* 	MOVI	INDIAG,A0						 *
* 	MOVE	A0,@GAMSTATE,W						 *
* 	CLR	A1							 *
* 	CALLA	KILALL			;KILL EVERYONE			 *
* 	CALLA	WIPEOUT							 *
* 	CALLA	QSNDRST			;RESET THE SOUND BOARD		 *
* 	MOVK	1,A0							 *
* 	MOVE	A0,@DISPLAYON,W		;DISPLAY PROC ON		 *
* 	CALLA	AUDITPAG		;OUTPUT THE AUDIT PAGE		 *
* ADVLP									 *
* 	SLOOP	5,ADVLP							 *
*                                                                        *
**************************************************************************

**************************************************************************
*                                                                        *
* FREEZE - PROCESS TO FREEZE THE GAME ACTION WHEN THE EDGE FROM		 *
* 	 AUTO-UP TO MANUAL-DOWN IS DETECTED. GAME RESUMES WHEN		 *
* 	 THE BUTTON IS PUT BACK TO THE AUTO-UP POSITION.		 *
* 	 TAKE THIS SHIT OUT EVENTUALLY.					 *
*                                                                        *
**************************************************************************
FREEZE	 
	MOVE	@GAMSTATE,A0
	CMPI	INDIAG,A0
	JREQ	FREEZEDI		;NO FREEZE SHIT DURING DIAGNOSTICS
	CALLA	SYNCHALF
	MOVE	@NOAUTOE,A8,W
	MOVK	1,A0
	MOVE	A0,@NOAUTOE,W
	CALLA 	AUTOEOFF		;SHUT OFF AUTO-ERASE
	CLR	A0
	MOVE	A0,@DISPLAYON,W
	CALLA	DMAQWAIT		;BLOW OUT THE QUEUE'D IMAGES
	PUSHST
	DINT
	CALLR	WDOGDIS
FREEZEL
	MOVE	@COINS,A0,W		;GET THE COIN DOOR SWITCHES	
	BTST	5,A0
	JREQ	FREEZEL			;LOOP 'TIL BUTTON COMES UP	
	POPST
	MOVE	A8,@NOAUTOE,W
	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W
FREEZEDI
	DIE

**************************************************************************
*                                                                        *
* GETWAVE - GET WAVE DIFFICULTY, WITH CURRENT GAME SPECS		 *
* NOTE: TRASHES A0 & A1							 *
*                                                                        *
**************************************************************************
GETWAVE
	ADJUST	ADJDIFF		;GET MASTER DIFFICULTY
	MOVE	A0,A1
	CMPI	MAXDIFF,A1
	JRLS	GETDIFOK	;BR = DIFFICULTY SETTING IS O.K.
	MOVI	MAXDIFF,A1	;INSERT MAXIMUM ALLOWED DIFFICULTY
GETDIFOK
	MOVE	@WAVE,A0,W	
	CMPI	NWAVES,A0
	JRLE	GETWAV
	SUBK	NWAVES,A0
	JRUC	GETWAV
*
*GET WAVE DIFFICULTY PARAMETERS
*CALLING PARAMETERS:
*A0: WAVE NUMBER
*A1: DIFFICULTY FACTOR
*
GETWAV:
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8
	SLL	28,A0		;ONLY SIGNIFICANT TO 4 BITS RIGHT NOW
	SRL	24,A0
****	SLL	4,A0		;ADJUST FOR WORD
	SUBK	5,A1
	MOVI	DIFRAM,A2
	MOVI	WAVETAB,A3
GETWVLP:	
	MOVE	A3,A5
	MOVE	*A5+,A7,W  	;GET DIFFICULTY DELTA
	MOVE	*A5+,A6,W	;GET MIN
	MOVE	*A5+,A4,W	;GET MAX
	ADD	A0,A5
	MOVE	*A5,A8,W	;GET WAVE VALUE
	MPYS	A1,A7
	ADD	A7,A8		;ADD IN DELTA
	CMP	A8,A6	
	JRLS	GETWV1		;CHECK FOR MIN
	MOVE	A6,A8
	JRUC	GETWV2
GETWV1:
	CMP	A8,A4		;CHECK FOR MAX
	JRHS	GETWV2
	MOVE	A4,A8
GETWV2
	MOVE	A8,*A2+,W	;STORE IT AWAY
	ADDI	14*16,A3	;OFFSET TO NEXT TABLE ENTRY
	CMPI	ENDIFRAM,A2
	JRLO	GETWVLP		;NOT DONE
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8
	RETS

*
*PTRS TO PROCESS TABLES FOR EACH WAVE
WAVEPROC
	.LONG	PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1	
	.LONG	PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1	
	.LONG	PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1,PROCTAB1

*
*WAVE PROCESS START UP TABLES, NULL TERMINATED
PROCTAB1
	.LONG	CPCOLADJ
	.WORD	0C0H
	.LONG	CEDETECT
	.WORD	0CEH
	.LONG	CBDETECT
	.WORD	0CBH
	.LONG	CEBDETCT
	.WORD	0CAH
	.LONG	SCRREF
	.WORD	SCORPID
	.LONG	0

**************************************************************************
*                                                                        *
* INITIO - INITIALIZE THE GSP I/O REGISTERS				 *
*                                                                        *
**************************************************************************
INITIO
	MMTM	SP,B0,B2,B10
*INITIALIZE I/O
	MOVI	HESYNC,B2,L
	MOVI	INITDATA,B0,L
	MOVI	(IDATAEND-INITDATA)/16,B10
INITIOS:
	MOVE	*B0+,*B2+
	DSJS	B10,INITIOS
	MMFM	SP,B0,B2,B10
	RETS

*
*DUMMY FOR THE SWITCHES
DUMDIE	JAUC	SUCIDE		;NOTHING PROCESS

**************************************************************************
*                                                                        *
* BADTRAP - COME HERE WHEN A TRAP IS HIT THAT IS NOT DEFINED AND LOG IT. *
*                                                                        *
**************************************************************************
BADTRAP
*LET'S PASS SOME INFO TO LINKY
	CALLERR	0+1		;ADD ONE FOR THE STATUS REG PUSH
	AUDIT	AUDTRAP
	MOVE	@GAMSTATE,A1,W
	CMPI	INPLAY,A1
	JREQ	BADBONUS
	CMPI	INGAME,A1
	JANE	WARMSET		;CRASH IN SPACE, RESET SYSTEM
BADBONUS
	AUDIT	AUDBONE
	JAUC	BONUSNOW	;GO TO THE BONUS SCREEN, RIGHT NOW

**************************************************************************
*                                                                        *
* ERRORLOG - THIS SHOULD BE CALLED IN PLACE OF ANY JRxx $		 *
* 		IN CASE OF ERROR. IF WE ARE IN DEBUG MODE		 *
* 		IT WILL HANG, IF NOT, THE ERROR WILL BE LOGGED		 *
* 		AND IT WILL RETURN.					 *
* A1 = RETURN ADDRESS OF CALLING ROUTINE				 *
*                                                                        *
**************************************************************************
ERRLOG1
	.IF DEBUG
	 DINT
	 JRUC	$
	.ENDIF
	MMTM	SP,A2,A3,A4,A5,A6,A7
	MOVI	1,A2
	SLL	16,A2
	JRUC	ERRLOGG
ERRLOG2
	.IF DEBUG
	 DINT
	 JRUC	$
	.ENDIF
	MMTM	SP,A2,A3,A4,A5,A6,A7
	MOVI	2,A2
	SLL	16,A2
	JRUC	ERRLOGG
ERRORLOG
	.IF DEBUG
	 DINT
	 JRUC	$
	.ENDIF
	
	MMTM	SP,A2,A3,A4,A5,A6,A7
	CLR	A2
ERRLOGG
	MOVE	A13,A7		;PROC. BLOCK IN A7

	MOVE	*A7(PROCID),A6,W
	SLL	16,A6
	MOVE	*A8(OID),A3,W
	MOVX	A3,A6		;A6 = [PROCID,*A8(OID)]		

	MOVE	@WAVE,A5,W
	SLL	16,A5
	MOVE	*A0(OID),A3,W
	MOVX	A3,A5		;A5 = [WAVE#,*A0(OID)]

	MOVI	AUD1STRT,A4
	CALLR	GETAUD4
	SLL	16,A4
	MOVE	@WORLDTL,A3,W
	MOVX	A3,A4

	MOVE	@GAMSTATE,A3,W	;GET THE CURRENT GAME STATE
	MOVX	A3,A2

	MOVE	*SP(0C0H),A3,L	;GET THE RETURN ADDRESS

	CALLA	ADD_DUMP

	MOVE	@SURVCNT,A2,W
	INC	A2		;INCREMENT THE SURVIVAL COUNT
	MOVE	A2,@SURVCNT,W

	MMFM	SP,A2,A3,A4,A5,A6,A7
	RETS

**************************************************************************
*                                                                        *
* GETAUD4 - GET AN AUDIT						 *
* A4 = AUDIT #								 *
* RETURNS:								 *
* A4 = AUDIT								 *
*                                                                        *
**************************************************************************
GETAUD4
	MMTM	SP,A0,A1
	MOVE	A4,A0
	CALLA	GET_AUD
	CALLA	DEF_PAGE             ;POINT AT DEFAULT PAGE.
	MOVE	A1,A4
	MMFM	SP,A0,A1
	RETS

*
*INTERFACE TO DIAGNOSTICS
DIAGADDR .EQU	0FFF77000H	;FIXED ADDRESS FOR DIAGNOSTIC ROUTINES
*JUMP TABLE VECTORS
ROMTEST	.EQU	DIAGADDR	
CPUTEST	.EQU	DIAGADDR+30H
SWTEST	.EQU	DIAGADDR+60H
COLORBR	.EQU	DIAGADDR+90H
CROSSHCH .EQU	DIAGADDR+0C0H
COPYSCRN .EQU	DIAGADDR+0F0H
BURNINT	.EQU	DIAGADDR+120H
PWRONTST .EQU	DIAGADDR+150H

*
*DO ROM TEST
ROM_CHK
	MMTM	SP,A12,A13
	CALLR	CHECKROM
	MMFM	SP,A12,A13
	RETS
*
*DO SWITCH TEST
SW_CHK
	MMTM	SP,A12,A13
	CALLR	CHECKSW
	MMFM	SP,A12,A13
	RETS
*
*PUT UP THE COLOR BARS
COL_BARS
	MMTM	SP,A12,A13
	CALLR	COLORBARS
	MMFM	SP,A12,A13
	RETS
*
*PUT UP THE CROSS HATCH PATTERN
CROSS_H
	MMTM	SP,A12,A13
	CALLR	CROSSHATCH
	MMFM	SP,A12,A13
	RETS

*
*JUMP TO THE SYSTEM BURN-IN TEST
BURN_IN
	DINT
	CALLR	WDOGDIS			;NO DOGGIES
	JAUC	BURNINT

*
*DO CPU TEST, RETURNS TO CPUTESTR
CPU_CHK
	DINT
	CALLR	WDOGDIS
	JAUC	CPUTEST
*
*CPU TEST RETURN POINT
CPUTESTR
	MOVI	RT_RET,B0
	JRUC	BTESTR
*ROM BOARD TEST RETURN POINT
ROMTESTR
	MOVI	ROM_RET,B0
BTESTR
	DINT
	SETF	16,1,0	;WORD NO SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVI	STCKST,SP,L
	CALLA	CLRPINIT
	MOVI	INDIAG,A0
	MOVE	A0,@GAMSTATE,W
	MOVI	WDOGNUM,A0
	MOVE	A0,@WDOGRAM,L		;MARK SYSTEM AS INITIALIZED 
	CALLR	INITIO			;INITIALIZE THE I/O REGS
	CALLA	SETPPROC
	CLR	A0
	MOVE	A0,@DMACTRL	  	;OFF DMA
	MOVE	A0,@CMAPSEL		;CLEAR COLOR MAP SELECT
	MOVE	A0,@IRQLED
	MOVE	A0,@MAINLED
	MOVI	81261A8CH,A0
	MOVE	A0,@RAND,L
	MOVI  	DIE,A0
	MOVE  	A0,@intenb		;enable display interrupts
	MOVI	SWSTST,A0
	MOVE	A0,@SWSTACK,L
	MOVI	0FFFFh,A0
	MOVE	A0,@PSWTMP1
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	A0,@SYSCOPY,W		;KEEP A COPY IN RAM
	MOVI	TOD_TAB,A8           ;ALWAYS CLEAR OUT TODAYS TABLE
	CALLA	INIT_TAB             ;DEFINE THESE AS GLOBAL 
	CALLR	CLRALLPD
	MOVI	SCOREINT,A0
	MOVE	A0,@SINTRAM,W
	CALLA	OINIT
	MOVI	ACTIVE,A13
	MOVE	B0,A7
	MOVI	DIAG_PID,A1
	CALLA	GETPRC			;CREATE PROCESS FOR RETURN
	MOVI	INAMODE,A0
	MOVE	A0,@GAMSTATE,W
	EINT	
	JRUC	MAINLP

*
*CHECK THE ROM BOARD, THIS IS THE ONLY PLACE TO CALL ROMTEST
*NO REGISTERS ARE PRESERVED
CHECKROM
	PUSHST
	DINT
	MOVE	SP,@SPTEMP,L
	CALLR	WDOGDIS
	JAUC	ROMTEST
**************************************************************************
*                                                                        *
* ROMTESTR								 *
* 	SETF	16,1,0	;WORD SIGN EXTEND				 *
* 	SETF	32,1,1	;LONG WORD					 *
* 	MOVE	@SPTEMP,SP,L						 *
* 	POPST								 *
* 	RETS								 *
*                                                                        *
**************************************************************************
*
*CHECK THE ROM SWITCHES, THIS IS THE ONLY PLACE TO CALL SWTEST
*NO REGISTERS ARE PRESERVED
CHECKSW
	PUSHST
	DINT
	MOVE	SP,@SPTEMP,L
	CALLR	WDOGDIS
	JAUC	SWTEST
SWTESTR
	SETF	16,1,0	;WORD SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVE	@SPTEMP,SP,L
	POPST
	RETS

*
*PUT UP CONVERGENCE PATTERN, THIS IS THE ONLY PLACE TO CALL CROSSHCH
*NO REGISTERS ARE PRESERVED
CROSSHATCH
	PUSHST
	DINT
	MOVE	SP,@SPTEMP,L
	CALLR	WDOGDIS
	JAUC	CROSSHCH
CROSSHCHR
	SETF	16,1,0	;WORD SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVE	@SPTEMP,SP,L
	POPST
	RETS
*
*PUT UP COLOR BARS, THIS IS THE ONLY PLACE TO CALL COLORBR
*NO REGISTERS ARE PRESERVED
COLORBARS
	PUSHST
	DINT
	MOVE	SP,@SPTEMP,L
	CALLR	WDOGDIS
	JAUC	COLORBR
COLORBRR
	SETF	16,1,0	;WORD SIGN EXTEND
	SETF	32,1,1	;LONG WORD
	MOVE	@SPTEMP,SP,L
	POPST
	RETS

*
*SWITCH PROCESS ACTIVATION TABLE. THE PROCID IS THE FLAG LOCATION. 
*
SWTAB:
	.WORD	0606h	;PROCESS ID SWITCH 0	-- PLAYER 1 UP
	.LONG	DUMDIE	;STARTING ADDR		    THIS IS CLRSWPRC DEFAULT

	.WORD	0606h	;PROCESS ID SWITCH 1	-- PLAYER 1 DOWN
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 2    -- PLAYER 1 LEFT
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 3	-- PLAYER 1 RIGHT
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 4	-- PLAYER 1 CROUCH
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 5	-- PLAYER 1 FIRE
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 6	-- PLAYER 1 JUMP
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 7	-- PLAYER 1 ROCKET BOMB
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 8	-- PLAYER 2 UP
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 9	-- PLAYER 2 DOWN
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 10	-- PLAYER 2 LEFT
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 11	-- PLAYER 2 RIGHT
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 12	-- PLAYER 2 CROUCH
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606h	;PROCESS ID SWITCH 13 	-- PLAYER 2 FIRE
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	0606H	;PROCESS ID SWITCH 14	-- PLAYER 2 JUMP	
	.LONG	DUMDIE	;STARTING ADDR

    	.WORD	0606H	;PROCESS ID SWITCH 15	-- PLAYER 2 ROCKET BOMB
	.LONG	DUMDIE	;STARTING ADDR

	.WORD	LC_PID	 ;PROCESS ID SWITCH 16	-- LEFT COIN
	.LONG	LCOIN	 ;STARTING ADDR

	.WORD	RC_PID	 ;PROCESS ID SWITCH 17	-- RIGHT COIN
	.LONG	RCOIN	 ;STARTING ADDR

	.WORD	CC_PID	 ;PROCESS ID SWITCH 18	-- CENTER COIN
	.LONG	CCOIN	 ;STARTING ADDR

	.WORD	SLAM_PID ;PROCESS ID SWITCH 19	-- SLAM TILT
	.LONG	SLAM_SW	 ;STARTING ADDR

	.WORD	DIAG_PID ;PROCESS ID SWITCH 20	-- ADVANCE
	.LONG	DIAG	 ;STARTING ADDR

	.WORD	0606H	 ;PROCESS ID SWITCH 21	-- AUTO-UP/MANUAL-DOWN
	.LONG	FREEZE	 ;STARTING ADDR

	.WORD	DIAG_PID ;PROCESS ID SWITCH 22	-- HIGH SCORE RESET
	.LONG	CASHBUT	 ;STARTING ADDR		   (****over under cashbox sw)

	.WORD	XC_PID	;PROCESS ID SWITCH 23	-- WHO KNOWS.  (I DO!)
         .IF     FOURTH_SLOT
	.LONG   XCOIN	;STARTING ADDR
         .ELSE
         .LONG   DUMDIE
         .ENDIF

	.WORD	P1SWPID	;PROCESS ID SWITCH  24	-- PLAYER 1 START	
	.LONG	P1START	;STARTING ADDR		   IN-DEE-STRUHKT-AH-BALL

    	.WORD	P2SWPID	;PROCESS ID SWITCH  25	-- PLAYER 2 START
	.LONG	P2START	;STARTING ADDR		   INDYSTRUCHTABYLL

	.WORD	0606H	 ;PROCESS ID SWITCH 26	-- NON-PHYSICAL SWITCH
	.LONG	DUMDIE	 ;STARTING ADDR

	.WORD	0606H	 ;PROCESS ID SWITCH 27	-- CMOS MEMORY PROTECT
	.LONG	DUMDIE	 ;STARTING ADDR

	.WORD	0606H	 ;PROCESS ID SWITCH 28	-- NON-PHYSICAL SWITCH
	.LONG	DUMDIE	 ;STARTING ADDR

	.WORD	0606H	 ;PROCESS ID SWITCH 29	-- NON-PHYSICAL SWITCH
	.LONG	DUMDIE	 ;STARTING ADDR

	.WORD	0606H	 ;PROCESS ID SWITCH 30	-- FRENCH JUMPER (1=FRANCE)
	.LONG	DUMDIE	 ;STARTING ADDR

	.WORD	0606H	 ;PROCESS ID SWITCH 31	-- GERMAN JUMPER (1=GERMANY)
	.LONG	DUMDIE	 ;STARTING ADDR

	.WORD	0B0h	 ;PROCESS ID SWITCH 32	-- DUMMY SWITCH
	.LONG	P1BULL	 ;STARTING ADDR			USED FOR P1 BULLET

	.WORD	0B1h	 ;PROCESS ID SWITCH 33	-- DUMMY SWITCH
	.LONG	P2BULL	 ;STARTING ADDR			USED FOR P2 BULLET

	.WORD	0B0h	 ;PROCESS ID SWITCH 34	-- DUMMY SWITCH
	.LONG	P1CARBUL ;STARTING ADDR			USED FOR P1 CAR BULLET

	.WORD	0B1h	 ;PROCESS ID SWITCH 35	-- DUMMY SWITCH
	.LONG	P2CARBUL ;STARTING ADDR			USED FOR P2 CAR BULLET

	.WORD	0606h	 ;PROCESS ID SWITCH 36	-- DUMMY SWITCH
	.LONG	TSHADST1 ;STARTING ADDR			P1 SHADOW START

	.WORD	0606h	 ;PROCESS ID SWITCH 37	-- DUMMY SWITCH
	.LONG	TSHADST2 ;STARTING ADDR			P2 SHADOW START

	.WORD	0606h	 ;PROCESS ID SWITCH 38	-- DUMMY SWITCH
	.LONG	TSHADDL1 ;STARTING ADDR			P1 SHADOW DELETE

	.WORD	0606h	 ;PROCESS ID SWITCH 39	-- DUMMY SWITCH
	.LONG	TSHADDL2 ;STARTING ADDR			P2 SHADOW DELETE

	.WORD	0606h	 ;PROCESS ID SWITCH 40	-- DUMMY SWITCH
	.LONG	LSHADST1 ;STARTING ADDR			P1 LEG SHADOW START

	.WORD	0606h	 ;PROCESS ID SWITCH 41	-- DUMMY SWITCH
	.LONG	LSHADST2 ;STARTING ADDR			P2 LEG SHADOW START

	.WORD	0606h	 ;PROCESS ID SWITCH 42	-- DUMMY SWITCH
	.LONG	LSHADDL1 ;STARTING ADDR			P1 LEG SHADOW DELETE

	.WORD	0606h	 ;PROCESS ID SWITCH 43	-- DUMMY SWITCH
	.LONG	LSHADDL2 ;STARTING ADDR			P2 LEG SHADOW DELETE

	.WORD	PROUTPID ;PROCESS ID SWITCH 44  -- DUMMY SWITCH
	.LONG	POUTOFRK ;STARTING ADDR			PLAYER OUT OF ROCKETS

	.WORD	0606H	 ;PROCESS ID SWITCH 45  -- DUMMY SWITCH
	.LONG	SLOWPCAR ;STARTING ADDR			SLOW THE PLAYER'S CAR

	.WORD	0B0h	 ;PROCESS ID SWITCH 46	-- DUMMY SWITCH
	.LONG	PBOMBP1	 ;STARTING ADDR			USED FOR P1 BULLET

	.WORD	0B1h	 ;PROCESS ID SWITCH 47	-- DUMMY SWITCH
	.LONG	PBOMBP2	 ;STARTING ADDR			USED FOR P2 BULLET

	.WORD	0606H	 ;PROCESS ID SWITCH 48  -- DUMMY SWITCH
	.LONG	KILLCHOY ;STARTING ADDR			KILL THE CHOPPERS Y VEL

	.WORD	CRCPID	 ;PROCESS ID SWITCH 49  -- DUMMY SWITCH
	.LONG	CRCMESS	 ;STARTING ADDR			OUTPUT A MESSAGE

* VIDEO CONTROL REGISTERS INITIAL VALUES
INITDATA:
    .word   01Ch		;>C0000000 -- hesync
    .word   03Dh		;>C0000010 -- heblnk
    .word   013Dh		;>C0000020 -- hsblnk
    .word   0150h		;>C0000030 -- htotal

   .IF INTRLACE
    .WORD   0003H			; VESYNC
    .WORD   001BH			; VEBLNK
    .WORD   00E3H			; VSBLNK
    .WORD   0100H			; VTOTAL
    .WORD   0B020H			; DPYCTL
   .ELSE
    .WORD   0003H			; VESYNC
    .WORD   001BH			; VEBLNK
    .WORD   01ABH			; VSBLNK
    .WORD   01B0H			; VTOTAL
    .WORD   0F010H			; DPYCTL
   .ENDIF

    .word   0FFFCh		;>C0000090 -- dpystrt
    .word   HSINT		;>C00000A0 -- dpyint * INITIALLY HALF SCREEN
    .word   INI_CTRL		;>C00000B0 -- control
    .word   00h			;>C00000C0 -- hstdata
    .word   00h			;>C00000D0 -- hstadrl
    .word   00h			;>C00000E0 -- hstadrh
    .word   00h			;>C00000F0 -- hstctll
    .word   00h			;>C0000100 -- hstctlh
    .word   00h			;>C0000110 -- intenbl
    .word   00h			;>C0000120 -- intpend
    .word   00h			;>C0000130 -- convsp
    .word   00h			;>C0000140 -- convdp
    .word   PXSIZE		;>C0000150 -- psize
    .word   00h			;>C0000160 -- pmask
    .word   00h			;>C0000170 -- RESERVED
    .word   00h			;>C0000180 -- RESERVED
    .word   00h			;>C0000190 -- RESERVED
    .word   00h			;>C00001A0 -- RESERVED
    .word   00h			;>C00001B0 -- DPYTAP
IDATAEND:

	.STRING	"NNAARRCC  CCOOPPYYRRIIGGHHTT  ((CC))  11998888  "
    .STRING "WWIILLLLIIAAMMSS  EELLEECCTTRROONNIICCSS  GGAAMMEESS,,  IINNCC.."  
	.EVEN

*
*INITIALIZE ALL 32 TRAP VECTORS
*
	.SECT	"VECTORS"

	.LONG	BADTRAP		;TRAP 31
	.LONG	BADTRAP		;TRAP 30	ILLOP --- Illegal Opcode
	.LONG	BADTRAP		;TRAP 29
	.LONG	BADTRAP		;TRAP 28
	.LONG	BADTRAP		;TRAP 27
	.LONG	BADTRAP		;TRAP 26
	.LONG	BADTRAP		;TRAP 25
	.LONG	BADTRAP		;TRAP 24
	.LONG	BADTRAP		;TRAP 23
	.LONG	BADTRAP		;TRAP 22
	.LONG	BADTRAP		;TRAP 21
	.LONG	BADTRAP		;TRAP 20
	.LONG	BADTRAP		;TRAP 19
	.LONG	BADTRAP		;TRAP 18
	.LONG	BADTRAP		;TRAP 17
	.LONG	BADTRAP		;TRAP 16
	.LONG	BADTRAP		;TRAP 15
	.LONG	BADTRAP		;TRAP 14
	.LONG	BADTRAP		;TRAP 13
	.LONG	BADTRAP		;TRAP 12
	.LONG	BADTRAP		;TRAP 11	WV --- Window Violation
	.LONG	DIRQ		;TRAP 10	DI --- Display Interrupt
	.LONG	BADTRAP		;TRAP 9		HI --- Host Interrupt
	.LONG	BADTRAP		;TRAP 8		NMI -- NonMaskable Interrupt
	.LONG	BADTRAP		;TRAP 7
	.LONG	BADTRAP		;TRAP 6
	.LONG	BADTRAP		;TRAP 5
	.LONG	BADTRAP		;TRAP 4
	.LONG	BADTRAP		;TRAP 3
	.LONG	BADTRAP		;TRAP 2		INT2 --- External Interrupt 2
	.LONG	DMAINT		;TRAP 1		INT1 --- External Interrupt 1
	.LONG	POWERUP		;TRAP 0		Reset

	.END
