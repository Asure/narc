	.FILE	'NARCDOOR.ASM'
	.TITLE	" <<< N  A  R  C  -- WE HAVE DOORS OF ALL TYPES >>>"

**************************************************************************
*                                                                        *
* 	COPYRIGHT (C) 1988 WILLIAMS ELECTRONICS GAMES, INC. 		 *
* 	ALL RIGHTS RESERVED.						 *
*                                                                        *
**************************************************************************

	.OPTION	B,D,L
	.MNOLIST

*	GET THE SYSTEM STUFF
	.INCLUDE	"\video\MPROCEQU.ASM"	;MPROC equates
	.INCLUDE	"\video\DISPEQU.ASM"	;Display processor equates
	.INCLUDE	"\video\GSP.INC"	;GSP assembler equates
	.INCLUDE	"\video\SYS.INC"	;Zunit system equates
	.INCLUDE	"\video\MACROS.HDR"	;Macros, Yeah!
*	LOCAL STUFF
	.INCLUDE	"NARCEQU.ASM"		;NARC Equates
	.INCLUDE	"NARCAUDN.ASM"
	.INCLUDE	"IMGTBL.GLO"		;Image Label Equates

*
*GLOBALS IN THIS FILE
	.GLOBAL	GRNHSCOL,DENDCOLS,DOGRMCOL,DENDCOLR,BUGRMCOL
	.GLOBAL	DMPRMCOL,DENDCOLB,SENDCOLB,SENDCOLS,SENDCOLR,SAFECOLL
	.GLOBAL	SAFECOLL,SLOTCOLS,SLOTCOLR,SLOTCNDG,SLOTCNDS,LABCOL
	.GLOBAL	SLOTCOLB,SLOTCOLG,SLOTCOLGR,SUBRMCOL,REDDP,SILVDP,GOLDDP
	.GLOBAL	GETSUBDR,SUBOPEN,SLOTCOLH,HEADDP,BLUEDP
	.GLOBAL	SENDCOLGR,CLWRMCOL,CHOPWCOL,DENDCOLGR
*
*EXTERNALS
	.GLOBAL	BIGOBAK,BIGODSP,LOFHDSP,GRNHSDSP,GRNHSBAK,LABBAK,CHOPBAK
	.GLOBAL	DOGRBAK,DOGRDSP,DRUGRDSP,CHOPDSP
	.GLOBAL	BUGRDSP,DMPRDSP,DMPRBAK,BUGRBAK
	.GLOBAL	SUBBAK,CLWRDSP,CLWRBAK
	.GLOBAL	SILVBAK,REDBAK,BLUEBAK,GOLDBAK,HEADBAK
	.GLOBAL	REDDSP,BLUEDSP,SILVDSP,GOLDDSP,HEADDSP
	.GLOBAL	AUD,AUD1,BOTHPON

	.TEXT

**************************************************************************
*                                                                        *
* DOOROP - ATTEMPT TO OPEN THE DOOR THAT THE OBJECT IS AT.		 *
* A0 = SOUND TO MAKE 0 = NO SOUND					 *
* A8 = PTR DOOR								 *
* A10 = PTR PLAYER							 *
* RETURNS:								 *
* CARRY SET = OBJECT OPENED DOOR SUCCESSFULLY				 *
* CARRY CLR = DOOR DID NOT OPEN						 *
* A8 & A10 INTACT, THE REST ?						 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
DOOROP
	CALLR	CKPLDOOR		;CHECK TO SEE IF THE PLAYER IS OPENING
	JRNC	DOOROPX
	MOVE	*A8(OID),A3,W
	SRL	4,A3
	SLL	4,A3			;STRIP DOOR I.D.
	CMPI	BGDOID,A3
	JREQ	DOOROP5			;BR = IT'S ALREADY OPEN
	CMPI	BGDO1ID,A3
	JREQ	DOOROP5			;BR = IT'S ALREADY OPEN
	CMPI	BGDCID,A3
	JRNE	DOOROPX			;BR = IT'S NOT CLOSED
	MOVE	A0,A0
	JRZ	DOOROP4A
	CALLA	ONESND			;MAKE A SOUND IF WANTED
****	SLEEP	20H
DOOROP4A
	JSRP	DOOROPEN
DOOROP5
	SETC
	RETP
DOOROPX
	CLRC
	RETP

**************************************************************************
*                                                                        *
* CKPLDOOR - CHECK THE PLAYER AGAINST A DOOR TO SEE IF HE IS ORIENTED 	 *
* 		TO OPEN IT.						 *
* A8 = DOOR PTR								 *
* A10 = PLAYER PTR							 *
* RETURNS								 *
* 	C CLR = NOT READY						 *
* 	C SET = READY							 *
*                                                                        *
**************************************************************************
CKPLDOOR
	MMTM	SP,A1,A2,A3
 	MOVE	A8,A3
	MOVE	A10,A8
	CALLA	GPLAYERD		;GET THE PLAYER DATA STRUCTURE
	MOVE	A3,A8
	MOVE	A2,A2
	JRZ	CKPLDF			;NO PLAYER
	MOVE	*A2(PIRQFLAG),A3,W
	ANDI	MDRIVER|MPASSEN|MJUMP1|MJUMP2,A3
	JRNE	CKPLDF			;GUYS ARE IN THE CAR
	MOVE	*A2(PSWTCH),A3
	BTST	BPRYTE,A3
	JRNE	CKPLDF
	BTST	BPLEFT,A3
	JRNE	CKPLDF			;BR = MUST GO STRAIGHT UP
	BTST	BPUP,A3
	JREQ	CKPLDF
	MOVE	*A8(OXPOS),A2,W		;JUST CHECK AGAINST THE FULL DOOR
	MOVE	*A8(OSIZEX),A3,W
	ADD	A2,A3
	SWAP	A10,A8
	CALLA	GETCPNT
	SWAP	A10,A8
	ZEXT	A1
	CALLA	CHKRANGE
	JRNC	CKPLDF			;NOT IN RANGE
	SETC
	MMFM	SP,A1,A2,A3
	RETS
CKPLDF
	CLRC
	MMFM	SP,A1,A2,A3
	RETS


**************************************************************************
*                                                                        *
* DOORIN - ATTEMPT TO WALK THE OBJECT INTO A DOOR			 *
* A8 = PTR TO DOOR							 *
* A10 = PTR TO OBJECT							 *
*                                                                        *
**************************************************************************
*ENTRANCE TO LOFFREDO HIDEOUT
DOORLOFH
	MOVI	DOGRBAK,A11
	MOVI	LOFHCOLL,A9
	MOVI	ROOM1DP,A14
	CALLR	GETOSND
	JRUC	DOORIN
*DOOR ENTRANCE TO MR. BIG'S OFFICE
DOOREBIG
	MOVI	BIGOBAK,A11
	MOVI	BIGINCOL,A9
	MOVI	BIGODP,A14
	CLR	A0
	JRUC	DOORIN
*DOOR ENTRANCE TO DOGGY ROOM
DOOREDOG
	MOVI	DOGRBAK,A11
	MOVI	DOGRMCOL,A9
	MOVI	DOGRDP,A14
	MOVI	KNOCKSND,A0
	JRUC	DOORIN
*DOOR ENTRANCE TO SUBWAY?
DOORESUB
	MOVI	SUBBAK,A11
	MOVI	SUBRMCOL,A9
	MOVI	ROOM1DP,A14	
	CLR	A0
	JRUC	DOORIN
*DOOR ENTRANCE TO BUG ROOM
DOOREBUG
	MOVI	BUGRBAK,A11
	MOVI	BUGRMCOL,A9
	MOVI	BUGRDP,A14
	MOVI	KNOCKSND,A0
	JRUC	DOORIN
*DOOR ENTRANCE TO CLOWN ROOM
DOORECLW
	MOVI	CLWRBAK,A11
	MOVI	CLWRMCOL,A9
	MOVI	CLWRDP,A14
	MOVI	KNOCKSND,A0
	JRUC	DOORIN
*DOOR ENTRANCE TO DUMPSTER MAN ROOM
DOOREDMP
	MOVI	DMPRBAK,A11
	MOVI	DMPRMCOL,A9
	MOVI	DMPRDP,A14
	MOVI	KNOCKSND,A0
	JRUC	DOORIN
*DOOR ENTRANCE TO SKYHIGHS'S GREENHOUSE
DOOREGHS
	MOVI	GRNHSBAK,A11
	MOVI	GRNHSCOL,A9
	MOVI	GRNHSDP,A14
	CLR	A0
	JRUC	DOORIN
*DOOR ENTRANCE TO THE CHEMICAL LABRATORY
DOORELAB
	MOVI	LABBAK,A11
	MOVI	LABCOL,A9
	MOVI	LABDP,A14
	CLR	A0
	JRUC	DOORIN

*DOOR ENTRANCE TO THE CHOPPER WAVE
DOORECHP
	MOVI	CHOPBAK,A11
	MOVI	CHOPWCOL,A9
	MOVI	CHOPDP,A14
	CLR	A0
	JRUC	DOORIN

*GENERIC DOOR ROOM
DOOR1W1
	MOVI	DOGRBAK,A11
	MOVI	CHINACOLL,A9
	MOVI	ROOM1DP,A14
	CLR	A0
	JRUC	DOORIN
*GENERIC DOOR ENTRY FOR PLAYERS
*A0 = SOUND TO MAKE ON DOOR OPEN, 0 = NO SOUND
*A9 = COLLISION VECTOR TO RE-STUFF ON FAILURE
*A10= PTR TO PLAYER OBJECT
*A11= PTR TO NEW BGND
*A14= PTR TO DISPATCH PROCESS 
DOORIN
	PUSHP	A14
	JSRP	DOOROP
	PULLP	A14
	JRNC	DOORIN1
	MOVE	A10,A9
	MOVE	A11,A10
	MOVE	A14,A11
	JAUC	NEWBGND       	
DOORIN1
	MOVE	A9,*A8(OCVECT),L
	CLR	A9
	MOVE	A9,*A8(OPLINK),L
	DIE
*ROOM DISPATCH PROCESS
ROOM1DP
	MOVI	LOFHDSP,A2
	JAUC	MASTERG	
*MR. BIG OFFICE DISPATCH PROCESS
BIGODP
	MOVI	BIGODSP,A2
	JAUC	MASTERG
*DOGGY ROOM DISPATCH PROC
DOGRDP
	MOVI	DOGRDSP,A2
	JAUC	MASTERG
*BUG ROOM DISPATCH PROC
BUGRDP
	MOVI	BUGRDSP,A2
	JAUC	MASTERG
*CLOWN ROOM DISPATCH PROC
CLWRDP
	MOVI	CLWRDSP,A2
	JAUC	MASTERG
*DUMPSTER MAN ROOM DISPATCH
DMPRDP
	MOVI	DMPRDSP,A2
	JAUC	MASTERG
*SKYHIGH'S GREENHOUSE DISPATCH
GRNHSDP
	MOVI	GRNHSDSP,A2
	JAUC	MASTERG
*CHEMICAL LABRATORY DISPATCH
LABDP
	MOVI	DRUGRDSP,A2
	JAUC	MASTERG
*CHOPPER WAVE DISPATCH
CHOPDP
	MOVI	CHOPDSP,A2
	JAUC	MASTERG

**************************************************************************
*                                                                        *
* DOORPOP - ATTEMPT TO WALK THE OBJECT INTO A DOOR AND POP A ROOM	 *
* A8 = PTR TO DOOR							 *
* A10 = PTR TO OBJECT							 *
*                                                                        *
**************************************************************************
DOORPOP
	CLR	A0
	JSRP	DOOROP
	JRNC	DOORPOP1
	MOVE	A10,A9
	JAUC	OLDBGND       	
DOORPOP1
	MOVI	DORNCOLL,A9
	MOVE	A9,*A8(OCVECT),L
	CLR	A9
	MOVE	A9,*A8(OPLINK),L
	DIE

**************************************************************************
*                                                                        *
* DOOREND - ATTEMPT TO WALK THROUGH THE END OF WAVE DOOR.		 *
* A8 = PTR TO DOOR							 *
* A9 = COLLISION PTR TO RE-STUFF					 *
* A10 = PTR TO OBJECT							 *
*                                                                        *
**************************************************************************
DOOREND
	MOVI	DENDCOLL,A9
	JRUC	DOORENDG
DOORENDS
	MOVI	DENDCOLS,A9
	JRUC	DOORENDG
DOORENDR
	MOVI	DENDCOLR,A9
	JRUC	DOORENDG
DOORENDB
	MOVI	DENDCOLB,A9
	JRUC	DOORENDG
DOORENDGR
	MOVI	DENDCOLGR,A9
	JRUC	DOORENDG
DOORENDG
	CLR	A0
	JSRP	DOOREOP
	JRNC	DOOREND3		;DOOR DIDN'T OPEN
	CLR	B0
	MOVE	*A10(OID),A3,W
	CMPI	P1OID,A3
	JRNE	DOOREND1
	MOVK	1,B0	
	MOVI	P1DATA,A2
	MOVI	P1CTRL,A3
	JRUC	DOOREND2
DOOREND1
	CMPI	P2OID,A3
	JRNE	DOOREND2		;BR = WASN'T A PLAYER
	MOVK	2,B0
	MOVI	P2DATA,A2
	MOVI	P2CTRL,A3
DOOREND2
	MOVI	INGAME,A0
	MOVE	A0,@GAMSTATE,W
	MOVI	PUP,A0
	MOVE	A0,*A3,W
	MMTM	A12,A2,A3
	SLEEP	10
	MMFM	A12,A2,A3
	CLR	A0
	MOVE	A0,*A3,W
	MOVE	*A2(POBJ),A0,L
	CALLA	PULLSOBJ
	MOVE	*A2(PLOBJ),A0,L
	CALLA	PULLSOBJ
	JAUC	WAVEEND			;MUST JUMP HERE NOW BUDDY
DOOREND3
	MOVE	A9,*A8(OCVECT),L
	CLR	A9
	MOVE	A9,*A8(OPLINK),L
	DIE

**************************************************************************
*                                                                        *
* DOOREOP - ENDING WAVE DOOR OPENING ROUTINE				 *
* A8 = PTR TO DOOR							 *
* A10 = PTR TO PLAYER							 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
DOOREOP
	CALLR	CKPLDOOR		;CHECK TO SEE IF THE PLAYER IS OPENING
	JRNC	DOOREOPX

	MOVE	*A8(OID),A3,W
	MOVE	A3,A4			;KEEP
	SRL	4,A3
	SLL	4,A3			;STRIP DOOR I.D.
	CMPI	BGDOID,A3
	JREQ	DOOREOP5		;BR = IT'S ALREADY OPEN
	CMPI	BGDO1ID,A3
	JREQ	DOOREOP5		;BR = IT'S ALREADY OPEN
	CMPI	BGDCID,A3
	JRNE	DOOREOPX		;BR = IT'S NOT CLOSED

	SLL	28,A4
	SRL	28,A4			;KEEP DOOR SUB-TYPE
	ADDI	BGDOMID,A4
	MOVE	A4,*A8(OID),W		;MARK DOOR AS OPENING AHEAD-O-TIME
	MOVE	A8,B0
	CALLR	PUTOPENI
	MOVE	B0,A8
	JSRP	DOOROPEN
***	SLEEP	10
DOOREOP5
	SETC
	RETP
DOOREOPX
	CLRC
	RETP


**************************************************************************
*                                                                        *
* DOORBYSLT - OPEN A WAVE END DOOR BY WAY OF THE CARD SLOT.		 *
*                                                                        *
**************************************************************************
DOORBYSLT
	MOVE	*A8(OID),A3,W
	MOVE	A3,A4			;KEEP
	SRL	4,A3
	SLL	4,A3			;STRIP DOOR I.D.
	CMPI	BGDOID,A3
	JREQ	DOORBS5			;BR = IT'S ALREADY OPEN
	CMPI	BGDO1ID,A3
	JREQ	DOORBS5			;BR = IT'S ALREADY OPEN
	CMPI	BGDCID,A3
	JRNE	DOORBSX			;BR = IT'S NOT CLOSED

	SLL	28,A4
	SRL	28,A4			;KEEP DOOR SUB-TYPE
	ADDI	BGDOMID,A4
	MOVE	A4,*A8(OID),W		;MARK DOOR AS OPENING AHEAD-O-TIME

	SOUND1	OPENBEEP
	SLEEP	20H
	MOVE	A8,B0
	CALLR	PUTOPENI
	MOVE	B0,A8
	JSRP	DOOROPEN
	MOVE	*A8(OID),A4,W
	SLL	28,A4
	SRL	28,A4			;KEEP DOOR SUB-TYPE
	ADDI	BGDO1ID,A4
	MOVE	A4,*A8(OID),W		;MARK THIS DOOR SPECIALLY
****	SLEEP	10
DOORBS5
	SETC
	RETP
DOORBSX
	CLRC
	RETP

**************************************************************************
*                                                                        *
* SLOTFLSH - FLASH THE CARD SLOT "INSERT" MESSAGE			 *
*                                                                        *
**************************************************************************
SLOTFLSH
	MOVI	SFLSHPID,A0
	MOVE	A0,*A13(PROCID),W	;MAKE US ONE OF THESE
	MOVI	INTXTOID,A0
	MOVI	BACKSLST,A1	
	CALLA	ISSUPPID
	JAEQ	SUCIDE			;THERE'S NO FUCKING TEXT
	MOVE	A1,A8
	MOVE	*A8(OPLINK),A0,L
	JANZ	SUCIDE
	MOVE	A13,*A8(OPLINK),L
	MOVE	A8,A0
	CALLA	OBJOFF
	SLEEP	8
	MOVE	A8,A0
	CALLA	OBJON
	SOUND1	INSRTSND		;MAKE A NOISE
	SLEEP	8
	CLR	A0
	MOVE	A0,*A8(OPLINK),L
	DIE

INSRTSND .WORD	>F300,>1,>80AB,0		;INSERT INFO NOISE

**************************************************************************
*                                                                        *
* PUTOPENI - PUT "OPEN" IN PLACE OF "INSERT" IN THE CARD SLOT 		 *
* 	   ALSO KILLS THE ATTACHED PROCESS.				 *
* RETURNS:								 *
* 	Z BIT SET = FAILURE, A8 = 0					 *
* 	Z BIT CLR = SUCCESS, A8 = PTR TO TEXT				 *
*                                                                        *
**************************************************************************
PUTOPENI
	MMTM	SP,A0,A1,A4
	MOVI	INTXTOID,A0
	MOVI	BACKSLST,A1	
	CALLA	ISSUPPID
	MOVE	A1,A8
	JREQ	PUTOIX			;THERE'S NO FUCKING TEXT
	MOVE	*A8(OPLINK),A0,L
	JRZ	PUTOI1
      	CALLA	KILL			;KILL US A PROCESS
PUTOI1
	MOVI	OPTXTOID,A0
	MOVE	A0,*A8(OID),W		;STUFF THE NEW I.D.
	MOVI	OPENTYPE,A1
	MOVI	DMAWAL,A4
	CALLA	ANI			;ANIMATE IT IN
	MOVE	A8,A8
PUTOIX
	MMFM	SP,A0,A1,A4
	RETS

**************************************************************************
*                                                                        *
* GETOSND - SELECT RANDOM OPEN UP SOUND					 *
* RETURNS								 *
* A0 = PTR TO SOUND							 *
*                                                                        *
**************************************************************************
GETOSND
	MOVK	5,A0
	CALLA	RANDU
	DEC	A0
	SLL	5,A0
	ADDI	SNDOTAB,A0
	MOVE	*A0,A0,L		;GET THE SOUND PTR
	RETS
SNDOTAB
	.LONG	OPENSD1,OPENSD2,OPENSD3,OPENSD4,OPENSD5
**************************************************************************
*                                                                        *
* DOORCOLP - DOOR COLLISION WITH A PLAYER				 *
* A0 = PTR TO DOOR							 *
* A8 = PTR TO PLAYER							 *
*                                                                        *
**************************************************************************
DOOR1W1C
	MOVI	DOOR1W1,A7
	JRUC	DOORCOLG
DOORLFHC
	MOVI	DOORLOFH,A7
	JRUC	DOORCOLG
*MR.BIG DOOR ENTRANCE COL
DOOR1BIG
	MOVI	DOOREBIG,A7
	JRUC	DOORCOLG
*DOGGY ROOM ENTRANCE
DOOR1DOG
	MOVI	DOOREDOG,A7
	JRUC	DOORCOLG
*SUBWAY DOOR ENTRANCE
DOOR1SUB
	MOVI	DOORESUB,A7
	JRUC	DOORCOLG
*BUG TRAP ROOM ENTRANCE
DOOR1BUG
	MOVI	DOOREBUG,A7
	JRUC	DOORCOLG
*CLOWN TRAP ROOM ENTRANCE
DOOR1CLW
	MOVI	DOORECLW,A7
	JRUC	DOORCOLG
*DUMPSTER MAN TRAP ROOM ENTRANCE
DOOR1DMP
	MOVI	DOOREDMP,A7
	JRUC	DOORCOLG
*SKYHIGH'S GREEN HOUSE ENTRANCE
DOOR1GHS
	MOVI	DOOREGHS,A7
	JRUC	DOORCOLG
*CHEMICAL LABRATORY ENTRANCE
DOOR1LAB
	MOVI	DOORELAB,A7
	JRUC	DOORCOLG

*
*LAST DOOR COLLISION NEEDING A "SAFE" CARD TO EXIT
*A0 = PTR TO DOOR
*A8 = PTR TO PLAYER
*SILVER
DOORCOLS
	MOVI	PSCARD,A3
	MOVI	DOORENDS,A7
	JRUC	DOORCOLC
*RED	
DOORCOLR
	MOVI	PRCARD,A3
	MOVI	DOORENDR,A7
	JRUC	DOORCOLC
*BLUE
DOORCOLB
	MOVI	PBCARD,A3
	MOVI	DOORENDB,A7
	JRUC	DOORCOLC
*BLUE
DOORCOLGR
	MOVI	PGRCARD,A3
	MOVI	DOORENDGR,A7
	JRUC	DOORCOLC
*CHOPPER WAVE ENTRANCE
DOOR1CHP
	MOVI	DOORECHP,A7
	MOVI	PGRCARD,A3
	JRUC	DOORCOLC
DOORCOLC
	MOVE	*A0(OID),A2,W
	SRA	4,A2
	SLL	4,A2
	CMPI	BGDO1ID,A2
	JREQ	DOORCOLG	;THIS DOOR HAS ALREADY BEEN OPENED BY A CARD
	MOVE	@NPLYRS,A2,W
	DEC	A2		;NOW MANY PLAYERS?
	JRGT	DOORCNRM	;THERE ARE TWO, NORMAL CARD SLOT CHECK
*CARD CHECK FOR SINGLE PLAYER, IF EITHER PLAYER DATA STRUCTURE SHOWS THE 
* PRESENCE OF THE CORRECT CARD, THE DOOR WILL OPEN
	MOVI	P1DATA,A2
	ADD	A3,A2
	MOVB	*A2,A1
	JRNZ	DOORCOLG	;BR = P1 IS SHOWING THE PROPER CARD 
	MOVI	P2DATA,A2
	JRUC	DOORCWPD
*CARD CHECK FOR TWO PLAYERS, ONLY THE PLAYER WITH THE CARD CAN OPEN THE DOOR
DOORCNRM
	CALLA	GPLAYERD	;GET THE PLAYER DATA BLOCK
DOORCWPD
	ADD	A3,A2
	MOVB	*A2,A3		;CHECK THE "SAFE" CARD COUNTER
	JRNZ	DOORCOLG	;BR = HE'S GOT ONE	

	MOVI	SFLSHPID,A1
	MOVI	SLOTFLSH,A7	;FLASH THE CARD SLOT
	CALLA	GETPRC
	JRUC	DOORCOLX
**************************************************************************
*                                                                        *
* DOORCOLE - LAST DOOR COLLISION WITH A PLAYER				 *
* A0 = PTR TO DOOR							 *
* A8 = PTR TO PLAYER							 *
*                                                                        *
**************************************************************************
DOORCOLE
	MOVI	DOOREND,A7
	JRUC	DOORCOLG
DOORCOLN
	MOVI	DOORPOP,A7
	JRUC	DOORCOLG
*
*A7 = PROCESS TO CREATE IF POSSIBLE
DOORCOLG
	MOVE	A8,A10
	MOVE	A0,A8
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	DOORCOLX		;NO DOOR OPENINGS DURING ATTRACT MODE
	MOVE	*A8(OPLINK),A0,L
	JRNZ	DOORCOLX
	MOVI	DUMCOLL,A3
	MOVE	A3,*A8(OCVECT),L
	MOVI	0DD1H,A1
	CALLA	GETPRC
	MOVE	A0,*A8(OPLINK),L
DOORCOLX
	CLR	A0	
	RETS

*
*LAST SLOT COLLISION NEEDING A "SAFE" CARD TO EXIT
*A0 = PTR TO SLOT
*A8 = PTR TO PLAYER
*SILVER
SLTCOLS
	MOVI	PSCARD,A3
	MOVI	SLOTENDS,A7
	JRUC	SLTCOLC
*RED	
SLTCOLR
	MOVI	PRCARD,A3
	MOVI	SLOTENDR,A7
	JRUC	SLTCOLC
*BLUE
SLTCOLB
	MOVI	PBCARD,A3
	MOVI	SLOTENDB,A7
	JRUC	SLTCOLC
*GREEN
SLTCOLGR
	MOVI	PGRCARD,A3
	MOVI	SLOTENDGR,A7
	JRUC	SLTCOLC
*SAFE DOOR SLOT COLLISIONS
*SILVER
SLOTSAFS
	MOVI	PSCARD,A3
	MOVI	SAFOPENS,A7
	JRUC	SLTCOLC
*RED	
SLOTSAFR
	MOVI	PRCARD,A3
	MOVI	SAFOPENR,A7
	JRUC	SLTCOLC
*BLUE
SLOTSAFB
	MOVI	PBCARD,A3
	MOVI	SAFOPENB,A7
	JRUC	SLTCOLC
*GOLD TO VAULT
SLOTSAFG
	MOVI	PGCARD,A3
	MOVI	SAFOPENG,A7
	JRUC	SLTCOLC
*GOLD TO HEAD ROOM
SLOTSAFH
	MOVI	PGCARD,A3
	MOVI	SAFOPENH,A7
	JRUC	SLTCOLC
*SILVER END
SLOTSNDS
	MOVI	PSCARD,A3
	MOVI	SAFNDENS,A7
	JRUC	SLTCOLC
*GOLD END
SLOTSNDG
	MOVI	PGCARD,A3
	MOVI	SAFNDENG,A7
	JRUC	SLTCOLC
*GREEN
SLOTSAFGR
	MOVI	PGRCARD,A3
	MOVI	SAFOPENGR,A7
	JRUC	SLTCOLC

*SLOT COLLISION CHECK, MAKE SURE SLICK HAS A CARD
SLTCOLC
	MOVE	@NPLYRS,A2,W
	DEC	A2		;NOW MANY PLAYERS?
	JRGT	SLTCNRM		;THERE ARE TWO, NORMAL CARD SLOT CHECK
*CARD CHECK FOR SINGLE PLAYER, IF EITHER PLAYER DATA STRUCTURE SHOWS THE 
* PRESENCE OF THE CORRECT CARD, THE DOOR WILL OPEN
	MOVI	P1DATA,A2
	ADD	A3,A2
	MOVB	*A2,A1
	JRNZ	SLTCOLG		;BR = P1 IS SHOWING THE PROPER CARD 
	MOVI	P2DATA,A2
	JRUC	SLTCWPD
*CARD CHECK FOR TWO PLAYERS, ONLY THE PLAYER WITH THE CARD CAN OPEN THE DOOR
SLTCNRM
	CALLA	GPLAYERD	;GET THE PLAYER DATA BLOCK
SLTCWPD
	ADD	A3,A2
	MOVB	*A2,A3		;CHECK THE "SAFE" CARD COUNTER
	JRNZ	SLTCOLG	;BR = HE'S GOT ONE	
	MOVI	SFLSHPID,A1
	MOVI	SLOTFLSH,A7	;FLASH THE CARD SLOT
	CALLA	GETPRC
	JRUC	SLTCOLX
**************************************************************************
*                                                                        *
* SLTCOLE - LAST SLOT COLLISION WITH A PLAYER				 *
* A0 = PTR TO SLOT							 *
* A8 = PTR TO PLAYER							 *
*                                                                        *
**************************************************************************
SLTCOLE
	MOVI	SLOTEND,A7
	JRUC	SLTCOLG
*
*A7 = PROCESS TO CREATE IF POSSIBLE
SLTCOLG
	MOVE	A8,A10
	MOVE	A0,A8
	MOVE	*A8(OPLINK),A0,L
	JRNZ	SLTCOLX
	MOVI	DUMCOLL,A3
	MOVE	A3,*A8(OCVECT),L
	MOVI	0DD2H,A1
	CALLA	GETPRC
	MOVE	A0,*A8(OPLINK),L
SLTCOLX
	CLR	A0	
	RETS

**************************************************************************
*                                                                        *
* SLOTEND - ATTEMPT OPEN DOOR WITH THE END OF WAVE SLOT.		 *
* A8 = PTR TO SLOT							 *
* A9 = PTR TO COLLISION VECTOR TO RE-STUFF				 *
* A10 = PTR TO OBJECT							 *
*                                                                        *
**************************************************************************
SLOTEND
	MOVI	SENDCOLL,A9
	JRUC	SLOTENDG
SLOTENDS
	MOVI	SENDCOLS,A9
	JRUC	SLOTENDG
SLOTENDR
	MOVI	SENDCOLR,A9
	JRUC	SLOTENDG
SLOTENDB
	MOVI	SENDCOLB,A9
	JRUC	SLOTENDG
SLOTENDGR
	MOVI	SENDCOLGR,A9
	JRUC	SLOTENDG
*ENTRYPOINT
SLOTENDG
	CLR	A0
	CALLR	CKPLSLOT		;SEE IF THE PLAYER IS IN PROX
	JRNC	SLOTEND3		;SLOT DIDN'T OPEN
	MOVI	EXITBLIP,A0
	MOVI	BACKSLST,A1
	CALLR	ISSUPBLP	
	JREQ	SLOTEND3		;THE DOOR DOESN'T EXIST
	PUSHP	A8
	MOVE	A1,A8
	JSRP	DOORBYSLT		;OPEN THE DAMN DOOR
	PULLP	A8
SLOTEND3
	MOVE	A9,*A8(OCVECT),L
	CLR	A9
	MOVE	A9,*A8(OPLINK),L
	DIE

**************************************************************************
*                                                                        *
* CKPLSLOT - CHECK THE PLAYER AGAINST A CARD SLOT TO SEE IF HE IS 	 *
* 		ORIENTED TO OPERATE IT.					 *
* A8 = SLOT PTR								 *
* A10 = PLAYER PTR							 *
* RETURNS								 *
* 	C CLR = NOT READY						 *
* 	C SET = READY							 *
*                                                                        *
**************************************************************************
CKPLSLOT
	MMTM	SP,A1,A2,A3,A4
 	MOVE	A8,A3
	MOVE	A10,A8
	CALLA	GPLAYERD		;GET THE PLAYER DATA STRUCTURE
	MOVE	A3,A8
	MOVE	A2,A2
	JRZ	CKPLSF			;NO PLAYER
	MOVE	*A2(PIRQFLAG),A3,W
	ANDI	MDRIVER|MPASSEN,A3
	JRNE	CKPLSF			;GUYS ARE IN THE CAR
	MOVE	*A2(PSWTCH),A3

	BTST	BPRYTE,A3
	JRNE	CKPLSF
	BTST	BPLEFT,A3
	JRNE	CKPLSF			;BR = MUST GO STRAIGHT UP
	BTST	BPUP,A3
	JREQ	CKPLSF
	MOVE	*A8(OXPOS),A2,W		;JUST CHECK AGAINST THE FULL DOOR
	MOVE	*A8(OSIZEX),A3,W
	ADD	A2,A3
	SWAP	A10,A8
	CALLA	GETCPNT
	SWAP	A10,A8
	MOVE	*A10(OSIZEX),A4,W
	SRA	1,A4
	ZEXT	A1
	SUB	A4,A1
	CALLA	CHKRANGE
	JRC	CKPLSH			;IN RANGE, HIT IT
	SLL	1,A4
	ADD	A4,A1
	CALLA	CHKRANGE
	JRNC	CKPLSF			;NOT IN RANGE AT ALL
CKPLSH
	SETC
	MMFM	SP,A1,A2,A3,A4
	RETS
CKPLSF
	CLRC
	MMFM	SP,A1,A2,A3,A4
	RETS

**************************************************************************
*                                                                        *
* ISSUPBLP - IS AN OBJECT ON A SUPPLEMENTAL LIST(SEARCH BY SCANNER BLIP.)*
* A0 = OBLIPIMG PTR							 *
* A1 = MEMORY LOCATION OF SUPPLEMENTAL LIST HEADER			 *
* RETURNS:								 *
*  Z BIT SET = NOT ON							 *
*	       A1 = ZERO						 *
*  Z BIT CLR = IS ON							 *
*	       A1 = PTR TO OBJECT					 *	 
*                                                                        *
**************************************************************************
ISSUPBLP
	PUSH	A2	
  	MOVE	*A1,A1,L        ;SPECIAL CASE THE HEADER
	JREQ	ISENDBP
	MOVE	*A1(OBLIPIMG),A2,L
	CMP	A2,A0
	JRNE	ISSRCHBP
ISFNDBP
	MOVE	A1,A1		;SET Z BIT
ISENDBP
	PULL	A2
	RETS
ISSRCHBP
	MOVE	*A1(OSLINK),A1,L  	;SEARCHING FOR THE ELEMENT IN THE LIST
	JREQ	ISENDBP			;ELEMENT DOES NOT EXIST
	MOVE	*A1(OBLIPIMG),A2,L
	CMP	A2,A0
	JRNE	ISSRCHBP		;NOT FOUND KEEP LOOKING
	JRUC	ISFNDBP			;FOUND RETURN

**************************************************************************
*                                                                        *
* CLRGOAL - CLEAR THE CURRENT TOP LEVEL GOAL DOOR			 *
*                                                                        *
**************************************************************************
CLRGOAL
	MMTM	SP,A0,A1,A3,A4,A10
	MOVI	GOALDOOR,A10
	MOVE	*A10,A4,W
	JRN	NOCLRGOL		;NO GOAL DOOR TO CLEAR
	MOVI	DUMCOLL,A3
	MOVE	A3,*A10(INITCVEC),L	;NULL COLLISION
	CLR	A4
	MOVE	A4,@XSCROLLS,W		;CLEAR THE SCROLL STOPPER
	MOVE	A4,*A10(INITBLIP),L	;BLOW THE BLIP	
	NOT	A4		   	
	MOVE	A4,*A10(INITSIZE),W	;BLOCK THE ARROW
	MOVI	GOALBLIP,A0
	CALLA	ISBBBLP			;LOOK FOR GOAL BLIP ON BBLIST
	JREQ	CLRARRW			;NO DOOR TO FREEZE	
	MOVE	*A0(NPTR),A8,L		;GET THE IMAGE PTR
	CALLA	BLIPOFF			;TURN THIS DUDES BLIP OFF
	MOVE	A3,*A8(OCVECT),L	;CAN THE COLLISION VECTOR
CLRARRW
	MOVI	ARROWOID,A0
	CLR	A1
	NOT	A1
	CALLA	ISBBID			;LOOK FOR ARROW MARKER OBJECT
	JREQ	NOCLRGOL		;NO ARROW TO DOG
	CALLA	DELBBOBJ		;FULLY DELETE A BBLIST OBJECT
NOCLRGOL
	MMFM	SP,A0,A1,A3,A4,A10
	RETS

**************************************************************************
*                                                                        *
* SAFE DOOR ROUTINES							 *
*                                                                        *
**************************************************************************
*
*PLAYER COLLISION WITH A SAFE DOOR
*A0 = PTR TO SAFE DOOR
*A8 = PTR TO PLAYER
SAFECOL
	MOVE	*A0(OID),A1,W
	SRL	4,A1
	SLL	4,A1
	CMPI	BGDCID,A1
	JRNE	SAFECOLX	;NO BEEPY FOR CLOSED DOOR
	MOVI	SFLSHPID,A1
	MOVI	SLOTFLSH,A7	;FLASH THE CARD SLOT
	CALLA	GETPRC
SAFECOLX
	CLR	A0	
	RETS
	
**************************************************************************
*                                                                        *
* SLOTEND - ATTEMPT OPEN DOOR WITH THE END OF WAVE SLOT.		 *
* A8 = PTR TO SLOT							 *
* A9 = PTR TO COLLISION VECTOR TO RE-STUFF				 *
* A10 = PTR TO OBJECT							 *
*                                                                        *
**************************************************************************
SAFOPENS
	MOVI	SLOTCOLS,A9
	MOVI	SILVMESS,A5
	MOVI	SILVDP,A6
	MOVI	SILVBAK,A7
	JRUC	SAFEOPEN
SAFOPENR
	MOVI	SLOTCOLR,A9
	MOVI	REDMESS,A5
	MOVI	REDDP,A6
	MOVI	REDBAK,A7
	JRUC	SAFEOPEN
SAFOPENB
	MOVI	SLOTCOLB,A9
	MOVI	BLUEMESS,A5
	MOVI	BLUEDP,A6
	MOVI	BLUEBAK,A7
	JRUC	SAFEOPEN
SAFOPENG
	MOVI	SLOTCOLG,A9
	MOVI	DUMRETP,A5
	MOVI	GOLDDP,A6
	MOVI	GOLDBAK,A7
	JRUC	SAFEOPEN
*GOLD SAFE DOORS TO HEAD ROOM
SAFOPENH
	MOVI	SLOTCOLH,A9
	MOVI	DUMRETP,A5
	MOVI	HEADDP,A6
	MOVI	HEADBAK,A7
	JRUC	SAFEOPEN

*SILVER SAFE OPEN TO END OF WAVE
SAFNDENS
	MOVI	SLOTCNDS,A9
	MOVI	SILVMESS,A5
	MOVI	SILVDP,A6
	MOVI	SILVBAK,A7
	JRUC	SAFENDEN
*GOLD SAFE OPEN TO END OF WAVE
SAFNDENG
	MOVI	SLOTCNDG,A9
	MOVI	DUMRETP,A5
	MOVI	GOLDDP,A6
	MOVI	GOLDBAK,A7
	JRUC	SAFENDEN

SAFOPENGR
	MOVI	SLOTCOLGR,A9
	MOVI	DUMRETP,A5
	MOVI	ROOM1DP,A6
	MOVI	REDBAK,A7
	JRUC	SAFEOPEN
*
*SAFE DISPATCH PROCS
*SILVER
SILVDP
	MOVI	SILVDSP,A2
	JAUC	MASTERG
*RED
REDDP
	MOVI	REDDSP,A2
	JAUC	MASTERG
*BLUE
BLUEDP
	MOVI	BLUEDSP,A2
	JAUC	MASTERG
*GOLD VAULT
GOLDDP
	MOVI	GOLDDSP,A2
	JAUC	MASTERG
*GOLD HEAD ROOM
HEADDP
	MOVI	HEADDSP,A2
	JAUC	MASTERG

*ENTRYPOINT FOR OPENING THE SAFE AND WALKING IN
*A5 = SUBROUTINE TO CALL BEFORE EXPANDING TO THE NEW SAFE
*A6 = DISPATCH PROC TO START
*A7 = NEW BACKGROUND TO FIRE UP
*A9 = COLLISION VECTOR TO RE-STUFF ON FAILURE.
SAFEOPEN
	CLR	A0
	CALLR	CKPLSLOT		;SEE IF THE PLAYER IS IN PROX
	JRNC	SAFEOP3			;SLOT DIDN'T OPEN
	PUSHP	A8
	MOVE	A5,*A13(PDATA+40H),L	;SAVE THE ADDRESS HERE
	MOVI	BGDCID|SAFEDRL,A0
	MOVI	BACKSLST,A1
	CALLA	ISSUPPID	  	;LOOK FOR LEFT SAFE DOOR	
	JRZ	SAFEOP2			;NO DOOR, NO OPEN, JOE
	MOVE	A1,A8
	MOVE	@SCRNTL,A2,L		;GET SCREEN TOP LEFT
	MOVE	@SCRNLR,A3,L		;GET SCREEN LOWER RT.
	ADDI	50,A2
	SUBI	50,A3			;MAKE MY OWN BOUNDRIES
	CALLA	SCRTSTG
	JRNZ	SAFEOP2			;BR = DOOR IS NOT ON SCREEN
	MOVE	A8,A11
	MOVE	*A8(OPLINK),A0,L	;ANYTHING GOIN' DOWN
	JRZ	SAFEOP1			;BR = NO DUDE
	CALLA	KILL
SAFEOP1
	MOVI	BGDCID|SAFEDRR,A0
	MOVI	BACKSLST,A1
	CALLA	ISSUPPID		;LOOK FOR RIGHT SAFE DOOR	
	MOVE	A1,A8
	MOVE	@SCRNTL,A2,L		;GET SCREEN TOP LEFT
	MOVE	@SCRNLR,A3,L		;GET SCREEN LOWER RT.
	ADDI	50,A2
      	SUBI	50,A3
	CALLA	SCRTSTG
	JRNZ	SAFEOP2			;BR = RIGHT DOOR IS NOT ON THE SCREEN
	MOVE	*A8(OPLINK),A0,L	;KILL OFF OTHER RIGHT DOOR PROC
	JRZ	SAFEOP1B		;BR = NONE TO WASTE
	CALLA	KILL
SAFEOP1B
	MOVE	A8,B0
	MOVE	A10,A8
	CALLA	GPLAYERD

*CHECK TO SEE IF PLAYER CAN WALK AFTER OPENING SAFE, ESCAPE IF UNABLE.
	MOVE	*A2(PEXEFLAG),A0,W
	ANDI	MFHOLD|MDHOLD|MDYING|MDEAD,A0	
	JRNE	SAFEOP2			;BR = PLAYER IS IN NO SHAPE TO OPEN
	MOVE	*A2(PIRQFLAG),A0,W
	ANDI	MJUMP1|MJUMP2|MDRIVER|MPASSEN,A0
	JRNE	SAFEOP2			;BR = MORE DISQUALS

*PROTECTION BOY, PROTECTION
	MOVK	1,A0
	MOVE	A0,@PUPDATE,W

	MOVE	*A2(PEXEFLAG),A0,W
	ORI	MINVINC,A0	
	MOVE	A0,*A2(PEXEFLAG),W	
	MOVE	*A2(PPID),A0,W
	ADDI	PIPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL			;KILL PLAYER INVINCIBLE PROC.
	
	MOVE	A2,*A13(PDATA),L
	MOVE	*A2(POBJ),A8,L
	CALLA	PSTOP
	MOVE	*A2(PLOBJ),A8,L
	CALLA	PSTOP			;STOP BOTH PLAYER PARTS
	CALLR	PUTOPENI
	MOVE	B0,A8
	MOVE	A13,*A8(OPLINK),L	;THIS IS THE ONE
	MMTM	A12,A6,A7
	MOVE	*A8(OXPOS),A0,W		;GET THE SAFE MIDDLE X
	ADDK	24,A0			;FUDGER BOY
	MOVE	A0,*A13(PDATA+20H),W	;SAVE IT HERE
SAFEOPWW
	MOVI	4000H,A0
	MOVE	A0,A1
	CALLA	EXISTP			;WAVE END WAIT?
	JRZ	SAFEOPW1		;BR = NO
	SLOOP	1,SAFEOPWW		;GIVE THEM TIME TO COMPLETE
SAFEOPW1
	CALLA	KILLWAVE
	SOUND1	MUSICOFF
	CLR	A0
	MOVE	A0,@PUPDATE,W
	SWAP	A8,A10			;GET THE PLAYER PTR
	CALLA	GPLAYERD	
	SWAP	A8,A10
	CALLA	BOTHPON
	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTOERASE
	SLEEP	2
	SOUND1	OPENBEEP
	SLEEP	18H
	SOUND1	SAFEMOTR		;START THE SAFE MOTOR
	SWAP	A11,A8
	CREATE	SAFOLPID,OPENSAFL	;OPEN THE LEFT DOOR
	MOVE	A0,*A8(OPLINK),L
	SWAP	A11,A8
	JSRP	SLIDOPR			;AND THE RIGHT DOOR	
	CLR	A0
	MOVE	A0,*A8(OPLINK),L
	SOUND1	YAMOFF 			;ESCALATOR OFF
	SOUND1	SAFEHIT

	MMTM	SP,A9,A10,A11
	MOVE	*A10(OID),A0,W
	CMPI	P1OID,A0
	JRNE	SAFEOPP2
	MOVI	P1CTRL,A3
	MOVI	P2DATA,A9
	MOVI	P2CTRL,A10
	JRUC	SAFEOPPX
SAFEOPP2
	MOVI	P2CTRL,A3
	MOVI	P1DATA,A9
	MOVI	P1CTRL,A10
SAFEOPPX
	MOVE	*A13(PDATA+20H),A11,W	;GET THE STORED X POS
	CREATE	INDPID,PTOSAFE		;MAKE THE OTHER PLAYER GET THERE
	MMFM	SP,A9,A10,A11
	MOVI	PLEFT,A0
	MOVE	A0,*A3,W
	MMTM	A12,A3,A8,A11
	MOVE	*A13(PDATA+20H),A11,W	;GET THE STORED X POS
	MOVE	A10,A8
	MOVI	150,A2			;MAXIMUM WAIT TIME * 4
SAFEWLP
	CALLA	GETANIX	
	CMP	A11,A0
	JRLS	SAFEWCP
	PUSHP	A2
	SLEEP	4
	PULLP	A2
	DSJS	A2,SAFEWLP
	MMFM	A12,A3,A8,A11
	MOVE	*A13(PDATA),A2,L	;GET THIS PTR BACK
	MOVE	*A2(POBJ),A10,L		;JUST TO MAKE CERTAIN
	MOVE	*A2(PLOBJ),A4,L
	JRUC	SAFEWESC
SAFEWCP
	MMFM	A12,A3,A8,A11
	MOVE	*A13(PDATA),A2,L	;GET THIS PTR BACK
	MOVE	*A2(POBJ),A10,L		;JUST TO MAKE CERTAIN
	MOVE	*A2(PLOBJ),A4,L
	MOVE	*A10(OZPOS),A0,W
	SUBK	32,A0
	MOVE	A0,*A10(OZPOS),W
	MOVE	A0,*A4(OZPOS),W
	MOVI	PUP,A0	
	MOVE	A0,*A3,W
	PUSHP	A3
	SLEEP	16
	PULLP	A3
SAFEWESC
	CLR	A0
	MOVE	A0,*A3,W
	SWAP	A11,A8
	CREATE	SAFCLPID,CLOSSAFL	;CLOSE THE DAMN DOOR
	MOVE	A0,*A8(OPLINK),L
	SWAP	A11,A8
	SOUND1	SAFEMOTR		;START THE SAFE MOTOR
	JSRP	SLIDCLR	
	CLR	A0
	MOVE	A0,*A8(OPLINK),L
	SOUND1	YAMOFF 			;ESCALATOR OFF
	SOUND1	SAFEHIT
*SHRINK AND COME UP IN THE NEXT ROOM
***	MOVK	1,A0
***	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTOERASE
	MMTM	A12,A8,A9,A10,A11
	CLR	A9
	MOVE	A9,@IRQSKYE,W		;CLEAR AUTO-ERASE COLOR

	MOVE	A11,A0
	CALLA	GSCRNREL		;GET THE SCREEN RELATIVE SAFE DOOR
	SRL	16,A1
	MOVX	A1,A10
	MOVY	A2,A10
	MOVE	A8,A0
	CALLA	GSCRNREL
	SRL	16,A1
	MOVE	*A8(OSIZEX),A11,W
	ADD	A1,A11
	MOVE	*A8(OSIZEY),A1,W
	SLL	16,A1
	ADD	A2,A1
	MOVY	A1,A11
	MOVK	32,A0			;IN A HALF SECOND
	JSRP	SCREXP32
	SUBXY	A10,A11			;GET THE DISTANCE
	MOVY	A11,A1
	SLL	16,A11
	SRL	17,A11
	SRL	17,A1
	SLL	16,A1
	MOVY	A1,A11
	ADDXY	A11,A10			;SAFE CENTER POINT IS CALCULATED
	MOVE	A10,A11
	MOVK	16,A0			;IN A HALF SECOND
	JSRP	SCREXP32		;NOW GO THE CENTER
	CLR	A0
	MOVE	A0,@DISPLAYON,W
	CALLA	DMAQWAIT
	CALLA	MYOINIT
	MOVE	A10,@SCRNTL,L		;RESTORE
	MOVE	A11,@SCRNLR,L
	MMFM	A12,A8,A9,A10,A11
	CALLA	WRAMINIT		;INITIALIZE WAVE RAM
	CALLA	GETWAVE			;SET UP WAVE DIFFICULTY PARAMS

	MOVK	1,A0
	MOVE	A0,@PUPDATE,W

***	MMFM	A12,A7,A10		;GET THE DISPATCH,AND THE BACKGROUND
	PULLP	A10
***	MOVI	MASTERID,A1
***	CALLA	GETPRC

	MOVE	*A10(0E0H),A0,L		;FIX THIS SOUND KLUDGE
	CALLA	ONESND			;START ROOM MUSIC

	CALLA	BBINIT
	CALLA	INITBGND
	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROC ON
*LOAD THE SAFE ENTRANCE SUBROUTINE
	SLEEP	1
	MOVE	*A13(PDATA+40H),A0,L	;GET THE ROUTINE
	JSRPR	A0

*TIME TO RE-INITIALIZE PLAYER 1
	MOVI	P1DATA,A2
	MOVI	P1INITTL,A14
	CALLA	PLWAVEST
*TIME TO RESET PLAYER 2
	MOVI	P2DATA,A2
	MOVI	P2INITT,A14
	CALLA	PLWAVEST
	CALLA	SCORAREA		;OUTPUT THE SCORE AREA

	CLR	A0
	MOVE	A0,@PUPDATE,W

	PULLP	A7			;GET THE DISPATCH PROC
	MOVI	MASTERID,A1
	CALLA	GETPRC			;AND MAKE IT

	CREATE	BUPDPID,BBOFSCRN	;CREATE THE BACKGROUND UPDATE PROCESS

	MOVI	INPLAY,A0
	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES

	MMTM	A12,A8,A9,A10,A11
	MOVK	32,A0
	MOVI	SCRNST,A10
	MOVI	SCRNEND,A11
	JSRP	SCREXP32		;BLOW UP THE SCREEN AGAIN
	MMFM	A12,A8,A9,A10,A11
	SOUND1	ALLOFF
	SOUND1	YAMOFF
	MOVK	2,A0
	MOVE	A0,@GAMERASE,W		;TURN ON HALF SCREEN AUTOERASE

	CREATE	0BACH,BSCHKG		;START THE SCROLL CHECKER
***	MOVI	INPLAY,A0
***	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES
	SLEEP	10
	DIE
SAFEOP2
	PULLP	A8
SAFEOP3
	MOVE	A9,*A8(OCVECT),L
	CLR	A9
	MOVE	A9,*A8(OPLINK),L
	DIE

*
*ENTRYPOINT FOR OPENING THE SAFE AND WALKING IN	TO THE END OF A WAVE
*A6 = DISPATCH PROC TO START
*A7 = NEW BACKGROUND TO FIRE UP
*A9 = COLLISION VECTOR TO RE-STUFF ON FAILURE.
SAFENDEN
	CLR	A0
	CALLR	CKPLSLOT		;SEE IF THE PLAYER IS IN PROX
	JRNC	SAFEND3			;SLOT DIDN'T OPEN
	PUSHP	A8
	MOVI	BGDCID|SAFEDRL,A0
	MOVI	BACKSLST,A1
	CALLA	ISSUPPID	  	;LOOK FOR LEFT SAFE DOOR	
	JRZ	SAFEND2			;NO DOOR, NO OPEN, JOE
	MOVE	A1,A8
	MOVE	@SCRNTL,A2,L		;GET SCREEN TOP LEFT
	MOVE	@SCRNLR,A3,L		;GET SCREEN LOWER RT.
	ADDI	50,A2
	SUBI	50,A3			;MAKE MY OWN BOUNDRIES
	CALLA	SCRTSTG
	JRNZ	SAFEND2			;BR = DOOR IS NOT ON SCREEN
	MOVE	A8,A11
	MOVE	*A8(OPLINK),A0,L	;ANYTHING GOIN' DOWN
	JRZ	SAFEND1			;BR = NO DUDE
	CALLA	KILL
SAFEND1
	MOVI	BGDCID|SAFEDRR,A0
	MOVI	BACKSLST,A1
	CALLA	ISSUPPID		;LOOK FOR RIGHT SAFE DOOR	
	MOVE	A1,A8
	MOVE	@SCRNTL,A2,L		;GET SCREEN TOP LEFT
	MOVE	@SCRNLR,A3,L		;GET SCREEN LOWER RT.
	ADDI	50,A2
      	SUBI	50,A3
	CALLA	SCRTSTG
	JRNZ	SAFEND2			;BR = RIGHT DOOR IS NOT ON THE SCREEN
	MOVE	*A8(OPLINK),A0,L	;KILL OFF OTHER RIGHT DOOR PROC
	JRZ	SAFEND1B		;BR = NONE TO WASTE
	CALLA	KILL
SAFEND1B
	MOVE	A8,B0
	MOVE	A10,A8
	CALLA	GPLAYERD

*CHECK TO SEE IF PLAYER CAN WALK AFTER OPENING SAFE, ESCAPE IF UNABLE.
	MOVE	*A2(PEXEFLAG),A0,W
	ANDI	MFHOLD|MDHOLD|MDYING|MDEAD,A0	
	JRNE	SAFEND2			;BR = PLAYER IS IN NO SHAPE TO OPEN
	MOVE	*A2(PIRQFLAG),A0,W
	ANDI	MJUMP1|MJUMP2|MDRIVER|MPASSEN,A0
	JRNE	SAFEND2			;BR = MORE DISQUALS

*STOP ALL PLAYER ACTION, DUDE.
	MOVK	1,A0
	MOVE	A0,@PUPDATE,W
	MOVE	*A2(PEXEFLAG),A0,W
	ORI	MINVINC,A0	
	MOVE	A0,*A2(PEXEFLAG),W	
	MOVE	*A2(PPID),A0,W
	ADDI	PIPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL			;KILL PLAYER INVINCIBLE PROC.
	CALLA	BOTHPON
	MOVE	A2,*A13(PDATA),L
	MOVE	*A2(POBJ),A8,L
	CALLA	PSTOP
	MOVE	*A2(PLOBJ),A8,L
	CALLA	PSTOP			;STOP BOTH PLAYER PARTS

	CALLR	PUTOPENI
	MOVE	B0,A8
	MOVE	A13,*A8(OPLINK),L	;THIS IS THE ONE
	MMTM	A12,A6,A7
	MOVE	*A8(OXPOS),A0,W		;GET THE SAFE MIDDLE X
	ADDK	24,A0			;FUDGER BOY
	MOVE	A0,*A13(PDATA+20H),W	;SAVE IT HERE
SAFENDWW
	MOVI	4000H,A0
	MOVE	A0,A1
	CALLA	EXISTP			;WAVE END WAIT?
	JRZ	SAFENDW1		;BR = NO
	SLOOP	1,SAFENDWW		;GIVE THEM TIME TO COMPLETE
SAFENDW1
	CALLA	KILLWAVE
	SOUND1	MUSICOFF
	CLR	A0
	MOVE	A0,@PUPDATE,W
	SWAP	A8,A10			;GET THE PLAYER PTR
	CALLA	GPLAYERD	
	SWAP	A8,A10
	CALLA	BOTHPON
	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTOERASE
	SLEEP	2
	SOUND1	OPENBEEP
	SLEEP	18H
	SOUND1	SAFEMOTR		;START THE SAFE MOTOR
	SWAP	A11,A8
	CREATE	SAFOLPID,OPENSAFL	;OPEN THE LEFT DOOR
	MOVE	A0,*A8(OPLINK),L
	SWAP	A11,A8
	JSRP	SLIDOPR			;AND THE RIGHT DOOR	
	CLR	A0
	MOVE	A0,*A8(OPLINK),L
	SOUND1	YAMOFF 			;ESCALATOR OFF
	SOUND1	SAFEHIT

	MMTM	SP,A9,A10,A11
	MOVE	*A10(OID),A0,W
	CMPI	P1OID,A0
	JRNE	SAFENDP2
	MOVI	P1CTRL,A3
	MOVI	P2DATA,A9
	MOVI	P2CTRL,A10
	JRUC	SAFENDPX
SAFENDP2
	MOVI	P2CTRL,A3
	MOVI	P1DATA,A9
	MOVI	P1CTRL,A10
SAFENDPX
	MOVE	*A13(PDATA+20H),A11,W	;GET THE STORED X POS
	CREATE	INDPID,PTOSAFE		;MAKE THE OTHER PLAYER GET THERE
	MMFM	SP,A9,A10,A11

	MOVI	PLEFT,A0
	MOVE	A0,*A3,W
	MMTM	A12,A3,A8,A11
	MOVE	*A13(PDATA+20H),A11,W	;GET THE STORED X POS
	MOVE	A10,A8
	MOVI	150,A2		;MAXIMUM WAIT TIME * 4
SAFNDWLP
	CALLA	GETANIX	
	CMP	A11,A0
	JRLS	SAFNDWCP
	PUSHP	A2
	SLEEP	4
	PULLP	A2
	DSJS	A2,SAFNDWLP
	MMFM	A12,A3,A8,A11
	MOVE	*A13(PDATA),A2,L	;GET THIS PTR BACK
	MOVE	*A2(POBJ),A10,L		;JUST TO MAKE CERTAIN
	MOVE	*A2(PLOBJ),A4,L
	JRUC	SAFNDESC
SAFNDWCP
	MMFM	A12,A3,A8,A11
	MOVE	*A13(PDATA),A2,L	;GET THIS PTR BACK
	MOVE	*A2(POBJ),A10,L		;JUST TO MAKE CERTAIN
	MOVE	*A2(PLOBJ),A4,L
	MOVE	*A10(OZPOS),A0,W
	SUBK	32,A0
	MOVE	A0,*A10(OZPOS),W
	MOVE	A0,*A4(OZPOS),W
	MOVI	PUP,A0	
	MOVE	A0,*A3,W
	PUSHP	A3
	SLEEP	16
	PULLP	A3
SAFNDESC
	CLR	A0
	MOVE	A0,*A3,W
	SWAP	A11,A8
	CREATE	SAFCLPID,CLOSSAFL	;CLOSE THE DAMN DOOR
	MOVE	A0,*A8(OPLINK),L
	SWAP	A11,A8
	SOUND1	SAFEMOTR		;START THE SAFE MOTOR
	JSRP	SLIDCLR	
	CLR	A0
	MOVE	A0,*A8(OPLINK),L
	SOUND1	YAMOFF 			;ESCALATOR OFF
	SOUND1	SAFEHIT
	MOVI	INGAME,A0
	MOVE	A0,@GAMSTATE,W
	SLEEP	20H
	MOVE	@WAVE,A0,W
	CMPI	NWAVES,A0
	JALO	WAVEEND			;JUST END THE WAVE
	JAUC	GAMEEND			;ME THINKS TO END THE GAME
SAFEND2
	PULLP	A8
SAFEND3
	MOVE	A9,*A8(OCVECT),L
SAFENDX
	CLR	A0
	MOVE	A0,*A8(OPLINK),L
	DIE
*                                              
* OPENSAFL - OPEN THE LEFT SAFE DOOR PROCESS.  
* A8 = PTR TO DOOR				    
*                                              
OPENSAFL
	JSRP	SLIDOPL	
	JRUC	SAFENDX
*                                              
* CLOSSAFL - CLOSE THE LEFT SAFE DOOR PROCESS. 
* A8 = PTR TO DOOR					
*                                               
CLOSSAFL
	JSRP	SLIDCLL	
	JRUC	SAFENDX
* OPENSAFL - OPEN THE LEFT SUBWAY DOOR PROCESS.  
* A8 = PTR TO DOOR				    
*                                              
OPENSUBL
	JSRP	SLIDOPLL	
	JRUC	SAFENDX
*                                              
* CLOSSUBL - CLOSE THE LEFT SUBWAY DOOR PROCESS. 
* A8 = PTR TO DOOR					
*                                               
CLOSSUBL
	JSRP	SLIDCLLL	
	JRUC	SAFENDX
*
*SOUNDS OF THE SAFE
SAFEMOTR
	.WORD	>F331,>1,>80AA,0		;START THE SAFE MOTOR
SAFEHIT	
	.WORD	>F031,>3C,>8081,0		;SOUND OF BIG METAL	
*
*SOUNDS OF THE SUBWAY
*
SUBDOOR
	.WORD	>F30F,>20,>8088,0
SUBOFF	
	.WORD	>F30F,>1,>807F,0
*
*GETSUBDR - GET A SUBWAY DOOR ON SCREEN
*A8 RET WITH LEFT DOOR OBJECT POINTER
*A6 RET WITH RITE DOOR OBJECT POINTER
*EQ MEANS NO DOOR FOUND
*
GETSUBDR:
	MMTM	SP,A0,A7
	CLR	A7
	CLR	A6
	MOVE	@BACKSLST,A8,L		;LOOK THROUGH THE BACKGROUND
	JREQ	GSBDRF			;NOBODY HOME
GSBDRL0:
	MOVE	*A8(OID),A0,W		;CHECK THIS GUY
	CMPI	BGDCID|SUBDOORL,A0 	;IS IT A DOOR
	JRNE	GSBDRL1
	CALLA	SCRTST
	JRNE	GSBDRLP
	MOVE	A8,A7
GSBDRL1
	CMPI	BGDCID|SUBDOORR,A0 	;IS IT A DOOR
	JRNE	GSBDRLP
	CALLA	SCRTST	
	JRNE	GSBDRLP
	MOVE	A8,A6
GSBDRLP
	MOVE	*A8(OSLINK),A8,L	;LET'S SEARCH FOR A DOOR
	JRNE	GSBDRL0
	MOVE	A7,A8
	JREQ	GSBDRF
	MOVE	A6,A6
GSBDRF
	MMFM	SP,A0,A7
	RETS
*
*OPEN A SUBWAY DOOR
*A8=LEFT DOOR
*A9=RIGHT DOOR
SUBOPEN
	MOVE	A8,A10
	SOUND1	SUBDOOR
	CREATE	INDPID,OPENSUBL
	MOVE	A9,A8
	MOVK	1,A0
	JSRP	SLIDOPRR
	SOUND1	SUBOFF
	SLEEP	30
	MOVE	A10,A8
*
*OPEN A SUBWAY DOOR
*A8=LEFT DOOR
*A9=RIGHT DOOR
SUBCLOSE
	SOUND1	SUBDOOR
	CREATE	INDPID,CLOSSUBL
	MOVE	A9,A8
	MOVK	1,A0
	JSRP	SLIDCLRR
	SOUND1	SUBOFF
	DIE
**************************************************************************
*                                                                        *
* SLIDOPR - SLIDE OPEN A DOOR TO THE RIGHT.				 *
* A0 = SLEEP TIME
* A8 = OBLOCK OF DOOR							 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
SLIDOPR
	MOVK	2,A0
SLIDOPRR
	MMTM	A12,A9,A10
	MOVE	A0,A10
	MOVE	*A8(OID),A0,W
	SLL	28,A0
	SRL	28,A0			;KEEP DOOR I.D.
	ADDI	BGDOMID,A0
	MOVE	A0,*A8(OID),W

	MOVE	*A8(OSIZEX),A9,W
	DEC	A9			;THIS IS HOW MANY TO CLIP
SLIDOPR1
	MOVI	[0,1],A2
	CLR	A3
	CALLA	CLIPOBJ			;CLIP ONE OFF THE RIGHT SIDE
	MOVE	*A8(OXPOS),A0,W		;GET THE CURRENT XPOS
	INC	A0			;AND MOVE FORWARD
	MOVE	A0,*A8(OXPOS),W		
	MOVE	A10,A0
	CALLA	PRCSLP
	DSJS	A9,SLIDOPR1
	JRUC	SLIDOPLX
**************************************************************************
*                                                                        *
* SLIDOPL - SLIDE OPEN A DOOR TO THE LEFT.				 *
* A8 = OBLOCK OF DOOR							 *
* A0 = SLEEP TIME
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
SLIDOPL
	MOVK	2,A0
SLIDOPLL
	MMTM	A12,A9,A10
	MOVE	A0,A10
	MOVE	*A8(OID),A0,W
	SLL	28,A0
	SRL	28,A0			;KEEP DOOR I.D.
	ADDI	BGDOMID,A0
	MOVE	A0,*A8(OID),W

	MOVE	*A8(OSIZEX),A9,W
	DEC	A9			;THIS IS HOW MANY TO CLIP
SLIDOPL1
	CLR	A2
	MOVI	[0,1],A3
	CALLA	CLIPOBJ			;CLIP ONE OFF THE LEFT SIDE
	MOVE	*A8(OXPOS),A0,W		;GET THE CURRENT XPOS
	DEC	A0			;AND MOVE BACK
	MOVE	A0,*A8(OXPOS),W		
	MOVE	A10,A0
	CALLA	PRCSLP
	DSJS	A9,SLIDOPL1
SLIDOPLX
	MOVE	*A8(OID),A0,W
	SLL	28,A0
	SRL	28,A0			;KEEP DOOR I.D.
	ADDI	BGDOID,A0
	MOVE	A0,*A8(OID),W
        	MMFM	A12,A9,A10
	RETP

**************************************************************************
*                                                                        *
* SLIDCLR - SLIDE CLOSED A DOOR TO THE RIGHT.				 *
* A8 = OBLOCK OF DOOR							 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
SLIDCLR
	MOVK	2,A0
SLIDCLRR
	MMTM	A12,A9,A10
	MOVE	A0,A10
	MOVE	*A8(OID),A0,W
	SLL	28,A0
	SRL	28,A0			;KEEP DOOR I.D.
	ADDI	BGDCMID,A0
	MOVE	A0,*A8(OID),W

	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(ISIZEX),A9,W
	ADDK	3,A9
	SRL	2,A9
	SLL	2,A9
	MOVE	*A8(OSIZEX),A0,W
	SUB	A0,A9			;CLIP THIS MANY
SLIDCLR1
	MOVI	[0,-1],A2
	CLR	A3
	CALLA	CLIPOBJ			;CLIP NEG ONE OFF THE RIGHT SIDE
	MOVE	*A8(OXPOS),A0,W		;GET THE CURRENT XPOS
	DEC	A0			;AND MOVE BACK
	MOVE	A0,*A8(OXPOS),W		
	MOVE	A10,A0
	CALLA	PRCSLP
	DSJS	A9,SLIDCLR1
	JRUC	SLIDCLLX
**************************************************************************
*                                                                        *
* SLIDCLL - SLIDE CLOSED A DOOR TO THE LEFT.				 *
* A8 = OBLOCK OF DOOR							 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
SLIDCLL
	MOVK	2,A0
SLIDCLLL
	MMTM	A12,A9,A10
	MOVE	A0,A10
	MOVE	*A8(OID),A0,W
	SLL	28,A0
	SRL	28,A0			;KEEP DOOR I.D.
	ADDI	BGDCMID,A0
	MOVE	A0,*A8(OID),W

	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(ISIZEX),A9,W
	ADDK	3,A9
	SRL	2,A9
	SLL	2,A9
	MOVE	*A8(OSIZEX),A0,W
	SUB	A0,A9			;CLIP THIS MANY
SLIDCLL1
	MOVI	[0,-1],A3
	CLR	A2
	CALLA	CLIPOBJ			;CLIP NEG ONE OFF THE LEFT SIDE
	MOVE	*A8(OXPOS),A0,W		;GET THE CURRENT YPOS
	INC	A0			;AND MOVE FORWARD
	MOVE	A0,*A8(OXPOS),W		
	MOVE	A10,A0
	CALLA	PRCSLP
	DSJS	A9,SLIDCLL1
SLIDCLLX
	MOVE	*A8(OID),A0,W
	SLL	28,A0
	SRL	28,A0			;KEEP DOOR I.D.
	ADDI	BGDCID,A0
	MOVE	A0,*A8(OID),W
	MMFM	A12,A9,A10
	RETP

**************************************************************************
*                                                                        *
* PTOSAFE - PROCESS TO MAKE A PLAYER WALK TO A SAFE DOOR OBJECT.	 *
* A8 = PTR TO SAFE DOOR							 *
* A9 = PLAYER DATA STRUCTURE						 *
* A10 = PLAYER CPU JOYSTICK LOCATION					 *
* A11 = SAFE MIDDLE X (16 BITS)						 *
*                                                                        *
**************************************************************************
PTOSAFE
	CALLA	GETANIXY
	MOVY	A2,A11
	SUBI	25,A11			;MAKE THIS PLAYER END UP TO THE LEFT
	MOVE	A11,A4
	SUBI	[40,0],A11		;FUDGE OFFSET FOR SAFE DOOR Y
	MOVE	*A9(POBJ),A8,L
	JRZ	PTOSAFEX		;THIS LITTLE PLAYER IS NON-EXISTANT
	CALLA	GETANIXY
	SRL	16,A3
	MOVX	A3,A2
	MOVE	A4,A3
	MOVY	A2,A3			;MATCH THE Y'S
	MOVE	A3,A8
	MOVI	60,A4
	CALLA	SLINEVEL
	CLR	A3
	SRA	1,A1
	JRZ	PTOSAFE2
	JRN	PTOSAFE1
	ORI	PRYTE,A3
	JRUC	PTOSAFE2
PTOSAFE1
	ORI	PLEFT,A3
PTOSAFE2
	SRA	1,A2
	ABS	A1
	ABS	A2
	MOVE	A1,*A9(PXVEL),L
	MOVE	A2,*A9(PYVEL),L
	MOVE	A3,*A10,W
	SLEEP	60
	CLR	A3
	MOVE	A3,*A10,W		;CLEAR THE SWITCHES

	MOVE	@WAVE,A0,W
	CMPI	NWAVES,A0		;LAST WAVE?
	JRNE	PTOSAFE5
	MOVE	A8,B0
	MOVE	*A9(POBJ),A8,L
	JRZ	PTOSAFEX		;THIS LITTLE PLAYER IS NON-EXISTANT
	CALLA	GETANIX
	MOVE	B0,A8
	MOVE	A0,A1
	MOVX	A8,A2
	MOVE	A2,A3
	ADDK	32,A3
	SUBK	32,A2			;HIT WINDOW
	CALLA	CHKRANGE
	JRNC	PTOSAFEX		;HE DIDN'T MAKE IT
PTOSAFE5
	MOVE	A8,A2
	MOVE	A11,A3
	MOVX	A2,A3			;MATCH THE X'S
	MOVI	40,A4
	CALLA	SLINEVEL
	CLR	A3
	SRA	1,A1
	SRA	1,A2
	JRZ	PTOSAFE4
	JRN	PTOSAFE3
	ORI	PDOWN,A3
	JRUC	PTOSAFE4
PTOSAFE3
	ORI	PUP,A3
PTOSAFE4
	ABS	A1
	ABS	A2
	MOVE	A1,*A9(PXVEL),L
	MOVE	A2,*A9(PYVEL),L
	MOVE	A3,*A10,W
	SLEEP	40
	MOVI	PLEFT,A3
	MOVE	A3,*A10,W		;LEFT FACE
	SLEEP	3
	CLR	A3
	MOVE	A3,*A10,W
PTOSAFEX
	DIE
**************************************************************************
*                                                                        *
* REDMESS - MESSAGE TO PRINT OUT BEFORE RED SAFE IS EXPANDED		 *
*                                                                        *
**************************************************************************
REDMESS
	MMTM	A12,A8,A9,A10,A11

***	CALLA	CLRBUYIN
***	AUDITCNT AUDRED,NPLYRS

	CLR	A0
	MOVE	A0,@GAMERASE,W		;TURN OFF THE AUTO-ERASE DUDE
	CALLA	AUTOEOFF
	CALLA	SYNCHALF
	CALLA	SYNCFULL
	
	MOVK	3,A0		;DON'T BLOW YOUR WADSWORTH
	MOVI	0F3F3H,A6
	MOVI	NARC1MSG,A8
	MOVI	[50+SKYTOPOF,256],A9	;POSITION
	MOVI	RD20FONT,A11	;BIG OLD LETTERS
	MOVK	1,A10		;ONE SPACE BETWEEN LETTERS
	JSRP	STRCNRM		;"NARC ONE ..."
	SLEEP	10

	MOVK	2,A10		;NEW SPACING
	MOVK	2,A0
	MOVI	0F2F2H,A6
	MOVI	[100+SKYTOPOF,256],A9	;POSITION
	MOVI	RD15FONT,A11	;BIG OLD LETTERS
	JSRP	STRCNRM		;"EARLY INTELLIGENCE REPORTS,"	

	MOVI	[150+SKYTOPOF,65],A9	;POSITION
	JSRP	STRLNRM		;""MR. BIG'S OFFICE IS "	
	SLEEP	20

	MOVK	4,A0
	MOVI	0F5F5H,A6
	JSRP	STRLNRM		;"IMPENETRABLE!""	
	SLEEP	20

	MOVK	2,A0
	MOVI	0F0F0H,A6
	MOVI	[210+SKYTOPOF,256],A9	;POSITION
	JSRP	STRCNRM		;"YOU'RE ON YOUR OWN FROM HERE."

	MOVK	1,A10
	MOVI	0F3F3H,A6
	MOVI	[240+SKYTOPOF,256],A9	;POSITION
	MOVI	RD20FONT,A11	;BIG OLD LETTERS
	JSRP	STRCNRM		;"GOOD LUCK!"

	SLEEP	120		;MAGNA VIDEO
	MMFM	A12,A8,A9,A10,A11
	RETP

**************************************************************************
*                                                                        *
* BLUEMESS - ROUTINE CALLED UPON ENTERING THE BLUE SAFE			 *
*                                                                        *
**************************************************************************
BLUEMESS
***	AUDITCNT AUDBLUE,NPLYRS
	RETP

**************************************************************************
*                                                                        *
* SILVMESS - ROUTINE CALLED UPON ENTERING THE SILVER SAFE		 *
*                                                                        *
**************************************************************************
SILVMESS
***	AUDITCNT AUDSILV,NPLYRS
	RETP

*
*COLLISION VECTORS FOR DOORS AND SLOTS
CHINACOLL
	.WORD	P1OID
	.LONG	DOOR1W1C
	.WORD	P2OID
	.LONG	DOOR1W1C
	.WORD	0
	.LONG	DUMRTSG

LOFHCOLL
	.WORD	P1OID
	.LONG	DOORLFHC
	.WORD	P2OID
	.LONG	DOORLFHC
	.WORD	0
	.LONG	DUMRTSG

BIGINCOL
	.WORD	P1OID
	.LONG	DOOR1BIG
	.WORD	P2OID
	.LONG	DOOR1BIG
	.WORD	0
	.LONG	DUMRTSG

DORNCOLL
	.WORD	P1OID
	.LONG	DOORCOLN
	.WORD	P2OID
	.LONG	DOORCOLN
	.WORD	0
	.LONG	DUMRTSG

DOGRMCOL				;ENTRANCE TO DOGGY TRAP ROOM
	.WORD	P1OID
	.LONG	DOOR1DOG
	.WORD	P2OID
	.LONG	DOOR1DOG
	.WORD	0
	.LONG	DUMRTSG

SUBRMCOL				;ENTRANCE TO SUBWAY ROOM
	.WORD	P1OID
	.LONG	DOOR1SUB
	.WORD	P2OID
	.LONG	DOOR1SUB
	.WORD	0
	.LONG	DUMRTSG

BUGRMCOL				;ENTRANCE TO BUG TRAP ROOM
	.WORD	P1OID
	.LONG	DOOR1BUG
	.WORD	P2OID
	.LONG	DOOR1BUG
	.WORD	0
	.LONG	DUMRTSG

CLWRMCOL				;ENTRANCE TO CLOWN TRAP ROOM
	.WORD	P1OID
	.LONG	DOOR1CLW
	.WORD	P2OID
	.LONG	DOOR1CLW
	.WORD	0
	.LONG	DUMRTSG

DMPRMCOL				;ENTRANCE TO DUMPSTER MAN TRAP ROOM
	.WORD	P1OID
	.LONG	DOOR1DMP
	.WORD	P2OID
	.LONG	DOOR1DMP
	.WORD	0
	.LONG	DUMRTSG

GRNHSCOL	       			;ENTRANCE TO SKYHIGH'S GREENHOUSE
	.WORD	P1OID
	.LONG	DOOR1GHS
	.WORD	P2OID
	.LONG	DOOR1GHS
	.WORD	0
	.LONG	DUMRTSG

LABCOL					;ENTRANCE TO THE CHEMICAL LABRATORY
	.WORD	P1OID
	.LONG	DOOR1LAB
	.WORD	P2OID
	.LONG	DOOR1LAB
	.WORD	0
	.LONG	DUMRTSG

CHOPWCOL				;ENTRANCE TO THE CHOPPER WAVE
	.WORD	P1OID
	.LONG	DOOR1CHP
	.WORD	P2OID
	.LONG	DOOR1CHP
	.WORD	0
	.LONG	DUMRTSG

*
*DOORS AT END OF WAVE COLLISION STUFF
DENDCOLL
	.WORD	P1OID
	.LONG	DOORCOLE
	.WORD	P2OID
	.LONG	DOORCOLE
	.WORD	0
	.LONG	DUMRTSG
DENDCOLS				;END DOOR COLLISION WITH SILVER CARD
	.WORD	P1OID
	.LONG	DOORCOLS
	.WORD	P2OID
	.LONG	DOORCOLS
	.WORD	0
	.LONG	DUMRTSG
DENDCOLR				;END DOOR COLLISION WITH RED CARD
	.WORD	P1OID
	.LONG	DOORCOLR
	.WORD	P2OID
	.LONG	DOORCOLR
	.WORD	0
	.LONG	DUMRTSG
DENDCOLB				;END DOOR COLLISION WITH BLUE CARD
	.WORD	P1OID
	.LONG	DOORCOLB
	.WORD	P2OID
	.LONG	DOORCOLB
	.WORD	0
	.LONG	DUMRTSG
DENDCOLGR				;END DOOR COLLISION WITH GREEN CARD
	.WORD	P1OID
	.LONG	DOORCOLGR
	.WORD	P2OID
	.LONG	DOORCOLGR
	.WORD	0
	.LONG	DUMRTSG

*
*SLOT FOR END OF WAVE EXIT STUFF
SENDCOLL
	.WORD	P1OID
	.LONG	SLTCOLE
	.WORD	P2OID
	.LONG	SLTCOLE
	.WORD	0
	.LONG	DUMRTSG
SENDCOLS				;END SLOT COLLISION WITH SILVER CARD
	.WORD	P1OID
	.LONG	SLTCOLS
	.WORD	P2OID
	.LONG	SLTCOLS
	.WORD	0
	.LONG	DUMRTSG
SENDCOLR				;END SLOT COLLISION WITH RED CARD
	.WORD	P1OID
	.LONG	SLTCOLR
	.WORD	P2OID
	.LONG	SLTCOLR
	.WORD	0
	.LONG	DUMRTSG
SENDCOLB				;END SLOT COLLISION WITH BLUE CARD
	.WORD	P1OID
	.LONG	SLTCOLB
	.WORD	P2OID
	.LONG	SLTCOLB
	.WORD	0
	.LONG	DUMRTSG
SENDCOLGR				;END SLOT COLLISION WITH GREEN CARD
	.WORD	P1OID
	.LONG	SLTCOLGR
	.WORD	P2OID
	.LONG	SLTCOLGR
	.WORD	0
	.LONG	DUMRTSG

*
*SAFE SLOT COLLISION STUFF
SLOTCOLS				;END SLOT COLLISION WITH SILVER CARD
	.WORD	P1OID
	.LONG	SLOTSAFS
	.WORD	P2OID
	.LONG	SLOTSAFS
	.WORD	0
	.LONG	DUMRTSG
SLOTCOLR				;END SLOT COLLISION WITH RED CARD
	.WORD	P1OID
	.LONG	SLOTSAFR
	.WORD	P2OID
	.LONG	SLOTSAFR
	.WORD	0
	.LONG	DUMRTSG
SLOTCOLB				;END SLOT COLLISION WITH BLUE CARD
	.WORD	P1OID
	.LONG	SLOTSAFB
	.WORD	P2OID
	.LONG	SLOTSAFB
	.WORD	0
	.LONG	DUMRTSG

SLOTCOLG				;END SLOT COLLISION WITH GOLD CARD
	.WORD	P1OID
	.LONG	SLOTSAFG
	.WORD	P2OID
	.LONG	SLOTSAFG
	.WORD	0
	.LONG	DUMRTSG

SLOTCOLH				;END GOLD CARD SLOT TO BIG HEAD ROOM
	.WORD	P1OID
	.LONG	SLOTSAFH
	.WORD	P2OID
	.LONG	SLOTSAFH
	.WORD	0
	.LONG	DUMRTSG

SLOTCOLGR				;END SLOT COLLISION WITH GREEN CARD
	.WORD	P1OID
	.LONG	SLOTSAFGR
	.WORD	P2OID
	.LONG	SLOTSAFGR
	.WORD	0
	.LONG	DUMRTSG

SLOTCNDS
	.WORD	P1OID
	.LONG	SLOTSNDS
	.WORD	P2OID
	.LONG	SLOTSNDS
	.WORD	0
	.LONG	DUMRTSG

SLOTCNDG
	.WORD	P1OID
	.LONG	SLOTSNDG
	.WORD	P2OID
	.LONG	SLOTSNDG
	.WORD	0
	.LONG	DUMRTSG

*
*SAFE DOOR COLLISION ROUTINES
SAFECOLL
	.WORD	P1OID
	.LONG	SAFECOL
	.WORD	P2OID
	.LONG	SAFECOL
	.WORD	0
	.LONG	DUMRTSG

NARC1MSG
	.STRING	"NARC  ONE:"
	.BYTE	0
	.STRING	"INTELLIGENCE REPORTS,"
	.BYTE	0
	.BYTE	22H
	.STRING	"MR. BIG'S OFFICE IS "
	.BYTE	0
	.STRING	"IMPENETRABLE !"
	.BYTE	F15RQUOT
	.BYTE	0
	.STRING	"YOU'RE ON YOUR OWN FROM HERE."
	.BYTE	0
	.STRING	"GOOD  LUCK!"
	.BYTE	0

	.EVEN
	.END
