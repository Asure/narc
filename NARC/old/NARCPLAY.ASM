	.FILE	'NARCPLAY.ASM'
	.TITLE	" <<< N  A  R  C  -- PLAYER JOYSTICK & IMAGE CONTROL >>>"

**************************************************************************
*                                                                        *
* 	COPYRIGHT (C) 1988 WILLIAMS ELECTRONICS GAMES, INC. 		 *
* 	ALL RIGHTS RESERVED.						 *
*                                                                        *
**************************************************************************

	.WIDTH	132
	.OPTION	B,D,L
	.MNOLIST	

*	GET THE SYSTEM STUFF
	.INCLUDE	"\video\MPROCEQU.ASM"	;MPROC equates
	.INCLUDE	"\video\DISPEQU.ASM"	;Display processor equates
	.INCLUDE	"\video\GSP.INC"	;GSP assembler equates
	.INCLUDE	"\video\SYS.INC"	;Zunit system equates
	.INCLUDE	"\video\MACROS.HDR"	;Macros, Yeah!
*	LOCAL STUFF
	.INCLUDE	"NARCEQU.ASM"		;NARC Equates
	.INCLUDE	"NARCAUDN.ASM"		;NARC Audit Equates

*
*GLOBALS IN THIS FILE
	.GLOBAL	STARTINVL,CKLXBND,CKLBADJ,P_INBNDS
*
*EXTERNALS
	.GLOBAL	jtdrive1,jtdrive4,jtdrive5,jtpassen1,jtpassen4,jtpassen5
	.GLOBAL	ylsw4,ytsstdrst,jlsw4,jtsstdrst,jrpilohit,jrhelphit
	.GLOBAL	jrpilot,jrhelpas
	.GLOBAL	HEADBUTT,PLEGON,PLEGOFF,PTORSON
	.GLOBAL	PPOSADDX,ESCAPEJ,INVINCO,INVINCNF,PXFERCRD
	.GLOBAL	PFLYNDIE,PFLASH2,PLAYERCON,PIJDECEL,PDELETE
	.GLOBAL	GET_ADJ,INIBTIME,DECBTIME,INIBMESS,CLRBTIME,CLRBMESS
	.GLOBAL	BUYINWIN,BUYINLP
	
	.EVEN
	.TEXT								 

P1LLINIT
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
	CLR	A0
	MOVE	A0,@P1CTRL,W
	MOVI	P1DATA,A2
	MOVI	P1SCRAD,A4
	MOVI	P1MAINTL,A6
	MOVI	P1INITTL,A14
	JRUC	PLLINTIN
**************************************************************************
*                                                                        *
* P2LLINIT - PLAYER 2 SPECIFIC INITIALIZATION				 *
*                                                                        *
**************************************************************************
P2LLINIT
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
	CLR	A0
	MOVE	A0,@P2CTRL,W
	MOVI	P2DATA,A2
	MOVI	P2SCRAD,A4
**	MOVI	P2MAINTL,A6
	MOVI	P1MAINTL,A6
	MOVI	P2INITT,A14
	JRUC	PLLINTIN
**************************************************************************
*                                                                        *
* PLLINIT - PLAYER INITIALIZATION W/LEGS SEPERATE			 *
* A1=BASE I.D. FOR PLAYER PROCESSES					 *
* A2=PLAYER DATA STRUCTURE PTR						 *
* A6=PLAYER MAIN ANIMATION TABLE					 *
* A14=PLAYER OBJECT INIT TABLE						 *
* RETURNS:								 *
* Z BIT SET = FAILURE							 *
* Z BIT CLR = SUCCESS							 *
*                                                                        *
**************************************************************************
PLLINIT
*MAKE SURE A13 IS THE LAST REGISTER PUSHED HERE!
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
PLLINTIN
*PUT ADJUSTMENTS HERE
	ADJUST	ADJLIVES
****	MOVI	ILIVES,A0		;GET INITIAL # OF LIVES
	MOVE	A0,*A2(PLIVES),W	
	MOVI	IENERGY,A1	     	;GET THE INITIAL # OF PLAYER LIVES
	SLL	16,A1			;8 BIT INTEGER:8 BIT FRACTION
	MOVE	A1,*A2(PENERGY),L	;STORE IT	
	MOVI	NENERGY,A0		;GET THE SCALE SIZE
	DIVU	A0,A1			;GET THE UNIT SIZE
	MOVE	A1,*A2(PENRGSIZ),L

	ADJUST	ADJROCKS
	MOVE	*A2(PROCKETS),A1,W
	ADD	A0,A1			;ADD MORE ROCKETS
	MOVE	A1,*A2(PROCKETS),W	;STORE INITIAL ROCKETS

	MOVE	*A2(PBULLETS),A0,W
	ADDI	IBULLETS,A0		;AND SOME BULLETS
	MOVE	A0,*A2(PBULLETS),W	;STORE INITIAL BULLETS

***** END OF ADJUSTMENTS

	CLR	A0
	MOVE	A0,*A2(PBULLONS),W	
	MOVE	A0,*A2(PROCKONS),W
***	MOVE	A0,*A2(PSCORE),L	;CLEAR THE SCORE
***	MOVE	A0,*A2(PDRUGS),W	;AND THE BONUSES
***	MOVE	A0,*A2(PMONEY),W
***	MOVE	A0,*A2(PBUSTS),W
***	MOVE	A0,*A2(PCARDS),L
***	MOVE	A0,*A2(PCARDS1),L

*LOAD BASE WALKING VELOCITIES
	MOVI	PWXVEL,A0
	MOVE	A0,*A2(PXVEL),L
	MOVI	PWYVEL,A0
	MOVE	A0,*A2(PYVEL),L

	MOVK	STANDLEG,A0
	CALLR	LOADLTAB		;SET UP INITIAL ANIMATION TABLE
	MOVK	RESTORSO,A0
	CALLA	LOADATAB

*INITIALIZE PLAYER PALETTE
	CALLA	GPALOBJ
	MOVE	A0,A8			;PTR FOR INSERTION TO DATA BLOCK
	JRNZ	PLLTOROK
	PULL	A13
	JRUC	PLLINITX
PLLTOROK
	CALLA	GETOBJ
	JRNE	PLLEGCR			;LEGS O.K.
*ERROR'D ON LEGS HERE
	MOVE	@CURPAL,A0,W
	CALLA	FREEPAL
	MOVE	A8,A0
	CALLA	FREEOBJ			;FREE ALL AND EXIT
	CLR	A8
	PULL	A13
	JRUC	PLLINITX
PLLEGCR
	MOVE	A0,A4			;KEEP LEG OBJECT HERE
	CLR	A3			;CLEAR LEG TICKS
	CLR	A5			;CLEAR TICKS
	CLR	A7			;CLEAR SWITCHES

	MOVI	[MINVINC,0],A9		;START INVINCIBLE INITIALLY
**	CLR	A9			;CLEAR FLAGS

	CLR	A12			;AND Y DECEL
	ADDI	PALDEND,A2		;OFFSET TO END OF INITIALIZED DATA
	MMTM	A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13	;STUFF THE DATA BLOCK
	PULL	A13			;GET THIS DUDE BACK

*INITIALIZE THE PLAYERS OBJECT BLOCK
	CALLA	STFOBJ			;SET UP THE LEGS
	CALLA	SETZPOS			;SET Z BASED ON THE FEET
	MOVE	A8,A0
	CALLA	STFOBJ			;STUFF THE TORSO OBJECT
	MOVE	*A4(OZVAL),A1,L		;MATCH THE FOOT Z POSITION
	INC	A1			;TORSO ALWAYS ON TOP
	MOVE	A1,*A0(OZVAL),L

	MOVE	@GAMSTATE,A6,W
	CMPI	ININTRO,A6
	JREQ	PLLINI4			;BR = JUST INSERT AND DIE
	CMPI	INAMODE,A6
	JREQ	PLLINIST		;BR = JUST PUT HIM OUT THERE
	CMPI	INGAME,A6
	JREQ	PLLINITX		;BR = SOMEONE ELSE WILL HANDLE INSERTION
	CMPI	INMSU,A6
	JREQ	PLLINITX		;BR = SOMEONE ELSE WILL HANDLE INSERTION

	MOVE	*A8(OID),A0,W
	ADDI	PLACEID,A0
	MOVI	ENEMIES,A1
	MOVE	A1,A14
	CALLA	ISSUPPID
	JRNE	PLLCOUT			;BR = SITTING IN CAR. JUST JUMP OUT
	MOVI	CARLIST,A1
	MOVE	A1,A14
	CALLA	ISSUPPID
	JREQ	PLLTRAN			;COME IN BY VEHICLE
*RELEASE PLAYER FROM INTRO VEHICLE HERE
PLLCOUT
	MOVE	A1,A12			;KEEP PLACEHOLDER OBJECT
	MOVE	A1,A0
	MOVE	A14,A1
	CALLA	DELSUPP			;DELETE IT FROM THE CORRECT SUP LIST
	MOVE	*A12(OPLINK),A0,L	
	MOVE	A0,A11
	CALLA	GETA10			;GET THE CAR PTR

	MOVE	@PUPDATE,A6,W
	MOVK	1,A5
	MOVE	A5,@PUPDATE,W
	MOVE	*A2(PIRQFLAG),A5,W
	ORI	MDRIVER,A5
	MOVE	A5,*A2(PIRQFLAG),W
	CLR	A5
	MOVE	A5,@PLAYCAR,L
	MOVE	A6,@PUPDATE,W

	CMPI	P1DATA,A2
	JRNE	PLLINIP2
	MOVI	P1CTRL,A9
	JRUC	PLLINIPG
PLLINIP2
	MOVI	P2CTRL,A9	
PLLINIPG
	MOVE	A2,A6			;KEEP PDATA HERE

	SWAP	A10,A8
	CALLA	GETANIXY
	SWAP	A10,A8

	MOVE	A2,A5
	MOVE	A3,A7

	MOVE	A8,A0
	MOVE	A4,A14
	MOVI	DMAWNZ,A4
	CALLA	GANISAG			;ADJUST THE TORSO PORTION OF THE BOD
	MOVE	A5,A2
	MOVE	A7,A3
	MOVE	A14,A0
	CALLA	GANISAG			;NOW THE LEGS
	MOVE	A14,A4			;RESTORE LEG POINTER TO THE PROPER REG
	MOVE	*A10(OXVEL),*A8(OXVEL),L
	MOVE	*A10(OXVEL),*A4(OXVEL),L
	MOVE	*A10(OZVAL),*A8(OZVAL),L
	MOVE	*A10(OZVAL),*A4(OZVAL),L
	MOVE	A6,A2			;RESTORE PLINDX

	MOVI	PJUMP|PRYTE,A7		;START TO BAIL
	MOVE	A7,*A9,W

	CLR	A7
	MOVE	*A11(PASSPTR),A0,L	;DELETE PLACEHOLDER
	CMP	A0,A12
	JRNE	PLLINID2
	MOVE	A7,*A11(PASSPTR),L
	JRUC	PLLINIDG
PLLINID2
	MOVE	A8,A5	
	MOVE	A11,A0
	CLR	A8
	CALLA	PUTA8
	MOVE	A5,A8
	MOVE	A12,A0
PLLINIDG
	CALLA	DELSOBJ

	MOVE	A2,A11
	CREATE	INDPID,PIJDECEL
	MOVE	A8,A0
	JRUC	PLLINI4

*TRANSPORT THE NEW PLAYER ON THE SCREEN HERE
PLLTRAN
	MOVE	@PSZMIN,A0,W
	MOVE	@PSZMAX,A5,W
	CMP	A0,A5
	JREQ	PLLINIST		;BR = NO STREET TO BE HAD, NO CAR

	CMPI	P1DATA,A2
	JRNE	PLLTRAN1
	MOVE	@P2DATA+PFLAGS,A0,L
	JRUC	PLLTRAN2
PLLTRAN1
	MOVE	@P1DATA+PFLAGS,A0,L
PLLTRAN2
	BTST	BDRIVER,A0
	JREQ	PLLTRAN3		;BR = THE OTHER PLAYER IS NOT DRIVING

	MOVE	@PLAYCAR,A10,L
	JRZ	PLLINIST
	MOVE	*A10(OPLINK),A0,L
	JRZ	PLLINIST		;UH, SOMETHING'S WRONG
PLLTRN2A
	MOVE	A8,*A0(PASSPTR),L		;STUFF THIS GUY HERE
	MOVK	1,A0
	MOVE	A0,@PUPDATE,W			;TURN OFF UPDATE
	MOVE	*A2(PIRQFLAG),A0,W		;FOR NIL FLAG FUCK
	ORI	MPASSEN,A0
	MOVE	A0,*A2(PIRQFLAG),W
	CLR	A0
	MOVE	A0,@PUPDATE,W			;RE-INSTATE THE UPDATE
	MMTM	SP,A2,A4		;KEEP VITAL STUFF
*WARP PLAYER TORSO TO THE PASSENGER SEAT 
	MOVE	*A10(OID),A6,W	
	CMPI	TRAN2OID,A6
	JRNE	PLLPINC
	MOVK	HELPASFRM,A0
	MOVE	*A10(OZVEL),*A8(OZVEL),L
	MOVE	*A10(OZVAL),A6,L
	DEC	A6	       		;GET INSIDE THE HELICOPTER
 	MOVE	A6,*A8(OZVAL),L
	JRUC	PLLPPASS
PLLPINC
	MOVK	PASSTFRM,A0
	MOVE	*A10(OZVEL),*A8(OZVEL),L
	MOVE	*A10(OZVAL),A6,L
	INC	A6	       		;OVERLAP THE CAR
 	MOVE	A6,*A8(OZVAL),L
PLLPPASS
	MOVE	*A10(OXVEL),*A8(OXVEL),L
	MOVE	*A10(OYVEL),*A8(OYVEL),L
	MOVE	*A2(PMAINT),A6,L	
	CALLA	BASFRM			;GET PASSENGER SCRIPT
	MOVE	*A6,A6,L
	MOVE	A6,*A2(PFRM),L		;FORCE PIRQ ROUTINE BLOW THIS OUT
	MOVE	*A6,A1,L		;GET THE FRAME 
	MOVE	*A10(OFLAGS),A4,W
	CALLA	ANI			;ANIMATE IN THE NEW FRAME

	MOVE	*A10(OIMG),A1,L
	MOVE	*A10(OSIZE),A2,L
	CALLA	GANIOF				;GET THE CAR ANIMATION PNT.
	MOVE	*A10(OXVAL),A3,L
	MOVE	*A10(OYVAL),A5,L
	ADD	A6,A3
	ADD	A7,A5				;SET THE PRECEDENT
	MOVE	*A8(OIMG),A1,L
	MOVE	*A8(OSIZE),A2,L
	CALLA	GANIOF
	SUB	A6,A3	
	SUB	A7,A5
	MOVE	A3,*A8(OXVAL),L
	MOVE	A5,*A8(OYVAL),L		;STUFF NEW DRIVER COORDS.
	MMFM	SP,A2,A4		;GET BACK THE STUFF
	MOVI	PLAYERS,A1						 
	MOVE	A8,A0
	CALLA	INSOBJ			;INSERT TORSO			 
	CALLA	ADDSUPP			;ADD TO SUPPLEMENTAL LIST	 
	MOVE	*A4(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	MOVE	A0,*A4(OFLAGS),W	;LEGS AWAY
	MOVE	A4,A0							 
	CALLA	INSOBJ			;INSERT LEGS 			 
	CALLA	ADDSUPP			;ADD TO SUPPLEMENTAL LIST	 
	CALLR	STARTINVL
	JRUC	PLLINITX
PLLTRAN3
	MOVE	@PORCNT,A0	
	JRNE	PLLINIST		;DON'T USE THE CAR IF ONE IS ON SCREEN

	MOVE	A4,A9
	MOVE	A2,A11
	CREATE	PORSTPID,PORTRANS
	JRNZ	PLLINITX		;BR = O.K.
	MOVE	A4,A0			;FAILURE MODE!
	CALLA	FREEOBJ
	CLR	A0
	MOVE	A0,*A2(POBJ),L
	MOVE	A0,*A2(PLOBJ),L
	MOVE	@CURPAL,A0,W
	CALLA	FREEPAL
	MOVE	A8,A0
	CALLA	FREEOBJ			;FREE ALL AND EXIT
	CLR	A8
	JRUC	PLLINITX
PLLINIST
	MOVE	A4,A0
	CALLA	ADJSTWTL
	MOVE	A8,A0
	CALLA	ADJSTWTL
	CALLR	STARTINVL
	JRUC	PLLINI4A
PLLINI4
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MINVINC,A0		;TURN INVINCIBILITY FLAG
	MOVE	A0,*A2(PEXEFLAG),W
PLLINI4A
	MOVI	PLAYERS,A1						 
	MOVE	A8,A0			;MAKE SURE TORSO POINTER IS CORRECT
	CALLA	INSOBJ			;INSERT TORSO			 
	CALLA	ADDSUPP			;ADD TO SUPPLEMENTAL LIST	 
	MOVE	A4,A0							 
	CALLA	INSOBJ			;INSERT LEGS 			 
	CALLA	ADDSUPP			;ADD TO SUPPLEMENTAL LIST	 
	CALLA	SHADST2			;START SHADOW FOR PLAYER TORSO	 
	MOVE	A4,A8							 
	CALLA	SHADST			;START SHADOW FOR PLAYER LEGS	 
PLLINITX
	MOVE	A8,A8			;NO ZERO FLAG
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12
	RETS

*PLAYER ONE INITIALIZATION TABLE
P1INITTL
*
*LEG INIT
	.LONG	0,0,(220*10000H),(235*Y)
	.WORD	0,0
	.LONG	jlsw4,PZSIZ,P1COLL
	.WORD	DMAWNZ,P1OID
	.LONG	0
*
*TORSO INIT
	.LONG	0,0,(220*10000H),(235*Y)
	.WORD	0,0
	.LONG	jtsstdrst,PZSIZ,P1COLL
	.WORD	DMAWNZ,P1OID
	.LONG	P1BLIP
*
*PLAYER TWO INITIALIZATION TABLE
P2INITT
*
*LEG INIT
	.LONG	0,0,(310*10000H),(220*Y)
	.WORD	0,0
	.LONG	ylsw4,PZSIZ,P2COLL
	.WORD	DMAWNZ,P2OID
	.LONG	0
*
*TORSO INIT
	.LONG	0,0,(310*10000H),(220*Y)
	.WORD	0,0
	.LONG	ytsstdrst,PZSIZ,P2COLL
	.WORD	DMAWNZ,P2OID
	.LONG	P2BLIP

*PLAYER COLLISION LISTS
P1COLL
	.WORD	BEOID|BULLETID
	.LONG	P1COLL0
	.WORD	BEOID|HYPOD
	.LONG	P1COLLHY
	.WORD	BEOID|EXPLODID
	.LONG	PEXPL1
	.WORD	BEOID|BASEID
	.LONG	PEXPL1
	.WORD	BEOID|ROCKETID
	.LONG	PROCK1
	.WORD	B2OID|ROCKETID
	.LONG	PROCK1

	.WORD	C1OID|CBODYID
	.LONG	PCARHIT1

	.WORD	BGGID
	.LONG	PGARBAGE1

	.WORD	BGTELEID
	.LONG	PGARBAGE1

	.WORD	WEEDOID
	.LONG	PGARBAGE1

	.WORD	BGDMPID
	.LONG	PDUMP1

	.WORD	0
	.LONG	DUMRTSG

P2COLL
	.WORD	BEOID|BULLETID
	.LONG	P2COLL0
	.WORD	BEOID|HYPOD
	.LONG	P2COLLHY
	.WORD	BEOID|EXPLODID
	.LONG	PEXPL2
	.WORD	BEOID|BASEID
	.LONG	PEXPL2
	.WORD	BEOID|ROCKETID
	.LONG	PROCK2
	.WORD	B1OID|ROCKETID
	.LONG	PROCK2

	.WORD	C1OID|CBODYID
	.LONG	PCARHIT2

	.WORD	BGGID
	.LONG	PGARBAGE2

	.WORD	BGTELEID
	.LONG	PGARBAGE2

	.WORD	WEEDOID
	.LONG	PGARBAGE2

	.WORD	BGDMPID
	.LONG	PDUMP2

	.WORD	0
	.LONG	DUMRTSG
*
*RE-INITIALIZE A PLAYER ON BUY-IN(I.E. PLAYER OBJECT ACTIVE)
*A2 = PTR TO PLAYER DATA BLOCK
PLREINIT
*MAKE SURE A13 IS THE LAST REGISTER PUSHED HERE!
	MMTM	SP,A0,A1,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
*PUT ADJUSTMENTS HERE
	ADJUST	ADJLIVES
***	MOVI	ILIVES,A0
	MOVE	A0,*A2(PLIVES),W	;YES MORE LIFE
	MOVI	IENERGY,A0,W     	;GET THE INITIAL # OF PLAYER LIVES
	SLL	16,A0
	MOVE	A0,*A2(PENERGY),L	;STORE IT	

	ADJUST	ADJROCKS
	MOVE	*A2(PROCKETS),A1,W
	ADD	A0,A1			;ADD MORE ROCKETS
	MOVE	A1,*A2(PROCKETS),W	;STORE INITIAL ROCKETS

	MOVE	*A2(PBULLETS),A0,W	;AND SOME MORE BULLETS
	ADDI	IBULLETS,A0
	MOVE	A0,*A2(PBULLETS),W

	MMFM	A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
	BTST	BDEAD,A9
	JREQ	PREIN1			;HE'S STILL ON THE MOVE
	MOVK	STANDLEG,A0
	CALLR	LOADLTAB		;SET UP INITIAL ANIMATION TABLE
	MOVK	RESTORSO,A0
	CALLA	LOADATAB
	CLR	A3			;CLEAR LEG TICKS
	CLR	A5			;CLEAR TICKS
	CLR	A7			;CLEAR SWITCHES

	MOVI	[MINVINC,0],A9		;BE INVINCIBLE UPON REINITIALIZATION
**	CLR	A9			;CLEAR FLAGS

	MOVE	A4,A0
	MOVI	PLAYERS,A1
	CALLA	ISSUPP
	JRNZ	PREIN2			;HE'S STILL ON THE LIST, DON'T RE-ADD
	CALLA	ADDSUPP
	CALLA	PLEGON
	JRUC	PREIN2
PREIN1
	ANDNI	((MDYING|MBUYIN)*10000H),A9 ;TURN OFF THIS BUY-IN GARBAGE
PREIN2
	MMTM	A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13	;STUFF THE DATA BLOCK
	PULL	A13			;GET US A CURPROC PTR

	CALLR	PLAYERON		;TURN THE PLAYER ON

	MOVE	A9,A0
	ANDI	MPASSEN|MDRIVER,A0
	JRNE	PREIN3			;BR = DON'T RE-ALIGN WHILE IN CAR
	CALLR	PLALIGN			;ALIGN THE BODACIOUS BODY PARTS
	CALLR	CKLBADJ			;RE-ALIGN IN BOUNDS PLEASE
PREIN3
	CALLR	STARTINVL
***	JRNZ	PREINX
***	MOVE	*A2(PEXEFLAG),A0,W
***	ANDNI	MINVINC,A0		;MAKE SURE IT'S OFF JUST IN CASE
***	MOVE	A0,*A2(PEXEFLAG),W
***PREINX
	MMFM	SP,A0,A1,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12
	RETS

**************************************************************************
*                                                                        *
* PLWAVEST - START A PLAYER AT THE BEGINNING OF A WAVE, THE PLAYER DATA	 *
* 	   STRUCTURE IS KEPT EXACTLY THE SAME, EXCEPT FOR POBJ		 *
* 	   AND PLOBJ. THE PLAYER OBJECTS AND SHADOWS ARE RE-CREATED.	 *
*	   IF THE PLAYER DID NOT EXIST, THEN HE WILL BE SKIPPED.	 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
* A14 = PTR TO PLAYER OBJECT INITIALIZATION TABLES			 *
*                                                                        *
**************************************************************************
PLWAVEST
	MMTM	SP,A0,A1,A3,A4,A5,A6,A7,A8,A9,A10,A11
	MOVE	*A2(PLOBJ),A0,L
	JRNE	PLWSTGO			;BR = PLAYER EXISTED IN PREVIOUS WAVE
	MOVE	A2,A11
	MOVE	*A2(PPID),A1
	ORI	PMPID,A1
	MOVI	PRESCONT,A7
	CALLA	GETPRC			;FLASH THE BUY-IN MESSAGE
	JRUC	PLWVSTX
PLWSTGO
	MOVE	*A2(PFLAGS),A0,L
	BTST	BBUYIN,A0
	JREQ	PLWVST3			;BR = THE GUY WASN'T READY FOR BUYIN
	MOVE	*A2(PLIVES),A1,W
	JRNZ	PLWSTKBY		;BR = HE GOT MORE LIFE DURING BONUS
	MOVE	*A2(PENERGY),A1,L
	JRZ	PLWVST0			;BR = NO ENERGY, NO LIFE, BUY-IN DUDE
PLWSTKBY
	MOVE	*A2(PEXEFLAG),A1,W
	ANDNI	MBUYIN,A1		;CLEAR BUY-IN
	MOVE	A1,*A2(PEXEFLAG),W
	JRUC	PLWVST3
PLWVST0
	MOVE	*A2(PPID),A1,W
	ADDI	PDPID,A1		;GET THE I.D.
	CMPI	P1DATA,A2
	JREQ	PLWVST1			;BR = PLAYER ONE IS THE ONE
	MOVI	P2BUYINT,A7
	JRUC	PLWVST4			;SKIP THE ENERGY START, HE'S OUT
PLWVST1
	MOVI	P1BUYINT,A7		;PLAYER ONE IS THE ONE
PLWVST4
	CALLA	GETPRC			;START THE SELECETED PROCESS
	JRUC	PLWVST3C		;SKIP THE ENERGY START
PLWVST3
	BTST	BDEAD,A0
	JREQ	PLWVST3A		;BR = THE GUY WAS SOMEHOW DEAD
	MOVE	*A2(PLIVES),A0,W
	DEC	A0
	JRLE	PLWVST3C		;BR = NO MORE LIVES		
	CALLA	SUBLIFE			;TAKE THIS AWAY...
	MOVI	IENERGY,A0
	SLL	16,A0
	MOVE	A0,*A2(PENERGY),L
	JRUC	PLWVST3B
PLWVST3A
	MOVE	*A2(PENERGY+16),A1,W
	CMPI	2,A1
	JRGT	PLWVST3C
	MOVK	2,A1
	MOVE	A1,*A2(PENERGY+16),W
PLWVST3B
	CALLA	OUTENRGY
PLWVST3C
	MOVK	STANDLEG,A0		;WE ARE STANDING
	MOVE	*A2(PMAINT),A6,L
	CALLA	BASFRM			;GET THE LEG SCRIPT POINTER	
	MOVE	*A6+,A7,L
	MOVE	A7,*A2(PLFRM),L
	MOVE	A7,*A2(PLEGAS),L	;STORE HERE FOR A RESET
	MOVE	*A6,A7,L		;NOW THE TORSO
	MOVE	A7,*A2(PFRM),L

	CLR	A0
	MOVE	A0,*A2(PTICKS),L
	MOVE	A0,*A2(PLTICKS),L	;RESET ANIMATION COUNTERS
	MOVE	A0,*A2(PBULLONS),W
	MOVE	A0,*A2(PROCKONS),W

	MOVI	MIDLE,A0
	MOVE	A0,*A2(PIRQFLAG),W	;RESET THE PLAYER FLAGS
	CLR	A0
	MOVE	A0,*A2(PEXEFLAG),L	;RESET THE PLAYER FLAGS

*LOAD BASE WALKING VELOCITIES
	MOVI	PWXVEL,A0
	MOVE	A0,*A2(PXVEL),L
	MOVI	PWYVEL,A0
	MOVE	A0,*A2(PYVEL),L

	MOVI	PLAYERS,A1		;ADD PLAYERS TO THIS LIST

	CALLA	INITPAL

	CALLA	GETOBJ
	CALLA	STFOBJ		;RESET THE LEGS
	CALLA	ADJSTWTL	;ADJUST TO THE WORLD TOP LEFT
	CALLA	SETZPOS		;SET Z BASED ON THE FEET
	CALLA	INSOBJ
	CALLA	ADDSUPP
	MOVE	A0,*A2(PLOBJ),L
	MOVE	A0,A4		;SAVE FOR MATCHING PURPOSES

	CALLA	GETOBJ
	CALLA	STFOBJ		;AND THE TORSO
	MOVE	*A4(OZVAL),A5,L		;MATCH THE FOOT Z POSITION
	INC	A5			;TORSO ALWAYS ON TOP
	MOVE	A5,*A0(OZVAL),L
	CALLA	ADJSTWTL
	CALLA	INSOBJ
	CALLA	ADDSUPP
	MOVE	A0,*A2(POBJ),L

	MOVE	A0,A8
	CALLA	SHADST2			;START THE TORSO SHADOW

	CALLR	STARTINV1		;START INVINCIBILITY

	MOVE	A4,A8
	CALLA	SHADST			;AND THE LEG SHADOW

PLWVSTX
	MMFM	SP,A0,A1,A3,A4,A5,A6,A7,A8,A9,A10,A11
	RETS

**************************************************************************
*                                                                        *
* PLROOMST - START A PLAYER AT THE BEGINNING OF A ROOM, THE PLAYER DATA	 *
* 	   STRUCTURE IS KEPT EXACTLY THE SAME, EXCEPT FOR POBJ		 *
* 	   AND PLOBJ.							 *
*		THE OBJECTS ARE NOT INSERTED OR SHADOWED!		 *
*	   IF THE PLAYER DID NOT EXIST, THEN HE WILL BE SKIPPED.	 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
* A8 = PTR TO DOOR THAT THE PLAYER IS EMERGING FROM			 *
* A14 = PTR TO PLAYER OBJECT INITIALIZATION TABLES			 *
*                                                                        *
**************************************************************************
PLROOMST
	MMTM	SP,A0,A1,A3,A4,A5,A6,A7,A8,A11
	MOVE	*A2(POBJ),A0,L
	JREQ	PLRMSTX		;BR = PLAYER DID NOT EXIST

	MOVE	*A2(PFLAGS),A0,L
	BTST	BBUYIN,A0
	JREQ	PLRMST3			;BR = THE GUY WASN'T READY FOR BUYIN

	MOVE	*A2(PPID),A1,W
	ADDI	PDPID,A1		;GET THE I.D.
	CMPI	P1DATA,A2
	JREQ	PLRMST1			;BR = PLAYER ONE IS THE ONE
	MOVI	P2BUYINT,A7
	JRUC	PLRMST4			;SKIP THE ENERGY START, HE'S OUT
PLRMST1
	MOVI	P1BUYINT,A7		;PLAYER TWO IS THE ONE
PLRMST4
	CALLA	GETPRC			;START THE SELECETED PROCESS
	JRUC	PLRMST3C
PLRMST3
	BTST	BDEAD,A0
	JREQ	PLRMST3A		;BR = THE GUY WAS SOMEHOW DEAD
	MOVE	*A2(PLIVES),A0,W
	DEC	A0
	JRLE	PLRMST3C		;BR = NO MORE LIVES		
	CALLA	SUBLIFE			;TAKE THIS AWAY...
	MOVI	IENERGY,A0
	SLL	16,A0
	MOVE	A0,*A2(PENERGY),L
	JRUC	PLRMST3B
PLRMST3A
	MOVE	*A2(PENERGY+16),A1,W
	CMPI	2,A1
	JRGT	PLRMST3C
	MOVK	2,A1
	MOVE	A1,*A2(PENERGY+16),W
PLRMST3B
	CALLA	OUTENRGY
PLRMST3C
	MOVI	WALKFRM,A0		;WE ARE STANDING
	MOVE	*A2(PMAINT),A6,L
	CALLA	BASFRM			;GET THE LEG SCRIPT POINTER	
	MOVK	DNFRAME,A0
	SLL	5,A0
	ADD	A0,A6
	MOVE	*A6,A7,L
	MOVE	A7,*A2(PLFRM),L
	MOVE	A7,*A2(PLEGAS),L	;STORE HERE FOR A RESET
	MOVK	TOFFSET,A0
	SLL	5,A0
	ADD	A0,A6
	MOVE	*A6,A7,L		;NOW THE TORSO
	MOVE	A7,*A2(PFRM),L

	CLR	A0
	MOVE	A0,*A2(PTICKS),L
	MOVE	A0,*A2(PLTICKS),L	;RESET ANIMATION COUNTERS
	MOVE	A0,*A2(PBULLONS),W
	MOVE	A0,*A2(PROCKONS),W

	MOVI	MIDLE,A0
	MOVE	A0,*A2(PIRQFLAG),W	;RESET PLAYER IRQ FLAGS
	CLR	A0
	MOVE	A0,*A2(PEXEFLAG),W	;RESET PLAYER PROCESS FLAGS

*LOAD BASE WALKING VELOCITIES
	MOVI	PWXVEL,A0
	MOVE	A0,*A2(PXVEL),L
	MOVI	PWYVEL,A0
	MOVE	A0,*A2(PYVEL),L

	CALLA	INITPAL
	CALLA	GETOBJ
	CALLA	STFOBJ		;RESET THE LEGS
	CALLA	ADJSTWTL	;ADJUST TO THE WORLD TOP LEFT
	MOVE	A0,*A2(PLOBJ),L
	MOVE	A0,A4		;SAVE FOR MATCHING PURPOSES

	CALLA	GETOBJ
	CALLA	STFOBJ		;AND THE TORSO
	CALLA	ADJSTWTL
	MOVE	A0,*A2(POBJ),L

	SWAP	A0,A8
	CALLR	STARTINV1	;I'M THE INVINCIBLE MAN
	SWAP	A0,A8

	MOVE	*A0(OXPOS),A1,W
	MOVE	*A0(OYPOS),A3,W
	SLL	16,A3
	MOVY	A3,A1
	MOVE	*A4(OXPOS),A3,W
	MOVE	*A4(OYPOS),A5,W
	SLL	16,A5
	MOVY	A5,A3
	SUBXY	A3,A1

	MOVE	*A8(OXPOS),A3,W
	MOVE	*A8(OYPOS),A5,W
	SLL	16,A5
	MOVY	A5,A3

	ADDI	P1DOOROF,A3
	MOVE	A3,A6	

	CLR	A5
	MOVY	A3,A5
	SLL	16,A3
	MOVE	A5,*A4(OYVAL),L
	MOVE	A3,*A4(OXVAL),L
	
	ADDXY	A1,A6

	CLR	A5
	MOVY	A6,A5
	SLL	16,A6
	MOVE	A5,*A0(OYVAL),L
	MOVE	A6,*A0(OXVAL),L

	SWAP	A0,A4	
	CALLA	SETZPOS
	SWAP	A0,A4

	MOVE	*A4(OZVAL),A5,L		;MATCH THE FOOT Z POSITION
	INC	A5			;TORSO ALWAYS ON TOP
	MOVE	A5,*A0(OZVAL),L

PLRMSTX
	MMFM	SP,A0,A1,A3,A4,A5,A6,A7,A8,A11
	RETS

**************************************************************************
*                                                                        *
* STARTINV - START INVINCIBILITY FOR A PLAYER				 *
* A2 = PLINDX								 *
* A4 = PTR LEG OBJECT							 *
* A8 = PTR TORSO OBJECT							 *
* RETURNS:								 *
* 	Z BIT SET = FAILURE						 *
* 	Z BIT CLR = SUCCESS						 *
*                                                                        *
**************************************************************************
STARTINV
	MMTM	SP,A0,A1,A7,A9,A10,A11
	MOVI	INVINCO,A7
	MOVI	PINVTIM,A10
	JRUC	STARTINVG
*START A DOUBLY LONG INVINICIBILITY FOR BUY-INS AND SUCH
STARTINVL
	MMTM	SP,A0,A1,A7,A9,A10,A11
	MOVI	INVINCO,A7
	MOVI	PINVTIM*2,A10
	JRUC	STARTINVG
*NO FLASH ENTRY POINT
STARTINV1
	MMTM	SP,A0,A1,A7,A9,A10,A11
	MOVI	PINVTIM,A10
	MOVI	INVINCNF,A7
STARTINVG
	MOVE	@GAMSTATE,A0,W
	CMPI	INPLAY,A0
	JREQ	STARTINP
	CMPI	INGAME,A0
	JREQ	STARTINP
STARTIFL
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MINVINC,A0		;MAKE SURE IT'S OFF JUST IN CASE
	MOVE	A0,*A2(PEXEFLAG),W
	CLR	A0
	JRUC	STARTINX
STARTINP
	MOVE	A2,A9
	MOVE	*A2(PPID),A1,W
	ADDI	PIPID,A1
	MOVE	A4,A11
	CALLA	GETPRC			;DO THE INVICIBLE THING
	JRZ	STARTIFL		;THE GET PROC FAILED, TURN OFF INV
STARTINX
	MMFM	SP,A0,A1,A7,A9,A10,A11
	RETS

**************************************************************************
*                                                                        *
* PLAYER JOYSTICK ROUTINE, CALLED FROM IRQ.				 *
* A0 = POINTER TO PLAYERS DATA BLOCK					 *
* IF THE OBLOCK PTR(A8) IS NULL, THEN THE UPDATE IS SKIPPED		 *
*                                                                        *
**************************************************************************
PLLAYER
	MOVE	A0,A2			;COPY HERE FOR REFERENCE
	MMFM	A0,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13	;LOAD UP THE DATA
	MOVE	A0,B1			;STORE

	MOVE	A8,A8				
	JREQ	PLAYXXX		       	;PLAYER IS INACTIVE DO ABSOLUTELY NADA

	CLR	B5
	BTST	BJUMP2,A9		;IN JUMP MODE?
	JREQ	PLAYERNV		;BR = NO

*DO GRAVITY STUFF EVERY FRAME / IF NEEDED
	MOVE	*A8(OYVEL),A0,L	;GRAB THE Y-VELOCITY
	JRLT	PLAYERVA	;BR = ON THE WAY UP

	CALLR	DLLINE			;GET DISTANCE FROM LANDING LINE
	JRGT	PLAYERVA		;BR = O.K. TO SUB VELOCITY
*PLAYER IS ON THE GROUND
	CALLR	PLSTOPYZ

	MOVE	A12,B0
	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(IANIOFF+16),A0,W
	SLL	16,A0
	SUB	A0,A12			;RE-ADJUST THE POSITION
	MOVE	A12,*A8(OYVAL),L	;MAKE SURE TORSO LANDS CORRECTLY
	MOVE	B0,A12
	MOVE	*A4(OIMG),A0,L
	MOVE	*A0(IANIOFF+16),A0,W
	SLL	16,A0
	SUB	A0,A12			;RE-ADJUST THE POSITION
	MOVE	A12,*A4(OYVAL),L	;MAKE SURE LEGS LAND CORRECTLY
	MOVE	B0,A12			;RESTORE OLD LANDING LINE
	JRUC	PLAYERNV

PLAYERVA
	MOVE	*A8(OYVEL),A0,L	;GET THE Y VELOCITY
	MOVE	*A8(OXVEL),A1,L	;GET THE X VELOCITY
	MOVE	*A8(OZVEL),A14,L ;GET THE Z VELOCITY
	BTST	BDHOLD,A9
	JRNE	PLAYERV5
	BTST	BPUP,A7
	JREQ	PLAYERV1
	SUBI	>0C00,A14	;PUSHING UP, SUBTRACT FROM THE Z VEL.
	SUBI	>0C00,A0	;SUBTRACT FROM DOWNWARD VELOCITY
PLAYERV1
	BTST	BPDOWN,A7
	JREQ	PLAYERV2
	ADDI	>0C00,A14	;PULLING DOWN, ADD MORE Z VELOCITY
	ADDI	>0C00,A0	;SUBTRACT FROM DOWNWARD VELOCITY
PLAYERV2
	BTST	BPRYTE,A7
	JREQ	PLAYERV3
	ADDI	>00C00,A1	;PUSHING RYTE, ADD MORE X VELOCITY
	CALLR	NOY2FLIP
	CALLR	NOYLFLIP
PLAYERV3
	BTST	BPLEFT,A7
	JREQ	PLAYERV4
	SUBI	>00C00,A1	;PUSHING LEFT, SUBRACT X VELOCITY
	CALLR	Y2FLIP
	CALLR	YLFLIP
PLAYERV4
	BTST	BPJUMP,A7
	JREQ	PLAYERV5
	SUBI	>05000,A0	;SUBTRACT FROM DOWNWARD VELOCITY
PLAYERV5
	ADDI	>0A000,A0	;SUBTRACT GRAVITY CONSTANT
	MOVE	A0,*A8(OYVEL),L
	MOVE	A0,*A4(OYVEL),L
	MOVE	A1,*A8(OXVEL),L
	MOVE	A1,*A4(OXVEL),L
	MOVE	A14,*A8(OZVEL),L
	MOVE	A14,*A4(OZVEL),L
	MOVE	A14,B5		;KEEP HERE TO ADD

PLAYERNV
	MOVE	A5,A5  		;DONE ANIMATING THIS FRAME
	JREQ	PLAYER2		;YES
	DEC	A5     		;CLICK ANOTHER TICK
	JRUC	PLAYERE		;NOW DO THE LEGS		 

PLAYER2	
*CHECK FOR INITIAL JUMP
	BTST	BJUMP2,A9	;JUMPING?
	JREQ	PLAYER2A	;YES, CONTINUE WITH IT

	BTST	BDEAD,A9
	JRNE	PLAYX		;DON'T FUCK WITH ANYTHING
	CALLR	P2FRAME		;LOAD NEXT FRAME NORMALLY		
	JRC	PLAYER1A	;BR = END OF LIST
	JRUC	PLAYERE
PLAYER2A
	BTST	BJUMP1,A9	;JUST FINISHED INITIAL JUMP FRAMES?
	JREQ	PLAYER3	 	;NO	

	BTST	BDEAD,A9
	JRNE	PLAYX
	CALLR	P2FRAME		;LOAD NEXT FRAME NORMALLY		
	JRNC	PLAYERE		;BR = END OF LIST

	XORI	(MJUMP1+MJUMP2),A9	;SET VELOCITY JUMP FLAG, CLEAR INITIAL FLAG
	MOVI	>FFF80000,A0
	MOVE	A0,*A8(OYVEL),L
	MOVE	A0,*A4(OYVEL),L
	MOVK	1,A14			;SELECT JUMPING CORRECT FRAME
	JRUC	PLAYER1F		;STUFF IT BABY

*
*PLAYER JUMPING, TIME TO DOKTOR THE Y VELOCITY. IF THE JOYSTICK
*IS NOT UP OR DOWN, THE JUST ADD A GRAVITY CONSTANT. IF THE STICK IS
*UP, THEN SUBTRACT FROM THE DECEL. IF IT IS DOWN, THEN ADD TO THE DECEL. 
*THE Y LANDING LINE IS STORED IN A12.
PLAYER1A:
	CALLR	DLLINE		;GET THE DISTANCE FROM LANDING LINE

	MOVE	*A8(OYVEL),A0,L	;GRAB THE Y-VELOCITY
	JRLT	PLAYER1B	;BR = ON THE WAY UP

	MOVK	2,A14		;LOAD DEFAULT FRAME

* PLAYER COMING DOWN
	CMPI	>180000,A1
	JRGT	PLAYER1F	;BR = STILL WAY ABOVE LINE, LET HIM FIRE
	CLR	B4
	CMPI	>120000,A1
	JRGT	PLAYER1G	;BR = STILL ABOVE LINE, BUT DON'T FIRE AGAIN

	INC	A14
	CLR	B4
	TEST	A1
	JRGT	PLAYER1G	;BR = PLAYER BETWEEN LINE AND LANDING SPOT

* PLAYER HIT THE GROUND
	INC	A14
	ANDNI	MJUMP2,A9	;CLEAR LAST JUMP FLAG
	JRUC	PLAYER1G	;EXIT, END OF JUMP 

* PLAYER ON THE WAY UP
PLAYER1B
	MOVK	1,A14		;DEFAULT UPWARD FRAMES
	CMPI	>120000,A1
	JRLE	PLAYER1F	;BR = STILL BELOW LINE, KEEP SAME FRAME
	INC	A14		;INCREMENT FOR NEXT FRAME
PLAYER1F
	CALLR	FYRCHEK			;CHECK FOR FIRING
	JRNC	PLAYER1G		;DON'T FIRE THIS TIME
	ADDK	JFOFFSET,B4		;FEED THE OFFSET
PLAYER1G
	BTST	BDHOLD,A9
	JRNE	PLAYX		;DON'T STUFF NEW FRAMES ON HOLD
	SLL	5,A14		;INDEX INTO JUMPING FRAMES		 
	MOVK	JUMPFRM,A0	;JUMPING FRAME OFFSET			 
	MOVE	A6,B0							 
	CALLA	BASFRM							 
	ADD	A14,A6							 
	MOVE	*A6,A13,L    	  	;LOAD PROPER LEG FRAME			 
	MOVE	A13,*A2(PLEGAS),L	;HOLD
	MOVK	JTOFFSET,B3
	ADD	B4,B3		;ADD INCASE OF FIRING
	MOVE	B3,A0
	SLL	5,A0
	ADD	A0,A6
	MOVE	*A6,A11,L	;LOAD PROPER TORSO FRAME	
	MOVE	B0,A6							 
	CLR	A3
	JRUC	PLAYX 		;AND GET OUT

*PROCESS NEXT FRAME ON THE CURRENT ANIMATION LIST
PLAYER3
	MOVE	A9,A0
	SRL	16,A0		;SLIDE FOR SEPERATION
	ANDI	(MDEAD|MFHOLD|MDHOLD),A0
	JRNE	PLAYX		;SOMETHING'S GOING ON, HOLD ON

	MOVE	A9,A0
	ANDI	MDRIVER|MPASSEN,A0
	JRNE	PLAYER3A	;SKIP Z RESET IF IN THE CAR
	CALLR	PIRQZRST	;RESET THAT BADDOG
	CALLR	PFLIPCK		;MAKE SURE THE FLIP OF THE PLAYER IS CORRECT
PLAYER3A
	CALLR	P2FRAME		;LOAD NEXT FRAME NORMALLY		
	JRNC	PLAYERE		;BR = NOT, IN FACT, END OF LIST
*CHECK TO SEE IF HE'S A DRIVER
PLAYER4
	BTST	BDRIVER,A9
	JREQ	PLAYER5
	MOVE	@PLAYCAR,A1,L	
	JRNZ	PLAYER4IC
	CLR	A0
	JRUC	PLAYER4NP
PLAYER4IC
	MOVE	*A1(OPLINK),A0,L
PLAYER4NP
	BTST	BPJUMP,A7		;JUMP BUTTON ONLY?
	JREQ	PLAYER4NJ		;BR = NO JUMP BUTTON
	BTST	BJHOLD,A9		;CURRENTLY HOLDING LAST ONE?	
	JRNE	PLAYER400		;BR = YES, JUST DO NORMAL STUFF
	JRUC	PLAYER4B		;JUMP OUT OF CAR S.V.P.
PLAYER4NJ
	ANDNI	MJHOLD,A9		;CLEAR JUMP ONESHOT
PLAYER400
	MOVE	A0,A0
	JRZ	PLAYER4NS
	MOVE	A7,*A0(ESWTCH),W	;STUFF SWITCHES TO THE CAR
PLAYER4NS
	CALLR	FYRCHEK
	JRNC	PLAYER4A		;BR = NO DRIVER FIRING
	BTST	BROCKET,A9
	JRNE	PLAYR4A3		;ALWAYS FIRE THE ROCKET FROM THIS SIDE
	MOVE	*A2(PFIRENXT),A14,W
	JRZ	PLAYR4A1
	CLR	A14
	MOVE	A14,*A2(PFIRENXT),W
	MOVE	*A0(EDRIVXY),A10,L
	JRUC	PLAYR4A2
PLAYR4A1
	MOVK	1,A14
	MOVE	A14,*A2(PFIRENXT),W
	MOVE	*A0(EPASSXY),A10,L	;GET THE OFFSET
	JRUC	PLAYR4A2
PLAYR4A3
	MOVE	*A0(EDRIVRB),A10,L
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0
	JRNE	PLAYR4A2
	MOVI	46,A0 			;DROP A BOMB
	CALLR	INCFP2
	CALLR	PSTAKP
PLAYR4A2
	MOVI	34,A0
	CALLR	INCFP2
	CALLR	PSTAKP
*SELECT CORRECT VEHICLE DRIVER FIRING FRAME
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0
	JRNE	PLAYER4A20
	MOVK	PILOTFIRE,A0
	JRUC	PLAYER5C
PLAYER4A20
	MOVK	DRIVFIRE,A0
	JRUC	PLAYER5C
*SELECT CORRECT VEHICLE DRIVING FRAME
PLAYER4A
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0
	JRNE	PLAYER4A0
	MOVK	PILOTFRM,A0
	JRUC	PLAYER5C
PLAYER4A0
	MOVK	DRIVLFRM,A0
	JRUC	PLAYER5C
*DRIVER JUMP OUT OF VEHICLE
PLAYER4B
	MOVE	A1,A1
	JRZ	PLAYER4C
	MOVE	A8,B0
	CLR	A8
	CALLA	PUTA8
	MOVE	B0,A8
PLAYER40
	MOVE	*A1(OZMINUS),A0,W
	MOVE	*A1(OZPOS),A14,W
	SUB	A0,A14
	SUBK	20,A14
	MOVE	@PLZMIN,A0,W
	CMP	A0,A14
	JRLT	PLAYER50
	MOVE	A14,*A8(OZPOS),W
*
*PLAYER EXIT FROM CAR BY JUMPING
PLAYER4C
	CALLR	PLALIGN			;RE-ALIGN THE LEGS, AND LITE THEM
	CALLA	PTORSON
	CALLA	PLEGON
	MOVI	36,A0
	CALLR	INCFP2
	CALLR	PSTAKP			;CREATE TSHADST
	MOVI	40,A0
	CALLR	INCFP2
	CALLR	PSTAKP			;CREATE LSHADST

	ORI	MJUMP1|MJHOLD,A9	;FLAG INITIAL JUMP
	ANDNI	MDRIVER|MPASSEN,A9	;KILL THE DRIVER AND PASSENGER FLAGS
	CALLR	PLSTOPYZ		;WE'LL ADD OUR OWN
	MOVE	A6,B0							 
	MOVK	JUMPFRM,A0
	CALLA	BASFRM							 
	MOVE	*A6,A13,L  	    	;LOAD PROPER LEG FRAME			 
	MOVE	A13,*A2(PLEGAS),L	;HOLD FOR WRAP
	MOVK	JTOFFSET,A0
	SLL	5,A0
	ADD	A0,A6
	MOVE	*A6,A11,L	;LOAD PROPER TORSO FRAME	
	MOVE	B0,A6							 
	CLR	A3		;CLR LEG TICKS FOR SYNC.
	CALLR	P2FRAME
	CALLR	PLAYLEG
	MOVE	*A8(OYVAL),A12,L	;KEEP OUR LANDING LINE
	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(IANIOFF+16),A0,W
	SLL	16,A0
	ADD	A0,A12			;ADJUST FOR ANIMATION POINT
***	ADD	A14,A12			;THROW IN SOME FUDGE
	MOVE	A8,A0
	MOVE	A4,A8
	CALLA	DFRMGRND
	MOVE	A0,A8
	SLL	16,A1
	ADD	A1,A12			;ADD IN A HEIGHT FACTOR
	JRUC	PLAYX
*CHECK TO SEE IF HE'S A PASSENGER
PLAYER5
	BTST	BPASSEN,A9
	JREQ	PLAYER5E		;NO HE'S NOT A PASSENGER EITHER
	MOVE	@PLAYCAR,A1,L	
	JRNZ	PLAYER5IC
	CLR	A0
	JRUC	PLAYER5NP
PLAYER5IC
	MOVE	*A1(OPLINK),A0,L
PLAYER5NP
	BTST	BPJUMP,A7		;JUMP BUTTON ONLY?
	JREQ	PLAYER5A		;BR = NO BUTTON, CONTINUE IN THE CAR
	BTST	BJHOLD,A9
	JRNE	PLAYER5A0		;STILL HOLDING THE LAST JUMP
	MOVE	A1,A1
	JRZ	PLAYER4C		;BR = NO CAR PROCESS IS LEFT, FUCK IT	
	MOVE	A8,B0
	CLR	A8
	MOVE	A8,*A0(PASSPTR),L	;TEAR HIM AWAY FROM THE CAR
	MOVE	B0,A8
PLAYER50
	MOVE	*A1(OZPLUS),A0,W
	MOVE	*A1(OZPOS),A14,W
	ADD	A0,A14
	ADDK	5,A14
	MOVE	A14,*A8(OZPOS),W
	JRUC	PLAYER4C

PLAYER5A
	ANDNI	MJHOLD,A9
PLAYER5A0
	CALLR	FYRCHEK
	JRNC	PLAYER5B		;BR = NO PASSENGER FIRING
	BTST	BROCKET,A9
	JRNE	PLAYR5A3		;ALWAYS FIRE THE ROCKET FROM THIS SIDE
	MOVE	*A2(PFIRENXT),A14,W
	JRZ	PLAYR5A1
	CLR	A14
	MOVE	A14,*A2(PFIRENXT),W
	MOVE	*A0(EDRIVXY),A10,L
	JRUC	PLAYR5A2
PLAYR5A1
	MOVK	1,A14
	MOVE	A14,*A2(PFIRENXT),W
	MOVE	*A0(EPASSXY),A10,L	;GET THE OFFSET
	JRUC	PLAYR5A2
PLAYR5A3
	MOVE	*A0(EPASSRB),A10,L	;GET THE OFFSET
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0
	JRNE	PLAYR5A2
	MOVI	46,A0 			;DROP A BOMB
	CALLR	INCFP2
	CALLR	PSTAKP
PLAYR5A2
	MOVI	34,A0
	CALLR	INCFP2
	CALLR	PSTAKP
*SELECT CORRECT PASSENGER FIRING FRAME
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0
	JRNE	PLAYER5A20
	MOVK	HELPFIRE,A0
	JRUC	PLAYER5C
PLAYER5A20
	MOVK	PASSFIRE,A0
	JRUC	PLAYER5C
*SELECT CORRECT PASSENGER FRAME
PLAYER5B
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0
	JRNE	PLAYER5B0
	MOVK	HELPASFRM,A0
	JRUC	PLAYER5C
PLAYER5B0
	MOVK	PASSLFRM,A0
*CHECK TO SEE IF WE SHOULD RE-ADJUST FOR CAR
PLAYER5C
	BTST	BSITIN,A9
	JREQ	PDEFAULT2
	ANDNI	MSITIN,A9		;NO MORE SITTING BULL
	MMTM	SP,A0,A2,A3,A4

	MOVE	*A8(OYVAL),A4,L		;GET Y PLAYER Y ANIMATION PNT
	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(IANIOFF+16),A0,W
	SLL	16,A0
	ADD	A0,A4			;ADJUST FOR ANIMATION POINT
	MOVE	A8,B0
	MOVE	@PLAYCAR,A8,L
	JRNZ	PLAYER5CG
	MOVE	B0,A8
	MMFM	SP,A0,A2,A3,A4
	JRUC	PLAYER5CX
PLAYER5CG
	CALLA	GETANIXY		;GET THE VEHICLE ANIMATION PNT.
	SUB	A2,A4			;FORM OFFSET FOR RESTORE
	MOVE	B0,A0
	MOVE	A4,B0
	MOVE	*A8(OFLAGS),A4,W	;GET THE FLAGS FROM THE CAR
	CALLA	GANISAG			;AND RE-ADJUST
	MOVE	*A8(OZVAL),A2,L
	MOVE	*A8(OID),A3,W
	CMPI	TRAN2OID,A3
	JRNE	PLAYER5C0
	DEC	A2
	JRUC	PLAYER5C1
PLAYER5C0
	INC	A2	       		;RE-POSITION PROPERLY
PLAYER5C1
	MOVE	A2,*A0(OZVAL),L
	MOVE	A0,A8
	MMFM	SP,A2,A3,A4
	MOVE	B0,A0
	MOVE	A0,*A2(PCAROFFY),L	;SHOVE THE OFFSET FOR CAR EXIT
	PULL	A0
PLAYER5CX
	CALLA	PLEGOFF
	JRUC	PDEFAULT2

*CHECK THE PLAYER SWITCHES
PLAYER5E
	ANDNI	MUNLIMIT,A9		;TURN OFF UNLIMITED ROCKETS FOR CHOPPER
	CMPI	0,A7			;ANY SWITCHES?
	JRNE	PLAYER6			;THERE BE DATA
	ANDNI	MRUN|MSWALK|MRHOLD|MCHOLD|MJHOLD,A9	;CLEAR 1 SHOT FLAGS
PDEFAULT
	ORI	MIDLE,A9		;SET THE IDLE FLAG
	MOVK	STANDLEG,A0		;WE ARE STANDING
PDEFAULT1
	CALLR	PLSTOP			;STOP THE GUY
PDEFAULT2
	MOVE	A6,B0
	CALLA	BASFRM			;GET THE LEG SCRIPT POINTER	
	MOVE	*A6+,A13,L
	MOVE	A13,*A2(PLEGAS),L	;STORE HERE FOR A RESET
	CLR	A3			;CLEAR LEG TICKS FOR SURE
	MOVE	*A6,A11,L		;NOW THE TORSO
	MOVE	B0,A6
	JRUC	PLAYX			;AND GET OUT

PLAYER6	ANDNI	MIDLE,A9	  	;CLEAR THE IDLE FLAG
*CHECK FOR GUN ACTION
	CALLR	FYRCHEK			;CHECK FOR FIRING
	JRNC	PLAYERA			;DON'T FIRE THIS TIME
	ADDK	FOFFSET,B4		;FEED THE OFFSET

*JOYSTICK MOVEMENT PROCESSING
PLAYERA	MOVI	STIKTAB,A1		;USE A JUMP TABLE
	MOVE	A7,A0
	SLL	28,A0			;MASK OFF THE BUTTONS
	SRL	23,A0			;MULTIPLY BY 32
	ADD	A0,A1			
	MOVE	*A1,A0,L
	JUMP	A0			;DO THE RIGHT STUFF

*CASE:	JOYSTICK UP
PLAYERUP
	MOVE	*A2(PYVEL),A1,L
	NEG	A1
	CLR	A0
	MOVK	UPFRAME,B2
	JRUC	PLAYERB
*CASE:  JOYSTICK DOWN
PLAYERDN
	MOVE	*A2(PYVEL),A1,L
	CLR	A0
	MOVK	DNFRAME,B2
	JRUC	PLAYERB
*CASE:  JOYSTICK LEFT
PLAYERLF
	CLR	A1
	MOVE	*A2(PXVEL),A0,L
	NEG	A0
***	CALLR	Y2FLIP
***	CALLR	YLFLIP			;FLIP LEGS
	CLR	B2			;MOVK	LRFRAME,B2
	JRUC	PLAYERB
*CASE:	JOYSTICK RIGHT
PLAYERRT
	CLR	A1
	MOVE	*A2(PXVEL),A0,L
***	CALLR	NOY2FLIP
***	CALLR	NOYLFLIP			;LEGS
	CLR	B2			;MOVK	LRFRAME,B2
	JRUC	PLAYERB
*CASE:  JOYSTICK UP & LEFT
PLAYERUL
	MOVE	*A2(PYVEL),A1,L
	NEG	A1
	MOVE	*A2(PXVEL),A0,L
	NEG	A0
***	CALLR	Y2FLIP
***	CALLR	YLFLIP			
	MOVK	UPQFRAME,B2	
	JRUC	PLAYERB
*CASE:  JOYSTICK UP & RIGHT
PLAYERUR
	MOVE	*A2(PYVEL),A1,L
	NEG	A1
	MOVE	*A2(PXVEL),A0,L
***	CALLR	NOY2FLIP
***	CALLR	NOYLFLIP
	MOVK	UPQFRAME,B2
	JRUC	PLAYERB	
*CASE:  JOYSTICK DOWN & LEFT
PLAYERDL
	MOVE	*A2(PYVEL),A1,L
	MOVE	*A2(PXVEL),A0,L
	NEG	A0
***	CALLR	Y2FLIP
***	CALLR	YLFLIP
	MOVK	DNQFRAME,B2
	JRUC	PLAYERB
*CASE:	JOYSTICK DOWN & RIGHT
PLAYERDR
	MOVE	*A2(PYVEL),A1,L
	MOVE	*A2(PXVEL),A0,L
***	CALLR	NOY2FLIP
***	CALLR	NOYLFLIP
	MOVK	DNQFRAME,B2

*STUFF VELOCITIES FROM THE JOYSTICK PROCESSOR
PLAYERB
	CALLR	STUFLVEL		;STUFF ALL VELOCITIES
	CLR	A0			;MOVK	WALKFRM,A0 ;OFFSET FOR LEGS
	MOVK	TOFFSET,B3		;OFFSET FOR TORSO
*
*CHECK JUMP BUTTON, THIS TEST IS INITIATED AFTER JOYSTICK PROCESSING
	BTST	BPJUMP,A7		;IS THE JUMP BUTTON PRESSED
	JREQ	PLAYERNJ		;BR = NO, TRY SQUAT
	BTST	BJHOLD,A9		;CURRENTLY IN ONE SHOT MODE
	JREQ	PLAYERC6		;BR = NO, GO AHEAD AND JUMP
	JRUC	PLAYRCCK
PLAYERNJ
	ANDNI	MJHOLD,A9		;TURN OFF JUMP 1 SHOT
*
*CHECK CROUCH BUTTON AFTER JOYSTICK PROCESSING
PLAYRCCK
	BTST	BPCROUCH,A7		;CROUCH BUTTON?
	JRNE	PLAYERCR
	ANDNI	MCHOLD|MSWALK|MRUN,A9	;TURN OFF WALK AND RUN FLAGS
	JRUC	PLAYRB2A		;NOW TRY TO WALK
PLAYERCR
	BTST	BCHOLD,A9
	JREQ	PLAYRB1B		;BR = VIRGIN BUTTON
****>	BTST	BRUN,A9
****>	JRNE	PLAYRB2A		;BR = PLAYER IN RUN MODE
PLAYRB1A
	BTST	BSWALK,A9
	JREQ	PLAYERD			;BR = NOT SQUAT WALKING

	MOVK	SQTWFRM,A0		;SQUAT THIS GUY
	JRUC	PLAYERD			;ATTEMPT TO WALK
*
*VIRGIN JUMP, DETERMINE WHAT TYPE
PLAYRB1B
	ORI	MCHOLD,A9		;POP THAT SUCKER
****>	BTST	BPDOWN,A7		;HOLDING DOWN?
****>	JREQ	PLAYERB2		;BR = NO!
	ORI	MSWALK,A9		;SET US INTO SQUAT WALK MODE
PLAYRB1C
	MOVK	SQTWFRM,A0		;SQUAT THIS GUY
	JRUC	PLAYERD			;ATTEMPT TO WALK
PLAYERB2
****>	ORI	MRUN,A9
PLAYRB2A
	MOVE	A0,B0
	MOVE	*A8(OXVEL),A0,L		;SPEED THE GUY UP
	MOVE	*A8(OYVEL),A1,L
	SLA	1,A0
	SLA	1,A1			;VELS X TWO
	CALLR	STUFLVEL
	MOVE	B0,A0
	JRUC	PLAYERD

*CHECK CROUCH BUTTON, JUMPS TO BE PDEFAULT ON FAIL
PLAYERC
	BTST	BPCROUCH,A7
	JREQ	PLAYERJP

****>	BTST	BRUN,A9
****>	JRNE	PLAYERJ1
	ORI	MCHOLD|MSWALK,A9	;TURN ON ONE SHOT, AND SQUAT WALK
	MOVK	SQUATLEG,A0
	BTST	BPJUMP,A7
	JRNE	PLAYERC5
	ANDNI	MJHOLD,A9
	JRUC	PLAYRC1C
*CHECK JUMP BUTTON, LAST HOPE FOR ANY BUTTON, JUMPS TO BE PDEFAULT ON FAIL
PLAYERJP
	ANDNI	MCHOLD|MSWALK|MRUN,A9	;TURN OFF RUN AND SQUAT WALK STUFF	
PLAYERJ1
	BTST	BPJUMP,A7	;JUMP BUTTON ONLY?
	JRNE	PLAYERC3	;BR = YES, JUMP AWAY
	ANDNI	MJHOLD,A9
*THERE WAS A BUTTON PRESSED, LET'S EFFECT THE FIRING FRAME CHANGES
PLAYRC1B
	MOVK	STANDLEG,A0	;START HERE
PLAYRC1C
	TEST	B4		;FIRE?
	JREQ	PDEFAULT1	;BR = NO
	SUBK	RBOFFSET,B4
	JRLE	PLAYRC1D
	ADDK	4,A0		;ADD OFFSET FOR ROCKET BOMB FIRING
PLAYRC1D
	ADDK	4,A0
	JRUC	PDEFAULT1	;LOAD ALL THIS SHIT.

*JUMP ENTRY WHEN STANDING STILL
PLAYERC3
	BTST	BJHOLD,A9
	JRNE	PLAYRC1B
*JUMP ENTRY WHEN CROUCH BUTTON PRESSED
PLAYERC5
	BTST	BJHOLD,A9
	JRNE	PLAYRC1C
PLAYERC6
	ORI	MJUMP1|MJHOLD,A9	;FLAG INITIAL JUMP
	ANDNI	MDRIVER|MPASSEN,A9	;KILL THE DRIVER AND PASSENGER FLAGS
	CALLR	PLSTOPYZ		;WE'LL ADD OUR OWN
	MOVE	A6,B0							 
	MOVK	JUMPFRM,A0
	CALLA	BASFRM							 
	MOVE	*A6,A13,L  	    	;LOAD PROPER LEG FRAME			 
	MOVE	A13,*A2(PLEGAS),L	;HOLD FOR WRAP
	MOVK	JTOFFSET,A0
	SLL	5,A0
	ADD	A0,A6
	MOVE	*A6,A11,L	;LOAD PROPER TORSO FRAME	
	MOVE	B0,A6							 
	CLR	A3		;CLR LEG TICKS FOR SYNC.

	MOVE	*A8(OYVAL),A12,L	;KEEP OUR LANDING LINE
	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(IANIOFF+16),A0,W
	SLL	16,A0
	ADD	A0,A12		;ADJUST FOR ANIMATION POINT
	MOVE	A8,A0
	MOVE	A4,A8
	CALLA	DFRMGRND
	MOVE	A0,A8
	SLA	16,A1
	JRN	PLAYERC6A
	JRZ	PLAYERC6A
	ADD	A1,A12		;ADD IN A HEIGHT FACTOR
PLAYERC6A
	CALLR	P2FRAME
	CALLR	PLAYLEG

	JRUC	PLAYX

*STUFF FRAMES
PLAYERD
	MOVE	A6,B0
	CALLA	BASFRM	
	SLL	5,B2
	MOVE	B2,A0
	ADD	A0,A6	
	MOVE	*A6,A0,L
	MOVE	*A2(PLEGAS),A1,L	;SAME WALKING FRAMES?
	CMP	A0,A1
	JREQ	PLAYERD1		;BR = YES, DON'T LOAD AGAIN

	MOVE	A0,A13
	MOVE	A13,*A2(PLEGAS),L	;LOAD NEW SCRIPT
	MOVE	A13,A1			;FOR TORSO MATCH
	CLR	A3			;BLOW OUT THE OLD
*A1 = HEAD OF LEG ANIMATION SCRIPT, THIS IS A MUST HERE
PLAYERD1
	CALLR	PLAYLEG			;UPDATE THE LEGS

	ADD	B4,B3			;LOAD THE NEW TORSO
	MOVE	B3,A0
	SLL	5,A0
	ADD	A0,A6
	MOVE	*A6,A11,L		;TORSO SCRIPT

	TEST	B4
	JRNE	PLAYERD3		;HE'S FIRING, LEAVE ASYNC TORSO FRAMES

	MOVE	A13,A14
	SUBI	48,A14			;BACKUP TO WHAT WAS
	SUB	A1,A14			;A0 = OFFSET TO CURRENT LEG FRAME
	JREQ	PLAYERD3		;WE'RE THERE

	MOVI	48,A0
	MOVI	80,A1
PLAYERD2				
	ADD	A1,A11			;UP/DOWN WE GO
	SUB	A0,A14
	JRNE	PLAYERD2
	
PLAYERD3
	MOVE	B0,A6			;RESTORE ANIMATION TABLE
	CALLR	P2FRAME			;STUFF TO KEEP WITH CURRENT LEGS
	JRUC	PLAYX
PLAYERE
	CALLR	PLAYLEG			;JUST DO THE LEGS
*
*PLAYER UPDATE END, ALWAYS COME HERE IF PLAYER IS ACTIVE
PLAYX
	MOVE	A9,A0
	ANDI	MJUMP1|MJUMP2,A0
	JREQ	PLXNOSHD		;BR = NOT JUMPING, NO SHADOW SCREW
	MOVE	*A4(OSHAD),A0,L
	JREQ	PLXNOSHD		;BR = WE'RE FUCKED, NO SHADOW
	MOVE	*A0(OYVAL),A0,L
	MOVE	*A8(OSHAD),A1,L
	MOVE	*A1(OSIZEY),A14,W
	SLL	16,A14
	SUB	A14,A0
	MOVE	A0,*A1(OYVAL),L		;MAKE SURE SHADOWS ARE TOGETHER
PLXNOSHD
	MOVE	*A8(OXVEL),*A4(OXVEL),L	;XFER TORSO VELOCITIES TO THE LEGGIES
	MOVE	*A8(OYVEL),*A4(OYVEL),L
	MOVE	*A8(OZVEL),*A4(OZVEL),L	
	MOVE	*A2(PALIGNCT),A0,W
	DEC	A0
	JRNN	PLXNALGN
	CALLR	PLALIGNSP		;SPECIAL PLAYER ALIGN, CHECKS LEGS OFF
	MOVI	PALGNTIM,A0
PLXNALGN
	MOVE	A0,*A2(PALIGNCT),W	;RESET THE COUNTER
	CALLR	CKLBOUND		;DO A QUICK CHECK BOUNDRY CHECK
	MOVE	A9,A0
	ANDI	MPASSEN|MDRIVER,A0
	JRNE	PLNODRIV		;BR = DRIVING, DON'T CHECK BOUNDRIES
	CALLR	CKABGND			;CHECK AGAINST BACKGROUND OBJECTS
PLNODRIV
	MOVE	*A8(OZVEL),A0,L
	ADD	A0,A12			;UPDATE LANDING LINE
PLAYXXX
	MOVE	B1,A0
	MMTM	A0,A3,A4,A5,A6,A7,A8
	SUBK	32,A0
	MOVE	A9,*A0,W		;KLUDGE TO PRESERVE PEXEFLAG
	MMTM	A0,A10,A11,A12,A13	;NOW SAVE THE REST
	RETS

STIKTAB
	.LONG	PLAYERC,PLAYERUP,PLAYERDN,PLAYERUP,PLAYERLF,PLAYERUL
	.LONG	PLAYERDL,PLAYERUL,PLAYERRT,PLAYERUR,PLAYERDR,PLAYERUR
	.LONG	PLAYERRT,PLAYERUR,PLAYERDR,PDEFAULT

**************************************************************************
*                                                                        *
* INCFP2 - INCREMENT A0 IF THIS IS PLAYER TWO.				 *
* 		USED FOR PROCESS TRIGGERING.				 *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
INCFP2
	CMPI	P1DATA,A2
	JREQ	INCFP2X
	INC	A0
INCFP2X
	RETS

*
*FIRE A PROCESS VIA THE SWITCH STACK, USED FOR IRQ
*A0 -- SWITCH NUMBER 
PSTAKP	MOVE	A1,-*SP,L
	MOVE	@SWSTACK,A1,L		;GET THE STACK
	CMPI	SWSTMN,A1		;SWITCH STACK OVERFLOW?
	JREQ	PSTAKX			;YEP, NO FIRE PROCESS
	MOVE	A0,-*A1			;PUSH SWITCH NUMBER ON STACK
	MOVE	A1,@SWSTACK,L		;RESTORE SWITCH STACK
PSTAKX	MOVE	*SP+,A1,L
	RETS

**************************************************************************
*                                                                        *
* PLAYLEG - PROCESS ANIMATION FOR PLAYERS LEGS				 *
* CALL THIS ONLY FROM THE PLAYER JOYSTICK PROCESSOR			 *
*                                                                        *
**************************************************************************
PLAYLEG
	MMTM	SP,A0,A1
	MOVE	A3,A3
	JREQ	PLAYLEG1
	DEC	A3			;CLICK A LEGGY TICK
	JRUC	PLAYLEG2
PLAYLEG1
	CALLR	PLFRAME			;PUT IN SOME NEW LEGS			
	JRNC	PLAYLEG2		;BR = MORE FRAMES
	MOVE	*A2(PLEGAS),A13,L	;RESET THE CURRENT SCRIPT
	JRUC	PLAYLEG1		;AND SET UP THAT FRAME
PLAYLEG2
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* FYRCHEK - CHECK TO SEE IF THE PLAYER WANTS TO FIRE			 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
* A7 = PLAYER JOYSTICK BITS						 *
* A9 = PLAYER FLAGS							 *
* RETURNS								 *
* A9 = NEW FLAGS IF NECESSARY						 *
* CARRY SET = FIRE, B4 RETURNS WITH THE CORRECT OFFSET TO THE FIRE FRAMES*
* CARRY CLEAR = NO FIRE,ALSO B4 RETURNS 0 IN THIS CASE			 *
*                                                                        *
**************************************************************************
FYRCHEK
	MMTM	SP,A0,A1

	BTST	BPFROCK,A7	  ;ROCKET LAUNCH BUTTON?
	JREQ	FYRCHEK1	  ;NOPE, CLEAR LAUNCH HOLD FLAG AND CHECK FIRE BUTTON

	BTST	BRHOLD,A9	  ;HOLDING FROM PREVIOUS ROCKET LAUNCH?
	JRNE	FYRCHEK2	  ;YES, CHECK THE FIRE BUTTON 

*CHECK FOR # OF ROCKET BOMBS, MAKE AN EMPTY SOUND IF THERE ARE NONE
	BTST	BUNLIMIT,A9
	JRNE	FYRCHEK0		;ROCKET YOUR LIFE AWAY

	MOVE	*A2(PROCKETS),A0,W	;CHECK ROCKETS
	JRNE	FYRCHEK0		;BR = ROCKETS TO BE HAD BY HIM

	ORI	MRHOLD,A9		;HOLD THE ROCKET BUTTON
	MOVI	44,A0
	CALLR	PSTAKP			;FIRE OFF THE LIMP SOUND PROCESS
	JRUC	FYRCHEK2		;AND GET OUT		

*ROCKET LIMITER TO REDUCE OVERLOAD
FYRCHEK0
	MOVE	*A2(PROCKONS),A0,W
	JRNZ	FYRCHEK2		;THERE IS/ARE ROCKET(S) ON SCREEN

***	INC	A0
***	MOVE	A0,*A2(PROCKONS),W	;INDICATE A ROCKET ON SCREEN

	ORI	(MROCKET+MRHOLD),A9	;FLAG A ROCKET, AND TURN ROCKET ONE SHOT FLAG
	ANDNI	MGUN,A9			;3-2-1 BLAST AWAY!

	MOVK	RBOFFSET,B4		;OFFSET FROM FIRE TO ROCKET BOMB

	MOVE	A9,A0
	ANDI	MJUMP2|MPASSEN|MDRIVER,A0
	JRNE	FYRCHEK3		;BR = DON'T STOP FOR THESE CASES
	CALLR	PLSTOP			;STOP ON ROCKET LAUNCH		 
	JRUC	FYRCHEK3
FYRCHEK1
	ANDNI	MRHOLD,A9		;CLEAR ROCKET ONE SHOT, SWITCH OPEN		

FYRCHEK2
	BTST	BPFIRE,A7		;BULLET TIME?
	JREQ	FYRCHEK4		;NO

	MOVE	*A2(PBULLETS),A0,W	;GET THE BULLETS COUNT
	DEC	A0
	JRP	FYRCHEK2A		;IT'S GOOD TO HAVE AMMO
	MOVE	*A2(PBULLONS),A1,W	;GET THE # OF ON SCREEN BULLETS
	JRNZ	FYRCHEK4		;BR = ONLY ONE/SCREEN NOW
	MOVK	1,A0
	JRUC	FYRCHEK2B	
FYRCHEK2A
	MOVE	*A2(PBULLONS),A1,W
	CMPI	PBULLMAX,A1
	JRGE	FYRCHEK4		;BR = CAN ONLY ALLOW SO MANY ON SCREEN
FYRCHEK2B
	ORI	MGUN,A9
	ANDNI	MROCKET,A9		;FIRE!
	CLR	B4			;OFFSET TO NORMAL FIRING FRAMES
	MOVE	A0,*A2(PBULLETS),W	;NEW # OF BULLETS
*INDICATE FIRING NECESSARY
FYRCHEK3
	SETC
	MMFM	SP,A0,A1
	RETS
*NO FIRING THIS TIME AROUND
FYRCHEK4
	CLR	B4
	CLRC
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* STUFLVEL - STUFF X,Y & Z VELOCITIES INTO A PLAYER TORSO AND LEGS.	 *
* A0 = X VEL(32 BITS)							 *
* A1 = Y&Z VEL(32 BITS)							 *
* A4 = PTR TO LEGS							 *
* A8 = PTR TO TORSO							 *
*                                                                        *
**************************************************************************
STUFLVEL
	MOVE	A0,*A8(OXVEL),L		;X
***	MOVE	A0,*A4(OXVEL),L		;X FOR LEGS
	MOVE	A1,*A8(OYVEL),L		;Y
***	MOVE	A1,*A4(OYVEL),L		;Y FOR LEGS
	MOVE	A1,*A8(OZVEL),L		;Z
***	MOVE	A1,*A4(OZVEL),L		;Z FOR LEGS
	RETS

*
*SVELCPY2 - COPY TORSO AND LEG VELOCITIES TO SHADOW (IF ANY)
*A4=LEGS
*A8=TORSO
*
SVELCPY2: 
	MMTM	SP,A0,A1
	MOVE	*A8(OSHAD),A0,L
	JREQ	SVLCP2
	MOVE	*A8(OXVEL),*A0(OXVEL),L
	MOVE	*A8(OZVEL),A1,L
	MOVE	A1,*A0(OZVEL),L
	MOVE	A1,*A0(OYVEL),L
SVLCP2:
	MOVE	*A4(OSHAD),A0,L
	JREQ	SHVLCPX
	MOVE	*A4(OXVEL),*A0(OXVEL),L
	MOVE	*A4(OZVEL),A1,L
	MOVE	A1,*A0(OZVEL),L
	MOVE	A1,*A0(OYVEL),L
SHVLCPX:
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* PIRQZRST - PLAYER IRQ Z RESET, RESET PLAYER Z ACCORDING TO THE	 *
* 	   INIT. TABLE							 *
* A2 = PTR TO PLAYER DATA BLOCK						 *
* A4 = PTR TO LEG OBJ							 *
* A8 = PTR TO TORSO OBJ							 *
*                                                                        *
**************************************************************************
PIRQZRST
	MMTM	SP,A0,A1,A4,A8,A9,A10,A14
	MOVE	A8,A10
	MOVE	A4,A8
	CALLA	DFRMGRND
	JRN	PIRQYES
	CMPI	2,A1
	JRLT	PIRQX
PIRQYES
	CMPI	P1DATA,A2
	JRNE	P2IRQ
	MOVI	P1INITTL,A14
	JRUC	PIRQZ1
P2IRQ
	MOVI	P2INITT,A14
PIRQZ1
	MOVE	*A8(OIMG),A9,L
	MOVE	*A8(OFLAGS),A4,W
	MOVE	*A14(INITIMG),A1,L
	CALLA	ANI			;GET INIT. IMG
	MOVE	A8,A0
	CALLA	SETZPOS
	MOVE	A9,A1
	CALLA	ANI			;RESTORE CURRENT
	MOVE	*A8(OZVAL),A0,L
	INC	A0
	MOVE	A0,*A10(OZVAL),L
PIRQX
	MMFM	SP,A0,A1,A4,A8,A9,A10,A14
	RETS

**************************************************************************
*                                                                        *
* PFLIPCK - SET THE PLAYER HORIZONTAL FLIP ACCORDING TO THE JOYSTICK	 *
* A2 = PLAYER DATA STRUCTURE						 *
* A4 = PLAYER LEG OBJ							 *
* A7 = PLAYER JOYSTICK/SWITCH BITS					 *
* A8 = PLAYER TORSO OBJ							 *
*                                                                        *
**************************************************************************
PFLIPCK
	BTST	BPRYTE,A7
	JREQ	PFLIPCKL
	CALLR	NOY2FLIP
	CALLR	NOYLFLIP
	JRUC	PFLIPCKX
PFLIPCKL
	BTST	BPLEFT,A7
	JREQ	PFLIPCKX
	CALLR	Y2FLIP
	CALLR	YLFLIP
PFLIPCKX
	RETS
**************************************************************************
*                                                                        *
* PLALIGN - RE-ALIGN THE PLAYER LEGS WITH THE CURRENT TORSO.		 *
* A4 = PTR TO PLAYER LEGS						 *
* A8 = PTR TO PLAYER TORSO						 *
* NOTE: CALL FROM DIRQ, OR WHILE DIRQ IS DISABLED.			 *
*                                                                        *
**************************************************************************
PLALIGN
	MMTM	SP,A0,A2,A3
	CALLA	GETANIXY		;GET THE TORSO ANIMATION PNT
	MOVE	A4,A0
	MOVE	*A8(OFLAGS),A4,W	;GET THE FLAGS FROM THE TORSO
	CALLA	GANISAG			;AND RE-ADJUST
	MOVE	A0,A4
	MOVE	*A8(OZVAL),A0,L
	DEC	A0	       		;RE-POSITION PROPERLY
	MOVE	A0,*A4(OZVAL),L
	MOVE	*A8(OXVEL),*A4(OXVEL),L	;MATCH VELOCITIES
	MOVE	*A8(OYVEL),*A4(OYVEL),L
	MOVE	*A8(OZVEL),*A4(OZVEL),L
	CALLA	SHADUPD2		;UPDATE THE TORSO SHADOW
	SWAP	A4,A8
	CALLA	SHADUPD			;UPDATE LEG SHADOW
	SWAP	A4,A8
	MMFM	SP,A0,A2,A3
	RETS

**************************************************************************
*                                                                        *
* PLALIGNSP - SPECIAL RE-ALIGN FOR LEGS AND TORSO, FIRST CHECKS LEGS     *
*		AND ONLY RE-ALIGNS IF THEY ARE ON			 *
* A4 = PTR TO PLAYER LEGS						 *
* A8 = PTR TO PLAYER TORSO						 *
* NOTE: CALL FROM DIRQ, OR WHILE DIRQ IS DISABLED.			 *
*                                                                        *
**************************************************************************
PLALIGNSP
	MMTM	SP,A0,A1,A2,A3,A5,A6,A7
	CALLA	GETANIXY		;GET THE TORSO ANIMATION PNT
	MOVE	A2,A5
	MOVE	A4,A0
	MOVE	*A4(OIMG),A1,L
	MOVE	*A4(OSIZE),A2,L
	MOVE	*A4(OFLAGS),A4,W
	CALLA	GANIOF
	MOVE	A0,A4
	SUB	A6,A3	
	SUB	A7,A5			;ADJUST UPPER LEFT CORNER
	MOVE	A3,*A4(OXVAL),L
	MOVE	A5,*A4(OYVAL),L		
	MMFM	SP,A0,A1,A2,A3,A5,A6,A7
	RETS

**************************************************************************
*                                                                        *
* DLLINE - RETURNS THE DISTANCE OF THE PLAYER FROM HIS LANDING LINE	 *
* A8 = POINTER TO TORSO							 *
* A12 = LANDING LINE, 32 BITS						 *
* RETURNS 								 *
* A1 = DISTANCE FROM LINE, 32 BITS					 *
* THE STATUS BITS REFLECT THE SIGN OF A1				 *
* NOTE: A0 IS TRASHED							 *
*                                                                        *
**************************************************************************
DLLINE
	MOVE	*A8(OYVAL),A0,L	;GET THE CURRENT Y POSITION
	MOVE	*A8(OIMG),A1,L
	MOVE	*A1(IANIOFF+16),A1,W
	SLL	16,A1
	ADD	A1,A0		;ADJUST FOR ANIMATION POINT

	MOVE	A12,A1
	SUB	A0,A1		;A1 = DISTANCE FROM Y LANDING LINE
	RETS

**************************************************************************
*                                                                        *
* LOADLTAB - LOAD A LEG ANIMATION LIST FROM MAIN ANIMATION TABLE	 *
* A0 = FRAME TYPE							 *
* A6 = MAIN ANIMATION TABLE						 *
* RETURN(S):								 *
* A13 = PTR TO HEAD OF ANIMATION LIST					 *
*                                                                        *
**************************************************************************
LOADLTAB:
	MOVE	A6,-*SP,L
	CALLA	BASFRM	 	;OFFSET INTO LIST TABLE
	MOVE	*A6,A13,L	;POINT TO THE LIST
	MOVE	*SP+,A6,L
	RETS

**************************************************************************
*                                                                        *
* PLFRAME - GET NEXT LEG FRAME FROM ANIMATION LIST FOR PART 1		 *
* A4 = POINTER TO OBJECT BLOCK						 *
* A9 = PLAYER FLAGS							 *
* A13 = POINTER TO NEXT FRAME IN THE ANIMATION LIST			 *
* RETURN(S)								 *
* A3 = TICKS FOR THIS FRAME						 *
* C BIT SET(JxC)  = END OF LIST WAS HIT					 *
* N BIT SET(JxN)  = SPECIAL FRAME ENCOUNTERED				 *
*                                                                        *
**************************************************************************
PLFRAME	MMTM	SP,A0,A1,A4,A8
	MOVE	*A13+,A1,L	;LOAD NEXT FRAME
	JRNE	PLFRAME1  	;NOT THE END OF THE LIST
	SETC	       	  	;SET CARRY FLAG
	JRUC	PLFRAMEX
PLFRAME1
	MOVE	A4,A8
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI	  	;SETUP NEW FRAME
PLFRAME2
	MOVE	*A13+,A3,W	;LOAD SLEEP TICKS PER FRAME
	JRGE	PLFRM5		;BR = NORMAL FRAME ENCOUNTERED
	MOVE	*A13+,A10,L	;PUT CURRENT XY FIRING OFFSETS IN BLOCK
	MOVE	*A13+,A0,W	;GET PROCESS "SWITCH" NUMBER
	CALLR	INCFP2
	CALLR	PSTAKP
	NEG	A3
	JRUC	PLFRM6
PLFRM5
	BTST	BRUN,A9
	JREQ	PLFRM6
	SUBK	1,A3		;SPEED UP FOR RUN
	JRGT	PLFRM6
	CLR	A3		;THIS IS THE LOWEST
PLFRM6
	CLRC	
PLFRAMEX
	MMFM	SP,A0,A1,A4,A8
	RETS

**************************************************************************
*                                                                        *
* P2FRAME - GET NEXT FRAME FROM ANIMATION LIST FOR PART 2		 *
*	    CALL ONLY FROM JOYSTICK PROCESSOR				 *
* A8 = POINTER TO PART 2 OBJECT BLOCK					 *
* A4 = POINTER TO PART 1 OBJECT BLOCK					 *
* A9 = PLAYER FLAGS							 *
* A11 = POINTER TO NEXT FRAME IN THE ANIMATION LIST			 *
* RETURN(S)								 *
* A5 = TICKS FOR THIS FRAME						 *
* C BIT SET(JxC)  = END OF LIST WAS HIT					 *
* N BIT SET(JxN)  = SPECIAL FRAME ENCOUNTERED				 *
*                                                                        *
**************************************************************************
P2FRAME
	MMTM	SP,A0,A1,A4,A14
	MOVE	*A11+,A1,L		;LOAD NEXT FRAME
	JRNE	P2FRM1			;NOT THE END OF THE LIST
	SETC	       			;SET CARRY FLAG
	JRUC	P2FRMX
P2FRM1
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI2			;SETUP NEW FRAME
P2FRM4
	MOVE	*A11+,A5,W	;LOAD SLEEP TICKS PER FRAME
	JRGE	P2FRM5		;BR = NORMAL FRAME ENCOUNTERED

	MOVE	*A11+,A10,L	;PUT CURRENT XY FIRING OFFSETS IN BLOCK
	MOVE	*A11+,A0,W	;GET PROCESS "SWITCH" NUMBER
	CALLR	INCFP2
	CALLR	PSTAKP
	NEG	A5
	JRUC	P2FRM6
P2FRM5
	BTST	BRUN,A9
	JREQ	P2FRM6
	SUBK	1,A5		;SPEED UP FOR RUN
	JRGT	P2FRM6
	CLR	A5		;THIS IS THE LOWEST
P2FRM6
	CLRC	
P2FRMX	MMFM	SP,A0,A1,A4,A14
	RETS


**************************************************************************
*                                                                        *
* PLSTOP - STOP A TWO PIECE OBJECT IN ALL DIRECTIONS.			 *
* A4 = OBJECT 0 (LEGS)							 *
* A8 = OBJECT 1 (TORSO)							 *
*                                                                        *
**************************************************************************
PLSTOP	CALLR	PLSTOPX
	JRUC	PLSTOPYZ
**************************************************************************
*                                                                        *
* PLSTOPX - CLEAR THE TOP AND BOTTOM OBJECTS X VELOCITY,		 *
* A4 = LEGS								 *
* A8 = TORSO								 *
*                                                                        *
**************************************************************************
PLSTOPX
	MMTM	SP,A0,A1
	CLR	A1
	MOVE	A1,*A8(OXVEL),L
	MOVE	*A8(OSHAD),A0,L
	JREQ	PLSTOPX1		;BR = NO TORSO SHADOW
	MOVE	A1,*A0(OXVEL),L		;STOP THE SHADOW ALSO
PLSTOPX1
	TEST	A4
	JREQ	PLSTOPX2		;BR = NO LEGS
	MOVE	A1,*A4(OXVEL),L
	MOVE	*A4(OSHAD),A0,L
	JREQ	PLSTOPX2
	MOVE	A1,*A0(OXVEL),L		;STOP THE SHADOW ALSO
PLSTOPX2
	MMFM	SP,A0,A1
	RETS
**************************************************************************
*                                                                        *
* PLSTOPZ - CLEAR THE TOP AND BOTTOM OBJECTS Z VELOCITY,		 *
* A4 = LEGS								 *
* A8 = TORSO								 *
*                                                                        *
**************************************************************************
PLSTOPZ
	MMTM	SP,A0,A1,A2,A3
	MOVE	*A8(OYVEL),A2,L
	MOVE	A2,A3			;KEEP HERE FOR SIGN COMPARISON
	MOVE	*A8(OZVEL),A1,L
	ABS	A1
	ABS	A2
	SUB	A1,A2
	MOVE	A3,A3			;SWITCH SIGNS?
	JRNN	PLSTOPZN		;BR = NO
	NEG	A2
PLSTOPZN
	CLR	A1
	MOVE	A1,*A8(OZVEL),L
	MOVE	A2,*A8(OYVEL),L
	MOVE	*A8(OSHAD),A0,L
	JREQ	PLSTOPZ1		;BR = NO TORSO SHADOW
	MOVE	A1,*A0(OZVEL),L
	MOVE	A1,*A0(OYVEL),L		;TOTALLY STOP THE TORSO SHADOW
PLSTOPZ1
	TEST	A4
	JREQ	PLSTOPZ2		;BR = NO LEGS
	MOVE	A1,*A4(OZVEL),L
	MOVE	A2,*A4(OYVEL),L
	MOVE	*A4(OSHAD),A0,L
	JREQ	PLSTOPZ2
	MOVE	A1,*A0(OZVEL),L
	MOVE	A1,*A0(OYVEL),L		;TOTALLY STOP THE LEG SHADOW
PLSTOPZ2
	MMFM	SP,A0,A1,A2,A3
	RETS
**************************************************************************
*                                                                        *
* PLSTOPY - CLEAR THE TOP AND BOTTOM OBJECTS Y VELOCITY,		 *
* A4 = LEGS								 *
* A8 = TORSO								 *
*                                                                        *
**************************************************************************
PLSTOPY
	MMTM	SP,A0,A1
	CLR	A1
	MOVE	A1,*A8(OYVEL),L
	MOVE	*A8(OSHAD),A0,L
	JREQ	PLSTPYZ1		;BR = NO TORSO SHADOW
	MOVE	A1,*A0(OYVEL),L
PLSTPYZ1
	TEST	A4
	JREQ	PLSTPYZ2		;BR = NO LEGS FOR THIS GUY
	MOVE	A1,*A4(OYVEL),L
	MOVE	*A4(OSHAD),A0,L
	JREQ	PLSTPYZ2		;BR = NO SHADOW FOR LEGS
	MOVE	A1,*A0(OYVEL),L
PLSTPYZ2
	MMFM	SP,A0,A1
	RETS
**************************************************************************
*                                                                        *
* PLSTOPYZ - CLEAR A TWO PART OBJECTS Y & Z VELOCITY			 *
* A4 = PTR TO BOTTOM HALF						 *
* A8 = PTR TO TOP HALF							 *
*                                                                        *
**************************************************************************
PLSTOPYZ
	CALLR	PLSTOPZ
	JRUC	PLSTOPY
**************************************************************************
*                                                                        *
* YLFLIP - FLIP A PART 1 LEGS OBJECT IN Y				 *
* A4 = PTR TO LEG OBJECT						 *
*                                                                        *
**************************************************************************
YLFLIP	MMTM	SP,A1,A4,A8
	MOVE	A4,A8
	MOVE	*A8(OFLAGS),A4
	ORI	M_FLIPH,A4
	JRUC	SETFLAGL
**************************************************************************
*                                                                        *
* NOYLFLIP - UNFLIP A PART 1 LEGS OBJECT IN Y				 *
* A4 = PTR TO LEG OBJECT						 *
*                                                                        *
**************************************************************************
NOYLFLIP
	MMTM	SP,A1,A4,A8
	MOVE	A4,A8
	MOVE	*A8(OFLAGS),A4
	ANDNI	M_FLIPH,A4
SETFLAGL
	MOVE	*A8(OIMG),A1,L		;GET THE CURRENT IMAGE POINTER
	CALLA	ANI			;SETUP THE "NEW" IMAGE
	MMFM	SP,A1,A4,A8
	RETS

**************************************************************************
*                                                                        *
* Y2FLIP - FLIP A PART 2 TORSO OBJECT IN Y. PLAYER ONLY!		 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
* A8 = PTR TO TORSO OBJECT						 *
*                                                                        *
**************************************************************************
Y2FLIP	MMTM	SP,A1,A4
	MOVE	*A8(OFLAGS),A4
	ORI	M_FLIPH,A4
	JRUC	SETFLIP2
**************************************************************************
*                                                                        *
* NOY2FLIP - UNFLIP A PART 2 TORSO OBJECT IN Y. PLAYER ONLY!		 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
* A8 = PTR TO TORSO OBJECT						 *
*                                                                        *
**************************************************************************
NOY2FLIP
	MMTM	SP,A1,A4
	MOVE	*A8(OFLAGS),A4
	ANDNI	M_FLIPH,A4
SETFLIP2
	MOVE	*A8(OIMG),A1,L		;GET THE CURRENT IMAGE POINTER
	CALLA	ANI2			;SETUP THE "NEW" IMAGE
	MMFM	SP,A1,A4
	RETS

**************************************************************************
*                                                                        *
* PLAYERON - TURN THE PLAYER'S BODY PARTS ON.				 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
*                                                                        *
**************************************************************************
PLAYERON
	MMTM	SP,A0,A1,A3,A4,A8
	MOVE	*A2(POBJ),A8,L
	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	ADDK	2,A0			;LIGHT 'EM UP
	MOVE	A0,*A8(OFLAGS),W
	MOVE	*A2(PIRQFLAG),A1,W
	ANDI	MDRIVER|MPASSEN,A1
	JRNE	PLAYERO1		;LEGS ARE GONE
	MOVE	A0,A3			;NORMAL FLAGS HERE
	MOVE	A0,A4			;SHADOW FLAGS HERE
	SRL	4,A4
	SLL	4,A4
	ADDK	8,A4
	MOVE	*A2(PLOBJ),A0,L
	MOVI	PLAYERS,A1
	CALLA	ISSUPP
	JRZ	PLAYERO0
	MOVE	A3,*A0(OFLAGS),W	;LIGHT THE LEGS ALSO
	MOVE	*A0(OSHAD),A0,L
	JRZ	PLAYERO0		;NO LEG SHADOW
	MOVE	A4,*A0(OFLAGS),W
PLAYERO0
	MOVE	*A8(OSHAD),A0,L
	JRZ	PLAYERO1		;NO TORSO SHADOW
	MOVE	A4,*A0(OFLAGS),W
PLAYERO1
	MMFM	SP,A0,A1,A3,A4,A8
	RETS

**************************************************************************
*                                                                        *
* PLAYEROF - TURN THE PLAYER'S BODY PARTS OFF.				 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
*                                                                        *
**************************************************************************
PLAYEROF
	MMTM	SP,A0,A8
	MOVE	*A2(POBJ),A8,L
	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	MOVE	A0,*A8(OFLAGS),W	;TORSO OFF
	MOVE	*A2(PIRQFLAG),A8,W
	ANDI	MDRIVER|MPASSEN,A8
	JRNE	PLAYROF1		;LEGS ARE GONE
	MOVE	*A2(PLOBJ),A8,L
	MOVE	A0,*A8(OFLAGS),W	;OFF WITH THE LEGS ALSO
PLAYROF1
	MMFM	SP,A0,A8
	RETS

**************************************************************************
*                                                                        *
* PLAYERCON - TURN THE PLAYER'S BODY PARTS TO CONSTANT ON.		 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
*                                                                        *
**************************************************************************
PLAYERCON
	MMTM	SP,A0,A1,A8
	MOVE	*A2(POBJ),A8,L
	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	ADDK	8,A0			;LIGHT 'EM UP
	MOVE	A0,*A8(OFLAGS),W
	MOVE	*A2(PIRQFLAG),A8,W
	ANDI	MDRIVER|MPASSEN,A8
	JRNE	PLAYERCO1		;LEGS ARE GONE
	MOVE	A0,A8
	MOVE	*A2(PLOBJ),A0,L
	MOVI	PLAYERS,A1
	CALLA	ISSUPP
	JRZ	PLAYERCO1
	MOVE	A8,*A0(OFLAGS),W	;LIGHT THE LEGS ALSO
PLAYERCO1
	MMFM	SP,A0,A1,A8
	RETS

**************************************************************************
*                                                                        *
* CKLBOUND - CHECK OBJECT AGAINST BOUNDRIES. THE PROPER VELOCITY	 *
* 	   IS ZERO'D IN BOTH OF A PLAYERS OBJECTS IF A BOUNDRY IS HIT.	 *
* A4 = PLAYER LEG OBJECT POINTER					 *
* A8 = PLAYER TORSO OBJECT BLOCK PTR					 *
* A9 = PLAYER FLAGS							 *
*                                                                        *
**************************************************************************
CKLBOUND
	MMTM	SP,A0,A1,A2,A3,A6,A7,A10,A13,A14
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	CKLCHKX
	CMPI	INPLAY,A0
	JRNE	CKBNDX			;NOT IN PLAY, DON'T WORRY ABOUT IT
CKLCHKX
*DO X BOUNDRIES FIRST
	MOVE	A4,A3
	MOVE	*A8(OSIZE),A2,L
	MOVE	*A8(OFLAGS),A4,W
	MOVE	*A8(OIMG),A1,L
	CALLA	GANIOF
	MOVE	A3,A4
	SRL	16,A6
	SEXT	A6

	MOVE	*A8(OXPOS),A1,W
	MOVE	@WORLDTL,A2,W
	SUB	A2,A1			;ADJUST X FOR WORLD COORDS
	ADD	A6,A1			;X ANIMATION POINT

	MOVE	*A8(OXVEL),A2,L		;GET HIS VELOCITY
	JREQ	CKYBND			;BR = NOT MOVING, FORGET IT
	JRN	CKLBND			;BR = NEGATIVE, CHECK LEFT

	CMPI	PXMAX,A1		;TOO FAR RIGHT?
	JRLT	CKYBND			;BR = NO
	JRUC	CKLBNDSX

CKLBND	CMPI	PXMIN,A1		;TOO FAR LEFT?
	JRGT	CKYBND			;BR = NO
CKLBNDSX
	CALLR	PLSTOPX
	MOVE	A9,A1	
	ANDI	MPASSEN|MDRIVER,A1
	JREQ	CKYBND			;BR = NO CAR AVAILABLE
	MOVE	@PLAYCAR,A10,L
	JRZ	CKYBND
	MOVE	*A10(OPLINK),A13,L
	CLR	A1
	CALLA	CARXVEL
	CALLR	ISCHOP
	JREQ	CKYBND			;A CHOPPER HAS NO WHEEL YOU IDIOT
	CALLA	CWHLSTOP
*NOW CHECK THE Z BOUNDRIES
CKYBND
	MOVE	*A8(OZVEL),A2,L
	JREQ	CKBNDX			;BR = NO VELOCITY, NO CHECK
	MOVE	@PLZMAX,A13,W
	MOVE	@PLZMIN,A14,W		;GET THE Z BOUNDRIES

	MOVE	A9,A1	
	ANDI	MPASSEN|MDRIVER,A1
	JRNE	CKPCZBND		;BR = HE'S IN THE CAR, CHECK THERE 

	MOVE	*A8(OZPOS),A3,W		;GET THIS GUYS Z POSITION
	MOVE	A2,A2
	JRN	CKUBND			;BR = NEGATIVE, CHECK YMIN
***	MOVE	*A8(OZPLUS),A7,W
***	ADD	A7,A3
	CMP	A13,A3			;HIT ROCK BOTTOM?
	JRLT	CKBNDX			;BR = NO
	JRUC	CKBNDRZ
CKUBND
***	MOVE	*A8(OZMINUS),A7,W
***	SUB	A7,A3
	CMP	A14,A3			;AT THE TOP?
	JRGT	CKBNDX			;BR = NO
CKBNDRZ
	CALLR	PLSTOPZ			;ZERO Y VELOCITY
CKBNDX
	MMFM	SP,A0,A1,A2,A3,A6,A7,A10,A13,A14
	RETS
*Z CHECK WITHIN CAR, A2 = CURRENT Z VELOCITY, A13 = PLZMAX, A14 = PLZMIN
CKPCZBND
	MOVE	@PLAYCAR,A10,L		;GET THE CAR POINTER
	JRZ	CKBNDX
	MOVE	*A10(OZPOS),A3,W
	MOVE	A3,A6
	MOVE	*A10(OZMINUS),A7,W
	SUB	A7,A3
	MOVE	*A10(OZPLUS),A7,W
	ADD	A7,A6
	MOVE	A2,A2
	JRN	CKPCZUB			;BR = NEGATIVE, CHECK ZMIN
	CMP	A13,A6			;HIT ROCK BOTTOM?
	JRLT	CKBNDX			;BR = NO
	JRUC	CKPCBRZ
CKPCZUB
	CMP	A14,A3			;AT THE TOP?
	JRGT	CKBNDX			;BR = NO
CKPCBRZ
	CALLR	PLSTOPZ			;ZERO Y VELOCITY
	MOVE	*A10(OPLINK),A13,L
	CLR	A1
	CALLA	CARYZVEL
	CALLR	ISCHOP
	JRNE	CKPCISC			;BR = THIS IS A CAR
	MOVI	48,A0
	CALLR	PSTAKP			;STACK THE SLOW DOWN PROC
	JRUC	CKBNDX
CKPCISC
	MOVI	45,A0
	CALLR	PSTAKP			;STACK THE SLOW DOWN PROC
	JRUC	CKBNDX

**************************************************************************
*                                                                        *
* P_INBNDS - SEE IF A PLAYER IS IN THE PLAYFIELD BOUNDRIES		 *
* A2 = PTR TO PLAYER DATA						 *
* RETURNS:								 *
* 	CARRY SET = NOT IN BOUNDS (BETTER RESET HIM)			 *
* 	CARRY CLR = IN BOUNDS (EITHER HE'S O.K. OR HE DOESN'T EXIST)	 *
*                                                                        *
**************************************************************************
P_INBNDS
	PUSH	A8
	MOVE	*A2(POBJ),A8,L
	JRNZ	P_INBNDS1
	CLRC
	JRUC	P_INBNDSX		;FLAG HIM O.K.
P_INBNDS1
	CALLR	CKLXBND
	JRC	P_INBNDSX
	CALLR	CKLZBND
P_INBNDSX
	PULL	A8
	RETS

**************************************************************************
*                                                                        *
* CKLXBND - CHECK OBJECT AGAINST X BOUNDRIES.				 *
* A8 = PLAYER TORSO OBJECT BLOCK PTR					 *
* RETURNS								 *
* 	CARRY SET = EXCEEDED BOUNDRY					 *
* 	CARRY CLR = IN BOUNDS						 *
*                                                                        *
**************************************************************************
CKLXBND
	MMTM	SP,A2,A4,A6,A7
	MOVE	*A8(OSIZE),A2,L
	MOVE	*A8(OFLAGS),A4,W
	MOVE	*A8(OIMG),A1,L
	CALLA	GANIOF			;BASED ON ANIMATION POINT
	SRA	16,A6
	MOVE	*A8(OXPOS),A2,W
	MOVE	@WORLDTL,A7,W
	SUB	A7,A2			;ADJUST X FOR WORLD COORDS
	ADD	A6,A2			;X ANIMATION POINT
	CMPI	PXMAX,A2		;TOO FAR RIGHT?
	JRLT	CKLXBND1		;BR = NO
	JRUC	CKLXSC
CKLXBND1
	CMPI	PXMIN,A2		;TOO FAR LEFT?
	JRGT	CKLXCC			;BR = NO
CKLXSC
	SETC
CKLXXXX
	MMFM	SP,A2,A4,A6,A7
	RETS
CKLXCC
	CLRC
	JRUC	CKLXXXX
**************************************************************************
*                                                                        *
* CKLZBND - CHECK PLAYER AGAINST Z BOUNDRIES.				 *
* A8 = PTR TO PLAYER TORSO						 *
* RETURNS								 *
* 	CARRY SET = EXCEEDED OR EQUAL TO BOUNDRY			 *
* 	CARRY CLR = IN BOUNDS						 *
*                                                                        *
**************************************************************************
CKLZBND
	MMTM	SP,A1,A2,A3
	MOVE	*A8(OZVAL),A1,L		;GET THIS GUYS Z POSITION
	MOVE	@PLZMAX,A2,W
	MOVE	@PLZMIN,A3,W		;GET THE Y BOUNDRIES
	SLL	16,A2
	SLL	16,A3
	CMP	A2,A1			;HIT ROCK BOTTOM?
	JRLT	CKLZXCC			;BR = NO
	JRUC	CKLZXSC
	CMP	A3,A1			;AT THE TOP?
	JRGT	CKLZXCC			;BR = NO
CKLZXSC
	SETC
	JRUC	CKLZXX
CKLZXCC
	CLRC
CKLZXX
	MMFM	SP,A1,A2,A3
	RETS

**************************************************************************
*                                                                        *
* CKLBADJ - RE-ADJUST PLAYER IN BOUNDS IF HE IS OUT, IN X,Y & Z		 *
* 		USE ONLY WHILE RESETTING THE PLAYER FROM DEATH OR BUYIN. *
* A2 = PLAYER DATA							 *
*                                                                        *
**************************************************************************
CKLBADJ
	PUSH	A0
	MOVE	*A2(PIRQFLAG),A0,W
	ANDI	MDRIVER|MPASSEN|MSITIN,A0
	JRNE	CKLBADJX		;DON'T RESET, IT'S UNCOOL
	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JREQ	CKLBCHK
	CMPI	INPLAY,A0
	JRNE	CKLBADJX		;NOT IN PLAY, DON'T WORRY ABOUT IT
CKLBCHK
	CALLR	CKLZADJ
	CALLR	CKLXADJ
CKLBADJX
	PULL	A0
	RETS

**************************************************************************
*                                                                        *
* CKLZADJ - CHECK PLAYER AGAINST IT'S CURRENT Z BOUNDRIES,  	 	 *
* 	    IF A BOUNDRY IS HIT OR PASSED, ADJUST TO BOUNDRY		 *
*	    USED TO RESET THE PLAYER INTO THE Z BOUNDRIES		 *
*	    AFTER DEATH FALLS AND THE LIKE.				 *
* A2 = PTR PLAYER DATA							 *
*                                                                        *
**************************************************************************
CKLZADJ
	MMTM	SP,A0,A1,A3,A4,A5,A6,A7
	MOVE	*A2(POBJ),A8,L
	JRZ	CKLZADJX		;PLAYER IS NON-EXISTANT
	MOVE	*A2(PLOBJ),A4,L	

	MOVE	*A2(PIRQFLAG),A0,W
	ANDI	MJUMP1|MJUMP2|MDRIVER|MPASSEN|MSITIN,A0
***	JRNE	CKLNZR			;NO Z RESET WHILE JUMPING OR DRIVING
   	JRNE	CKLZADJX		;NO Z RESET WHILE JUMPING OR DRIVING

	MOVE	A4,A0
	CALLA	SETZPOS			;FIRST RESET THE Z POSITION	
	MOVE	*A4(OZVAL),A1,L		;MATCH THE FOOT Z POSITION
	INC	A1			;TORSO ALWAYS ON TOP
	MOVE	A1,*A8(OZVAL),L
CKLNZR
	MOVE	*A8(OZPOS),A1,W		;KEEP THIS BECAUSE OF BRANCH
	MOVE	A1,A6
	MOVE	*A8(OYPOS),A5,W
	MOVE	*A4(OYPOS),A7,W

	MOVE	@PLZMAX,A3,W
	SUB	A1,A3
	JRGT	CKLUZADJ
	ABS	A3
	SUB	A3,A6
	SUB	A3,A5
	SUB	A3,A7
	JRUC	CKLZADJ1
CKLUZADJ
	MOVE	@PLZMIN,A3,W
	SUB	A3,A1
	JRGT	CKLZADJX
	ABS	A1
	ADD	A1,A6
	ADD	A1,A5
	ADD	A1,A7
CKLZADJ1
	CALLA	PLSTOPYZ
	MOVE	A7,*A4(OYPOS),W
	MOVE	A5,*A8(OYPOS),W
	SLL	16,A6
	MOVE	A6,*A4(OZVAL),L
	INC	A6	
	MOVE	A6,*A8(OZVAL),L
CKLZADJX
	MMFM	SP,A0,A1,A3,A4,A5,A6,A7
	RETS

**************************************************************************
*                                                                        *
* CKLXADJ - ADJUST THE PLAYER TO BE WITHIN X BOUNDS, IF HE IS DEEMED OUT *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
CKLXADJ
	MMTM	SP,A0,A1,A3,A4,A6,A7
	
	MOVE	*A2(POBJ),A8,L
	JRZ	CKLXADJX		;PLAYER IS NON-EXISTANT
	MOVE	*A2(PLOBJ),A4,L

	CALLA	GETANIX			;BOUNDRY CHECK BASED ON X ANIMATION
	MOVE	A0,A1
	SEXT	A1
	MOVE	@WORLDTLX+16,A0,W
	SUB	A0,A1			;ADJUST X TO THE SCREEN

	MOVE	*A8(OXPOS),A6,W
	MOVE	*A4(OXPOS),A7,W

	MOVI	PXMAX,A3
	SUB	A1,A3
	JRGT	CKLRXADJ
	ABS	A3
	SUB	A3,A6
	SUB	A3,A7
	JRUC	CKLXADJ1
CKLRXADJ
	MOVI	PXMIN,A3
	SUB	A3,A1
	JRGT	CKLXADJX
	ABS	A1
	ADD	A1,A6
	ADD	A1,A7
CKLXADJ1
	MOVE	A7,*A4(OXPOS),W
	MOVE	A6,*A8(OXPOS),W
CKLXADJX
	MMFM	SP,A0,A1,A3,A4,A6,A7
	RETS

**************************************************************************
*                                                                        *
* CKABGND - PLAYER OBJECTS AGAINST THE BACKGROUND. THE PROPER VELOCITY	 *
* 	  PROPER ACTIONS WILL BE TAKEN IF HE HITS SOMETHING.		 *
* A4 = PLAYER LEG OBJECT POINTER					 *
* A8 = PLAYER TORSO OBJECT BLOCK PTR					 *
* A9 = PLAYER FLAGS							 *
* RETURNS:								 *
* A14 = COLLISION PLANE FLAGS:						 *
* 		BIT 0 = Z						 *
* 		BIT 1 = Y						 *
* 		BIT 2 = X						 *
*                                                                        *
**************************************************************************
CKABGND
	MMTM	SP,A0,A1,A2,A3,A4,A8
	CLR	A2
	MOVE	A4,A0
	MOVE	A8,A4
	MOVI	BACKSLST,A1
	CALLR	SCANALL	
	MOVE	A8,A3
	MMFM	SP,A4,A8		;GET THESE TWO BACK
	JREQ	CKABGND1
	PUSHST
	MOVE	*A3(OID),A1,W
	SRL	8,A1
	SLL	8,A1
	CMPI	BGDCID,A1
	JREQ	CKABORT
	CMPI	BGGDCID,A1
	JREQ	CKABORT
	CMPI	SLOTOID,A1
	JREQ	CKABORT
	CMPI	BGWCID,A1
	JREQ	CKABORT
	CMPI	WEEDOID,A1
	JREQ	CKABORT
	CMPI	BGNID,A1
	JREQ	CKABORT
	POPST
	JRNC	CKABGND0		;WE HIT SOMETHING, ZERO CORRECT VELS
	CALLR	CKMIDZST		
	JRUC	CKABGND1
CKABGND0
	OR	A14,A2
	CALLR	CKVSTOP
CKABGND1
	MMTM	SP,A4,A8
	MOVE	A4,A0
	MOVE	A8,A4
	MOVI	CARLIST,A1
	CALLR	SCANALL	
	MOVE	A8,A3
	MMFM	SP,A4,A8		;GET THESE TWO BACK
	JREQ	CKABGNDX
	PUSHST
	MOVE	*A3(OID),A1,W
	CMPI	TRAN1OID,A1
	JREQ	CKPORS
	CMPI	TRAN2OID,A1
	JREQ	CKCHOP
	CMPI	INTR2OID,A1
	JREQ	CKABORT
CKABGNDG				;RE-ENTRY AFTER CHECKY POO
	POPST
	JRNC	CKABGND2		;SOMETHING HIT US, SKIP FOR NOW
	CALLR	CKMIDZST		
	JRUC	CKABGND3
CKABGND2
	OR	A14,A2
	CALLR	CKVSTOP
CKABGND3
CKABGNDX
	MOVE	A2,A14
	MMFM	SP,A0,A1,A2,A3
	RETS
CKABORT
	POPST
	JRUC	CKABGNDX
*
*STOP VELOCITIES
*A14 = COLLISION FLAGS
CKVSTOP
	SRL	1,A14
	JRNC	CKVSTOP1
	CALLR	PLSTOPZ
CKVSTOP1
	SRL	1,A14
	JRNC	CKVSTOP2
	CALLR	PLSTOPY
CKVSTOP2
	SRL	1,A14
	JRNC	CKVSTOPX
	CALLR	PLSTOPX			;STOP THIS BAD DOG
CKVSTOPX
	RETS
*
*STOP Z VELOCITY IF IT'S GOING TO ALLOW THE PLAYER TO CONTINUE
* THROUGH AN OBJECT, THIS OCCURANCE COULD PROVE TO BE "TRES BOGAS"
*A0 = PLAYER OBJECT
*A3 = OBJECT HIT
*A14 = COLLISION FLAGS
CKMIDZST
	MMTM	SP,A5,A6
	MOVE	*A3(OZPOS),A5,W
	MOVE	*A0(OZPOS),A6,W
	CMP	A5,A6
	JRGE	CKMIDZ1
	MOVE	*A0(OZVEL+16),A6,W
	JRLE	CKMIDZX
	JRUC	CKMIDZ2
CKMIDZ1
	MOVE	*A0(OZVEL+16),A6,W
	JRGE	CKMIDZX
CKMIDZ2
	CALLR	PLSTOPZ
CKMIDZX
	MMFM	SP,A5,A6
	RETS

**************************************************************************
*                                                                        *
* CKPORS - CHECK TO SEE IF WE HIT THE PORSCHE IN THE MIDDLE		 *
* A3 = PORSCHE OBJECT							 *
* A4 = PLAYER LEG OBJECT						 *
* A8 = PLAYER TORSO OBJECT						 *
* A9 = PLAYER FLAGS [EXE,IRQ]						 *
* A14 = COLLISION FLAGS							 *
*                                                                        *
**************************************************************************
CKPORS
	BTST	1,A14	
	JREQ	CKABGNDG		;BR = NOT JUMPING INTO IT, JUST VELOCITY STOP
	MMTM	SP,A5,A6,A7
	MOVE	A9,A5
	SRL	16,A5
	ANDI	MDHOLD|MDEAD|MDYING,A5
	JRNZ	CKPORSXX

	MMFM	SP,A5,A6,A7
	POPST
	MOVE	A3,@PLAYCAR,L		;STORE THE CAR POINTER
	MOVE	*A3(OPLINK),A0,L
	JRZ	CKPORSXX		;BR = NO CONTLOHL
	MOVE	*A3(OXVEL),*A8(OXVEL),L	;MATCH VELOCITIES
	MOVE	*A3(OYVEL),*A8(OYVEL),L
	MOVE	*A3(OZVEL),*A8(OZVEL),L
	MOVE	*A3(OXVEL),*A4(OXVEL),L	;MATCH VELOCITIES, LEGS TOO
	MOVE	*A3(OYVEL),*A4(OYVEL),L
	MOVE	*A3(OZVEL),*A4(OZVEL),L

	MOVE	A8,A1
	CALLA	GETA8
	JRNZ	CKPORSDR		;BR = DRIVER ALREADY PRESENT
	ORI	MDRIVER|MSITIN,A9	;MAKE THIS GUY A DRIVER
	MOVE	A1,A8
	CALLA	PUTA8

	MOVI	49,A0
	CALLR	PSTAKP			;CREATE EUGENE MESSAGE

	MOVE	*A3(OZVAL),A0,L
	MOVE	A0,*A8(OZVAL),L
	DEC	A0
	MOVE	A0,*A4(OZVAL),L		;MAKE SURE THEY'RE IN THE DRIVERS SPOT
	JRUC	CKPORSFR		;GO LOAD THE FRAMES
CKPORSDR
	MOVE	A1,A8
	ORI	MPASSEN|MSITIN,A9	;MAKE THIS GUY A PASSENGER
	MOVE	A8,*A0(PASSPTR),L
	MOVE	*A3(OZVAL),A0,L
	ADDK	2,A0
	MOVE	A0,*A8(OZVAL),L
	DEC	A0
	MOVE	A0,*A4(OZVAL),L		;IN THE PASSENGERS SPOT	WITH YOU
CKPORSFR	
	MMFM	SP,A2,A3
	CALLR	PLAYERON		;MAKE SURE THE PLAYER IS ON NOW
	MOVK	JUMPINFR,A0
	MOVE	A6,A1
	CALLA	BASFRM			;GET THE LEG SCRIPT POINTER	
	MOVE	*A6+,A13,L
	MOVE	A13,*A2(PLEGAS),L	;STORE HERE FOR A RESET
	CLR	A3			;CLEAR LEG TICKS FOR SURE
	CLR	A5			;AND TORSO TICKS
	MOVE	*A6,A11,L		;NOW THE TORSO
	MOVE	A1,A6
	MMFM	SP,A0,A1

*MOVE THE PLAYER TO THE PORSCHE OPENING
	MMTM	SP,A0,A2,A3,A5,A6
	MMTM	SP,A4,A8	
	MOVE	@PLAYCAR,A8,L	
	CALLA	GETANIXY
	MOVE	*A8(OFLAGS),A4,W	
	MOVE	A2,A5
	MOVE	A3,A6
	PULL	A0
	CALLA	GANISAG			;ADJUST THE TORSO PORTION OF THE BOD
	MOVE	A0,A8
	PULL	A0
	MOVE	A5,A2
	MOVE	A6,A3
	CALLA	GANISAG
	MOVE	A0,A4
	MMFM	SP,A0,A2,A3,A5,A6

	ANDNI	MJUMP1|MJUMP2|MCHOLD|MSWALK|MRUN,A9	;FLAGS DOWN	
	CALLR	P2FRAME
	CALLR	PLAYLEG			;ANIMATE THESE FRAMES IN NOW!

	MOVI	38,A0
	CALLR	INCFP2
	CALLR	PSTAKP			;CREATE TSHADDEL
	MOVI	42,A0
	CALLR	INCFP2
	CALLR	PSTAKP			;CREATE LSHADDEL
	RETS
CKPORSXX
	MMFM	SP,A5,A6,A7
	JRUC	CKABGNDG
**************************************************************************
*                                                                        *
* CKCHOP - CHECK TO SEE IF WE HIT THE CHOPPER BODY			 *
* A3 = CHOPPER OBJECT							 *
* A4 = PLAYER LEG OBJECT						 *
* A8 = PLAYER TORSO OBJECT						 *
* A9 = PLAYER FLAGS [EXE,IRQ]						 *
* A14 = COLLISION FLAGS							 *
*                                                                        *
**************************************************************************
CKCHOP
	MMTM	SP,A5
	MOVE	A9,A5
	SRL	16,A5
	ANDI	MDHOLD|MDEAD|MDYING,A5
	JRNZ	CKCHOPXX
	MMFM	SP,A5
	POPST
	MOVE	A3,@PLAYCAR,L		;STORE THE CHOPPER POINTER
	MOVE	*A3(OPLINK),A0,L
	JRZ	CKCHOPXX		;BR = NO CONTLOHL
	MOVE	*A3(OXVEL),*A8(OXVEL),L	;MATCH VELOCITIES
	MOVE	*A3(OYVEL),*A8(OYVEL),L
	MOVE	*A3(OZVEL),*A8(OZVEL),L
	MOVE	*A3(OXVEL),*A4(OXVEL),L	;MATCH VELOCITIES, LEGS TOO
	MOVE	*A3(OYVEL),*A4(OYVEL),L
	MOVE	*A3(OZVEL),*A4(OZVEL),L

	MOVE	A8,A1
	CALLA	GETA8
	JRNZ	CKCHOPDR		;BR = DRIVER ALREADY PRESENT
	ORI	MDRIVER|MSITIN,A9	;MAKE THIS GUY A DRIVER
	MOVE	A1,A8
	CALLA	PUTA8
	JRUC	CKCHOPFR		;GO LOAD THE FRAMES
CKCHOPDR
	MOVE	A1,A8
	ORI	MPASSEN|MSITIN,A9	;MAKE THIS GUY A PASSENGER
	MOVE	A8,*A0(PASSPTR),L
CKCHOPFR	
	MOVE	*A3(OZVAL),A0,L
	MOVE	*A8(OZVAL),A2,L
	CMP	A0,A2			;WHICH SIDE IS THIS GUY ON?
	JRGE	CKCENTF			;IN FRONT OF, ENTER ON FRONT SIDE
       	DEC	A0			;OTHERWISE ENTER ON THE BACK SIDE	
	JRUC	CKCENTN
CKCENTF
	ADDK	2,A0
CKCENTN
	MOVE	A0,*A8(OZVAL),L
	DEC	A0
	MOVE	A0,*A4(OZVAL),L		;IN THE PASSENGERS SPOT	WITH YOU

	MMFM	SP,A2,A3
	CALLR	PLAYERON		;MAKE SURE THE PLAYER IS ON NOW
	MOVK	HELJUMP,A0
	MOVE	A6,A1
	CALLA	BASFRM			;GET THE LEG SCRIPT POINTER	
	MOVE	*A6+,A13,L
	MOVE	A13,*A2(PLEGAS),L	;STORE HERE FOR A RESET
	CLR	A3			;CLEAR LEG TICKS FOR SURE
	CLR	A5			;AND TORSO TICKS
	MOVE	*A6,A11,L		;NOW THE TORSO
	MOVE	A1,A6
	MMFM	SP,A0,A1
*MOVE THE PLAYER TO THE CHOPPER OPENING
	MMTM	SP,A0,A2,A3,A5,A6
	MMTM	SP,A4,A8	
	MOVE	@PLAYCAR,A8,L	
	CALLA	GETANIXY
	MOVE	*A8(OFLAGS),A4,W	
	MOVE	A2,A5
	MOVE	A3,A6
	PULL	A0
	CALLA	GANISAG			;ADJUST THE TORSO PORTION OF THE BOD
	MOVE	A0,A8
	PULL	A0
	MOVE	A5,A2
	MOVE	A6,A3
	CALLA	GANISAG
	MOVE	A0,A4
	MMFM	SP,A0,A2,A3,A5,A6
	ANDNI	MJUMP1|MJUMP2|MCHOLD|MSWALK|MRUN,A9	;FLAGS DOWN	
	ORI	MUNLIMIT,A9				;FREE ROCKETS EVERYONE
	CALLR	P2FRAME
	CALLR	PLAYLEG			;ANIMATE THESE FRAMES IN NOW!
	MOVI	38,A0
	CALLR	INCFP2
	CALLR	PSTAKP			;CREATE TSHADDEL
	MOVI	42,A0
	CALLR	INCFP2
	CALLR	PSTAKP			;CREATE LSHADDEL
	RETS
CKCHOPXX
	MMFM	SP,A5
	JRUC	CKABGNDG

**************************************************************************
*                                                                        *
* SCANALL - SCAN FOR COLLISIONS FIRST WITHOUT VELOCITY ADDITION, AND THE *
* 	  NEXT POSITION.						 *
* A0 = OBJECT TO CHECK							 *
* A1 = LIST OF OBJECTS TO CHECK AGAINST					 *
* RETURNS:								 *
* A8 = OBJECT HIT, NULL IF NO COLLISIONS				 *
* A14 = FLAGS OF COLLISION POSITION				 	 *
*      BIT 0 SET = COLLISION MOVING IN Z				 *
*      BIT 1 SET = COLLISION MOVING IN Y				 *	
*      BIT 2 SET = COLLISION MOVING IN X				 *
* Z BIT SET = NO COLLISION						 *
*  IF Z BIT CLR								 *
*   CARRY SET = OBJECT WAS HIT						 *
*   CARRY CLR = OBJECT RAN INTO ANOTHER ONE				 *
*                                                                        *
**************************************************************************
SCANALL
	MMTM	SP,A5,A6,A7
	CLR	A14
	CALLA	COLSCAN1	
	JREQ	SCANALL1	;NO COLLISIONS
	SETC			;OBJECT WAS HIT
	MMFM	SP,A5,A6,A7
	RETS
SCANALL1
	MMTM	SP,A2,A3,A4,A9,A10,A11,A12
	MOVE	A0,A12
	ADDI	OXVEL,A12
	MMFM	A12,A2,A3,A4,A9,A10,A11	;GET ALL COORDS. AND VELS.
	MMTM	SP,A3,A4,A9	;PUSH OLD COORDS.
	ADD	A11,A9		;NEXT X POSITION
	ADD	A10,A4		;NEXT Y POSITION
	ADD	A2,A3		;NEXT Z POSITION
	SUBK	32,A12
	MMTM	A12,A3,A4,A9	;INSTALL NEW COORDS.
	CALLA	COLSCAN1
	MMFM	SP,A2,A10,A11	;PULL OLD COORDS.
	JRNE	SCANALXY	;BR = COLLISION CHECK WHICH
	ADDI	60H,A12
	MMTM	A12,A2,A10,A11	;SHOVE OLD COORDS. BACK
	JRUC	SCANALL5	;AND GET LOST
*OBJECT HIT SOMETHING HERE, CHECK TO SEE WHICH VELOCITIES CAUSED THE COLLISION
SCANALXY
	MOVE	A0,A12
	MOVE	A2,*A12(OZVAL),L	;RESTORE OLD Z
	MOVE	A10,*A12(OYVAL),L ;RESTORE OLD Y
	CALLA	CKOBJXY		;CHECK IF COLLISION WAS IN X
	JREQ	SCANALL2
	ORI	4,A14
SCANALL2
	MOVE	A11,*A12(OXVAL),L	;RESTORE OLD X
	MOVE	A4,*A12(OYVAL),L	;PUT IN NEW Y
	CALLA	CKOBJXY		;CHECK IF COLLISION WAS IN Y
	JREQ	SCANALL3
	ORI	2,A14
SCANALL3
	MOVE	A10,*A12(OYVAL),L ;RESTORE OLD Y AGAIN
	MOVE	A3,*A12(OZVAL),L ;NEW Z
	CALLA	CKOBJXY
	JREQ	SCANALL4
	ORI	1,A14
SCANALL4
	MOVE	A2,*A12(OZVAL),L ;RESTORE OLD Z
SCANALL5
	MMFM	SP,A2,A3,A4,A9,A10,A11,A12
	MOVE	A14,A14		;SET COLLISION FLAG
	CLRC			;MAKE SURE CARRY IS CLEAR
	MMFM	SP,A5,A6,A7
	RETS

**************************************************************************
*                                                                        *
* PxHYPHIT - PLAYER HIT BY HYPODERMIC HEADER				 *
*                                                                        *
**************************************************************************
P1HYPHIT
	MOVI	P1DATA,A2
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PHYPOHIT
P2HYPHIT
	MOVI	P2DATA,A2
	MOVI	P1DIE,A10
	JRUC	PHYPOHIT

**************************************************************************
*                                                                        *
* DEATH PROCESSES							 *
* A8  = OBLOCK PTR							 *
* A9  = FLAGS								 *
* A10 = PTR TO ANIMATION TAB						 *
* A11 = FRAME NUMBER							 *
*                                                                        *
**************************************************************************
*PLAYER 1 DEATH SEQUENCE
P1DETH
	MOVI	P1BHIT,A0
	MOVK	5,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PDEATH

*PLAYER 2 DEATH SEQUENCE
P2DETH
	MOVI	P1BHIT,A0
	MOVK	5,A1
	MOVI	P2DATA,A2
	MOVI	P1SHAKE,A9
	MOVI	P1DIE,A10
	JRUC	PDEATH
*
*PLAYER 1 HEAD BUTT PROC
P1HEADB
	MOVI	P1BHIT,A0
	MOVK	5,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PHEADBUT
*
*PLAYER 2 HEAD BUTT PROC
P2HEADB
	MOVI	P1BHIT,A0
	MOVK	5,A1
	MOVI	P2DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PHEADBUT
*
*HEAD BUTT ROUTINE
PHEADBUT
	MOVE	*A2(PIRQFLAG),A3,W
	ANDI	MDRIVER|MPASSEN,A3
	JREQ	PDEATH			;JUST DO NORMAL DEATH
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD,A0
	MOVE	A0,*A2(PEXEFLAG),W
	MOVE	A2,A11
	CREATE 	INDPID,ESCAPEJ		;ESCAPE BY WAY OF THE JUMP BUTTON
	SLEEP	3
	DIE	
**************************************************************************
*                                                                        *
* PxKNIFE - PLAYER KNIFE HIT HEADERS					 *
*                                                                        *
**************************************************************************
*PLAYER 1 KNIFE SEQUENCE
P1KNIFE
	MOVI	P1BHIT,A0
	MOVK	10,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PDEATH

*PLAYER 2 KNIFE SEQUENCE
P2KNIFE
	MOVI	P1BHIT,A0
	MOVK	10,A1
	MOVI	P2DATA,A2
	MOVI	P1SHAKE,A9
	MOVI	P1DIE,A10
	JRUC	PDEATH

**************************************************************************
*                                                                        *
* PxBUGGER - BUG BITE PROCESS HEADER					 *
* A9 = AMOUNT OF ENERGY TO SUBTRACT, 32 BITS				 *
*                                                                        *
**************************************************************************
P1BUGGER
	MOVI	P1BHIT,A0	
	MOVE	A9,A1
	MOVI	P1DATA,A2
	CLR	A9
	MOVI	P1DIE,A10
	JRUC	PBUGGER
P2BUGGER
	MOVI	P1BHIT,A0	
	MOVE	A9,A1
	MOVI	P2DATA,A2
	CLR	A9
	MOVI	P1DIE,A10
	JRUC	PBUGGER
**************************************************************************
*                                                                        *
* PxEXPL - PLAYER HIT BY AN EXPLOSION					 *
*                                                                        *
**************************************************************************
*PLAYER 1 EXPLOSION
P1EXPL
	MOVI	P1BHIT,A0
	MOVK	6,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PEXPLODE

*PLAYER 2 EXPLOSION
P2EXPL
	MOVI	P1BHIT,A0
	MOVK	6,A1
	MOVI	P2DATA,A2
	MOVI	P1DIE,A10
	JRUC	PEXPLODE

**************************************************************************
*                                                                        *
* PxROCKER - PLAYER HIT BY SPEEDING ROCKET BOMB				 *
*                                                                        *
**************************************************************************
*PLAYER 1 ROCKET BOMB HIT
P1ROCKER
	MOVI	PEXPSND,A0
	MOVK	8,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PROCKHIT
*
*PLAYER 2 ROCKET BOMB HIT
P2ROCKER
	MOVI	PEXPSND,A0
	MOVK	8,A1
	MOVI	P2DATA,A2
	MOVI	P1DIE,A10
	JRUC	PROCKHIT

**************************************************************************
*                                                                        *
* PxCARHIT - PLAYER HIT BY SPEEDING CAR					 *
*                                                                        *
**************************************************************************
*PLAYER 1 CAR HIT
P1CARHIT
	MOVI	PCAREXP,A0
	MOVK	8,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PCARHIT
*
*PLAYER 2 CAR HIT
P2CARHIT
	MOVI	PCAREXP,A0
	MOVK	8,A1
	MOVI	P2DATA,A2
	MOVI	P1DIE,A10
	JRUC	PCARHIT

**************************************************************************
*                                                                        *
* PxGARBAGE - PLAYER HIT BY A FLYING GARBAGE CAN			 *
*                                                                        *
**************************************************************************
*PLAYER 1 GARBAGE CAN HIT
P1GARBAGE
	MOVI	PGARBSND,A0
	MOVK	1,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PGARBHIT
*
*PLAYER 2 GARBAGE CAN HIT
P2GARBAGE
	MOVI	PGARBSND,A0
	MOVK	1,A1
	MOVI	P2DATA,A2
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10
	JRUC	PGARBHIT

**************************************************************************
*                                                                        *
* PxDUMP - PLAYER HIT BY A FLYING DUMPSTER				 *
*                                                                        *
**************************************************************************
*PLAYER 1 DUMPSTER HIT
P1DUMP
	MOVI	PDUMPHIT,A0
	MOVK	10,A1
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	JRUC	PGARBHIT
*
*PLAYER 2 DUMPSTER HIT
P2DUMP
	MOVI	PDUMPHIT,A0
	MOVK	10,A1
	MOVI	P2DATA,A2
	MOVI	P1SHAKE,A9		;POINTER TO BULLET HIT SHAKE FRAMES
	MOVI	P1DIE,A10
	JRUC	PGARBHIT

*
*PLAYER SOUNDS
PEXPSND	.WORD	>F000|EXPLOPRI+1,>10,>8031,>20,>80C9,0 ;EXPLODE & SCREAM
PCAREXP	.WORD	>F000|SPEAKPRI,>A,>8044,>20,>80C9,0 ;CAR THUD WITH SCREAM
PGARBSND .WORD	>F000|SPEAKPRI-1,>10,>8044,>8014,0 ;PLAYER GARBAGE CAN HIT
PDUMPHIT .WORD	>F000|SPEAKPRI|NINTEQ,>18,>8010,>8014,0 ;DUMPSTER HITTING PLAYER

**************************************************************************
*                                                                        *
* PLAYER DEATH PROCESS							 *
* A0 = SOUND TO MAKE							 *
* A1 = # OF HIT POINTS TO TAKE AWAY					 *
* A2 = PLINDX=PLAYER DATA STRUCTURE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
* A9 = SHAKE FRAME TABLE PTR						 *
* A10= DEATH FRAME TABLE PTR						 *
*                                                                        *
**************************************************************************
PDEATH
	MOVE	A8,B1			;KEEP COLLIDING OBJECT PTR HERE			
	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS
	MOVE	A4,A11			;STORE HERE FOR FUN
	
	MOVE	A0,*A13(PDATA),L	;STORE THE SOUND HERE
	MOVE	A1,*A13(PDATA+20H),W	;STORE HIT POINTS

PDEATHMV
	PUSHP	A2			;STACK THE BLOCK POINTER
	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5
	JRNE	PDEATHX			;BR = SOMETHINGS FUNKY
	MOVE	A5,A0
	ANDI	MDRIVER|MPASSEN,A0
	JRNE	PHITINC			;HIT WHILE IN THE CAR

	CALLR	CKLXBND			;CHECK FOR EXCEEDED BOUNDRIES
	JRC	PDEATH3
***	MOVI	[12,0],A0
	MOVE	*B1(OXVEL),B0,L
	JRZ	PDEATH3
	MOVE	B0,A0
	SLL	1,A0	
***	JRNN	PDEATH2
***	NEG	A0
PDEATH2
	CALLA	PPOSADDX		;ADD THIS TO PLAYER POSITION
PDEATH3
	BTST	BDYING,A5
	JRNE	PFLASHD			;BR = JUST FLASH AND MAKE WHOOPY
	SRL	16,A5
	ORI	MDYING,A5		;TURN OFF THE SAFETY
	MOVE	A5,*A2(PEXEFLAG),W

	CALLR	PLAYERON		;MAKE SURE THE PLAYER IS ON

	MOVE	*A2(PIRQFLAG),A6,W
	ANDI	MJUMP1|MJUMP2,A6
	JRNE	PDEATH5			;BR = JUMPING, DON'T STOP ME NOW 
	CALLR	PLSTOP
PDEATH5
	MOVE	A11,A4
	CALLA	PLEGOFF
	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ISSUPP
	JRZ	PDEATH6			;HE'S ALREADY GONE
	CALLA	DELSUPP
PDEATH6
	CLR	A1
	JSRP	FRANIM			;FIRST FRAME
	MOVE	*A13(PDATA),A0,L
	CALLA	ONESND			;SOUND IS OF COURSE SLOWER THAN LIGHT
	MOVK	1,A1
	JSRP	FRANIM			;SHAKE ME BABY
	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ADDSUPP
	MOVE	*A12,A2,L
	CALLR	PLAYERON
	MOVE	*A13(PDATA+20H),A0,W
	CALLA	SUBNNRGY		;SUBTRACT SOME LIFE
	JRC	PBUYINT			;BR = PLAYER'S ENERGY IS DEPLETED 

*
*ENTRYPOINT FOR DEATH ENDER, PxDATA MUST BE FIRST OFF PROCESS STACK
PDEATHOV
	MOVE	*A12,A2,L
	MOVE	*A2(POBJ),A8,L
	MOVE	*A2(PLOBJ),A11,L	;MAKE SURE THESE ARE HERE
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD|MDYING|MDEAD,A0	;GET RID O' THE HOLDUPS
	MOVE	A0,*A2(PEXEFLAG),W
	MOVK	1,A10			;INVINCIBLE FOR 4 TICKS
	MOVE	A2,A9
	MOVE	*A2(PPID),A1,W
	ADDI	PIPID,A1
	MOVI	INVINCNF,A7
	CALLA	GETPRC			;START THE INVINCIBLE PROCESS
	MOVE	A11,A4
	CALLR	PLALIGN			;RE-ALIGN THE BODY PARTS
	CALLR	CKLBADJ			;AND MAKE SURE HE'S IN BOUNDS
	DIE
*
*SOMEKIND OF QUICK DEATH EXIT ON FAILURES
PDEATHX
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD|MDYING|MDEAD,A0	 ;TURN OFF THE HOLD
	MOVE	A0,*A2(PEXEFLAG),W
	DIE
	
**************************************************************************
*                                                                        *
* PHYPOHIT - PLAYER HIT BY HYPODERMIC PROCESS				 *
* A2=PLINDX=PLAYER DATA STRUCTURE					 *
* A10 = PTR TO FINAL DEATH FRAMES					 *
*                                                                        *
**************************************************************************
PHYPOHIT
	MOVE	A10,*A13(PDATA+40H),L
	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS HERE FOR PLSTOP
	MOVE	A4,A11			;KEEP HERE FOR SLEEPS
	PUSHP	A2			;STACK THE BLOCK POINTER
	MOVE	A0,*A13(PDATA+60H),L	;SAVE SOUND CALL
	MOVK	16,A0
	MOVE	A0,*A13(PDATA+32),W

	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5
	JRNE	PDEATHX			;BR = SOMETHINGS FUNKY
	BTST	BDYING,A5
	JRNE	PFLASHD			;BR = JUST FLASH AND MAKE WHOOPY
	MOVE	A5,A0
	ANDI	MDRIVER|MPASSEN,A0
	JRNE	PFLASHD

	SRL	16,A5
	ORI	MDYING,A5		;TURN ON THE SAFETY
	MOVE	A5,*A2(PEXEFLAG),W

	CALLR	PLAYERON

	MOVE	*A13(PDATA+60H),A0,L
	SOUND1	HHITSND			;MAKE THE WEIRDO HYPO SOUND

	MOVE	*A8(OPAL),A4,W
	MOVE	A4,*A13(PDATA),W
	MOVI	0EFEFH,A6
	MOVE	A6,*A8(OCONST),W
	MOVE	A6,*A11(OCONST),W
	MOVK	16,A6			;TAKE AWAY THIS MANY UNITS
PRELOAD
	CLR	A9
	MOVI	PALRAM,A10
PHPALLUP
	CMPI	(NUMPAL*PALRSIZ)+PALRAM,A10
	JRHS	PRELOAD
	PUSHP	A6
	MOVE	*A10,A0,L
	JRNZ	PNEXTPAL		;BR = NEW PALETTE PLEASE
	PULLP	A6
	ADDI	0101H,A9
	ADDI	PALRSIZ,A10
	JRUC	PHPALLUP	
PNEXTPAL
	MOVE	A9,*A8(OPAL),W
	MOVE	A9,*A11(OPAL),W
	MOVE	*A2(PIRQFLAG),A1,W
	ANDI	MJUMP1|MJUMP2|MDRIVER|MPASSEN,A1
	JRNE	PHYPOD1			;BR = JUMPING, DO NOT STOP
	MOVE	A11,A4
	CALLR	PLSTOP

	MOVE	*A2(PEXEFLAG),A1,W
	ORI	MDHOLD,A1
	MOVE	A1,*A2(PEXEFLAG),W	;TURN OFF THE HOLDING FLAG
PHYPOD1
	ADDI	PALRSIZ,A10		;NEXT PALETTE
	ADDI	0101H,A9
	SLEEP	4
	CLR	A0
	MOVE	A0,*A8(OPAL),W
	MOVE	A0,*A11(OPAL),W
	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	ADDK	8,A0	  		;DO A CONSTANT COLOR
	MOVE	A0,*A8(OFLAGS),W
	MOVE	A0,*A11(OFLAGS),W
	SLEEP	2
	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	ADDK	2,A0			;NORMAL CURRENT PALETTE
	MOVE	A0,*A8(OFLAGS),W
	MOVE	A0,*A11(OFLAGS),W
	PULLP	A6
	MOVE	*A12,A2,L
	MOVE	*A2(PEXEFLAG),A1,W
	ANDNI	MDHOLD,A1
	MOVE	A1,*A2(PEXEFLAG),W	;TURN OFF THE HOLDING FLAG
	MOVK	1,A0
	CALLA	SUBNNRGY		;SUBTRACT A LIFE
	JRC	PHDIED			;BR = PLAYER'S LAST LIFE, BUY IN
	DSJ	A6,PHPALLUP
	SOUND1	HHITEND
	MOVE	*A13(PDATA),A4,W
	MOVE	A4,*A8(OPAL),W
	MOVE	A4,*A11(OPAL),W		;RESTORE PROPER PALETTE
	JRUC	PDEATHOV		;THIS DEATH IS DONE
PHDIED
	SOUND1	HHITEND
	MOVE	*A13(PDATA),A4,W
	MOVE	A4,*A8(OPAL),W
	MOVE	A4,*A11(OPAL),W		;RESTORE PROPER PALETTE
	MOVE	*A13(PDATA+40H),A10,L
	JRUC	PBUYINT

**************************************************************************
*                                                                        *
* PLAYER BUG BITE PROCESS						 *
* A0 = SOUND TO MAKE							 *
* A1 = # OF HIT POINTS TO TAKE AWAY (32 BITS)				 *
* A2 = PLINDX=PLAYER DATA STRUCTURE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
* A10= DEATH FRAME TABLE PTR						 *
*                                                                        *
**************************************************************************
PBUGGER
	MOVE	A8,B1			;KEEP COLLIDING OBJECT PTR HERE			
	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS
	MOVE	A4,A11			;STORE HERE FOR FUN
	
	MOVE	A0,*A13(PDATA),L	;STORE THE SOUND HERE
	MOVE	A1,*A13(PDATA+20H),L	;STORE HIT POINTS

	PUSHP	A2			;STACK THE BLOCK POINTER

	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5
	JRNE	PDEATHX			;BR = SOMETHINGS FUNKY
	BTST	BDYING,A5
	JRNE	PFLASHFD		;BR = JUST FLASH AND MAKE WHOOPY
	MOVE	A5,A0
	SRL	16,A5
	ORI	MDYING,A5		;TURN ON THE SAFETY
	MOVE	A5,*A2(PEXEFLAG),W
	ANDI	MDRIVER|MPASSEN,A0
	JREQ	PBUGG0			;FLASH'EM

	MOVE	*A13(PDATA+20H),A0,L
	CALLA	SUBFNRGY		;SUBTRACT SOME LIFE
	JRC	PBUYINT			;BR = PLAYER'S ENERGY IS DEPLETED 
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD|MDYING|MDEAD,A0	;GET RID O' THE HOLDUPS
	MOVE	A0,*A2(PEXEFLAG),W
	DIE
PBUGG0
	MOVE	*A13(PDATA+20H),A0,L
	CALLA	SUBFNRGY		;SUBTRACT SOME LIFE
	JRC	PBUYINT			;BR = PLAYER'S ENERGY IS DEPLETED 
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD|MDYING|MDEAD,A0	;GET RID O' THE HOLDUPS
	MOVE	A0,*A2(PEXEFLAG),W
	MOVE	A11,A4
	CALLR	PLALIGN			;RE-ALIGN THE BODY PARTS
	DIE

**************************************************************************
*                                                                        *
* PLAYER WACKED BY AN EXPLOSION						 *
* A0 = SOUND TO MAKE							 *
* A1 = # OF HIT POINTS TO TAKE AWAY					 *
* A2 = PLINDX=PLAYER DATA STRUCTURE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
* A10 = PTR TO FINAL DEATH ANIMATION					 *
*                                                                        *
**************************************************************************
PEXPLODE
	MOVE	A0,*A13(PDATA),L	;STORE THE SOUND HERE
	MOVE	*A2(PIRQFLAG),A0,W
	BTST	BSWALK,A0
	JREQ	PEXPLOD0
	SRA	1,A1			;HIT/2 FOR SQUAT DUDE
PEXPLOD0
	MOVE	A1,*A13(PDATA+20H),W	;STORE HIT POINTS

	MOVE	A8,B1			;KEEP COLLIDING OBJECT PTR HERE			
	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS
	MOVE	A4,A11			;STORE HERE FOR FUN
	
	PUSHP	A2			;STACK THE BLOCK POINTER
	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5
	JRNE	PDEATHX			;BR = SOMETHINGS FUNKY
*FIGURE IN SOME X VELOCITY
	MOVI	18000H,A0
	CALLA	SRAND
	MOVI	28000H,A1
	ADD	A0,A1
	MOVE	B1,A0
	CALLA	WHICHSID
	JRNC	PEXPLOD1
	NEG	A1
PEXPLOD1
	MOVE	*A8(OXVEL),A3,L
	MOVE	A3,A0
	ADD	A1,A3			;TACK IT ON TO WHAT WE'VE GOT
	MOVE	A3,A1
	ABS	A1
	CMPI	[4,0],A1
	JRLS	PEXPLOD2		;BR = LOWER THAN MAX VEL
	MOVE	A0,A3			;RESTORE PREVIOUS VELOCITY
PEXPLOD2
*CHECK IF PLAYER IS TOO CLOSE TO A SCREEN EDGE, ALWAYS BLOW IN OTHER DIREC.
	MOVE	@NPLYRS,A0,W
	DEC	A0
	JRZ	PEXPLOD4		;ONLY ONE PLAYER, DON'T WORRY
	CALLA	GETANIX			;GET PLAYERS X ANIMATION PNT
	MOVE	@WORLDTLX+16,A1,W
	MOVE	A3,A3
	JRN	PEXPLOD3
	ADDI	512-75,A1
	CMP	A1,A0	
	JRLE	PEXPLOD4
	NEG	A3
	JRUC	PEXPLOD4
PEXPLOD3
	ADDI	50,A1
	CMP	A1,A0
	JRGE	PEXPLOD4
	NEG	A3
PEXPLOD4
	MOVE	A3,*A8(OXVEL),L
	MOVE	A3,*A4(OXVEL),L
*IF YOU ENTER HERE, MAKE SURE PEXEFLAG IS IN A5
*PDATA = SOUND CALL
PEXPLOD5	
	BTST	BDYING,A5
	JRNE	PFLASHD			;BR = JUST SUBTRACT SOME DEATH
	SRL	16,A5
	ORI	MDYING,A5		;TURN OFF THE SAFETY
	MOVE	A5,*A2(PEXEFLAG),W
	CALLR	PLAYERON		;MAKE SURE THE PLAYER IS ON

	MOVE	*A13(PDATA),A0,L
	CALLA	ONESND			;LET'S MAKE SOME NOISE

	MOVE	@PUPDATE,A1,W
	MOVK	1,A0
	MOVE	A0,@PUPDATE,W
	MOVE	*A2(PIRQFLAG),A6,W
	ANDNI	MJUMP1|MJUMP2,A6	;OUT OF JUMP MODE BUDDY
	MOVE	A6,*A2(PIRQFLAG),W
	MOVE	A1,@PUPDATE,W

	JSRP	PFLYNDIE

	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ADDSUPP
	MOVE	*A12,A2,L
	CALLR	PLAYERON
	MOVE	*A13(PDATA+20H),A0,W
	CALLA	SUBNNRGY		;SUBTRACT SOME LIFE
	JRC	PBUYINT			;BR = PLAYER'S ENERGY IS DEPLETED 
	JRUC	PDEATHOV

**************************************************************************
*                                                                        *
* PLAYER SUCKED A ROCKET						 *
* A0 = SOUND TO MAKE							 *
* A1 = # OF HIT POINTS TO TAKE AWAY					 *
* A2 = PLINDX=PLAYER DATA STRUCTURE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
* A10 = PTR TO FINAL DEATH ANIMATION					 *
*                                                                        *
**************************************************************************
PROCKHIT
	MOVE	A0,*A13(PDATA),L	;STORE THE SOUND HERE
	MOVE	A1,*A13(PDATA+20H),W	;STORE HIT POINTS

	MOVE	A8,A0			;KEEP COLLIDING OBJECT PTR HERE			
	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS
	MOVE	A4,A11			;STORE HERE FOR FUN
	
	PUSHP	A2			;STACK THE BLOCK POINTER
	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5
	JRNE	PDEATHX			;BR = SOMETHINGS FUNKY

	MOVE	*A0(OXVEL),A1,L
	SRA	1,A1			;DIVIDE DOWN, JUST FOR KICKS
	MOVE	A1,*A8(OXVEL),L
	MOVE	A1,*A11(OXVEL),L
	JRUC	PEXPLOD5		;FINISH UP LIKE A NORMAL EXPLOSION

**************************************************************************
*                                                                        *
* PLAYER HIT BY A GARBAGE CAN						 *
* A0 = SOUND TO MAKE							 *
* A1 = # OF HIT POINTS TO TAKE AWAY					 *
* A2 = PLINDX=PLAYER DATA STRUCTURE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
* A9 = SHAKE FRAME TABLE PTR						 *
* A10 = PTR TO FINAL DEATH ANIMATION					 *
*                                                                        *
**************************************************************************
PGARBHIT
	MOVE	A0,*A13(PDATA),L	;STORE THE SOUND HERE

	MOVE	*A8(OYVEL),A0,L
	JRN	PGARBXX			;CRUISE AGAIN, THIS IS NOT COMING DOWN
	JRZ	PGARBXX			;DEFINITELY NOT COMING DOWN ON US

	SRA	17,A0
	ABS	A0
	ADD	A0,A1			;EXCACERBATE VIA VELOCITY

	MOVE	A1,*A13(PDATA+20H),W	;STORE HIT POINTS
	CALLA	GETBOTY			;GET THE CANS BOTTOM Y POSITION

	MOVE	A8,A0			;KEEP COLLIDING OBJECT PTR HERE			
	MOVE	A8,B1			;KEEP HERE FOR PDEATH

	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS
	MOVE	A4,A11			;STORE HERE FOR FUN
	
	MOVE	*A11(OYPOS),A5,W
	CMP	A5,A1
	JRGT	PGARBXX			;BR = CAN IS NOT ABOVE THE BELT
	JRUC	PDEATHMV		;FINISH LIKE A BULLET
*
*ENTER HERE TO EXIT THE DEATH ROUTINES WITH NO EFFECT UNDER NORMAL
*CIRCUMSTANCES
PGARBXX
	MOVE	*A2(PFLAGS),A5,L
	BTST	BDYING,A5
	JREQ	PGARBDOFF
	DIE
PGARBDOFF
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD,A0	 ;TURN OFF THE HOLD
	MOVE	A0,*A2(PEXEFLAG),W
	DIE

**************************************************************************
*                                                                        *
* PLAYER TANKED THE CAR							 *
* A0 = SOUND TO MAKE							 *
* A1 = # OF HIT POINTS TO TAKE AWAY					 *
* A2 = PLINDX=PLAYER DATA STRUCTURE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
* A10 = PTR TO FINAL DEATH ANIMATION					 *
*                                                                        *
**************************************************************************
PCARHIT
	MOVE	A0,*A13(PDATA),L	;STORE THE SOUND HERE
	MOVE	A1,*A13(PDATA+20H),W	;STORE HIT POINTS
	MOVE	A10,B1
	MOVE	A2,B0
	MOVE	A8,A10			;KEEP COLLIDING OBJECT PTR HERE			
	MOVE	A8,A0
	MOVE	*A2(POBJ),A8,L		;NEED OBJECT BLOCK PTR
	MOVE	*A2(PLOBJ),A4,L		;GET THE LEGS
	MOVE	A4,A11			;STORE HERE FOR FUN
	CALLA	GCUBEVEL
	MOVE	A2,A5
	MOVE	B0,A2
	MOVE	B1,A10
	OR	A1,A5
	JRZ	PGARBXX			;NOT A VALID SLAM

	PUSHP	A2			;STACK THE BLOCK POINTER
	MOVE	*A2(PFLAGS),A5,L
	BTST	BBUYIN,A5
	JRNE	PDEATHX			;BR = SOMETHINGS FUNKY

	MOVE	*A0(OXVEL),A1,L
	SRA	1,A1			;DIVIDE DOWN, JUST FOR KICKS
	MOVE	A1,*A8(OXVEL),L
	MOVE	A1,*A11(OXVEL),L
	JRUC	PEXPLOD5		;FINISH UP LIKE A NORMAL EXPLOSION

*
*PLAYER 1 BUY IN START
P1BUYINT
	MOVI	P1DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	PUSHP	A2
	MOVE	*A2(POBJ),A8,L
	MOVE	*A2(PLOBJ),A11,L
	JRUC	PBUYINT
*
*PLAYER 2 BUY IN START
P2BUYINT
	MOVI	P2DATA,A2		;GET THIS GUYS DATA BLOCK
	MOVI	P1DIE,A10		;POINTER TO FINAL DEATH FRAMES
	PUSHP	A2
	MOVE	*A2(POBJ),A8,L
	MOVE	*A2(PLOBJ),A11,L
	JRUC	PBUYINT
**************************************************************************
*                                                                        *
* PBUYINT - PROCESS FOR PLAYER BUYIN TIME				 *
* A8 = PTR TO PLAYER EL-TORSO OBJECT					 *
* A10 = POINTER TO FINAL DEATH FRAMES					 *
* A11 = POINTER TO PLAYER LEG OBJECT					 *
* A12 = POINTS TO PROCESS STACK POSITION OF CORRECT PDATA POINTER	 *
*                                                                        *
**************************************************************************
PBUYINT
	MOVE	@GAMSTATE,A0,W
	CMPI	INPLAY,A0
	JREQ	PBUYINT1
	CMPI	INAMODE,A0
	JREQ	PBUYINT1
	SLOOP	2,PBUYINT
*GIVE PLAYER SOME TIME FLASH FOR BUY-IN, THEN KILL HIM
PBUYINT1
	MOVE	*A12,A2,L
	MOVE	*A2(PPID),A14
	MOVE	A14,A0
	MOVI	0FF00H,A1		;MASK
	CALLA	KILALL			;KILL ALL PLAYER PROCESSES	

	MOVE	@GAMSTATE,A0,W
	CMPI	INAMODE,A0
	JRNE	PBUYINT0		;BR = NOT IN A-MODE, NORMAL DEC

	SWAP	A2,A11
	MOVE	A14,A1			;RE-START MESSAGE PROC FOR SURE
	ADDI	PMPID,A1
	MOVI	PRESCONT,A7	
	CALLA	GETPRC
	SWAP	A2,A11
	JRUC	PBUYAMOD

PBUYINT0
	MOVE	*A2(PEXEFLAG),A0,W
	ORI	MINVINC,A0		;MAKE SURE HE IS INVINCIBLE
	MOVE	A0,*A2(PEXEFLAG),W
	
	MOVE	*A2(PLIVES),A0,W
	DEC	A0
	JRLE	POUTO

	MOVI	25H,A1
	CALLA	SCORE			;25 FOR DYING

PBUYAMOD
	MOVE	*A2(PEXEFLAG),A0,W
	ORI	MDHOLD|MDYING|MDEAD,A0	;HOLD THIS GUY UP MAN
	MOVE	A0,*A2(PEXEFLAG),W

	CLR	A3
	MOVE	A3,*A2(PSWTCH),L	;CLEAR ANY LATCHED SWITCHES

	MOVE	*A2(PIRQFLAG),A3,L	
	ANDI	MDRIVER|MPASSEN,A3
	JREQ	PBUYDOK		;BR = NOT IN CAR

	JSRP	PFLYNDIE	;FLAIL HIM OUT OF THE CAR
PBUYDOK
	MOVE	A11,A4
*MAKE THE PLAYER DIE
	CALLA	PLEGOFF
	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ISSUPP
	JRZ	PBUYLNS			;THE LEGS ARE ALREADY MISSING
	CALLA	DELSUPP
PBUYLNS
	MOVK	1,A1
	MOVE	A10,A9
	JSRP	FRANIM			;MAKE HIM DIE

	MOVI	60/5,A6			;WAIT TIME
PBUYD3
	MOVE	*A8(OYVEL),A0,L
	JRZ	PBUYD4
	MOVE	*A8(OZVEL),A1,L
	CMP	A1,A0
	JREQ	PBUYD4
	PUSHP	A6
	SLEEP	5
	PULLP	A6
	DSJS	A6,PBUYD3
PBUYD4
	MOVE	A11,A4
	CALLR	PLSTOP
****	MOVE	*A8(OSHAD),A0,L
****	JRZ	PBUYD4A
****	MOVE	*A0(OFLAGS),A1,W
****	SRL	4,A1
****	SLL	4,A1
****	MOVE	A1,*A0(OFLAGS),W
****PBUYD4A
****	MOVE	A8,A0
****	CALLA	SETZPOS			;RESET ZPOSITION FOR GOOD LOOKS
	MOVE	A6,A6
	JRZ	PBUYD6			;BR = NO WAIT TIME LEFT
PBUYD5
	PUSHP	A6
	SLEEP	5
	PULLP	A6
	DSJS	A6,PBUYD5
PBUYD6
	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ADDSUPP
	MOVE	*A12,A2,L
	CALLR	PLAYERON

	CALLA	SUBLIFE			;TAKE THIS AWAY...
	MOVI	IENERGY,A0
	SLL	16,A0
	MOVE	A0,*A2(PENERGY),L
	CALLA	OUTENRGY
	CALLR	STARTINV
	CLR	A0
	MOVE	A0,*A2(PSWTCH),W

	MOVE	@PUPDATE,A1,W
	MOVK	1,A0
	MOVE	A0,@PUPDATE,W
	MOVE	*A2(PIRQFLAG),A6,W
	ANDNI	MJUMP1|MJUMP2,A6	;OUT OF JUMP MODE BUDDY
	MOVE	A6,*A2(PIRQFLAG),W
	MOVE	A1,@PUPDATE,W
	JRUC	PDEATHOV

*PLAYER IS OUT OF ALL HIS WARES
POUTO
	CALLA	SUBLIFE			;FORMALITIES

	MOVE	*A2(PEXEFLAG),A1,W
	ORI	MBUYIN,A1
	MOVE	A1,*A2(PEXEFLAG),W	;FLAG THAT IT'S BUY IN TIME

	MOVE	A11,B2
	MOVE	A2,A11			;PASS PLAYER DATA STRUCTURE
	MOVE	A14,A1
	ADDI	PMPID,A1
	MOVI	PRESCONT,A7	
	CALLA	GETPRC
	MOVE	B2,A11

	MOVE	*A2(PBUYINS),A1,W	;BUYIN ALLOWED
	JRZ	PDEATHCT		;I SAY WE KILL HIM!
	DEC	A1
	MOVE	A1,*A2(PBUYINS),W

	MOVE	*A2(PEXEFLAG),A1,W
	ANDNI	MDHOLD|MDYING,A1
	MOVE	A1,*A2(PEXEFLAG),W	;FLAG THAT IT'S BUY IN TIME

	MOVI	EBAITPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL			;KILL THE BAITER PROCESS
	MOVI	PBAITPID,A0
	CALLA	KILALL			;AND THE POSITION DUDES

	MOVE	*A2(PIRQFLAG),A1,W
	ANDI	MDRIVER|MPASSEN,A1
	JRNZ	POUTO1			;DON'T ALIGN THE PLAYER IN THE CAR
	MOVE	A11,A4
	CALLR	PLALIGN
POUTO1
	CALLR	PLAYERON		;MAKE SURE THE PLAYER IS LIT

	MOVE	A14,A1
	ADDI	PFPID,A1
	SWAP	A11,A2
	MOVI	PFLASH2,A7,L
	CALLA	GETPRC			;START THE FLASH PROCESS
	SWAP	A11,A2

	SLEEP	1
*INSERT ADJUSTABLE BUY-IN TIME HERE
	MOVI	210/5,A6		;WAIT TIME/5(PUT ADJUSTABLE HERE)
PBUYIWT1
	PUSHP	A6
	SLEEP	5
	PULLP	A6
	MOVE	*A12,A2,L
	MOVE	*A2(PENERGY),A0,L
	JRGT	PBUYINOV		;BR = HE GOT SOME MORE LIFE
	DSJS	A6,PBUYIWT1
*
*MAKE PLAYER DIE IN A REALLY BIG WAY
PDEATHCT
	MOVI	25H,A1
	CALLA	SCORE			;25 FOR DYING

	MOVE	*A2(PEXEFLAG),A0,W
	ORI	MDEAD|MDHOLD|MDYING,A0		;TURN ON THE DEAD FLAG
	MOVE	A0,*A2(PEXEFLAG),W

	CLR	A3
	MOVE	A3,*A2(PSWTCH),L	;CLEAR ANY LATCHED SWITCHES

	MOVE	*A2(PFLAGS),A3,L	
	ANDI	MDRIVER|MPASSEN,A3
	JREQ	PDEATHOK		;BR = NOT IN CAR
	
	JSRP	PFLYNDIE
PDEATHOK
	MOVE	A11,A4			;GOT TO HAVE THIS MAAHN
	CALLA	PLEGOFF
	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ISSUPP
	JRZ	PBUYINT2		;BR = ALREADY OFF YOU NIT WIT
	CALLA	DELSUPP
PBUYINT2
	MOVK	1,A1
	MOVE	A10,A9
	JSRP	FRANIM			;MAKE HIM DIE

	MOVI	30/5,A6			;WAIT TIME
PBUYINT3
	MOVE	*A8(OYVEL),A0,L
	JRZ	PBUYINT4
	MOVE	*A8(OZVEL),A1,L
	CMP	A1,A0
	JREQ	PBUYINT4
	PUSHP	A6
	SLEEP	5
	PULLP	A6
	DSJS	A6,PBUYINT3
PBUYINT4
	MOVE	A11,A4
	CALLR	PLSTOP
****	MOVE	*A8(OSHAD),A0,L
****	JRZ	PBUYINT5
****	MOVE	*A0(OFLAGS),A1,W
****	SRL	4,A1
****	SLL	4,A1
****	MOVE	A1,*A0(OFLAGS),W
****PBUYINT5
****	MOVE	A8,A0
****	CALLA	SETZPOS			;RESET ZPOSITION FOR GOOD LOOKS
	MOVE	A6,A6			;MAKE SURE COUNTER IS NOT ZERO
	JRGT	PBUYIWT2
	MOVK	1,A6
PBUYIWT2
	PUSHP	A6
	SLEEP	5
	PULLP	A6
	MOVE	*A12,A2,L
	MOVE	*A2(PENERGY),A0,L
	JRLE	PBUYIWT3		;BR = HE'S STILL OUT OF LIFE

	MOVE	A11,A0
	MOVI	PLAYERS,A1
	CALLA	ADDSUPP
	CALLR	PLAYERON
	CLR	A0
	MOVE	A0,*A2(PSWTCH),W	;BLOW OUT THE SWITCHES
	JRUC	PBUYINOV
PBUYIWT3
	DSJS	A6,PBUYIWT2

	MOVE	*A2(PPID),A0
	ADDI	PFPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL			;KILL THE PLAYER FLASH

	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	ORI	DMAWNZ,A0		;NORMAL STUFF MAAHN
	MOVE	A0,*A8(OFLAGS),W	;MAKE SURE WE'RE NORMAL

	MOVE	@NPLYRS,A0,W
	DEC	A0
	JRNZ	PBUYIWT4		;BR = THIS IS NOT THE LAST PLAYER
	MOVE	A2,A10
	MOVE	*A2(PBUYINS),A0,W
	JRNZ	PBUYBUY			;MORE BUY-IN ALLOWED

PBUYLPLP
	CREATE	BUYINPID,BUYINLP	;CREATE BUYIN LOOP WINDOW	
	JRNZ	PBUYIWT4
	SLOOP	4,PBUYLPLP
	
PBUYBUY
	CREATE	BUYINPID,BUYINWIN	;CREATE BUYIN WINDOW	
	JRNZ	PBUYIWT4
	SLOOP	4,PBUYBUY
PBUYIWT4
*WAIT ON BUYIN MESSAGE TO CRUISE
	MOVI	BUYINPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP
	JRZ	PBUYIWT5		;BR = BUY IN IS DONE
	SLOOP	1,PBUYIWT4
PBUYIWT5
	MOVE	*A12,A2,L		;GET THAT DOGGONE PLINDX
	MOVE	A11,A0
	CALLA	DELSOBJ
	CLR	A0
	MOVE	A0,*A2(PLOBJ),L		;FREE UP THE LEGS
	MOVE	A0,*A13(PROCID),W	;CLEAR I.D.

	CALLA	PDELETE			;DELETE THIS PLAYER
	JAEQ	GAMEOVER		;BR = LAST PLAYER, GET OUTTA TOWN
	DIE				;CIAO

*BUY-IN GETS TRASHED BY ENERGY EARNING
PBUYINOV
	MOVE	A11,B0
	MOVE	*A2(PPID),A0,W		;GET THE BASE I.D.
	MOVI	0FF00h,A1
	CALLA	KILALL			;KILL ALL PLAYER SUBORDINATES

	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD|MDYING|MBUYIN|MDEAD|MINVINC,A0	;TURN OFF THIS BUY-IN GARBAGE
	MOVE	A0,*A2(PEXEFLAG),W	

	MOVE	A2,A11
	SRL	16,A1
	SLL	16,A1
	ADDI	PMLPID,A1
	MOVI	CLOSCALL,A7
	CALLA	GETPRC

*RE-UPDATE STATUS AREA FOR THIS PLAYER TO CAN START MESSAGES
	CALLA	UPDSL

	MOVE	B0,A11
	MOVE	*A8(OFLAGS),A0,W
	SRL	4,A0
	SLL	4,A0
	ORI	DMAWNZ,A0		;NORMAL STUFF MAAHN
	MOVE	A0,*A8(OFLAGS),W	;MAKE SURE WE'RE NORMAL
	MOVE	A0,*A11(OFLAGS),W
	CALLR	CKLBADJ
	DIE

**************************************************************************
*                                                                        *
* ISCHOP - IS THIS OBJECT THE CHOPPER?					 *
* A1 = PTR TO THE OBJECT						 *
* RETURNS:								 *
* 	Z BIT SET(EQ) = YES						 *
* 	Z BIT CLR(NE) = NO						 *
*                                                                        *
**************************************************************************
ISCHOP
	MMTM	SP,A0,A1
	MOVE	@PLAYCAR,A1,L		;GET THE CAR POINTER
	JRZ	ISCHOPX
	MOVE	*A1(OID),A0,W
	CMPI	TRAN2OID,A0		;COMPARE TO THE CHOPPER I.D.	
ISCHOPX
	MMFM	SP,A0,A1
	RETS
	
**************************************************************************
*                                                                        *
* PHITINC - PLAYER HIT BY SOMETHING WHILE IN CAR.			 *
* A2 = PLINDX								 *
* A8 = POBJ								 *
* A11= PLOBJ								 *
* PDATA = PTR TO SOUND							 *
* PDATA+32 = # OF HITS FOR THIS DUDE					 *
*                                                                        *
**************************************************************************
PHITINC
	MOVE	*A2(PFLAGS),A5,L
	BTST	BDYING,A5
	JRNE	PFLASHD
	MOVE	A5,A0
	SRL	16,A0
	ORI	MDYING,A0
	MOVE	A0,*A2(PEXEFLAG),W	;SET THE DYING FLAG
	PUSHP	A2
	MOVE	*A13(PDATA),A0,L
	CALLA	ONESND			;SOUND IS OF COURSE SLOWER THAN LIGHT
	BTST	BSITIN,A5
	JRNE	PHITINA			;NO ANIMATIONS FOR THIS, JUST FLASH
	BTST	BPASSEN,A5
	JREQ	PDHITINC		;BR = MUST HAVE BEEN THE DRIVER

	CALLR	ISCHOP			;RIDING IN THE CHOPPER?
	JRNE	PHITINPP		;BR = NO
	MOVI	PHELPHIT,A9
	JRUC	PHITINCA
PHITINPP
	MOVI	PPASSHIT,A9
	JRUC	PHITINCA

PDHITINC
	CALLR	ISCHOP			;RIDING IN THE CHOPPER?
	JRNE	PHITINPD		;BR = NO
	MOVI	PPILOHIT,A9
	JRUC	PHITINCA
PHITINPD
	MOVI	PDRIVHIT,A9

PHITINCA
	MOVK	1,A1
	JSRP	FRANIM			;ANIMATE THIS
PHITINA
	MOVE	*A12,A2,L
	MOVE	*A13(PDATA+32),A0,W
	CALLA	SUBNNRGY		;SUBTRACT SOME SHIT
	JRC	PBUYINT
	MOVE	*A2(PEXEFLAG),A0,W
	ANDNI	MDHOLD|MDYING|MDEAD,A0	;GET RID O' THE HOLDUPS
	MOVE	A0,*A2(PEXEFLAG),W
	DIE

**************************************************************************
*                                                                        *
* PFLASHD - PLAYER FLASH AND SUBTRACT FOR MULTI-HITS			 *
* A2 = PLINDX								 *
* A8 = POBJ								 *
* A11= PLOBJ								 *
* PDATA = PTR TO SOUND							 *
* PDATA+32 = # OF HITS FOR THIS DUDE					 *
*                                                                        *
**************************************************************************
PFLASHD
	MOVI	INDPID,A0
	MOVE	A0,*A13(PROCID),W	;NONE SHALL PASS
	MOVE	*A13(PDATA+32),A0,W
	CALLA	SUBNNRGY		;SUBTRACT SOME SHIT

***	MOVI	0FFFFH,A3
***	MOVE	A3,*A8(OCONST),W
***	MOVE	A3,*A11(OCONST),W
***	MOVI	2,A9
***	PUSHP	A2
***PFLASHL
***	CALLR	PLAYERCON		;TURN CONSTANT ON
***	SLEEP	3
***	MOVE	*A12,A2,L
***	CALLR	PLAYERON
***	SLEEP	2
***	MOVE	*A12,A2,L
***	DSJS	A9,PFLASHL

	DIE

**************************************************************************
*                                                                        *
* PFLASHD - PLAYER MULTIPLE HIT ROUTINE, WITH FRACTIONAL ENERGY		 *
* A2 = PLINDX								 *
* A8 = POBJ								 *
* A11= PLOBJ								 *
* PDATA = PTR TO SOUND							 *
* PDATA+32 = # OF HITS FOR THIS DUDE (32 BITS)				 *
*                                                                        *
**************************************************************************
PFLASHFD
	MOVI	INDPID,A0
	MOVE	A0,*A13(PROCID),W	;NONE SHALL PASS
	MOVE	*A13(PDATA+32),A0,L
	CALLA	SUBFNRGY		;SUBTRACT SOME SHIT
	DIE

**************************************************************************
*                                                                        *
* PLAYER COLLISION ROUTINES						 *
*                                                                        *
**************************************************************************
*
*PLAYER 1 HIT BY A BULLET
*A0 = POINTER TO PLAYER OBJECT
*A8 = PTR TO BULLET
P1COLL0	MOVI	P1DATA,A2
	JRUC	BULLHIT
*
*PLAYER 2 HIT BY A BULLET
*A0 = POINTER TO PLAYER OBJECT
*A8 = PTR TO BULLET
P2COLL0	MOVI	P2DATA,A2
**************************************************************************
*                                                                        *
* BULLHIT - CALL TO MAKE A PLAYER BULLET EFFECT				 *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
BULLHIT
	MMTM	SP,A0,A1,A3,A7,A9
	CMPI	P1DATA,A2
	JRNE	BULLHIT2
	MOVI	P1PID|PDPID,A1
	MOVI	P1DETH,A7
	JRUC	PCOLL0
BULLHIT2
	MOVI	P2PID|PDPID,A1
	MOVI	P2DETH,A7
	JRUC	PCOLL0	

**************************************************************************
*                                                                        *
* HEADBUTT - CALL TO TAKE A HEAD BUTT FROM DUMPSTER MAHN		 *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
HEADBUTT
	MMTM	SP,A0,A1,A3,A7,A9
	CMPI	P1DATA,A2
	JRNE	HEADBUT2
	MOVI	P1PID|PDPID,A1
	MOVI	P1HEADB,A7
	JRUC	PCOLL0
HEADBUT2
	MOVI	P2PID|PDPID,A1
	MOVI	P2HEADB,A7
	JRUC	PCOLL0	

**************************************************************************
*                                                                        *
* KNIFEHIT - CALL TO MAKE A PLAYER KNIFE HIT EFFECT			 *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
KNIFEHIT
	MMTM	SP,A0,A1,A3,A7,A9
	CMPI	P1DATA,A2
	JRNE	KNIFHIT2
	MOVI	P1PID|PDPID,A1
	MOVI	P1KNIFE,A7
	JRUC	PCOLL0
KNIFHIT2
	MOVI	P2PID|PDPID,A1
	MOVI	P2KNIFE,A7
	JRUC	PCOLL0	
**************************************************************************
*                                                                        *
* BUGBITE - CALL TO BITE THE PLAYER					 *
* A0 = 32 BIT AMOUNT OF ENERGY TO TAKE AWAY [INTEGER,FRACTION]		 *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
BUGBITE
	MMTM	SP,A0,A1,A3,A7,A9
	MOVE	A0,A9
	CMPI	P1DATA,A2
	JRNE	BUGBITE2
	MOVI	P1PID|PDPID,A1
	MOVI	P1BUGGER,A7
	JRUC	PCOLL0
BUGBITE2
	MOVI	P2PID|PDPID,A1
	MOVI	P2BUGGER,A7
	JRUC	PCOLL0	
	
*
*PLAYER 1 HIT BY A HYPODERMIC NEEDLE
*A0 = POINTER TO PLAYER OBJECT
*A8 = PTR TO BULLET
P1COLLHY
	MOVI	P1DATA,A2
	JRUC	HYPOHIT
*
*PLAYER 2 HIT BY A HYPODERMIC NEEDLE
*A0 = POINTER TO PLAYER OBJECT
*A8 = PTR TO BULLET
P2COLLHY
	MOVI	P2DATA,A2
**************************************************************************
*                                                                        *
* HYPOHIT - CALL TO MAKE A PLAYER HYPO EFFECT				 *
* A2 = PLINDX								 *
*                                                                        *
**************************************************************************
HYPOHIT
	MMTM	SP,A0,A1,A3,A7,A9
	CMPI	P1DATA,A2
	JRNE	HYPOHIT2
	MOVI	P1PID|PDPID,A1
	MOVI	P1HYPHIT,A7
	JRUC	PCOLL0
HYPOHIT2
	MOVI	P2PID|PDPID,A1
	MOVI	P2HYPHIT,A7
	JRUC	PCOLL0	
**************************************************************************
*                                                                        *
* PLAYER HIT BY EXPLOSION ROUTINES					 *
*                                                                        *
**************************************************************************
PEXPL1
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P1PID|PDPID,A1
	MOVI	P1DATA,A2
	MOVI	P1EXPL,A7
	JRUC	PCOLL0

PEXPL2
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P2PID|PDPID,A1
	MOVI	P2DATA,A2
	MOVI	P2EXPL,A7
	JRUC	PCOLL0

**************************************************************************
*                                                                        *
* PLAYER HIT BY ROCKET BOMB ROUTINES					 *
*                                                                        *
**************************************************************************
PROCK1
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P1PID|PDPID,A1
	MOVI	P1DATA,A2
	MOVI	P1ROCKER,A7
	JRUC	PCOLL0

PROCK2
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P2PID|PDPID,A1
	MOVI	P2DATA,A2
	MOVI	P2ROCKER,A7
	JRUC	PCOLL0

**************************************************************************
*                                                                        *
* PLAYER HIT BY ROCKET BOMB ROUTINES					 *
*                                                                        *
**************************************************************************
PCARHIT1
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P1PID|PDPID,A1
	MOVI	P1DATA,A2
	MOVI	P1CARHIT,A7
	JRUC	PCOLL0

PCARHIT2
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P2PID|PDPID,A1
	MOVI	P2DATA,A2
	MOVI	P2CARHIT,A7
	JRUC	PCOLL0

**************************************************************************
*                                                                        *
* PLAYER HIT BY FLYING GARBAGE CAN ROUTINES				 *
*                                                                        *
**************************************************************************
PGARBAGE1
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P1PID|PDPID,A1
	MOVI	P1DATA,A2
	MOVI	P1GARBAGE,A7
	JRUC	PCOLL0

PGARBAGE2
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P2PID|PDPID,A1
	MOVI	P2DATA,A2
	MOVI	P2GARBAGE,A7
	JRUC	PCOLL0

**************************************************************************
*                                                                        *
* PLAYER HIT BY FLYING DUMPSTER ROUTINES				 *
*                                                                        *
**************************************************************************
PDUMP1
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P1PID|PDPID,A1
	MOVI	P1DATA,A2
	MOVI	P1DUMP,A7
	JRUC	PCOLL0

PDUMP2
	MMTM	SP,A0,A1,A3,A7,A9
	MOVI	P2PID|PDPID,A1
	MOVI	P2DATA,A2
	MOVI	P2DUMP,A7
	JRUC	PCOLL0

**************************************************************************
*                                                                        *
* PCOLL0 - PLAYER COLLISION AS OBJECT 0					 *
*	ALL PLAYER HIT ROUTINES MUST USE THIS TO CREATE THE PROCESS	 *
* A1 = I.D. OF PROCESS TO CREATE					 *
* A2 = PTR TO PLAYER DATA STRUCTURE					 *
* A7 = ADDRESS OF PROCESS TO CREATE					 *
* A8 = PTR TO OBJECT THAT HIT PLAYER					 *
*                                                                        *
**************************************************************************
PCOLL0
	MOVE	*A2(PFLAGS),A3,L
	BTST	BINVINC,A3
	JRNE	PCOLLX			;BR = THIS JOKER'S INVINCIBLE
	CALLA	GETPRC			;FIRE OFF THE PROCESS
	SRL	16,A3
	ORI	MDHOLD,A3
	MOVE	A3,*A2(PEXEFLAG),W	;SET THIS TO ADD A WAIT
PCOLLX
	CLR	A0
	INC	A0			;END SCAN
	MMFM	SP,A0,A1,A3,A7,A9
	RETS
*
*PLAYER IN CAR ANIMATIONS
*
*DRIVER HIT
PDRIVHIT
	.LONG	jtdrive4
	.WORD	10
	.LONG	jtdrive1
	.WORD	7
	.LONG	0
PPILOHIT
	.LONG	jrpilohit
	.WORD	10
	.LONG	jrpilot
	.WORD	7
	.LONG	0
*
*PASSENGER HIT
PPASSHIT
	.LONG	jtpassen4
	.WORD	10
	.LONG	jtpassen1
	.WORD	7
	.LONG	0

PHELPHIT
	.LONG	jrhelphit
	.WORD	10
	.LONG	jrhelpas
	.WORD	7
	.LONG	0

*
*PLAYER ANIMATION SCRIPT OFFSET TABLE INDICES
WALKFRM		.EQU	0      	;WALKING SCRIPT(S)
SQTWFRM		.EQU	1	;SQUAT WALK SCRIPT(S)
JUMPFRM		.EQU	2	;JUMPING SCRIPT(S)
STANDLEG	.EQU	3	;STANDING IN PLACE LEG SCRIPT(S)
RESTORSO	.EQU	4	;STANDING IN PLACE TORSO SCRIPT(S)
SQUATLEG	.EQU	5	;SQUATTING IN PLACE LEG SCRIPT(S)
SQTORSO		.EQU	6	;SQUATTING IN PLACE TORSO SCRIPT(S)
SSLFRM		.EQU	7	;STAND REST/FIRE LEGS
SSTFRM		.EQU	8	;STAND REST/FIRE TORSO
SQLFRM		.EQU	9	;SQUAT REST/FIRE LEGS
SQTFRM		.EQU	10	;SQUAT REST/FIRE TORSO
SRBLFRM		.EQU	11	;STAND REST/ROCKET LEGS
SRBTFRM		.EQU	12	;STAND REST/ROCKET TORSO
SQRBLFRM	.EQU	13	;SQUAT REST/ROCKET LEGS
SQRBTFRM	.EQU	14	;SQUAT REST/ROCKET TORSO
DRIVLFRM	.EQU	15	;DRIVING LEG FRAMES
DRIVTFRM	.EQU	16	;DRIVING TORSO FRAMES
PASSLFRM	.EQU	17	;PASSENGER LEG FRAMES
PASSTFRM	.EQU	18	;PASSENGER TORSO FRAMES
DETHFRM		.EQU	19	;DEATH SCRIPT(S)
FRAGFRM		.EQU	20	;FRAGMENT SCRIPT(S)
DRIVFIRE	.EQU	21	;DRIVER FIRING FRAMES
PASSFIRE	.EQU	22	;PASSENGER FIRING FRAMES
JUMPINFR	.EQU	23	;FRAMES FOR JUMPING INTO A CAR
PILOTFRM	.EQU	24	;PILOT LEG AND TORSO FRAMES
HELPASFRM	.EQU	25	;CHOPPER PASSENGER LEG AND TORSO FRAMES
PILOTFIRE	.EQU	26	;PILOT FIRING FRAMES
HELPFIRE	.EQU	27	;CHOPPER PASSENGER FIRING FRAMES
HELJUMP		.EQU	28	;CHOPPER JUMP IN FRAMES

LRFRAME		.EQU	0
UPFRAME		.EQU	1
UPQFRAME	.EQU	2
DNQFRAME	.EQU	3
DNFRAME		.EQU	4
TOFFSET		.EQU	5	;OFFSET FROM LEG FRAMES, TO TORSO
FOFFSET		.EQU	5	;OFFSET FROM NORMAL TORSO TO FIRING TORSO
RBOFFSET	.EQU	5	;OFFSET FROM FIRING TORSO TO ROCKET BOMB TORSO
JTOFFSET	.EQU	5	;OFFSET FROM JUMPING LEGS, TO JUMPING TORSO
JFOFFSET	.EQU	5	;OFFSET FROM NORMAL JUMP TO FIRING JUMP


	.END
