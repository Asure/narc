	.FILE	"NARCBGND.ASM"
	.TITLE	" <<< N  A  R  C  -- BACKGROUND HANDLERS >>>"

**************************************************************************
*                                                                        *
* 	COPYRIGHT (C) 1988 WILLIAMS ELECTRONICS GAMES, INC. 		 *
* 	ALL RIGHTS RESERVED.						 *
*                                                                        *
**************************************************************************

	.OPTION	B,D,L
	.MNOLIST

*	GET THE SYSTEM STUFF
	.INCLUDE	"\video\MPROCEQU.ASM"	;MPROC equates
	.INCLUDE	"\video\DISPEQU.ASM"	;Display processor equates
	.INCLUDE	"\video\GSP.INC"	;GSP assembler equates
	.INCLUDE	"\video\SYS.INC"	;Zunit system equates
	.INCLUDE	"\video\MACROS.HDR"	;Macros, Yeah!
*	LOCAL STUFF
	.INCLUDE	"NARCEQU.ASM"		;NARC Equates
	.INCLUDE	"NARCAUDN.ASM"		;NARC Audit/Adjustment Equates
***	.INCLUDE	"IMGTBL.GLO"		;Image Label Equates
	.INCLUDE	"BGNDTBL.GLO"		;BACKGROUND EQUATES

*
*GLOBALS IN THIS FILE
	.GLOBAL		INITFGND,GOALXFER
*
*EXTERNALS
	.GLOBAL		AUD,AUD1,GET_ADJ,GAMEOTXT,AUDPLWAV,SCRLBIAS
	.GLOBAL		SETCRIMENO,SURVCNT,ADDBUY,CHOPINTR,G_BORDER
	.GLOBAL		GETDOPE,OUTNEXTR

	.BSS	bgndpaltbl,32,1
	.BSS	mod_pos,32,1
	.BSS	PREVWTL,32		;PREVIOUS WORLDTL FOR BBOFSCRN
	.BSS	PREVSTL,32		;PREVIOUS SCRNTL FOR BBOFSCRN
****	.BSS	PREVSLR,32		;PREVIOUS SCRNLR FOR BBOFSCRN
	.BSS	INTRPROC,32		;INTRODUCTION PROC(LOADED IN INITBGND)
	.BSS	DOORINYX,32		;[Y,X] COORD. OF DOOR ENTERED

	.TEXT

**************************************************************************
*                                                                        *
* WAVEINIT - INITIALIZE CURRENT WAVE:					 *
* 		- MAKE BACKGROUND BLOCKS USING WAVE BGND INIT. TABLE	 *
* 		- FIRE OFF ALL PROCESS USING WAVE PROC. INIT. TABLE	 *
* CURRENT WAVE MUST BE INDICATED IN VARIABLE, WAVE.			 *
* IT IS ASSUMED THAT THE DISPLAYON FLAG IS CLEAR WHEN THIS IS CALLED.	 *
* THIS ROUTINE WILL SET THAT FLAG BEFORE FINISHING.			 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
WAVEINIT
	MOVI	INMSU,A0		
	MOVE	A0,@GAMSTATE,W		;FLAG THE NARC 2000 MSU
	CLR	A0
	MOVE	A0,@DISPLAYON,W
	CALLA	DMAQWAIT
	CALLA	CLR_SCRN
	CALLA	MYOINIT
	MOVI	SCORDPYS,A0
	MOVE	A0,@DPYSTRT,W		;HIDE THE SCORE AREA

	calla	SETCRIMENO
	MOVE	@WAVE,A0,W						 
	DEC	A0							 
	JRZ	WAVEI1ST						 
	JSRP	PRECRIM2		;DO A SHORTENED VERSION OF THIS  
	JRUC	WAVEI2							 
WAVEI1ST								 
	JSRP	PRECRIME						 
WAVEI2								 
	MOVK	1,A0							 
	MOVE	A0,@DISPLAYON,W						 
	SLEEP	1
***	SLEEP	30							 
	CREATE	VOXPID,VSCAN		;Start Voice Scanner - Needs cri 
	JSRP	CRIME							 
	JSRP	POSTCRIME		;Needs crimeno			 
	SLEEP	1
***	SLEEP	30							 

	CALLA	WRAMINIT		;INITIALIZE WAVE RAM
	CALLR	WAVEBACK
	MOVI	ININTRO,A0
	MOVE	A0,@GAMSTATE,W
	CALLA	BBINIT
	CALLA	GETWAVE			;SET UP WAVE DIFFICULTY PARAMS
	CALLA	AUDPLWAV		;AUDIT THE PLAYERS

	MOVI	WAVEBGND,A10
	MOVE	@WAVE,A0,W
	DEC	A0		;MAKE WAVE # 0 BASED
	SLL	28,A0		;WAVE ONLY SIGNIFICANT TO 4 BITS RIGHT NOW
	SRL	23,A0
***	SLL	5,A0

	MOVI	BAKSTAKS,A1
	MOVE	A1,@BAKSTAKP,L	;INITIALIZE BACKGROUND STACK POINTER

	MOVI	OBJSTAKS,A1
	MOVE	A1,@OBJSTAKP,L	;INITIALIZE OBJECT STACK POINTER

	MOVE	@NOAUTOE,A14,W
	MOVK	1,A1
	MOVE	A1,@NOAUTOE,W	;DISABLE AUTO-ERASE
	ADD	A0,A10
	MOVE	*A10,A10,L
	CALLA	INITBGND		;INITIALIZE THE CURRENT BACKGROUND
	CLR	A1
	MOVE	A1,@GAMERASE,W		;DEFINITELY NO AUTO-ERASE ON WAVE INIT
	MOVE	A14,@NOAUTOE,W	;RE-ENABLE AUTOERASE		

	MOVE	*A10+,A1,W		;AND THE SCROLL STOPPER 
	MOVE	A1,@GOALCARD,W	
	CALLR	GOALXFER		;TRANSFER GOAL DATA TO RAM BLOCK
	MOVI	GOALDOOR,A14
	CALLR	INITFGND		;INITIALIZE THESE FORE GROUND DITTIES
	CREATE	BGNDPID,BACKINTR

	MOVI	25,A1
	MOVE	A1,@BCCOUNT,W		;BUCKS ALLOWED COLD STARTED
	MOVI	15,A1
	MOVE	A1,@DCCOUNT,W		;DRUGS ALLOWED COLD STARTED
	RETP

**************************************************************************
*                                                                        *
* GOALXFER - TRANSFER GOAL DOOR INIT TABLES TO RAM BUFFER		 *
* A10 = PTR TO PTR TO ROM TABLES					 *
* RETURNS:								 *
* A10 = NEXT WORD IN BACKGROUND INIT TABLE				 *
*                                                                        *
**************************************************************************
GOALXFER
	MMTM	SP,A0,A2,A3
	MOVE	*A10+,A3,L		;GET THE TABLE
	MOVI	GOALDOOR,A2
GOALXAGN
	MOVE	*A3,A0,W
	JRN	GOALXDN
	MOVI	INITSIZE,A0
	SRL	4,A0
GOALXLP
	MOVE	*A3+,*A2+,W
	DSJS	A0,GOALXLP
	JRUC	GOALXAGN
GOALXDN
	MOVE	A0,*A2,W		;TERMINATE RAM TABLE	
	MMFM	SP,A0,A2,A3
	RETS

**************************************************************************
*                                                                        *
* KILLWAVE - KILL CURRENT WAVE STUFF, AND RE-START VITALS		 *
*                                                                        *
**************************************************************************
KILLWAVE
	MMTM	SP,A0,A1,A2
	CALLA	BSTOP
	MOVI	INGAME,A0
	MOVE	A0,@GAMSTATE,W
	CLR	A0
	MOVE	A0,@P1DATA+PSWTCH,L
	MOVE	A0,@P2DATA+PSWTCH,L	;KILL PLAYER CONTROL
	MOVE	A0,@P1CTRL,W
	MOVE	A0,@P2CTRL,W		;AND COMPUTER CONTROL
	MOVI	0FFFFh,A0
	MOVE	A0,@PSWTMP1		;CLEAR PLAYER'S SWITCHES
	CALLA	STOPOBJS		;STOP THEM DAMN OBJECTS
	CLR	A0
	MOVI	0A000h,A1
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT INDIES & WAVERS 
	CALLA	PCONTST			;START CONTINUE PROCS
	SOUND1	MUSICOFF
	MMFM	SP,A0,A1,A2
	RETS

**************************************************************************
*                                                                        *
* WAVEBACK - GET VITALS BACK FOR START OF WAVE				 *
*                                                                        *
**************************************************************************
WAVEBACK
	MMTM	SP,A0,A2,A14
	CLR	A0
	MOVE	A0,@DISPLAYON,W		;TURN OFF DISPLAY PROCESSING
	CALLA	DMAHALT			;STOP THE DMA
	CALLA	MYOINITB
***	CALLA	MYOINIT

*TIME TO RE-INITIALIZE PLAYER 1
	MOVI	P1DATA,A2
	MOVI	P1INITTL,A14
	CALLA	PLWAVEST
*TIME TO RESET PLAYER 2
	MOVI	P2DATA,A2
	MOVI	P2INITT,A14
	CALLA	PLWAVEST
	SOUND1	MUSICOFF
	MMFM	SP,A0,A2,A14
	RETS

**************************************************************************
*                                                                        *
* WAVEEND - WAVE END ROUTINE						 *
*                                                                        *
**************************************************************************
WAVEEND
	MOVI	4000H,A0
	MOVE	A0,A1
	CALLA	EXISTP			;WAVE END WAIT?
	JRZ	WAVEESTR		;BR = NO
	SLOOP	1,WAVEEND		;GIVE THEM TIME TO COMPLETE
WAVEESTR
	MOVK	1,A0
	MOVE	A0,@PUPDATE,W
	CALLA	KILLWAVE
	SOUND1	ALLOFF
	SOUND1	YAMOFF
	SOUND1	MUSICOFF
	SLEEP	2
	SOUND1	WAVESND			;WAVE END SOUND

	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTOERASE

	MOVI	2000H,A9
	CREATE	SKYPID,SKYDOWN
	
	MOVE	@WORLDTLY+16,A11,W
	MOVE	@UNIVENDY,A10,W
	SUB	A11,A10
	MOVE	A10,A9
	SLL	16,A10
	ADDI	400,A9
	SLL	16,A9			;READY TO SCROLL A MUNDO

	CALLA	BONUSCR			;FLIP ON THE BONUS SCREEN
	SLL	16,A11
	ADDXY	A11,A10			;A10 WILL LATER SET WORLD COORDS.
	MOVE	@WORLDTLX+16,A1,W
	MOVX	A1,A10

	MOVK	5,A0			;LOAD SCROLL DOWN RATE							 
	SLL	16,A0
	MOVE	A0,@SCROLLY,L		;SCROLL DOWN 1 SCREEN			 
	SUB	A0,A9			;ONE FRAME BUFFER ZONE	
BONLUP								 
	SLEEP	1							 
	CALLA	GETSCRBY						 
	CMP	A9,A0
	JRLT	BONLUP			;BR = HAVEN'T SCROLLED DOWN 1 SCREEN

	CLR	A0							 
	MOVE	A0,@SCROLLY,L		;STOP IT			 

	MOVY	A10,A0
	SRL	16,A0
	MOVE	A0,@WORLDTLY+16,W
	MOVE	A10,@WORLDTLX+16,W

	SLEEP	2			;MAKE SURE AUTO ERASE CATCHES UP
	CLR	A0
	MOVE	A0,@GAMERASE,W		;TURN OFF GAME AUTO ERASE
	CALLA	AUTOEOFF
	MOVI	BUPDPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL			;KILL THE BACKGROUND UPDATE
	CALLA	SYNCHALF
	CALLA	SYNCFULL
	CLR	A0
	MOVE	A0,@DISPLAYON
	CALLA	DMAQWAIT
	CLR	A0
	MOVI	0A000h,A1
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT INDIES
****	CALLA	MYOINIT			;INITIALIZE OBJECT LIST
	CALLA	OINIT			;JUST INITIALIZE THE OBJECT LIST
	CALLA	PCONTST			;START CONTINUATION FLASHERS

	MOVK	1,A0
	MOVE	A0,@DISPLAYON
*DO BONUS COUNT HERE
	JSRP	WAVBONUS
	SLEEP	25H

****	SOUND1	SOUNDOFF
	CALLA	QSNDRST			;RESET THE SOUND BOARD

	MOVI	08000h,A1
	MOVE	A1,A0
	CALLA	EXISTP			;ARE THERE INDESTRUCTIBLES?
	JRZ	WAVPINIT		;BR = NO, RE-INITIALIZE THE PROCESSES
	CLR	A0
	CALLA	KILALL
	JRUC	WAVENEXT
*MAJOR PROCESS SYSTEM RESET HERE
WAVPINIT
	MOVE	*A13(PROCID),A1,W
	CALLA	PINIT
	MOVI	WAVENEXT,A7
	MOVI	STCKST,SP,L		;RESET THE SYSTEM STACK
	CALLA	GETPRC			;GET THE PROCESS	
	JAUC	MAINLP			;AND DO SOME EXEC LOOP SHIT
*NOW CONTINUE TO THE NEXT WAVE
WAVENEXT
	CLR	A0
	MOVE	A0,@PUPDATE,W		;RE-START PLAYER UPDATE
	MOVE	@WAVE,A0,W
	INC	A0
	MOVE	A0,@WAVE,W	;NEXT WAVE
	JSRP	WAVEINIT	;INITIALIZE THE WAVE BABY
	CALLA	COLRSTRT	;START THE COLORS
	DIE								 

**************************************************************************
*                                                                        *
* GAMEEND - END OF GAME ROUTINE, UGH					 *
*                                                                        *
**************************************************************************
GAMEEND
	MOVI	4000H,A0
	MOVE	A0,A1
	CALLA	EXISTP			;WAVE END WAIT?
	JRZ	GAMEESTR		;BR = NO
	SLOOP	1,GAMEEND		;GIVE THEM TIME TO COMPLETE
GAMEESTR
	CALLA	KILLWAVE
	SOUND1	ALLOFF
	SOUND1	YAMOFF
	SOUND1	MUSICOFF

	AUDITCNT AUDFINI,NPLYRS

	SLEEP	2
	SOUND1	WAVESND			;WAVE END SOUND

	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTOERASE

	MOVI	2000H,A9
	CREATE	SKYPID,SKYDOWN
	
	MOVE	@WORLDTLY+16,A11,W
	MOVE	@UNIVENDY,A10,W
	SUB	A11,A10
	MOVE	A10,A9
	SLL	16,A10
	ADDI	400,A9
	SLL	16,A9			;READY TO SCROLL A MUNDO

	CALLA	BONUSCR			;FLIP ON THE BONUS SCREEN
	SLL	16,A11
	ADDXY	A11,A10			;A10 WILL LATER SET WORLD COORDS.
	MOVE	@WORLDTLX+16,A1,W
	MOVX	A1,A10

	MOVK	5,A0			;LOAD SCROLL DOWN RATE							 
	SLL	16,A0
	MOVE	A0,@SCROLLY,L		;SCROLL DOWN 1 SCREEN			 
	SUB	A0,A9			;ONE FRAME BUFFER ZONE	
GEBONLUP								 
	SLEEP	1							 
	CALLA	GETSCRBY						 
	CMP	A9,A0
	JRLT	GEBONLUP		;BR = HAVEN'T SCROLLED DOWN 1 SCREEN

	CLR	A0							 
	MOVE	A0,@SCROLLY,L		;STOP IT			 

	MOVY	A10,A0
	SRL	16,A0
	MOVE	A0,@WORLDTLY+16,W
	MOVE	A10,@WORLDTLX+16,W

	SLEEP	2			;MAKE SURE AUTO ERASE CATCHES UP
	CLR	A0
	MOVE	A0,@GAMERASE,W		;TURN OFF GAME AUTO ERASE
	CALLA	AUTOEOFF
	MOVI	BUPDPID,A0
	CLR	A1
	NOT	A1
	CALLA	KILALL			;KILL THE BACKGROUND UPDATE
	CALLA	SYNCHALF
	CALLA	SYNCFULL
	CLR	A0
	MOVE	A0,@DISPLAYON
	CALLA	DMAQWAIT
***	CALLA	MYOINIT			;INITIALIZE OBJECT LIST
	CALLA	OINIT
	MOVK	1,A0
	MOVE	A0,@DISPLAYON
*DO BONUS COUNT HERE
	CLR	A0
	MOVE	A0,@P1DATA+PNEXTREP,L
	MOVE	A0,@P2DATA+PNEXTREP,L	;TURN OFF REPLAYS
	MOVI	P1DATA,A2
	CALLA	OUTNEXTR
	MOVI	P2DATA,A2
	CALLA	OUTNEXTR		;CLEAR THE REPLAY WINDOWS
	JSRP	WAVBONUS
	MOVI	INGAMEOV,A0
	MOVE	A0,@GAMSTATE,W		;LET GAME RE-START HAPPEN
	CALLA	ADDBUY			;BUY-IN IS ONCE AGAIN
	CLR	A0
	MOVI	P1DATA,A14
	MOVE	A0,*A14(PSWTCH),L
	MOVE	A0,*A14(POBJ),L
	MOVE	A0,*A14(PLOBJ),L
	MOVI	P2DATA,A14
	MOVE	A0,*A14(PSWTCH),L
	MOVE	A0,*A14(POBJ),L
	MOVE	A0,*A14(PLOBJ),L
	MOVI	0FFFFh,A0
	MOVE	A0,@PSWTMP1		;CLEAR THE SWITCHES
	SLEEP	25H

	CALLA	CLRPLAY

	SOUND1	TUNE6
	MOVI	[SKYTOPOF-1,0],A4
	MOVI	[400,512],A5
	MOVI	16,A6
	CALLA	G_BORDER		;PUT UP THE LINKY BORDER
*PUT OUT CONGRATS
	MOVK	2,A0		;DON'T BLOW YOUR WADSWORTH
	MOVI	0F5F5H,A6
	MOVI	CONGRATXT,A8
	MOVI	[CONGY,256],A9	;POSITION
	MOVI	RD20FONT,A11	;BIG OLD LETTERS
	MOVK	1,A10		;ONE SPACE BETWEEN LETTERS
	JSRP	STRCNRM		;" CONGRATULATIONS! "
	MOVI	RD15FONT,A11	;MEDIUM LETTERS
	MOVI	0F3F3H,A6
	MOVI	[CONGY+30,256],A9	;POSITION
	JSRP	STRCNRM		;"YOU HAVE COMPLETED"
	MOVI	0F5F5H,A6
	MOVI	[CONGY+50,256],A9	;POSITION
	JSRP	STRCNRM		;"THE NARC TRAINING MISSION ..."
	SLEEP	60
	SOUND1	THECROWD
	CLR	A0
	MOVI	0F0F0H,A6
	MOVI	[CONGY+70,256],A9	;POSITION
	JSRP	STRCNRM		;"NICE WORK."
	SLEEP	60
	MOVI	RD20FONT,A11	;BIG LETTERS
	MOVI	0F3F3H,A6
	MOVI	[CONGY+140,256],A9	;POSITION
	JSRP	STRCNRM		;"CONTACT YOUR LOCAL"
	MOVI	[CONGY+180,256],A9	;POSITION
	JSRP	STRCNRM		;"D.E.A RECRUITER."
	SLEEP	350	
****	SOUND1	SOUNDOFF
	AUDITCNT AUDSURV,SURVCNT	;COUNT THE SURVIVES
	JAUC	GAMEDETH		;END IT HERE

CONGY	.EQU	60+SKYTOPOF

CONGRATXT
	.STRING	"CONGRATULATIONS!"
	.BYTE	0
	.STRING	"YOU HAVE COMPLETED"
	.BYTE	0
	.STRING	"THE NARC TRAINING MISSION . . ."
	.BYTE	0
	.STRING	"NICE WORK."
	.BYTE	0
	.STRING	"CONTACT YOUR LOCAL"
	.BYTE	0
	.STRING	"D.E.A. RECRUITER."
	.EVEN
**************************************************************************
*                                                                        *
* INITFGND - INITIALIZE BACKGROUND/FOREGROUND OBJECTS			 *
* A14 = PTR TO FORE LIST						 *
* RETURNS:								 *
* A14 = PTR TO NEXT WORD OAFTER FORE LIST				 *
*                                                                        *
**************************************************************************
INITFGND
	PUSH	A0
IFGNDLP
	MOVE	*A14,A0,W		;INITIALIZE FORE/BACKGROUND OBJECTS
	JRN	IFGNDX			;END OF FORE/BACKGROUND LIST
	CALLR	MAKFBOBJ		
	JRNZ	IFGNDLP			;CREATE WAS O.K.	
	ADDI	INITSIZE,A14		;SKIP TO NEXT
	JRUC	IFGNDLP
IFGNDX
	ADDK	16,A14			;POINT PAST TERMINATOR
	PULL	A0
	RETS

**************************************************************************
*                                                                        *
* INITBGND - INITIALIZE A BACKGROUND					 *
* A10 = PTR TO BACKGROUND INIT TABLE					 *
* RETURNS								 *
* A9 = BACKGROUND X SIZE, 32 BITS					 *
* A10 = NEXT WORD IN BACKGROUND INIT TABLE				 *
*                                                                        *
**************************************************************************
INITBGND
	MMTM	SP,A0,A1,A2,A14

	MOVE	A10,@BGINIT,L

	MOVE	*A10+,A14,L		;GET THE BACKGROUND PRIMARY MODULE LIST
	MOVE	A14,@BAKMODS,L
	MOVE	*A10+,A14,L		;GET THE BACKGROUND SECONDARY MODULE LIST
	MOVE	A14,@BAK2MODS,L

	MOVE	*A10+,A14,L
	CALLR	INITFGND
IBGND6
	MOVE	*A10+,A2,W
	MOVE	A2,@PLYMAX,W
	SUBI	ZORIGIN,A2
	MOVE	A2,@PLZMAX,W
	MOVE	*A10+,A1,W
	MOVE	A1,@PLYMIN,W		;STUFF Y BOUNDRIES
	SUBI	ZORIGIN,A1
	MOVE	A1,@PLZMIN,W		;AND Z BOUNDRIES
	SUB	A1,A2			;A2 = PLAYFIELD Z WIDTH
	SRL	1,A2
	ADD	A1,A2			;A2 = Z MIDLINE OF PLAYFIELD
	MOVE	A2,@PLZMID,W
	MOVE	*A10+,A2,W	
	SUBI	ZORIGIN,A2
	MOVE	A2,@PSZMAX,W
	MOVE	*A10+,A1,W
	SUBI	ZORIGIN,A1
	MOVE	A1,@PSZMIN,W
	SUB	A1,A2			;A2 = STREET Z WIDTH
	SRL	1,A2
	ADD	A1,A2			;A2 = Z MIDLINE OF STREET
	MOVE	A2,@PSZMID,W
	MOVE	*A10+,A1,W		;GET THE CARD DROPPER
	MOVE	A1,@CARDHOLD,W
	MOVE	*A10+,A1,W		;AND THE SCROLL STOPPER 
	MOVE	A1,@XSCROLLS,W	
	MOVE	*A10+,A1,W	
	MOVE	A1,@GAMERASE,W		;SET-UP THE GAMERASE SCHEME

	MOVE	*A10+,A1,W
	MOVE	A1,@SKYCOLOR,W		;GET THE SKY COLOR
	CLR	A1
	MOVE	A1,@IRQSKYE,W

  	MOVE	*A10+,A1,L
	MOVE	A1,@INTRPROC,L		;LOAD THE INTRODUCTION PROCESS

  	MOVE	*A10+,A1,L
	MOVE	A1,@BGNAME,L		;LOAD THE BACKGROUND NAME

	MOVE	*A10+,A1,L		;GET THE WORLD START COORDS
	CLR	A0
	MOVX	A1,A0
	CMPI	7FFFH,A0
	JREQ	INITBSKX		;BR = DON'T STUFF AN X COORDINATE
	SLL	16,A0
	MOVE	A0,@WORLDTLX,L
INITBSKX
	SRL	16,A1
	CMPI	7FFFH,A1
	JREQ	INITBSKY		;BR = DON'T STUFF A Y COORDINATE
	SLL	16,A1
	MOVE	A1,@WORLDTLY,L
INITBSKY
	MOVE	@WORLDTLX+16,A0,W
	MOVE	@WORLDTLY+16,A1,W
	SLL	16,A1
	MOVX	A0,A1
	MOVE	A1,@WORLDTL,L		;SET THIS YOURSELF

	MOVE	*A10+,A1,W
	MOVE	A1,@LOOPWAVE,W		;LOOP BACK WAVE #
	MOVE	*A10+,A1,L
	MOVE	A1,@LOOPBACK,L		;LOOP BACK BACKGROUND
	MOVE	*A10+,A1,L
	MOVE	A1,@LOOPDISP,L		;LOOP BACK DISPATCH

	MOVE	*A10+,A1,W
	MOVE	A1,@SCRLBIAS,W		;GET THE SCROLL BIAS THIS WAVE

	MOVI	GETDOPE,A1
	MOVE	A1,@DOPESYM,L		;SET THE DOPE SYMBOL

	MOVE	@BAKMODS,A0,L
	CALLA	BAK_END
	MOVE	A0,@UNIVENDX,W
	SRL	16,A0
	MOVE	A0,@UNIVENDY,W

	MMFM	SP,A0,A1,A2,A14
	RETS

**************************************************************************
*                                                                        *
* BACKINTR - PROCESS TO INTRODUCE THE NEW BACKGROUND.			 *
* 	SHOULD ONLY BE CREATED AFTER THE BACKGROUND HAS BEEN		 *
* 	INITIALIZED.							 *
*                                                                        *
**************************************************************************
BACKINTR
*SET THE CLIPPING WINDOW TO THE PLAYFIELD MIDPOINT
	MOVI	ININTRO,A0
	MOVE	A0,@GAMSTATE,W
****	MOVI	[360,250],A0		;POINT FROM WHICH TO START THE EXPAND
	MOVI	WSCANEXP,A0		;POINT FROM WHICH TO START THE EXPAND
	MOVE	A0,@SCRNTL,L
	MOVE	A0,@SCRNLR,L		;MAKE THE SCREEN WINDOW A POINT
	MOVE	@BAKMODS,A0,L		;LET'S GET A STARTING WORLD COORD
	ADDK	32,A0
	MOVE	*A0,A0,W
***	MOVE	@UNIVENDX,A0,W
***	NEG	A0
	SLL	16,A0
	MOVE	A0,@WORLDTLX,L
	SRA	1,A0
	MOVE	A0,@BAK2TLX,L

	SLEEP	2		;LET THE KILL CALL PASS
	MOVI	WAVMUSIC,A0	;GET THE WAVE TUNE TABLE
	MOVE	@WAVE,A2,W
	DEC	A2		;ZERO BASE
	SLL	28,A2		;ONLY SIGNIFICANT TO 4 BITS RIGHT NOW
	SRL	23,A2
	ADD	A2,A0
	MOVE	*A0,A0,L
	MOVE	A0,@BGMUSIC,L
	CALLA	ONESND
***	SLEEP	2
***	SOUND1	FADEUP
	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROC ON
	CREATE	BUPDPID,BBOFSCRN	;CREATE THE BACKGROUND UPDATE PROCESS
	MOVI	BGNDIPID,A1
	MOVE	@INTRPROC,A7,L		;GET THE INTRO PROCESS
	CALLA	GETPRC			;CREATE IT
	SLEEP	2
	MOVI	WSCANTLY,A0		;SET UP WORLD COORDS TO MATCH MSU SCRN
	SLL	16,A0
	MOVE	A0,@WORLDTLY,L
	SRA	1,A0
	MOVE	A0,@BAK2TLY,L

*CHECK FOR SPECIAL INTRO WAVES HERE
	MOVE	@WAVE,A0,W
	CMPI	5,A0
	JREQ	BACKSPI
	CMPI	8,A0
	JREQ	BACKSPI
	CMPI	3,A0
	JRNE	BACKNTST
*
*INTRO FOR WAVES WITH NO BUILDINGS, I.E. MUCH TOO MUCH SKY
BACKSPI
	CREATE	BGNDPID,WHIPTHRU	;FAST AND FURIOUS INTRO
	MOVK	1,A11			;WE DON'T WANT TO PUT ANYONE TO SLEEP
	CREATE	BGNDPID,DPYSNORM
	CREATE	BGNDPID,INTREXSC
	MOVK	1,A0
	MOVE	A0,@GAMERASE,W
	JRUC	BACKINTG

BACKNTST
	DEC	A0
	JRZ	BACKISLW		;BR = DO THE SLOW INTRO
*
*INTRO FOR ALL OTHER WAVES AFTER THE FIRST
	CREATE	BGNDPID,WHIPTHRU	;FAST AND FURIOUS INTRO
	MOVK	1,A11			;WE DON'T WANT TO PUT ANYONE TO SLEEP
	CREATE	BGNDPID,DPYSNORM
	CREATE	BGNDPID,INTREXSC
	JRUC	BACKINTG
*
*SLOW INTRO FOR FIRST WAVE
BACKISLW
	CREATE	BGNDPID,WHIPTHRU
	SLEEP	0AH
	MOVK	1,A11
	CREATE	BGNDPID,DPYSNORM	;SLIDE THE SCREEN DOWN USING DPYSTRT
	CREATE	BGNDPID,INTREXSC	;EXPAND SCREEN

BACKINTG
	CALLA	SCORAREA		;OUTPUT THE TOTAL SCORE AREA
	DIE

**************************************************************************
*                                                                        *
* WHIPTHRU - WHIP THRU THE WHOLE BACKGROUND AT AN INCREDIBLE VELOCITY,	 *
* 	   PERHAPS DECELERATING. WHEN THE END IS REACHED THE WORLD	 *
* 	   COORDINATES ARE RESET TO 0,0					 *
*                                                                        *
**************************************************************************
WHIPTHRU
	MOVE	@WORLDTLX,A0,L
	JRGE	WHIPNOT			;NO INTRO STUFF TO HANDLE
	CLR	A2
	JRUC	WHIPT1B
WHIPT1
	CLR	A1
	CALLA	GETSCRRX						 
	SUB	A0,A1							 

	MOVE	@INTRPROC,A0,L
	CMPI	CHOPINTR,A0		;CHECK FOR CHOPPER INTRO
	JRNE	WHIPNRM

*SCROLL FOR CHOPPER INTRO
	CMPI	[10,0],A1
	JRLE	WHIPT2

	MOVE	@SCROLLX,A2,L
	CMPI	[100,0],A1		;LINE TO START SLOW DOWN
	JRGT	WHIPT1B			;BR = O.K. TO STILL SPEED UP

	SUBI	6000H,A2
       	CMPI	[10H,0],A2		;ONLY THIS LOW ON CHOPPER
	JRLT	WHIPT1A			;BR = UNDERFLOW, DON'T STUFF
	JRUC	WHIPT1C
*NORMAL INTRO SCROLL
WHIPNRM
	CMPI	[100,0],A1
	JRLE	WHIPT2

	MOVE	@SCROLLX,A2,L
	CMPI	[694,0],A1		;LINE TO START SLOW DOWN
	JRGT	WHIPT1B			;BR = O.K. TO STILL SPEED UP

	SUBI	6000H,A2
	CMPI	[1,0],A2
	JRLT	WHIPT1A			;BR = UNDERFLOW, DON'T STUFF
	JRUC	WHIPT1C
WHIPT1B
	ADDI	6000H,A2
	CMPI	[23,0],A2
	JRGT	WHIPT1A			;BR = OVERFLOW, DON'T STUFF	
WHIPT1C
	MOVE	A2,@SCROLLX,L		;WHIP IT, WHIP IT GOOD	
WHIPT1A
	SLOOP	1,WHIPT1
WHIPT2
	MOVI	SCRNST,A0
	MOVE	A0,@SCRNTL,L
	MOVI	SCRNEND,A0
	MOVE	A0,@SCRNLR,L
	CREATE	BGNDPID,BSCHKG		;CREATE THE SCROLL CHECKER
	MOVI	P1DATA,A9
	MOVI	P2DATA,A10
	MOVI	060H,A11		;WAIT THIS LONG
WHIPLUP
	SLEEP	1			;LET THE REFRESH HAVE A CRAAAAACK
	MOVE	*A9(POBJ),A8,L
	JRNZ	WHIPCK1V		;BR = PLAYER ONE EXISTS
WHIPCK2V
	MOVE	*A10(POBJ),A8,L		;O.K. SO CHECK PLAYER TWO ONLY
	JRZ	WHIPOUT
	MOVE	*A8(OXVEL),A0,L
	JRZ	WHIPOUT
	DEC	A11
	JRZ	WHIPOUT			;BR =TIME OUT FUCKAH
	JRUC	WHIPLUP
WHIPCK1V
	MOVE	*A8(OXVEL),A0,L		;PLAYER ONE MOVING?
	JRZ	WHIPCK2V		;BR = YES, WAIT SOME MORE	
	DSJS	A11,WHIPLUP	
WHIPOUT
	MOVI	INPLAY,A0
	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES
	MOVK	2,A0
	MOVE	A0,@GAMERASE,W		;TURN ON HALF SCREEN AUTOERASE
	CREATE	MASTERID,MASTERDP	;CREATE MASTER DISPATCH
***	CALLR	DELBB1ST		;<---IPE OUT THE INTRO BACK/FORE OBJECTS
	DIE
*
*COME HERE IF YOU DON'T WANT TO WHIP, JUST WAIT
WHIPNOT
	MOVI	WTLYNPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP
	JRZ	WHIPNOT1		;DONE COMING DOWN MAN	
	SLOOP	4,WHIPNOT
WHIPNOT1
	MOVI	SCRNST,A0
	MOVE	A0,@SCRNTL,L
	MOVI	SCRNEND,A0		;ASSURED FULL SCREEN ACTION
	MOVE	A0,@SCRNLR,L
	CREATE	BGNDPID,BSCHKG		;CREATE THE SCROLL CHECKER
	JRUC	WHIPOUT

**************************************************************************
*                                                                        *
* DELBB1ST - FREE ALL THE FORE/BACKGROUND OBJECTS IN LIMBO UP TO THE  	 *
*		THE FIRST ACTIVE FB OBJECT.				 *
*	THIS IS USED TO CLEAR THE INTRO BACKGROUND OBJECTS.		 *
*                                                                        *
**************************************************************************
DELBB1ST
	MMTM	SP,A0,A1
	MOVI	BBACTIVE,A0
DELBB1L
	MOVE	*A0,A0,L
	JREQ	DELBB1X		;BR = WE'RE DONE
DELBB2L
	MOVE	*A0(NDATA),A1,W
	JRNE	DELBB1X		;BR = THIS BLOCK IS NOT IN LIMBO, CAN IT
	MOVE	*A0,A1,L	;GET THE NEXT
	CALLA	DELBBOBJ	;FREE UP THIS SUCKER
	MOVE	A1,A0
	JRNZ	DELBB2L
DELBB1X
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* INTREXSC - WAVE INTRO SCREEN EXPAND. BRINGS UP SKY COLOR WHEN DONE	 *
*                                                                        *
**************************************************************************
INTREXSC
	MOVI	-0D000H,A11
	CREATE	WTLYNPID,WTLYNORM	;SLIDE THE SCREEN DOWN USING DPYSTRT
	MOVI	44H,A0
	MOVI	SCRNST,A10
	MOVI	SCRNEND,A11
	JSRP	SCREXP32

	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTO ERASE
	CALLA	MSUCLEAR		;CLEAR THE MSU PALETTES
	MOVI	SKYPID,A0
	MOVE	A0,*A13(PROCID),W	;LOAD IN THIS HAPPY GUY
	MOVI	800H,A9
**************************************************************************
*                                                                        *
* SKYUP - FADE UP THE SKY COLOR AND DIE					 *
* A9 = FADER SPEED							 *
* I.D. = SKYPID								 *
**************************************************************************
SKYUP
	MOVE	*A13(PROCID),A0,W
	CLR	A1
	NOT	A1
	CALLA	KILALL
	CLR	A8
SKYUP1
	MOVE	@SKYCOLOR,A0,W
	MOVE	A8,A1
	CALLA	XCOLOR
	MOVE	A0,@IRQSKYE,W
	SLEEP	1
	ADD	A9,A8
	CMPI	10000H,A8
	JRLE	SKYUP1
	MOVI	10000H,A1
SKYDIE
	MOVE	@SKYCOLOR,A0,W
	CALLA	XCOLOR
	DIE

**************************************************************************
*                                                                        *
* DPYSNORM - INCREMENTS DPYSTRT FROM ITS CURRENT VALUE TO FFFCH		 *
* A11 = INCREMENTS/TICK 						 *
*                                                                        *
**************************************************************************
DPYSNORM
	SLL	4,A11
DPYSNL
	MOVE	@DPYSTRT,A0,W
	ADD	A11,A0
       .IF INTRLACE	
	ADD	A11,A0			;KEEP THINGS EVEN FOR INTERLACE
       .ENDIF	
	JRNN	DPYNFIX			;WE'RE DEFINITELY DONE
	CMPI	0FFFFFFFCH,A0
	JRHS	DPYNFIX
	MOVE	A0,@DPYSTRT,W
	SLOOP	1,DPYSNL
DPYNFIX
	MOVI	0FFFCH,A0
	MOVE	A0,@DPYSTRT,W		;MAKE SURE IT HOLDS CORRECTLY
	DIE

**************************************************************************
*                                                                        *
* WTLYNORM - INCREMENTS WORLDTLY FROM ITS CURRENT VALUE TO THE NORMAL	 *
* 	   STARTING Y OF THE WAVE					 *
* A11 = INCREMENTS/TICK 32 BITS						 *
*                                                                        *
**************************************************************************
WTLYNORM
	MOVE	A11,@SCROLLY,L
WTLYSNL
	MOVE	@WORLDTLY,A0,L
	JRLE	WTLYFIX
	SLOOP	1,WTLYSNL
WTLYFIX
	CLR	A0
	MOVE	A0,@SCROLLY,L
	MOVE	A0,@WORLDTLY,L
	MOVE	A0,@BAK2TLY,L
	DIE

**************************************************************************
*                                                                        *
* PUSHBGND - PUSH THE CURRENT BACKGROUND ON TO THE BAKSTAK		 *
* A8 = PTR TO DOOR(SPACE) ENTERED, 0 = NO DOOR				 *
*                                                                        *
**************************************************************************
PUSHBGND
	MMTM	SP,A0,A1,A4,A5,A6,A7,A8,A9,A10,A11,A12,A14
	MOVE	@BAKSTAKP,A14,L
	MOVE	A8,A8
	JRZ	PUSHRGA8
	MOVE	*A8(OXPOS),A5,W
	MOVE	*A8(OYPOS),A8,W
	SLL	16,A8
	MOVX	A5,A8
PUSHRGA8
	MOVE	A8,-*A14,L		;ON THE STACK FIRST
	CLR	A8
	MOVE	A8,@DOORINYX,L		;CLEAR THIS FOR NEW BACK ENTRANCE
	MOVE	@BGNAME,A4,L
	MOVE	@BGMUSIC,A5,L
	MOVE	@BAK2TLX,A6,L
	MOVE	@BAK2TLY,A7,L
	MOVE	@WORLDTLX,A8,L
	MOVE	@WORLDTLY,A9,L
	MOVE	@BGINIT,A10,L
	MOVE	@SKYCOLOR,A11,W
	MOVE	@CARDHOLD,A12,W
	MMTM	A14,A4,A5,A6,A7,A8,A9,A10,A11,A12
	MOVE	@LOOPWAVE,A4,W
	MOVE	@LOOPBACK,A5,L
	MOVE	@LOOPDISP,A6,L
	MOVE	@SCRLBIAS,A7,W
	MMTM	A14,A4,A5,A6,A7
	MOVI	ENDIFRAM,A5
PUSHBL
	MOVE	-*A5,-*A14,W
	CMPI	DIFRAM,A5
	JRNE	PUSHBL

	MOVI	MASTERID,A0	
	CLR	A1
	NOT	A1
	CALLA	EXISTP
****	JRZ	$				;STICK, NO MASTER DISPATCH
	JRNZ	PUSHMAST
	CREATE	MASTERID,MASTERDP		;CREATE SOMETHING
	JRNZ	PUSHMAST
	CALLERR	11				;THE THING IS FUCKED

PUSHMAST
	MOVE	A0,A7
	MOVI	PRCSIZ,A5
	ADD	A5,A0				;GET TO THE END MY MAN
	SRA	5,A5				;DIVIDE BY 32
	SUBK	3,A5
PUSHMDPL
	MOVE	-*A0,-*A14,L	
	DSJS	A5,PUSHMDPL
	MOVE	*A7(PSPTR),A6,L
	SUB	A7,A6				;FORM OFFSET TO STACK PTR
	MOVE	A6,-*A14,L			;STORE THE OFFSET	
	CMPI	BAKSTAKE,A14
***	JRLT	$				;STICK ON STACK OVERFLOW
	JRGE	PUSHSOK
       	CALLERR	11				;STACK OVERFLOW ERROR
PUSHSOK
	MOVE	A14,@BAKSTAKP,L
	MMFM	SP,A0,A1,A4,A5,A6,A7,A8,A9,A10,A11,A12,A14
	RETS
**************************************************************************
*                                                                        *
* POPBGND - POP BACKGROUND OFF THE STACK AND REINITIALIZE IT.		 *
* RETURNS:								 *
* A10 = BACKGROUND INITIALIZATION TABLE					 *
*                                                                        *
**************************************************************************
POPBGND
	MMTM	SP,A0,A1,A4,A5,A6,A7,A8,A9,A11,A12,A14
	MOVE	@BAKSTAKP,A14,L

	CREATE	MASTERID,MASTERDP		;GET A MASTER DISPATCH PROC
***	JRZ	$				;NO DISPATCH, NO GO
	JRNZ	POPMAST
       	CALLERR	10
POPMAST
	MOVE	A0,A7
	MOVE	*A14+,A6,L
	ADD	A0,A6
	MOVE	A6,*A0(PSPTR),L			;RESTORE STACK POINTER

	ADDI	96,A0
	MOVI	PRCSIZ,A5
	SRA	5,A5				;DIVIDE BY 32
	SUBK	3,A5
POPMDPL
	MOVE	*A14+,*A0+,L			;LOAD UP THE NEW PROC	
	DSJS	A5,POPMDPL

	MOVI	DIFRAM,A1
POPBL
	MOVE	*A14+,*A1+,W
	CMPI	ENDIFRAM,A1
	JRNE	POPBL
	MMFM	A14,A4,A5,A6,A7
	MOVE	A4,@LOOPWAVE,W
	MOVE	A5,@LOOPBACK,L
	MOVE	A6,@LOOPDISP,L 	
	MOVE	A7,@SCRLBIAS,W
	MMFM	A14,A4,A5,A6,A7,A8,A9,A10,A11,A12
	MOVE	*A14+,A1,L
	MOVE	A1,@DOORINYX,L		;GET THE DOOR WE CAME IN ON
	CMPI	BAKSTAKS,A14
****	JRGT	$			;STICK ON STACK UNDERFLOW
	JRLE	POPSOK
      	CALLERR	10			;STACK UNDERFLOW ERROR
POPSOK
	MOVE	A14,@BAKSTAKP,L
	MOVE	A4,@BGNAME,L
	MOVE	A6,@BAK2TLX,L
	MOVE	A7,@BAK2TLY,L
	MOVE	A8,@WORLDTLX,L
	MOVE	A9,@WORLDTLY,L
	MOVE	A11,@SKYCOLOR,W
	MOVE	A12,@CARDHOLD,W
	MOVE	A5,A0
	MOVE	A0,@BGMUSIC,L		;RESET THIS 'TING	
	CALLA	ONESND			;RESTART THE WAVE MUSIC
	MMFM	SP,A0,A1,A4,A5,A6,A7,A8,A9,A11,A12,A14
	RETS

**************************************************************************
*                                                                        *
* NEWBGND - OPEN UP A NEW BGND						 *
* A8 = PTR TO DOOR 							 *
* A9 = PTR TO PLAYER							 *
* A10 = PTR TO NEW BACKGROUND INIT					 *
* A11 = DISPATCH PROCESS TO CREATE					 *
*                                                                        *
**************************************************************************
NEWBGND
	PUSHP	A11			;PUSH THE DISPATCH TO CREATE
	MOVI	BGNDPID,A0
	MOVE	A0,*A13(PROCID),W	;MAKE THIS A BACKGROUND DUDE
NEWBGND1
	MOVI	4000H,A0
	MOVE	A0,A1
	CALLA	EXISTP			;WAVE END WAIT?
	JRZ	NEWBGND2		;BR = NO
	SLOOP	1,NEWBGND1		;GIVE THEM TIME TO COMPLETE
NEWBGND2
	CALLR	PUSHBGND

	MOVE	*A9(OID),A1,W
	CMPI	P1OID,A1
	JRNE	NEWBGND3
	MOVI	P1DATA,A9
	MOVI	P1CTRL,A11
	JRUC	NEWBGND4
NEWBGND3
	CMPI	P2OID,A1
	JRNE	NEWBGND4
	MOVI	P2DATA,A9
	MOVI	P2CTRL,A11
NEWBGND4
	CLR	A0
	MOVI	08000h,A1
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT INDIES
	CALLR	SAVEOBJS		;SAVE THE ENEMY STATE OF AFFAIRS
	CALLR	KILLWAVE
	SOUND1	MUSICOFF

	CALLA	LAST2CLR
	CALLA	COLRSTRT		;RESTART THE COLOR PROCS
	MOVI	PUP,A0
	MOVE	A0,*A11,W
	MOVE	*A9(POBJ),A0,L
	CALLA	PULLSOBJ
	MOVE	*A9(PLOBJ),A0,L
	CALLA	PULLSOBJ
	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;TURN ON FULL SCREEN AUTOERASE
	MMTM	A12,A8,A9,A10,A11
	MOVI	5000H,A9
	CREATE	SKYPID,SKYDOWN
	CALLR	GSOCOORD		;GET SCREEN OBJECT COORDINATES
	MOVK	32,A0
	JSRP	SCREXP32
	SOUND1	ALLOFF
	SOUND1	YAMOFF
	SLEEP	1
	CALLA	SYNCHALF
	CALLA	SYNCFULL
	CLR	A0
	MOVE	A0,@DISPLAYON,W
	CALLA	DMAQWAIT
	CLR	A0
	MOVI	08000h,A1
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT INDIES
	CALLA	MYOINIT
	MOVE	A10,@SCRNTL,L		;RESTORE
	MOVE	A11,@SCRNLR,L
	MMFM	A12,A8,A9,A10,A11
	CLR	A0
	MOVE	A0,*A11,W
	CALLA	WRAMINIT		;INITIALIZE WAVE RAM
	CALLA	GETWAVE			;SET UP WAVE DIFFICULTY PARAMS

	MOVE	*A10(0E0H),A0,L		;FIX THIS SOUND KLUDGE
	CALLA	ONESND			;START ROOM MUSIC
	PULLP	A7			;GET BACK THE DISPATCH PROC
	MOVI	MASTERID,A1
	CALLA	GETPRC
	CALLA	COLRSTRT		;RESTART THE COLOR PROCS

*
*GENERIC ENTRYPOINT FOR BACKGROUND RESTART
BGNDG
	PUSHST
	DINT				;DISABLE INTS TO ASSURE CLEANLINESS
	CALLA	BBINIT
	CALLR	INITBGND
	MOVE	@BAKSTAKP,A3,L
	CMPI	BAKSTAKS,A3
	JRNE	BGNDNTOP		;BR = NOT TOP LEVEL BACKGROUND
	MOVI	GOALDOOR,A14
	CALLR	INITFGND		;INITIALIZE THE GOAL DOORS
	CLR	A3
	MOVE	A3,@XSCROLLS,W		;CLEAR HERE FOR GOOOOOOOD!
BGNDNTOP
	MOVI	SCRNST,A2
	MOVI	SCRNEND,A3		;FULL WINDOW FOR SCREEN TESTER

	MOVE	@DOORINYX,A5,L		;GET THE COORDS OF THE DOOR WE WANT

	MOVI	BBACTIVE,A1		;GET THE BACKGROUND BLOCK LIST
BGNDBBL
	MOVE	*A1,A1,L
	JRZ	BGNDBBE
	MOVE	*A1(NPTR),A8,L		;GET THE OBJECT PTR
	MOVE	*A8(OID),A4,W
	CMPI	BGDCID|SUBDOORL,A4	
	JREQ	BGNDBBL
	CMPI	BGDCID|SUBDOORR,A4
	JREQ	BGNDBBL
	SRL	4,A4
	SLL	4,A4			;STRIP OFF THE DESCRIPTOR
	CMPI	BGDCID,A4
	JRNE	BGNDBBL

	CALLA	SCRTSTG
	JRNE	BGNDBBL

	MOVE	*A8(OXPOS),A6,W
	MOVE	A5,A5
	JRZ	BGNDANYD		;GET ANY DOOR WE CAN
	MOVE	*A8(OYPOS),A7,W
	SLL	16,A7
	MOVX	A6,A7
	CMPXY	A7,A5
	JRXNE	BGNDBBL			;BR = NOT THE DOOR WE WENT IN
	JRYNE	BGNDBBL			;BR = NOT THE DOOR WE WENT IN
BGNDANYD
	MOVE	@WORLDTLX+16,A3,W	;GET WHAT WE WANT
	MOVE	@SCRNTL,A4,W		;GET THE CURRENT SCREEN TOP LEFT X
	ADD	A3,A4
	SUB	A6,A4
	SUB	A4,A3
	JRNN	BGNDWTOK
	CLR	A3			;ZERO WORLDTL IN THIS CASE
BGNDWTOK
	MOVE	A3,@WORLDTLX+16,W	
*TIME TO RE-INITIALIZE PLAYER 1
	MOVI	P1DATA,A2
	MOVI	P1INITTL,A14
	CALLA	PLROOMST
*TIME TO RESET PLAYER 2
	MOVI	P2DATA,A2
	MOVI	P2INITT,A14
	CALLA	PLROOMST

	POPST
	CALLA	SCORAREA		;OUTPUT THE SCORE AREA
	CALLA	PCONTST			;START UP THE MESSAGES
	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROC ON
	CREATE	BUPDPID,BBOFSCRN	;CREATE THE BACKGROUND UPDATE PROCESS

	MMTM	A12,A8,A9,A10,A11
	MOVK	32,A0
	MOVI	SCRNST,A10
	MOVI	SCRNEND,A11
	JSRP	SCREXP32		;BLOW UP THE SCREEN AGAIN
	MOVI	800H,A9
	CREATE	SKYPID,SKYUP		;BRING UP THE SKY
	MMFM	A12,A8,A9,A10,A11

	JSRP	DOOROPEN
	MOVI	P1DATA,A10
	MOVI	P2DATA,A11
	MOVI	PDOWN,A0
	MOVE	A0,@P1CTRL,W
	MOVE	A0,@P2CTRL,W
	SLEEP	2
	
	MOVI	P1DATA,A2
	CALLA	ADJST2DOOR		;MAKE SURE THEY ARE DOOR ADJUSTED
	MOVI	P2DATA,A2
	CALLA	ADJST2DOOR

	MOVE	A8,B0
	MOVI	PLAYERS,A1
	MOVE	*A10(PLOBJ),A0,L
	JREQ	BGNDP2IN
	CALLA	ISSUPP
	JREQ	BGNDP1C			;DOESN'T ALREADY EXIST
	CLR	A3
	MOVE	A3,@P1CTRL,W
	JRUC	BGNDP2IN
BGNDP1C
	CALLA	INSOBJ
	CALLA	ADDSUPP
	MOVE	A0,A8	
	CALLA	SHADST
	MOVE	*A10(POBJ),A0,L
	CALLA	INSOBJ
	CALLA	ADDSUPP
	MOVE	A0,A8
	CALLA	SHADST2
BGNDP2IN	
	MOVE	*A11(PLOBJ),A0,L
	JREQ	BGNDCWLK
	CALLA	ISSUPP
	JREQ	BGNDP2C			;DOESN'T ALREADY EXIST
	CLR	A3
	MOVE	A3,@P2CTRL,W
	JRUC	BGNDCWLK
BGNDP2C
	CALLA	INSOBJ
	CALLA	ADDSUPP
	MOVE	A0,A8
	CALLA	SHADST
	MOVE	*A11(POBJ),A0,L
	CALLA	INSOBJ
	CALLA	ADDSUPP
	MOVE	A0,A8
	CALLA	SHADST2
BGNDCWLK
	MOVE	B0,A8
	CREATE	BGNDPID,BSCHKG		;START THE SCROLL CHECKER
	MOVI	INPLAY,A0
	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES
	SLEEP	10
	MOVI	PDOWN+PLEFT,A0
	MOVE	A0,@P1CTRL,W
	MOVI	PDOWN+PRYTE,A0
	MOVE	A0,@P2CTRL,W
	SLEEP	10
***	MOVI	INPLAY,A0
***	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES
	SLEEP	15
	CLR	A0
	MOVE	A0,@P1CTRL,W
	MOVE	A0,@P2CTRL,W
	JSRP	DOORCLOZ
	DIE

*
*NO DOOR FOUND, JUST PLOP THEM OUT IN THE MIDDLE
*
BGNDBBE
*TIME TO RE-INITIALIZE PLAYER 1
	MOVI	P1DATA,A2
	MOVI	P1INITTL,A14
	CALLA	PLWAVEST
*TIME TO RESET PLAYER 2
	MOVI	P2DATA,A2
	MOVI	P2INITT,A14
	CALLA	PLWAVEST
	MOVK	1,A0
	MOVE	A0,*A13(PDATA),W	;FLAG A DOOR ENTRANCE

	POPST
	CALLA	SCORAREA		;OUTPUT THE SCORE AREA
	CALLA	PCONTST			;START UP THE MESSAGES
	MOVK	1,A0
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROC ON
	CREATE	BUPDPID,BBOFSCRN	;CREATE THE BACKGROUND UPDATE PROCESS

	MOVI	INPLAY,A0
	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES

	MMTM	A12,A8,A9,A10,A11
	MOVK	32,A0
	MOVI	SCRNST,A10
	MOVI	SCRNEND,A11
	JSRP	SCREXP32		;BLOW UP THE SCREEN AGAIN
	MOVI	800H,A9
	CREATE	SKYPID,SKYUP		;BRING UP THE SKY
	MMFM	A12,A8,A9,A10,A11
	CREATE	BGNDPID,BSCHKG		;START THE SCROLL CHECKER
	DIE

**************************************************************************
*                                                                        *
* ADJST2DOOR - ADJUST THE PLAYER TO THE GIVEN DOOR.			 *
* A2 = PLAYER DATA							 *
* A8 = PTR TO DOOR							 *
*                                                                        *
**************************************************************************
ADJST2DOOR
	MMTM	SP,A0,A1,A3,A4,A5,A6
	MOVE	*A2(POBJ),A0,L
	JRZ	ADJST2DXX		;NO PLAYER EXISTS
	MOVE	*A2(PLOBJ),A4,L

	MOVE	*A0(OXPOS),A1,W
	MOVE	*A0(OYPOS),A3,W
	SLL	16,A3
	MOVY	A3,A1
	MOVE	*A4(OXPOS),A3,W
	MOVE	*A4(OYPOS),A5,W
	SLL	16,A5
	MOVY	A5,A3
	SUBXY	A3,A1

	MOVE	*A8(OXPOS),A3,W
	MOVE	*A8(OYPOS),A5,W
	SLL	16,A5
	MOVY	A5,A3

	ADDI	P1DOOROF,A3
	MOVE	A3,A6	

	CLR	A5
	MOVY	A3,A5
	SLL	16,A3
	MOVE	A5,*A4(OYVAL),L
	MOVE	A3,*A4(OXVAL),L
	
	ADDXY	A1,A6

	CLR	A5
	MOVY	A6,A5
	SLL	16,A6
	MOVE	A5,*A0(OYVAL),L
	MOVE	A6,*A0(OXVAL),L

	SWAP	A0,A4	
	CALLA	SETZPOS
	SWAP	A0,A4

	MOVE	*A4(OZVAL),A5,L		;MATCH THE FOOT Z POSITION
	INC	A5			;TORSO ALWAYS ON TOP
	MOVE	A5,*A0(OZVAL),L
ADJST2DXX
	MMFM	SP,A0,A1,A3,A4,A5,A6
	RETS

**************************************************************************
*                                                                        *
* OLDBGND - POP THE PREVIOUS BGND					 *
* A8 = PTR TO DOOR 							 *
* A9 = PTR TO PLAYER							 *
*                                                                        *
**************************************************************************
OLDBGND
	MOVI	BGNDPID,A0
	MOVE	A0,*A13(PROCID),W	;MAKE THIS A BACKGROUND DUDE
OLDBGND1
	MOVI	4000H,A0
	MOVE	A0,A1
	CALLA	EXISTP			;WAVE END WAIT?
	JRZ	OLDBGND2		;BR = NO
	SLOOP	1,OLDBGND1		;GIVE THEM TIME TO COMPLETE
OLDBGND2
	MOVE	*A9(OID),A1,W
	CMPI	P1OID,A1
	JRNE	OLDBGND3
	MOVI	P1DATA,A9
	MOVI	P1CTRL,A11
	JRUC	OLDBGND4
OLDBGND3
	CMPI	P2OID,A1
	JRNE	OLDBGND4
	MOVI	P2DATA,A9
	MOVI	P2CTRL,A11
OLDBGND4
	CLR	A0
	MOVI	08000h,A1
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT INDIES
	CALLR	KILLWAVE
	SOUND1	MUSICOFF

	CALLA	LAST2CLR
	CALLA	COLRSTRT		;RESTART THE COLOR PROCS
	MOVI	PUP,A0
	MOVE	A0,*A11,W
	MOVE	*A9(POBJ),A0,L
	CALLA	PULLSOBJ
	MOVE	*A9(PLOBJ),A0,L
	CALLA	PULLSOBJ
	MOVK	1,A0
	MOVE	A0,@GAMERASE,W		;ACTIVATE FULL SCREEN AUTO ERASE 
	MMTM	A12,A8,A9,A11
	MOVI	5000H,A9
	CREATE	SKYPID,SKYDOWN
	CALLR	GSOCOORD		;GET SCREEN OBJECT COORDINATES
	MOVK	32,A0
	JSRP	SCREXP32
	SOUND1	ALLOFF
	SOUND1	YAMOFF
	SLEEP	1
	CLR	A0
	MOVI	08000h,A1
	CALLA	KILALL			;KILL ALL PROCS, EXCEPT INDIES
	CALLA	SYNCHALF
	CALLA	SYNCFULL
	CLR	A0
	MOVE	A0,@DISPLAYON,W
	CLR	A0
	MOVE	A0,@GAMERASE,W
	CALLA	AUTOEOFF
	CALLA	WRAMINIT		;INITIALIZE WAVE RAM
	CALLA	DMAQWAIT
	CALLR	POPBGND
	PUSHP	A10
	MOVE	@SCRNTL,A10,L
	MOVE	@SCRNLR,A11,L		;PRESERVE
	MOVE	@BAK2TLX,B0,L
	MOVE	@BAK2TLY,B1,L
	MOVE	@WORLDTLX,B2,L
	MOVE	@WORLDTLY,B3,L
	CALLA	MYOINIT			;RE-INITIALIZE FOR GOOD MEASURE
	MOVE	A10,@SCRNTL,L		;RESTORE
	MOVE	A11,@SCRNLR,L
	MOVE	B0,@BAK2TLX,L
	MOVE	B1,@BAK2TLY,L
	MOVE	B2,@WORLDTLX,L
	MOVE	B3,@WORLDTLY,L
	SRL	16,B2
	MOVY	B3,B2
	MOVE	B2,@WORLDTL,L		;STUFF THE PACKED ONE FOR SCRTST
	PULLP	A10
	MMFM	A12,A8,A9,A11
	CLR	A0
	MOVE	A0,*A11,W
	SLEEP	1
	CALLR	RESTOBJS		;RESTORE THE ENEMIES
	CALLA	TESTDISP		;FIRE OFF THE NORMAL PROCS
	CALLA	COLRSTRT		;RESTART THE COLOR PROCS
	JRUC	BGNDG

**************************************************************************
*                                                                        *
* SAVEOBJS - SAVE OBJECTS ON THE OBJECT LIST ACCORDING TO 		 *
* 		OSAVETAB.						 *
*                                                                        *
**************************************************************************
SAVEOBJS
	MMTM	SP,A0,A1
	MOVI	OBJLST,A0		;LET US TRAVERSE THE OBJECT LIST
	MOVI	NSAVOBJS,A1
SAVOBJLP
	MOVE	*A0,A0,L
	JRZ	SAVOBJX
	CALLR	SAVEIT_P		;SAVEABLE?
	JRZ	SAVOBJLP
	CALLR	SAVEIT			;YES
	DSJS	A1,SAVOBJLP
SAVOBJXX
	MMFM	SP,A0,A1
	RETS
SAVOBJX
	MOVE	A1,A1
	JRZ	SAVOBJXX		;NO MORE OBJECT SPACE
SAVOBJ0L
	CALLR	SAVEIT0			;SAVE A NULL ENTRY
	DSJS	A1,SAVOBJ0L	
	JRUC	SAVOBJXX

**************************************************************************
*                                                                        *
* SAVEIT_P - IS THIS OBJECT SAVEABLE ON THE OBJECT STACK		 *
* A0 = PTR TO OBJECT							 *
* RETURNS:								 *
* 	Z BIT SET = NOT SAVEABLE					 *
* 	Z BIT CLR = SAVEABLE						 *
*                                                                        *
**************************************************************************
SAVEIT_P
	MMTM	SP,A1,A2,A3
	MOVI	OSAVETAB,A1
	MOVE	*A0(OID),A2,W
	SRL	4,A2
	SLL	4,A2			;STRIP SUB-TYPE
SAVITPLP
	MOVE	*A1+,A3,W		;GET THE OBJECT I.D.
	JRZ	SAVITPX
	SRL	4,A3
	SLL	4,A3
	CMP	A3,A2			;MATCH?	
	JREQ	SAVITFND		;YES
	ADDK	32,A1			;SKIP PAST ROUTINE
	JRUC	SAVITPLP
SAVITFND
	MOVE	A2,A2			;CLR Z BIT
SAVITPX
	MMFM	SP,A1,A2,A3
	RETS

**************************************************************************
*                                                                        *
* SAVEIT - SAVE AN OBJECT ON THE OBJECT STACK				 *
* A0 = PTR TO THE OBJECT						 *
*                                                                        *
**************************************************************************
SAVEIT
	MMTM	SP,A1,A2,A3,A14
	MOVE	@OBJSTAKP,A14,L		;GET THE OBJECT STACK PTR
	CMPI	OBJSTAKE,A14
	JRLS	SAVEITX			;BR = NO MORE ROOM ON STACK
	MOVE	*A0(OXPOS),A1,W
	MOVE	*A0(OYPOS),A2,W
	SLL	16,A2
	MOVY	A2,A1			;A1 = [Y,X] POSITION
	MOVE	*A0(OID),A2,W
	MOVE	*A0(OZPOS),A3,W
	SLL	16,A2
	MOVX	A3,A2			;A2 = [OID,ZPOS]
	MMTM	A14,A1,A2		;STORE THIS GIBBERISH
	MOVE	A14,@OBJSTAKP,L		;AND THE OBJSTACK POINTER
SAVEITX
	MMFM	SP,A1,A2,A3,A14
	RETS

**************************************************************************
*                                                                        *
* SAVEIT0 - SAVE A NULL OBJECT ON THE OBJECT STACK			 *
*                                                                        *
**************************************************************************
SAVEIT0
	MMTM	SP,A1,A2,A14
	MOVE	@OBJSTAKP,A14,L		;GET THE OBJECT STACK PTR
	CMPI	OBJSTAKE,A14
	JRLS	SAVEIT0X		;BR = NO MORE ROOM ON STACK
	CLR	A1
	CLR	A2
	MMTM	A14,A1,A2		;STORE THIS GIBBERISH
	MOVE	A14,@OBJSTAKP,L		;AND THE OBJSTACK POINTER
SAVEIT0X
	MMFM	SP,A1,A2,A14
	RETS

**************************************************************************
*                                                                        *
* RESTOBJS - RESTORE SAVED OBJECTS					 *
*                                                                        *
**************************************************************************
RESTOBJS
	MMTM	SP,A1,A4,A5,A6,A12,A14
	MOVE	@OBJSTAKP,A12,L		;GET THE OBJECT STACK POINTER
	MOVI	NSAVOBJS,A1
RESTOBJL
	CMPI	OBJSTAKS,A12
	JRHS	RESTOBJX		;ALL OUT OF STACK SPACE, HMMM
	MMFM	A12,A5,A6
	MOVY	A6,A14
	ZEXT	A6
	SRL	16,A14
	CALLR	GOBJCOLD		;GET THE OBJECTS COLD START ROUTINE
	JRZ	RESTOCNF		;NO ROUTINE WAS FOUND
	MMTM	SP,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MMTM	SP,B0,B1,B2,B3,B4
	MOVK	10H,A1			;JUST CREATE ONE OF THESE
	SLL	16,A1			
	MOVY	A1,A14
	CALL	A4
	MMFM	SP,B0,B1,B2,B3,B4
	MMFM	SP,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
RESTOCNF
	DSJS	A1,RESTOBJL
RESTOBJX
	MOVE	A12,@OBJSTAKP,L
	MMFM	SP,A1,A4,A5,A6,A12,A14
	RETS
	
**************************************************************************
*                                                                        *
* GOBJCOLD - GET AN OBJECTS COLD START ROUTINE FROM OSAVETAB		 *
* A14 = OID								 *
* RETURNS:								 *
* 	Z BIT SET = NO ROUTINE FOUND, A4 = UNDEFINED			 *
* 	Z BIT CLR = ROUTINE FOUND, A4 = ROUTINE ADDRESS			 *
*                                                                        *
**************************************************************************
GOBJCOLD
	MMTM	SP,A0,A1,A14
	SRL	4,A14
	SLL	4,A14
	SEXT	A14
	MOVI	OSAVETAB,A1
GOBJCLP
	MOVE	*A1+,A0,W
	JRZ	GOBJCX
	SRL	4,A0
	SLL	4,A0
	CMP	A0,A14
	JREQ	GOBJCFND
	ADDK	32,A1
	JRUC	GOBJCLP
GOBJCFND
	MOVE	*A1,A4,L	
GOBJCX
	MMFM	SP,A0,A1,A14
	RETS

*
*TABLE OF OBJECTS THAT CAN BE SAVED UPON ROOM ENTRY
*	.WORD	OID(SUB_TYPE IS IGNORED)
*	.LONG	COLD START ROUTINE
*	.WORD	0 TERMINATOR
OSAVETAB
	.WORD	BUGEOID
	.LONG	BUGCOLD
	.WORD	LOFOID
	.LONG	LOFCOLD
	.WORD	GANGEOID
	.LONG	GANGCOLD
	.WORD	PIMPEOID
	.LONG	PIMPCOLD
	.WORD	HYPOEOID
	.LONG	HYPOCOLD
	.WORD	DUMPOID
	.LONG	DUMPCOLD
	.WORD	CLOWNOID
	.LONG	CLWNCOLD
	.WORD	DOGOID
	.LONG	DOGCOLD
	.WORD	HOOKEOID
	.LONG	HOOKCOLD
	.WORD	MBIGEOID
	.LONG	MBIGCOLD
	.WORD	RAMBEOID
	.LONG	RAMBCOLD
	.WORD	0
**************************************************************************
*                                                                        *
* LAST2E0EF - FILL THE LAST TWO LINES OF THE BIT MAP WITH		 *
* 	    E0 - EF REPEATING						 *
*                                                                        *
**************************************************************************
LAST2E0EF
	MMTM	SP,A1,A2,A3,A6
	MOVE	@DISPLAYON,A6,W
	CLR	A1
	MOVE	A1,@DISPLAYON,W
	CALLA	DMAQWAIT			;WAIT ON DMA QUEUES
	CLR	A1
	MOVE	A1,@CMAPSEL,W
	MOVI	510*1000H,A1
	MOVI	1024,A2
LAST2E0R	
	MOVI	0E0H,A3
LAST2E0L
	CMPI	0EFH,A3
	JRGT	LAST2E0R
	MOVB	A3,*A1
	ADDK	8,A1
	INC	A3
	DSJS	A2,LAST2E0L
	MOVE	A6,@DISPLAYON,W
	MMFM	SP,A1,A2,A3,A6
	RETS

**************************************************************************
*                                                                        *
* SETOWIN - SET SCREEN WINDOW TO THE BE THE BOUNDING BOX OF AN OBJECT.	 *
* A8 = PTR TO OBJECT							 *
*                                                                        *
**************************************************************************
SETOWIN
	MMTM	SP,A10,A11
	CALLR	GSOCOORD
	MOVE	A10,@SCRNTL,L		;THESE BECOME WINDOW TOP LEFT
	MOVE	A11,@SCRNLR,L
	MMFM	SP,A10,A11
	RETS

**************************************************************************
*                                                                        *
* GSOCOORD - GET SCREEN COORDS UL AND LR OF AN OBJECT			 *
* A8 = PTR TO OBJECT							 *
* RETURNS:								 *
* A10 = UL								 *
* A11 = LR								 *
*                                                                        *
**************************************************************************
GSOCOORD
	MMTM	SP,A0,A1,A2
	MOVE	A8,A0
	CALLA	GSCRNREL		;GET THE SCREEN RELATIVE COORDS.
	SRL	16,A1
	MOVY	A2,A1
	MOVE	A1,A10
	MOVE	*A8(OSIZE),A2,L
	ADDXY	A2,A1
	MOVE	A1,A11
	MMFM	SP,A0,A1,A2
	RETS
**************************************************************************
*                                                                        *
* BBOFSCRN - EACH OBJECT IN THE BACKGROUND BLOCK LIST IS CHECKED TO	 *
* 	   SEE IF IT SHOULD GO ON OR OFF THE SCREEN, A 1 IN THE		 *
* 	   DATA AREA OF THE BLOCK MEANS IT IS ON SCREEN.		 *
*                                                                        *
**************************************************************************
BBOFSCRN
	MOVE	@SCRNTL,A2,L
	MOVE	@SCRNLR,A3,L	;GET THE SCREEN BOUNDRIES
	MOVI	[32,32],A5
	ADDXY	A5,A3
	SUBXY	A5,A2		;SET UP BUFFER
BBOFS2
	MOVI	BBACTIVE,A1	;GET THE BLOCKS

BBOFS3	MOVE	*A1,A1,L	;GET NEXT
	JREQ	BBOFS5		;BR = THERE ARE NO MORE

	MOVE	*A1(NPTR),A8,L	;GET THE OBJECT PTR
	CALLA	SCRTSTG
	JRNE	BBOFS4

*OBJECT IS ON SCREEN, ATTEMPT TO ADD IT TO THE OBJECT LIST

	MOVE	*A1(NDATA),A0,W
	JRNE	BBOFS3			;BR = IT'S ALREADY ON SCREEN

	MOVE	*A8(OIMG),A0,L
	MOVE	*A0(ICMAP),A0,L		;GET THE PALETTE TABLE
	CALLA	GETBPAL			;NOW ALLOCATE A PALETTE
	JRZ	BBOFS3			;NO PALETTE, DO NOT INSERT
	MOVE	A0,*A8(OPAL),W		;STUFF DA PALETTE

	MOVK	1,A0
	MOVE	A0,*A1(NDATA),W		;FLAG IT ON SCREEN

	MOVE	A8,A0
	CALLA	INSOBJ			;INSERT IT
	calla	ADDSBOBJ		;ADD IT TO THE SUPPLEMENTAL LIST
	JRUC	BBOFS3

*OBJECT IS OFF SCREEN, ATTEMPT TO REMOVE IT FROM THE OBJECT LIST
BBOFS4
	MOVE	*A1(NDATA),A0,W
	JREQ	BBOFS3			;BR = IT'S ALREADY OFFSCREEN

	CLR	A0
	MOVE	A0,*A1(NDATA),W		;FLAG IT OFFSCREEN
	MOVE	A8,A0
	CALLA	DELPAL			;DELETE IT'S PALETTE
	CALLA	DELSBOBJ		;TAKE IT OFF OF THE SUPPLEMENTAL LIST
	CALLA	PULLOBJ			;PULL IT OFF AND PUT IT IN LIMBO
	JRUC	BBOFS3

BBOFS5
	calla	BGND_UD1						 
	calla	BGND_UD2		;UPDATE BGND WITH TODD		 
	MOVE	@WORLDTL,@PREVWTL,L	;SAVE THESE
	MOVE	@SCRNTL,@PREVSTL,L
****	MOVE	@SCRNLR,@PREVSLR,L
BBOFSL
	SLEEP	1
*DETERMINE IF ENOUGH CHANGE HAS OCCURED TO MERIT UPDATE
	MOVK	10,A2			;YES, IT'S BUFFER MAN
	MOVE	@WORLDTL,A0,L		;CHECK WORLDTL DELTA Y,X
	MOVE	@PREVWTL,A1,L
	SUBXY	A0,A1
	MOVY	A1,A0
	ZEXT	A1
	SRA	16,A0
	ABS	A0
	ABS	A1
	CMP	A2,A0
	JRHI	BBOFSCRN		;ENOUGH DELTA Y
	CMP	A2,A1
	JRHI	BBOFSCRN		;ENOUGH DELTA X
	MOVE	@SCRNTL,A0,L		;CHECK SCRNTL DELTA Y,X
	MOVE	@PREVSTL,A1,L
	SUBXY	A0,A1
	MOVY	A1,A0
	ZEXT	A1
	SRA	16,A0
	ABS	A0
	ABS	A1
	CMP	A2,A0
	JRHI	BBOFSCRN		;ENOUGH DELTA Y
	CMP	A2,A1
	JRHI	BBOFSCRN		;ENOUGH DELTA X
*RE-INSERT THE FOLLOWING CODE ONLY IF SCRNLR CHANGES AT A GROSSLY
*DIFFERENT RATE THAN SCRNTL
****	MOVE	@SCRNLR,A0,L		;CHECK SCRNLR DELTA Y,X
****	MOVE	@PREVSLR,A1,L
****	SUBXY	A0,A1
****	MOVY	A1,A0
****	ZEXT	A1
****	SRA	16,A0
****	ABS	A0
****	ABS	A1
****	CMP	A2,A0
****	JRHI	BBOFSCRN		;ENOUGH DELTA Y
****	CMP	A2,A1
****	JRHI	BBOFSCRN		;ENOUGH DELTA X

	JRUC	BBOFSL	

**************************************************************************
*                                                                        *
* ISBAK2 - CHECK TO SEE IF SECONDARY BACKGROUND EXISTS			 *
* RETURNS								 *
* CARRY CLEAR = NO							 *
* CARRY SET   = YES							 *
*                                                                        *
**************************************************************************
ISBAK2
	PUSH	A0
	MOVE	@BAK2MODS,A0,L
	MOVE	*A0,A0,L
	INC	A0
	JRNZ	ISBAK2Y
	CLRC
	PULL	A0
	RETS
ISBAK2Y
	SETC
	PULL	A0
	RETS

**************************************************************************
*                                                                        *
* BSCHK - BACKGROUND SCROLL CHECK AGAINST THE PLAYERS.			 *
* 	  SETS THE GLOBAL FLAG UNIVEND AND DIES				 *
* 	  WHEN THE END IS DETECTED.					 *
*	  OH YEAH, THIS SHOULD BE JUMPED TO BY ANY START OF GAME	 *
*	  EFFECT. IT WILL SET THE GAMSTATE TO INPLAY			 *
* A9 = ENDING UNIVERSE X COORDINATE, 32 BITS				 *
*                                                                        *
**************************************************************************
BRESETIM .EQU	3CH
BSCHK
	MOVI	BGNDPID,A0
	MOVE	A0,*A13(PROCID),W	;MAKE SURE THE SHOE FITS
	CREATE	MASTERID,MASTERDP	;MASTER DISPATCHER
	MOVI	INPLAY,A0
	MOVE	A0,@GAMSTATE,W		;START YOUR ENGINES
BSCHKG
	CLR	A0
	MOVE	A0,*A13(PDATA),W	;CLEAR EDGE RESET COUNTER
	MOVI	P1DATA,A10		;INDEX INTO PLAYER ONE DATA	 
	MOVI	P2DATA,A11						 
	MOVE	@UNIVENDX,B1,W
	SLL	16,B1
BSCHK1 
	MOVE	B1,A9						 
BSCHK1A
	SLEEP	1			;WE DON'T WANT TO MISS A TRICK
	MOVE	*A13(PDATA),A0,W
	JRZ	BSCHKNTR		;THE TIMER IS NOT SET
	DEC	A0			;KNOCK THE TIMER DOWN
	MOVE	A0,*A13(PDATA),W	
BSCHKNTR
	MOVE	A9,B1			;STORAGE FOR THIS DURING EXECUTION	 

	MOVE	@BUYNOW,A0,W
	JRNZ	BSCHKSS			;SCROLL STOPPER ON BUY-IN WINDOW

	MOVE	@XSCROLLS,A0,W
	JRZ	BSCHKNXS		;NO X SCROLL STOPPER
	MOVE	@WORLDTLX+16,A6,W
	CMP	A0,A6
	JRLT	BSCHKNXS		;NOT TIME TO STOP YET
BSCHKSS
	CALLR	BSCHKLPEQ
	CALLA	BSTOPX
	JRUC	BSCHK1A
*
*LET'S SCROLL SHALL WE
BSCHKNXS
	CALLA	GETSCRRX		;GET THE SCREEN RIGHT EDGE
	MOVE	A0,A6			;STORE HERE

	MOVE	*A10(POBJ),A8,L		;LOAD PLAYER 1 OBLOCK PTR	 
	MOVE	*A11(POBJ),A9,L		;NOW FOR PLAYER 2		 
	JRNE	BSCHK2			;BR = PLAYER 2 IS ACTIVE	 
	MOVE	A8,A8							 
	JREQ	BSCHK1			;BOTH ARE DEAD,SO WAIT TO BE KIL 
	MOVE	A8,A9			;OTHERWISE MAKE HIM LOOK LIKE P1 
	JRUC	BSCHK3							 
BSCHK2	MOVE	A8,A8			;CHECK PLAYER 1		 
	JRNE	BSCHK3			;BR = PLAYER 1 IS ACTIVE	 
	MOVE	A9,A8			;OTHERWISE HE ISN'T		 
BSCHK3
 	MOVE	*A8(OXPOS),A0,W		;PLAYER 1 X POSITION	 
	MOVE	*A8(OIMG),A2,L
	MOVE	*A2(IANIOFFX),A2,W	;APOINT ADJUSTMENT
	ADD	A2,A0
	MOVE	*A9(OXPOS),A1,W		;PLAYER 2 X POSITION		 
	MOVE	*A9(OIMG),A2,L
	MOVE	*A2(IANIOFFX),A2,W	;ADJUST TO THE A POINT DUDE
	ADD	A2,A1
	MOVE	@WORLDTL,A2,W		;GET WORLD TOP LEFT X
	SUB	A2,A0			;ADJUST PLAYER 1
	SUB	A2,A1			;ADJUST PLAYER 2						 

	MOVE	*A8(OXVEL),A4,L		;GET PLAYER 1 X VELOCITY
	ABS	A4			;ALWAYS KEEP IT POSITIVE
	JRNZ	BSCHK3A	
	ADDI	[2,0],A4		;MAKE SURE IT'S AT LEAST THREE
BSCHK3A
	MOVE	*A9(OXVEL),A5,L		;AND PLAYER 2 X VELOCITY
	ABS	A5			;HERE TOO
	JRNZ	BSCHK3B
	ADDI	[2,0],A5
BSCHK3B
	MOVE	@SCRLBIAS,A14,W
	JRNZ	BSCHKLB

*RIGHT SCROLL, RIGHT BIAS
	MOVI	RBOUND,A7
	MOVI	PXMIN,A2
	CMP	A7,A0			;P1 HIT RIGHT SCROLL BOUNDRY?	 
	JRLT	BSCHK4			;BR = NO			 
	CMP	A2,A1			;P2 ALL THE WAY LEFT?		 
	JRLE	BSCHKS			;BR = YES			 
	MOVE	A2,A3									 
	ADDK	32,A3
	CALLA	CHKRANGE
	JRC	BSCHK4B			;BR = PLAYER 2 MAKING WAY OFF LEFT	

	CMP	A7,A1			;CHECK P2 
	JRLT	BSCHK3C			;DON'T WORRY HE'S NO THREAT	

	CMP	A5,A4			;WHO'S BETTER? P1 OR P2
	JRLT	BSCHK4A			;BR = P2 VEL IS GREATER
BSCHK3C
	SUB	A0,A7
	ABS	A7
	CMPI	20,A7
	JRLO	BSCHK3D
       	ADDI	[2,0],A4
BSCHK3D
***	MOVE	A4,@SCROLLX,L		;STUFF THE SCROLL RATE
***	ADD	A4,A6
	JRUC	BSCHK8							 

BSCHK4
	CMP	A7,A1			;P2 HIT RIGHT SCROLL BOUNDRY?	 
	JRLT	BSCHK5			;BR = NO			 
	CMP	A2,A0			;P1 ALL THE WAY LEFT?		 
	JRLE	BSCHKS			;BR = YES			 
	MOVE	A2,A3									 
	ADDK	32,A3
	SWAP	A0,A1
	CALLA	CHKRANGE
	SWAP	A0,A1
	JRC	BSCHK3D			;BR = PLAYER 1 MAKING WAY OFF LEFT	

BSCHK4A
	SUB	A1,A7
	ABS	A7
	CMPI	20,A7
	JRLO	BSCHK4B
       	ADDI	[2,0],A5
BSCHK4B
	MOVE	A5,A4
	JRUC	BSCHK8							 
									 
*LEFT SCROLL, RIGHT BIAS						 
BSCHK5
	MOVI	RBOUND,A2
	MOVE	A2,A3
	SUBK	32,A2
	ADDK	32,A3			;WE MUST BUFFER THE RIGHT SIDE	

	CMPI	LBOUND,A0		;P1 HIT LEFT SCROLL BOUNDRY 
	JRGT	BSCHK6			;BR = NO			 
									 
	CALLA	CHKRANGE
	JRC	BSCHKS			;BR = P2 NEAR THE RIGHT BOUNDRY

	CMPI	LBOUND,A1		;CHECK P2 
	JRGT	BSCHK5A			;DON'T WORRY HE'S NO THREAT	

	CMP	A5,A4			;WHO'S BETTER? P1 OR P2
	JRLT	BSCHK6A			;BR = P2 VEL IS GREATER
BSCHK5A
	NEG	A4			;WE MUST GO BACK HANS IS TRAPPED!!
	JRUC	BSCHK7							 
BSCHK6
	CMPI	LBOUND,A1		;P2 HIT LEFT SCROLL BOUN 
	JRGT	BSCHKS			;BR = NO			 
									 
	MOVE	A0,A1			;P2 POSITION DESTROYED HERE
	CALLA	CHKRANGE
	JRC	BSCHKS			;BR = P1 NEAR THE RIGHT BOUNDRY
BSCHK6A
	NEG	A5
	MOVE	A5,A4
	JRUC	BSCHK7

LSBUFFER .EQU	20			;SIZE OF LEFT SCROLL BUFFER
*
*LEFT SCROLL, LEFT BIAS
BSCHKLB
	MOVI	LBOUND,A7
***	MOVE	A7,A2
***	MOVE	A2,A3
***	ADDK	LSBUFFER,A3
***	SWAP	A0,A1
***	CALLA	CHKRANGE		;CHECK LBOUND BUFFER TO THE RIGHT
***	SWAP	A0,A1
***	JRC	BSCHKLBL		;BR = HE'S IN IT
	CMP	A7,A0			;NOW CHECK LBOUND TO LEFT SCREEN EDGE	 
	JRGT	BSCHKA			;BR = NO			 
***BSCHKLBL
	MOVI	PXMAX-30,A3
	CMP	A3,A1			;P2 ALL THE WAY RIGHT?		 
	JRGE	BSCHKS			;BR = YES			 

	MOVE	A3,A2									 
	SUBI	64,A2
	ADDI	64,A3
	CALLA	CHKRANGE
	JRC	BSCHKAB			;BR = PLAYER 2 MAKING WAY OFF RIGHT	

	CMP	A7,A1			;CHECK P2 
	JRGT	BSCHK9C			;DON'T WORRY HE'S NO THREAT	

	CMP	A5,A4			;WHO'S BETTER? P1 OR P2
	JRLT	BSCHKAA			;BR = P2 VEL IS GREATER
BSCHK9C
***	ADDI	LSBUFFER-(LSBUFFER/2),A7
	SUB	A0,A7
	ABS	A7
	CMPI	50,A7
	JRLS	BSCHK9D
       	ADDI	[2,0],A4
BSCHK9D
	NEG	A4
	JRUC	BSCHK7							 

BSCHKA
***	MOVE	A7,A2
***	MOVE	A2,A3
***	ADDK	LSBUFFER,A3
***	CALLA	CHKRANGE		;P2 CHECK ON LBOUND BUFFER
***	JRC	BSCHKAL
	CMP	A7,A1			;P2 HIT LEFT SCROLL BOUNDRY?	 
	JRGT	BSCHKB			;BR = NO			 
BSCHKAL
	MOVI	PXMAX-30,A3
	CMP	A3,A0			;P1 ALL THE WAY RIGHT?		 
	JRGE	BSCHKS			;BR = YES			 
	MOVE	A3,A2									 
	SUBI	64,A2
	ADDI	64,A3
	SWAP	A0,A1
	CALLA	CHKRANGE
	SWAP	A0,A1
	JRC	BSCHK9D			;BR = PLAYER 1 MAKING WAY OFF RIGHT	

BSCHKAA
***	ADDI	LSBUFFER-(LSBUFFER/2),A7
	SUB	A1,A7
	ABS	A7
	CMPI	50,A7
	JRLS	BSCHKAB
       	ADDI	[2,0],A5
BSCHKAB
	MOVE	A5,A4
	NEG	A4
	JRUC	BSCHK7							 
									 
*RIGHT SCROLL CHECK, LEFT BIAS						 
BSCHKB
	MOVI	LBOUND,A2
	MOVE	A2,A3
	SUBK	32,A2
	ADDK	32,A3			;WE MUST BUFFER THE LEFT SIDE	

	CMPI	RBOUND,A0		;P1 HIT RIGHT SCROLL BOUNDRY 
	JRLT	BSCHKC			;BR = NO			 
									 
	CALLA	CHKRANGE
	JRC	BSCHKS			;BR = P2 NEAR THE RIGHT BOUNDRY

	CMPI	RBOUND,A1		;CHECK P2 
	JRLT	BSCHKBA			;DON'T WORRY HE'S NO THREAT	

	CMP	A5,A4			;WHO'S BETTER? P1 OR P2
	JRLT	BSCHKCA			;BR = P2 VEL IS GREATER
BSCHKBA
	JRUC	BSCHK8							 
BSCHKC
	CMPI	RBOUND,A1		;P2 HIT RIGHT SCROLL BOUNDRY
	JRLT	BSCHKS			;BR = NO			 
									 
	MOVE	A0,A1			;P2 POSITION DESTROYED HERE
	CALLA	CHKRANGE
	JRC	BSCHKS			;BR = P1 NEAR THE RIGHT BOUNDRY
BSCHKCA
	MOVE	A5,A4
	JRUC	BSCHK8

*CHECK FOR UNIVERSE LEFT BOUNDRY HIT
*A4 = SCROLL RATE TO STUFF IF O.K.
BSCHK7
	MOVE	@UNIVSTX,A3,W
	ADDI	512,A3
	SLL	16,A3
	SUB	A6,A3			;LEFT END OF UNIVERSE?
	JRGE	BSCHKS			;YES
	MOVE	A4,@SCROLLX,L
	JRUC	BSCHKLPL
****BSCHK7A
****	MOVE	*A13(PDATA),A1,W
****	JRNZ	BSCHKS			;NO RESET ALLOWED 
****	MOVI	BRESETIM,A1
****	MOVE	A1,*A13(PDATA),W	;INITIALIZE THE TIMER
****	MOVE	@WORLDTLX,A1,L		;RESET
****	ADD	A3,A1
****	MOVE	A1,@WORLDTLX,L		;RE-ADJUST THE LEFT X BOUNDRY
****	JRUC	BSCHK1
*CHECK FOR UNIVERSE RIGHT BOUNDRY HIT
*A4 = SCROLL RATE TO STUFF IF O.K.
BSCHK8
	MOVE	B1,A9
	MOVE	A9,A3
	SUB	A6,A3			;RIGHT END OF UNIVERSE?
	JRLE	BSCHK8A			;YES
	MOVE	A4,@SCROLLX,L
	JRUC	BSCHKLPR		;NO, THERE IS MORE SCROLLING TO DO
BSCHK8A
	ABS	A3
***	CMPI	[1,0],A3		;BUFFER US OUT
***	JRLS	BSCHKS	
	MOVE	*A13(PDATA),A1,W
	JRNZ	BSCHKS			;NO RESET ALLOWED 
	MOVI	BRESETIM,A1
	MOVE	A1,*A13(PDATA),W	;INITIALIZE THE TIMER
	MOVE	@WORLDTLX,A1,L		;RESET
	SUB	A3,A1
	MOVE	A1,@WORLDTLX,L		;RE-ADJUST THE RIGHT X BOUNDRY

BSCHKS	CALLA	BSTOP			;STOP THE BACKGROUND	 
	CALLR	BSCHKLPEQ
	JRUC	BSCHK1							 
*CHECK FOR LESSER PLAYER IN THE LEFT DIRECTION									 
BSCHKLPL
	MOVE	A1,A3
	SUB	A0,A3
	JREQ	BSCHKPLG		;PLAYERS ARE EQUAL
	ABS	A3
	CMPI	40,A3
	JRLS	BSCHK1			;DON'T ADJUST VELS

	CMP	A0,A1	
	JRGT	BSCHKLPL2		;PLAYER TWO IS BEHIND
	MOVE	*A10(POBJ),A3,L
	MOVE	*A3(OXVEL),A3,L
	JRP	BSCHKPLG
     	JRUC	BSCHKLP1
BSCHKLPL2
	MOVE	*A11(POBJ),A3,L
	MOVE	*A3(OXVEL),A3,L
	JRP	BSCHKPLG
	JRUC	BSCHKLP2

*CHECK FOR LESSER PLAYER IN THE RIGHT DIRECTION
BSCHKLPR
	MOVE	A1,A3
	SUB	A0,A3
	JREQ	BSCHKPLG		;PLAYERS ARE EQUAL
	ABS	A3
	CMPI	40,A3
	JRLS	BSCHK1			;DON'T ADJUST VELS

	CMP	A0,A1	
	JRGT	BSCHKLPR1		;PLAYER ONE IS BEHIND
	MOVE	*A11(POBJ),A3,L
	MOVE	*A3(OXVEL),A3,L
	JRN	BSCHKPLG
     	JRUC	BSCHKLP2
BSCHKLPR1
	MOVE	*A10(POBJ),A3,L
	MOVE	*A3(OXVEL),A3,L
	JRN	BSCHKPLG
	JRUC	BSCHKLP1
*EQUALIZE PLAYER'S VELS AND RETURN
BSCHKPLG
	CALLR	BSCHKLPEQ
	JRUC	BSCHK1
*
*GIVE PLAYER 1 THE 1.5 X VELOCITY
*A10 = P1DATA, A11 = P2DATA
BSCHKLP1
	MOVI	PWXVEL+(PWXVEL/2),A3
	MOVE	A3,*A10(PXVEL),L
	MOVI	PWXVEL,A3
	MOVE	A3,*A11(PXVEL),L
	JRUC	BSCHK1
*
*GIVE PLAYER 2 THE 1.5 X VELOCITY
*A10 = P1DATA, A11 = P2DATA
BSCHKLP2
	MOVI	PWXVEL+(PWXVEL/2),A3
	MOVE	A3,*A11(PXVEL),L
	MOVI	PWXVEL,A3
	MOVE	A3,*A10(PXVEL),L
	JRUC	BSCHK1
*
*MAKE PLAYER VELOCITIES EQUAL 
*A10 = P1DATA, A11 = P2DATA
BSCHKLPEQ
	PUSH	A3
	MOVI	PWXVEL,A3
	MOVE	A3,*A11(PXVEL),L
	MOVE	A3,*A10(PXVEL),L
	PULL	A3
	RETS

*
*STOP THE BACKGROUND ALL TOGETHER
BSTOP	CALLA	BSTOPX
*STOP Y SCROLLING
BSTOPY
	PUSH	A0
	CLR	A0
	JRUC	BACKLY
*
*BACKGROUND VELOCITY LOADER
*A0: DESIRED VELOCITY GOES TO SCROLLY
BACKLY
	MOVE	A0,@SCROLLY,L		;STUFF THE SCROLL RATE
	PULL	A0
	RETS

*STOP X SCROLLING
BSTOPX
	PUSH	A0
	CLR	A0
	JRUC	BACKLX
*
*BACKGROUND VELOCITY LOADER
*A0: DESIRED VELOCITY GOES TO SCROLLX
BACKLX
	MOVE	A0,@SCROLLX,L		;STUFF THE SCROLL RATE
	PULL	A0
	RETS

**************************************************************************
*                                                                        *
* MAKFBOBJ - MAKE A BACKGROUND OBJECT THAT EXISTS IN THE FOREGROUND	 *
* A14 = PTR TO INIT. TABLE						 *
* RETURNS								 *
* Z BIT SET FAILURE							 *
*	A0 = 0								 *
*	A14 = UNCHANGED							 *
* Z BIT CLR SUCCESS							 *
* 	A0 = PTR TO OBJECT						 *
* 	A14 = NEXT WORD AFTER INIT TABLE				 *
*                                                                        *
**************************************************************************
MAKFBOBJ
	CALLA	GETOBJ
	JRZ	MAKFBX
	MMTM	SP,A1,A4,A7,A8
	CALLA	STFOBJ			;STUFF IT
	MOVE	*A0(OZVAL),A4,L
	JRNZ	MAKFB3			;HARD CODED Z
	MOVE	*A0(OFLAGS),A4,W
	MOVE	A4,A1
	ANDI	M_PREVZ|M_PZPLUS,A1
	JRZ	MAKFBNZ			;BR = NO MATCHING Z STUFF
	MOVE	@PREVZ,A1,L
	BTST	B_PZPLUS,A4
	JREQ	MAKFBZS			;BR = SAME OLD Z
	INC	A1
MAKFBZS
	MOVE	A1,*A0(OZVAL),L		;STUFF OLD Z
	JRUC	MAKFB3
MAKFBNZ
	MOVE	*A0(OID),A1,W
	JRN	MAKFB1			;BR = GROUND OBJECT BASE Z OFF TOP
	CALLA	SETZPOS			;OTHERWISE BASE Z OFF BOTTOM
	JRUC	MAKFB2
MAKFB1
	CALLA	SETTZPOS
MAKFB2
	MOVE	*A0(OZVAL),A4,L
	MOVE	A4,@PREVZ,L
MAKFB3
	MOVE	A0,A8
	CLR	A1			;INITIALIZE OFFSCREEN, LIMBO
	calla	ADDBB			;ADD IT TO THE BACKGROUND BLOCK LIST
	MOVE	*A8(OFLAGS),A4,W
	BTST	B_SPAWNP,A4
	JREQ	MAKFB4			;NOTHING TO SPAWN
	ANDNI	M_SPAWNP,A4
	MOVE	A4,*A8(OFLAGS),W
	MOVE	*A14+,A1,W
	MOVE	*A14+,A7,L
	CALLA	GETPRC
	MOVE	A0,*A8(OPLINK),L
	MOVE	A8,A0
MAKFB4
	MMFM	SP,A1,A4,A7,A8
	MOVE	A0,A0			;CLR Z BIT
MAKFBX
	RETS

**************************************************************************
*                                                                        *
* SKYUP - FADE DOWN THE SKY COLOR AND DIE				 *
* A9 = FADER SPEED							 *
*                                                                        *
**************************************************************************
SKYDOWN
	MOVE	*A13(PROCID),A0,W
	CLR	A1
	NOT	A1
	CALLA	KILALL
	MOVI	10000H,A8
SKYDOWN1
	MOVE	@SKYCOLOR,A0,W
	MOVE	A8,A1
	CALLA	XCOLOR
	MOVE	A0,@IRQSKYE,W
	SLEEP	1
	SUB	A9,A8
	JRGT	SKYDOWN1
	CLR	A1
	JRUC	SKYDIE

**************************************************************************
*                                                                        *
* EXPANDS - EXPAND THE SCREEN TO THE MAX FROM THE CURRENT SIZE		 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
EXPANDS
	MOVI	[-3,-5],A8
	MOVI	[3,5],A9
	MOVI	SCRNST,A10
	MOVI	SCRNEND,A11	;GET THESE FOR PROCESSING
	JRUC	SCBLOWUP

**************************************************************************
*                                                                        *
* SHRINKS - SHRINK THE SCREEN TO THE MIN FROM THE CURRENT SIZE		 *
* NOTE: CALL WITH JSRP							 *
*                                                                        *
**************************************************************************
SHRINKS
	MOVI	[3,5],A8
	MOVI	[-3,-5],A9
	MOVI	SCRNMID,A10
	MOVI	SCRNMID,A11	;GET THESE FOR PROCESSING

**************************************************************************
*                                                                        *
* SCBLOWUP - EXPAND OR CONTRACT SCREEN FROM THE CURRENT SIZE.            *
* A8 = [Y,X] INCREMENT OF SCRNTL EACH TICK				 *
* A9 = [Y,X] INCREMENT OF SCRNLR EACH TICK				 *
* A10 = [Y,X] BOUNDRY OF SCRNTL						 *
* A11 = [Y,X] BOUNDRY OF SCRNLR						 *
*                                                                        *
**************************************************************************
SCBLOWUP
	SLEEP	1
	CALLA	SCRNEXPA
	JRNC	SCBLOWUP
SCRNEXXX
	RETP

**************************************************************************
*                                                                        *
* SCREXP32 - SHRINK OR EXPAND THE SCREEN WINDOW FROM THE CURRENT SIZE	 *
*	      TO THE GIVEN IN A GIVEN AMOUNT OF TICKS			 *
* A0 = # OF TICKS							 *
* A10 = NEW SCRNTL							 *
* A11 = NEW SCRNLR							 *
* NOTE: CALL WITH JSRP							 *
*	TRASHES A8 & A9							 *
*                                                                        *
**************************************************************************
SCREXP32
	MOVE	@SCRNTL,A14,L
	MOVX	A14,A1
	SLL	16,A1
	CLR	A2
	MOVY	A14,A2
	SUBXY	A10,A14
	MOVX	A14,A5
	SLL	16,A5
	DIVS	A0,A5
	NEG	A5
	MOVE	A5,A6
	CLR	A5
	MOVY	A14,A5
	DIVS	A0,A5
	NEG	A5
	MOVE	A5,A7

	MOVE	@SCRNLR,A14,L
	MOVX	A14,A3
	SLL	16,A3
	CLR	A4
	MOVY	A14,A4
	SUBXY	A11,A14
	MOVX	A14,A5
	SLL	16,A5
	DIVS	A0,A5
	NEG	A5
	MOVE	A5,A8
	CLR	A5
	MOVY	A14,A5
	DIVS	A0,A5
	NEG	A5
	MOVE	A5,A9
	MOVE	A0,A5
SHTIMLP
	ADD	A6,A1			;ADD THE TLX INCREMENT
	ADD	A7,A2			;ADD THE TLY INCREMENT
	ADD	A8,A3			;ADD THE LRX INCREMENT
	ADD	A9,A4			;ADD THE LRY INCREMENT
	MMTM	A12,A1,A2,A3,A4,A5,A6,A7
	SRL	16,A1
	MOVY	A2,A1
	MOVE	A1,@SCRNTL,L	
	SRL	16,A3
	MOVY	A4,A3
	MOVE	A3,@SCRNLR,L
	SLEEP	1
	MMFM	A12,A1,A2,A3,A4,A5,A6,A7
	DSJS	A5,SHTIMLP
SHTIMR
	MOVE	A10,@SCRNTL,L		;MATCH WHAT THE CALLER WANTED
	MOVE	A11,@SCRNLR,L
	RETP

**************************************************************************
*                                                                        *
* SCRNEXPA - ARBITRARY SCREEN EXPAND OR CONTRACT			 *
* 									 *
* A8 = [Y,X] INCREMENT OF LOCATION SCRNST 				 *
* A9 = [Y,X] INCREMENT OF LOCATION SCRNEND 				 *
* A10 = [Y,X] MAX OR MIN OF SCRNST					 *
* A11 = [Y,X] MAX OR MIN OF SCRNEND					 *
* RETURNS								 *
* A8 = [Y,X] MODIFIED INCREMENT OF SCRNST, PROPER X OR Y ARE ZEROED	 *
* A9 = [Y,X] MODIFIED INCREMENT OF SCRNEND, PROPER X OR Y ARE ZEROED	 *
* CARRY SET - ALL BOUNDRIES HAVE BEEN HIT				 *
* CARRY CLEAR - THERE'S MORE TO DO					 *
*                                                                        *
**************************************************************************
SCRNEXPA
	MMTM	SP,A0,A1,A2,A3,A4
	MOVE	@SCRNTL,A0,L
	MOVE	@SCRNLR,A1,L

	TEST	A8 			;DONE INCREMENTING THIS WAY?
	JRNE	SCEAA81			;BR = NO DO IT
	TEST	A9
	JRNE	SCEAA91			;BR = NOT DONE WITH A9

	SETC				;FLAG SET - ALL BOUNDRIES REACHED
	MMFM	SP,A0,A1,A2,A3,A4
	RETS

SCEAA81
	MOVE	A8,A2
	MOVE	A0,A3
	MOVE	A10,A4
	calla	SCEXPBCK		;BOUNDRY CHECK
	MOVE	A2,A8
	MOVE	A3,@SCRNTL,L		;NEW SCREEN TOP LEFT
	
	TEST	A9	
	JREQ	SCEAEXXX
SCEAA91
	MOVE	A9,A2
	MOVE	A1,A3
	MOVE	A11,A4
	calla	SCEXPBCK		;BOUNDRY CHECK
	MOVE	A2,A9
	MOVE	A3,@SCRNLR,L		;NEW SCREEN LOWER RIGHT
SCEAEXXX
	CLRC
	MMFM	SP,A0,A1,A2,A3,A4
	RETS

**************************************************************************
*                                                                        *
* SCEXPBCK - SCREEN EXPAND BOUNDRY CHECK				 *
* A2 = [Y,X]INCREMENT							 *
* A3 = [Y,X]CURRENT POSITION						 *
* A4 = [Y,X]BOUNDRY							 *
* RETURNS								 *
* A2 = [Y,X]INCREMENT ALTERED IF NECESSARY				 *
* A3 = [Y,X]NEW POSITION						 *
*                                                                        *
**************************************************************************
SCEXPBCK
	PUSH	A5
	ADDXY	A2,A3

	CLR	A5
	CMPXY	A5,A2
	JRXEQ	SCEBK2
	JRXLT	SCEBK1A

	CMPXY	A4,A3		;+X INC, USE JRXLT ON COMPARE
	JRXLT	SCEBK2		;BR = HAVEN'T REACHED OR SURPASSED BOUNDRY
	JRUC	SCEBK1B

SCEBK1A
	CMPXY	A4,A3		;CHECK X BOUNDRY
	JRXGT	SCEBK2
SCEBK1B
	MOVX	A4,A3		;MATCH BOUNDRY
	SRL	16,A2
	SLL	16,A2		;CLEAR X INC

SCEBK2
	CMPXY	A5,A2
	JRYEQ	SCEBK9		;Y INCREMENT IS DONE
	JRYLT	SCEBK2A

	CMPXY	A4,A3		;+Y INC, USE JRYLT ON COMPARE
	JRYLT	SCEBK9		;BR = HAVEN'T REACHED OR SURPASSED BOUNDRY
	JRUC	SCEBK2B

SCEBK2A
	CMPXY	A4,A3
	JRYGT	SCEBK9
SCEBK2B
	MOVY	A4,A3
	ZEXT	A2		;CLEAR Y INC
SCEBK9
	PULL	A5
	RETS

************* Local Constants for UPD **************
DISP_PAD    	.set	00300030H	  ; Y:X
WIDEST_BLOCK	.set	250

;* Must keep the size of these structures a multiple of 16
map_zflagspal	.set 0
map_pal		.set 0		;size 4 - palette select
map_flags   	.set 4		;size 4 - bit 0 hflip, bit 1 yflip
map_z		.set 8		;size 8
map_x		.set 16		;size 16
map_y		.set 32		;size 16
map_hdr		.set 48		;size 16 - offset in long words from block_hdr_tbl
				; bits 12-15 are bits 4-7 of pal
				; map_hdr set to >FFFF if block is not allocated
block_size	.set 64		;* if changed must get rid of shifts by 6

;* Offsets for a BLOCK HDR structure
map_size	.set	0
map_w		.set	0	;size 16	  ; These fields can't be changed
map_h		.set	16	;size 16	  ; because they are used as the
map_animoff	.set 	32	;size 32	  ; OIMG block header
map_dataptr	.set	64	;size 32	  ;
block_hdr_size	.set 	96

************************************************************************
BGNDHGHT:
;Parms	A0 - XPOS for which height of BackGround needs to be determined
;Returns A0 -
;	Minimum YPOS (max height) of PRIMARY background which overlaps
;	specified XPOS
;	A0 = 0 if XPOS is invalid

;* Scan a Module list to find out which module contains blocks
;* which need to be checked
	mmtm	SP,A1,A2,A3,A4,A7,A8,A9,A10,A11
	move	A0,A1

	clr	A10			;init packed y:x starting position
	clr	A11

	move	@BAKMODS,A0,L		;* A0- ptr to the module list
ModLp0:	
	move	*A0+,A8,L		;load module ptr
	cmpi	0FFFFFFFFH,A8
	jrz	ModX0			;end of the module tbl
	move	*A8+,A9,L		;load packed y:x size

	move	*A0+,A3,W		;X start position
	zext	A3,W
	cmpi	BLSTSTRT,A3
	jrnz	NotLstStrtX
	move	A11,A3		
	subxy	A9,A3
	jruc	GotNewX0
NotLstStrtX:
	cmpi	BLSTEND,A3
	jrnz	GotNewX0
	move	A11,A3
GotNewX0:
	move	*A0+,A4,W		;Y start position
	zext	A4,W
	cmpi	BLSTSTRT,A4
	jrnz	NotLstStrtY
	move	A11,A4		
	subxy	A9,A4
	jruc	GotNewY0
NotLstStrtY:
	cmpi	BLSTEND,A4
	jrnz	NotLstEndY
	move	A11,A4
	jruc	GotNewY0
NotLstEndY:
	sll	16,A4
GotNewY0:
	movy	A4,A3
	move	A3,A10

;	cmpxy	A10,A1
;	jrv	ModX0 	;jump to exit loop if Mod start X > X sought

	;if Mod end X < X sought keep searching mod list
	move	A10,A11
	addxy	A9,A11	;A11 is module y:x end

	move	*A8+,A9,W		;load # of blocks
	add	A9,A7		;A7 is new BAKBITS ptr
	cmpxy	A11,A1
	jrnv	ModLp0		;skip if Ax < Bx

	move	A10,A0
	srl	16,A0
	jruc	GotHGHT

ModX0:
	clr	A0
GotHGHT:
	mmfm	SP,A1,A2,A3,A4,A7,A8,A9,A10,A11
	rets
************************************************************************

**************************** BSrch1stXB ********************************
BSrch1stXB:
;*** PARMS
;	A0 - x coordinate of a block
;	A1 - Start of background block table
;	A2 - end of block table
;*** Returns
;	A0 - address of first block with x coordinate >= parm
;		if new x is highest returns next empty block
;		if no blocks with >= X, return 0

;* A0 = X val being searched for
;* A1 = Block Table Base + offset to X val
;* A14 - Threshhold for switching from binary to linear search
;* A9 = Low # -- # greatest background block
;* A10 = Mid # -- (High + Low) >> 1
;* A2 = High # -- # of lowest background block

	mmtm	SP,A1,A2,A8,A9,A10
	clr	A9		;* set low = 0
	sub	A1,A2
	srl	6,A2	;* div by size of block (64)
	addi	map_x,A1	;* block tbl base + X offset
	movk	5,A14	;* threshhold for switching from binary to linear search
BSRCH:
	move	A2,A10
	sub	A9,A10	;* if (high - low) <= 5 finish with linear search
	cmp	A14,A10
	jrle	LSRCH

	srl	1,A10
	add	A9,A10		

	;* get mid->x
	move	A10,A8
	sll	6,A8		;* multiply by block size (64)
	add	A1,A8
	move	*A8,A8,W	;* get x coor of the block
	cmp	A0,A8
	jrlt	Blow
	move	A10,A2	;* high = mid
	jruc	BSRCH
Blow:
	move	A10,A9	;* low = mid
	jruc	BSRCH
LSRCH:
	;* finish with a linear search of block table from low to high
	;* ending with first block x coor that is >= A0
;* A0 = X val being searched for
;* A9 = Low Address -- pts to X offset of block
;* A2 = High Address -- pts to X offset of block
	sll	6,A9		;* low block # to low block offset
	sll	6,A2		;* high block # to high block offset
	add	A1,A9
	add	A1,A2
	movi	block_size,A8
LSRCHLP:
	move	*A9,A10,W	;* X coor
	cmp	A0,A10
	jrge	GotB		;* if low->x >= A0 goto found
	add	A8,A9
	cmp	A2,A9
	jrle	LSRCHLP
;* block not found, return 0
	clr	A0
	jruc BSrchDone
GotB:
	;* return a ptr to the block
	move	A9,A0
	subi	map_x,A0

BSrchDone:
	mmfm	SP,A1,A2,A8,A9,A10
	rets
**************************** BSrch1stXB ********************************


*********************** BAK END *******************************
;* Scan a Module list and return the packed Y:X end point
;PARMS
	;A0 - Module list
;RETURNS
	;A0 - PACKED Y:X end of wave
BAK_END:
	mmtm	SP,A3,A4,A8,A9,A10,A11

	clr	A10	;clr packed y:x starting position
	clr	A11
WEModLp:	
	move	*A0+,A8,L		;load module ptr
	cmpi	0FFFFFFFFH,A8
	jrz	WEModX			;end of the module tbl
	move	*A8+,A9,L		;load packed y:x size

	move	*A0+,A3,W		;X start position
	zext	A3,W
	cmpi	BLSTSTRT,A3
	jrnz	WENotLastStartX
	move	A11,A3		
	subxy	A9,A3
	jruc	WEGotNewX
WENotLastStartX:
	cmpi	BLSTEND,A3
	jrnz	WEGotNewX
	move	A11,A3
WEGotNewX:
	move	*A0+,A4,W		;Y start position
	zext	A4,W
	cmpi	BLSTSTRT,A4
	jrnz	WENotLastStartY
	move	A11,A4		
	subxy	A9,A4
	jruc	WEGotNewY
WENotLastStartY:
	cmpi	BLSTEND,A4
	jrnz	WENotLastEndY
	move	A11,A4
	jruc	WEGotNewY
WENotLastEndY:
	sll	16,A4
WEGotNewY:
	movy	A4,A3
	move	A3,A10
	
	move	A10,A11
	addxy	A9,A11	;A11 is module y:x end
	jruc	WEModLp

WEModX:
	move	A11,A0
	mmfm	SP,A3,A4,A8,A9,A10,A11
	rets
***********************************************************************

*********************** BAK START *******************************
;* Scan a Module list and return the packed Y:X starting point
;PARMS
	;A0 - Module list
;RETURNS
	;A0 - PACKED Y:X start of wave
BAK_STRT:
	mmtm	SP,A3,A4,A8,A9,A11

	clr	A11
	move	*A0+,A8,L		;load module ptr
	cmpi	0FFFFFFFFH,A8
	jrz	WSModX			;end of the module tbl
	move	*A8+,A9,L		;load packed y:x size

	move	*A0+,A3,W		;X start position
	zext	A3,W
	cmpi	BLSTSTRT,A3
	jrnz	WSNotLastStartX
	move	A11,A3		
	subxy	A9,A3
	jruc	WSGotNewX
WSNotLastStartX:
	cmpi	BLSTEND,A3
	jrnz	WSGotNewX
	move	A11,A3
WSGotNewX:
	move	*A0+,A4,W		;Y start position
	zext	A4,W
	cmpi	BLSTSTRT,A4
	jrnz	WSNotLastStartY
	move	A11,A4		
	subxy	A9,A4
	jruc	WSGotNewY
WSNotLastStartY:
	cmpi	BLSTEND,A4
	jrnz	WSNotLastEndY
	move	A11,A4
	jruc	WSGotNewY
WSNotLastEndY:
	sll	16,A4
WSGotNewY:
	movy	A4,A3
	move	A3,A0

WSModX:
	mmfm	SP,A3,A4,A8,A9,A11
	rets
***********************************************************************

****************  U P D A T E   D I S P   L I S T **********************
;* deletes all display objects which are not on the screen
;* insures all background blocks on screen are on the disp list
BGND_UD1:		;* call to update main background
;* input, WORLDTL, SCRNTL, SCRNLR, BAKLST, BAKBITS, BAKMODS
	;* this protects DISP_MOD and DISP_DEL TOO!
	mmtm	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	mmtm	SP,B0

	;* Get coors of area to be put on display list.
	move	@WORLDTL,A3,1
	move	A3,A4
	move	@SCRNTL,A0,1
	addxy	A0,A3 		
	move	@SCRNLR,A0,1
	addxy	A0,A4		
	movi	DISP_PAD,A0
	subxy	A0,A3		;A3 - disp_tl
	addxy	A0,A4		;A4 - disp_lr
	movi	BAKLST,A8	;A8 - bakground list
	callr	DISP_DEL

	;* determine which module
	move	@BAKMODS,A0,L		;A0- ptr to the module list
	movi	INSBOBJ,B0		;B0 - which insert routine
	movi	BAKBITS,A7		;A7 - bit table for block being on disp list
	callr	DISP_MOD
	mmfm	SP,B0
	mmfm	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	rets

BGND_UD2:		;* call to update secondary background
;* input, BAK2TLX, BAK2TLY, SCRNTL, SCRNLR, BAK2LST, BAK2BITS, BAK2MODS
	mmtm	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	mmtm	SP,B0
	;* Get coors of area to be put on display list.
	move	@BAK2TLX+16,A3,W
	move	@BAK2TLY+16,A0,W
	sll	16,A0
	movy	A0,A3
	move	A3,A4
	move	@SCRNTL,A0,L
	addxy	A0,A3 		
	move	@SCRNLR,A0,L
	addxy	A0,A4		
	movi	DISP_PAD,A0
	subxy	A0,A3		;A3 = disp_tl
	addxy	A0,A4		;A4 = disp_lr
	movi	BAK2LST,A8   		;A8 - bakground list
	callr	DISP_DEL

	movi	INSB2OBJ,B0		;B0 - which insert routine
	move	@BAK2MODS,A0,L		;* A0- ptr to the module list
	movi	BAK2BITS,A7
	callr	DISP_MOD
	mmfm	SP,B0
	mmfm	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	rets
***********************************************************************


*********************** D I S P   M O D *******************************
;* Scan a Module list to find out which modules contain blocks
;* which need to be checked for addition to the display list.
;	B0 - which insert routine
;	A0 - Module list
;	A3 - disp_tl
;	A4 - disp_lr
;	A7 - BAKBITS	;A7 - bit table for block being on disp list

;PARMS For DISP_ADD
;	A1 - Background Block table
;	A2 - End of Background Block table
;	A5 - Background hdr table
;	A9 - Module Start Position Y:X
;	A10 - ptr to palette table for new block
;	    ;passed from above
;	A3 - disp_tl
;	A4 - disp_lr
;	A6 - which bakground insert routine primary|secondary
;	A7 - bit table for block being on disp list

;* caller is responsible for pushing and popping all A-registers

DISP_MOD:
	clr	A9			;init y:x starting position
	clr	A11			;ending y:x pos
	move	A7,A6			;A6 will point to BakBits after Mod

ModLp:	
SkDAdd:
	move	A6,A7
	move	*A0+,A8,L		;load module ptr
	cmpi	0FFFFFFFFH,A8
	jrz	ModX			;end of the module tbl
	move	*A8+,A10,L		;load y:x size

	move	*A0+,A14,W		;X start position
	zext	A14,W
	cmpi	BLSTSTRT,A14
	jrnz	NotLastStartX
	move	A11,A14		
	subxy	A10,A14
	jruc	GotNewX
NotLastStartX:
	cmpi	BLSTEND,A14
	jrnz	GotNewX
	move	A11,A14
GotNewX:
	move	*A0+,A5,W		;Y start position
	zext	A5,W
	cmpi	BLSTSTRT,A5
	jrnz	NotLastStartY
	move	A11,A5		
	subxy	A10,A5
	jruc	GotNewY
NotLastStartY:
	cmpi	BLSTEND,A5
	jrnz	NotLastEndY
	move	A11,A5
	jruc	GotNewY
NotLastEndY:
	sll	16,A5
GotNewY:
	movy	A5,A14
	move	A14,A9

	move	A9,A11
	addxy	A10,A11	;A11 is module y:x end
	move	*A8+,A10,W		;load # of blocks
	add	A10,A6		;A6 is new BAKBITS ptr

; 	cmpxy	A9,A4
;	jrxle	ModX  	;jump to exit loop if Mod start X > Screen End X

	cmpxy	A3,A11
	jrxlt	SkDAdd		;skip if Mod X End < TL X
	jrylt	SkDAdd		;skip if Mod Y End < TL Y

	cmpxy	A9,A4
	jrxlt	SkDAdd  ;use this if modules aren't sorted left to right
				;jump to if Mod start X > Screen End X
	jrylt	SkDAdd		;skip if Mod Y Start > BR Y

	move	*A8+,A1,L		;A1-block table	
	move	A10,A2
	sll	6,A2			;each block is 4 words long
	add	A1,A2			;A2-block table end
	move	*A8+,A5,L		;A5-Hdrs
	move	*A8+,A10,L		;A10-Pal tbl
	subxy	A9,A3
	subxy	A9,A4
	callr	DISP_ADD
	addxy	A9,A3
	addxy	A9,A4
	jruc	ModLp

ModX:
	rets
***********************************************************************

*********************** D I S P   A D D *******************************
;* This function adds all module blocks in the given range of Module
;* relative coors to the display list.
;* The boundries are included in the group to add.
DISP_ADD:
;***	PARMS:
;       B0 - which bakground insert routine primary|secondary
;	A5 - Background hdr table
;	A7 - bit table for block being on disp list
;	A9 - Module Start Position Y:X
;	A10 - ptr to palette table for new block
;	A1 - Background Block table
;	A2 - End of Background Block table
;	A3 - disp_tl	- relative to the Module start POS
;	A4 - disp_lr	- " 
;*** RETURNS nothing

;thrashes A1,A8,A14
	mmtm	SP,A0,A6,A7,A11

	;* Find first universe block with an X coor >= A9
	movx	A3,A0
	sext	A0,W
	subi	WIDEST_BLOCK,A0
;A0 - x coordinate of a block
;A1 - Start of background block table
;A2 - end of block table
	callr	BSrch1stXB
;A0 is now the address of a block
	jrz	DADONE	;* no blocks with gtr Xcoor
	
	movi	block_size,A6

	move	A0,A8
	sub	A1,A8	;* subtract off start of table
	srl	6,A8	;* divide by block size (64)
	add	A7,A8	;* A8 - ptr to bit which indicates block on list
	subk	8,A8	;* after inc A8, use movb *A8 to load sign bit
	sub	A6,A0	;subtract block size
BScanLP0:
	inc	A8
	add	A6,A0	;* get next block
	;* check if there are no more bgnd blocks
	cmp	A2,A0
	jrge	DADONE

	;* if block already on display list try again
	movb	*A8,A11
	jrn	BScanLP0

	;* check if x to big
	move	*A0(map_x),A11,W
	cmpxy	A3,A11
	jrxge	BScan1	   	;* Jump if BlockX >= TL X

	;* load map header
	move	*A0(map_hdr),A14,W
	sll	20,A14	;* only want bottom 12 bits, top 4 are pal bits
	srl	15,A14	;* leaves B9 << 5 == long word offset
	add	A5,A14	;* A14 now pts to block hdr

	;* check if right end of block hangs onto screen
	move	*A14,A1,W	;A1 is now the width of the block
	add	A11,A1
	cmpxy	A3,A1	;* right end of block doesn't hang on to screen
	jrxlt	BScanLP0		;* jump if Block X+W < TL X

	;* if ycoor to big try again
	move	*A0(map_y),A1,0
	sll	16,A1
	cmpxy	A1,A4
	jrylt BScanLP0		;* Jump if Block Y > BR Y

	;* if ycoor+height to small try again
	move	*A14(map_h),A11,0
	sll	16,A11
	add	A11,A1
	cmpxy	A3,A1
	jrylt BScanLP0		;* Jump if Block Y+H < TL Y

	move	A0,A7
	callr	ADDBLOCK	;Thrashes A1,A14
	jrnc BScanLP0
	jruc	DADONE		;* was unable to add block - no blocks left

BScan1:
	dec	A8		;* bit ptr for block on disp list
	sub	A6,A0		;subtract off block size
BScanLP1:
	inc	A8
	add	A6,A0	;Get next block
	;* check if there are no more bgnd blocks
	cmp	A2,A0
	jrge	DADONE

	;* if block already on display list try again
	movb	*A8,A11
	jrn	BScanLP1

	;* if ycoor to big try again
	move	*A0(map_y),A1,W
	sll	16,A1
	cmpxy	A1,A4
	jrylt BScanLP1		;* Jump if Block Y > BR Y

	;* if ycoor+height to small try again
	move	*A0(map_hdr),A14,W
	sll	20,A14	;* only want bottom 12 bits, top 4 are pal bits
	srl	15,A14	;* leaves B9 << 5 == long word offset
	add	A5,A14	;* B9 now pts to block hdr
	move	*A14(map_h),A11,W
	sll	16,A11
	add	A11,A1
	cmpxy	A3,A1
	jrylt BScanLP1		;* Jump if Block Y+H < TL Y

	;* if xcoor to big quit
	move	*A0(map_x),A1,W
	cmpxy	A1,A4
	jrxlt DADONE	;* Jump if Block X > BR X

	move	A0,A7
	callr	ADDBLOCK
	jrnc	BScanLP1

DADONE:
	mmfm	SP,A0,A6,A7,A11
	rets
***********************************************************************

***********************************************************************
ADDBLOCK:
;* PARMS
; B0 - which INS routine
; A5 - base of background block hdr
; A7 - ptr to background block
; A8 - ptr to bit map for block on disp list
; A9 - Module Start Position Y:X
; A10 - ptr to palette table for new block

;* Returns carry set if GETOBJ fails...
	;* Also Destroys A1,A14 but they are used as temps in DISP_ADD
	mmtm	SP,A0,A2,A3,A4

	calla	GETOBJ
	jrz  	ADDX

	;* set bit in bitmap for block on list
	movb	*A8,A14
	ori		80H,A14
	movb	A14,*A8
	move	A8,*A0(OPLINK),L ;set OPLINK to be a ptr to the disp list bit
	
	move	*A7(map_x),A1,L	;A1 ypos:xpos of block from Mod Base
	addxy	A9,A1		;Add in Module Base Position
	move	A1,*A0(OXPOS),W
	srl	16,A1
	move	A1,*A0(OYPOS),W
	move	*A7,A4,W	;A4 - map_z,8:map_flags,4:map_pal,4
	move	A4,A3
	srl	8,A3
	sll	24,A3
	srl	8,A3
	move	A3,*A0(OZVAL),L

	move	*A7(map_hdr),A1,W
	movx	A1,A14
	sll	16,A14
	srl	28,A14
	sll	4,A14		;* bits 12-15 are bits 4-7 of pal index
	
	sll	20,A1		;* bits 0-11 are hdr ptr;
	srl	15,A1		;* A1-long word offset into block hdr tbl
	add	A5,A1		;* A1 - Ptr to oimg hdr - input to GSAGOF

	;A4 - map_z,8:map_flags,4:map_pal,4
	move	A4,A3
	sll	28,A4		;* last four bits for pal
	srl	28,A4
	add	A14,A4	
	sll	5,A4   		;* A4 is lword ptr from pal tbl
	add	A10,A4		;* add in pal tbl
	move	A0,A2		;save A0
	move	*A4,A0,L	;* get palette
	calla	GETBPAL
	jrnz	BSetPal
	clr	A0
BSetPal:
	move	A0,*A2(OPAL),W
	move	A2,A0		;restore A0

	movi	8002H,A4	;>8000 DMA GO, 2
	srl	4,A3	;* remove palette bits
	sll	30,A3		
	jrc	SKIP0	;* carry bit is the transparency bit
	addk	1,A4
SKIP0:
	srl	26,A3	;* line up flip h,v bits
	add	A3,A4	;A4 - Flags for GSAGOF
	move	A1,*A0(OIMG),L
*A1=DATA BLOCK POINTER
*A4=OBJECT FLAGS
	calla	GSAGOF
*A2=RETURNED WITH NEW OSIZE
*A3=RETURNED WITH NEW SAG
*A4=RETURNED WITH NEW OFFSET:OFLAGS
	move	A0,A1
	addi	OSIZE+20H,A1
	mmtm	A1,A2,A3,A4		;Stuff OSIZE,OSAG,OFFSET,OFLAGS

	call	B0
	clrc
	mmfm	SP,A0,A2,A3,A4
	rets
ADDX: ;failure to get object
	setc
	mmfm	SP,A0,A2,A3,A4
	rets
**********************************************************************


************************ D I S P   D E L *****************************
;* This function deletes all objs outside the given range
;* of coors from the display list.
;* The boundries are not included in the group to delete.
DISP_DEL:
;***	PARMS:
;	A8 - bak list	
;	A3 - disp_tl
;	A4 - disp_lr
;*** RETURNS nothing

;Thrashes A0,A6,A7,A8,A9	;all of which are pushed by caller

del_loop:
	move	A8,A9	   	; ptr to PREV in A9
	move	*A9,A8,L   	; ptr to NEXT in A8
	jrz	del_done	   	; QUIT if at end of list

	;if X > Xmax continue
	move	*A8(OXPOS),A7,W
	cmpxy	A7,A4
	jrxlt	DEL_IT		;* jump if BR X < Block X

	;if Y > Ymax continue
	move	*A8(OYPOS),A0,W
	sll	16,A0
	cmpxy	A0,A4
	jrylt	DEL_IT		;* jump if BR Y < Block y

	move *A8(OIMG),A1,L
	;if X+width < Xmin continue
	move	*A1,A6,W		;A6 block width
	add	A6,A7
	cmpxy	A3,A7
	jrxlt	DEL_IT		;* jump if TL X > Block X+W

	;if Y+height < Ymin continue
	move	*A1(map_h),A7,0		;A7 block height
	sll	16,A7
	add	A7,A0
	cmpxy	A3,A0
	jrylt	DEL_IT		;* jump if TL Y > Block Y+H

	jruc	del_loop

DEL_IT:	;* DELETE the OBJ
    ;* free the palette
	move	*A8(OPAL),A0,W
	jrz	NoFreeP
	calla	FREEPAL
NoFreeP:

	;* unset the on display list bit
	move	*A8(OPLINK),A0,L
	movb	*A0,A7
	andi	7FH,A7
	movb	A7,*A0
		
	move	*A8,*A9,L  	; put NEXT link in PREV obj
	move	@OFREE,A0,L				
	move	A0,*A8,L
	move	A8,@OFREE,L	; Return deleted block to free stack
	move	A9,A8		;A1- points to last obj
	jruc	del_loop

del_done:
	rets

	.END
