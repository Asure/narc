TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .FILE   "NARCSPRY.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    **************************************************************************
       7                    *                                                                        *
       8                    *          NARC (R)                                                      *
       9                    *                                                                        *
      10                    *          Copyright 1988 Williams Electronics Games Inc.                *
      11                    *          All Rights Reserved                                           *
      12                    *                                                                        *
      13                    **************************************************************************
      14                    *                                                                        *
      15                    *          SPRAY PAINTING MODULE                                         *
      16                    *          SPRAY PAINTING MODULE                                         *
      17                    *          SPRAY PAINTING MODULE                                         *
      18                    *          SPRAY PAINTING MODULE                                         *
      19                    *                                                                        *
      20                    *          Larry DeMar    September 22, 1988                             *
      21                    *                                                                        *
      22                    **************************************************************************
      23                    *                                                                        *
      24                    *          HSTD table modified 11/8/88 to Box all winners and            *
      25                    *          Fix the interaction between the painter and the               *
      26                    *          scroller.    -Led                                             *
      27                    *                                                                        *
      28                    **************************************************************************
      29                    *       GET THE SYSTEM STUFF
      30                            .INCLUDE        "\video\MPROCEQU.ASM"   ;MPROC equates
      31                            .INCLUDE        "\video\DISPEQU.ASM"    ;Display processor equates
      32                            .INCLUDE        "\video\GSP.INC"        ;GSP assembler equates
      33                            .INCLUDE        "\video\SYS.INC"        ;Zunit system equates
      34                            .INCLUDE        "\video\MACROS.HDR"     ;Macros, Yeah!
      35                    *       LOCAL STUFF
      36                    *       .INCLUDE        "NARCEQU.ASM"           ;NARC Equates
      37                    *
      38                    *        NARCEQU GLOBALS!!!!
      39                    *        NARCEQU GLOBALS!!!!
      40                    *        NARCEQU GLOBALS!!!!
      41                    *
      42                             .GLOBAL         FREEPAL,DMAQWAIT,GETFPAL,PSCORE,RANDOM,P1DATA
      43                             .GLOBAL         P2DATA,CLR_SCRN
      44                    
      45                             .INCLUDE        "NARCLEQU.ASM"             ;LINKY EQUATES
      46                             .INCLUDE        "NARCSCRP.ASM"           ;SCRIPT CONSTANTS/MACROS
      47                            .INCLUDE        "IMGTBL.GLO"            ;Image Label Equates
      48                    *
      49                    *        OTHER MODULES
      50                    *
      51                             .GLOBAL         VAL_TAB
      52                             .GLOBAL         ROM_PTRS
      53                             .GLOBAL         ALL_TAB
      54                             .GLOBAL         TOD_TAB
      55                             .GLOBAL         E_GAME
      56                             .GLOBAL         INIT_TB
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    2

      57                    
      58                            .GLOBAL         HSTDTAB, SCRL_GO, SCRL_SRT, SCRL_END
      59                             .GLOBAL         SCRL_DIV, SCRL_DIR, SCRL_FRC
      60                             .GLOBAL         FADE_RAM
      61                    
      62                             .GLOBAL         RC_BYTEI
      63                             .GLOBAL         GET_HSCR
      64                             .GLOBAL         PT_ENTRY
      65                             .GLOBAL         A2_CHECK      ;IN NARCHSTD DUE TO T.I.'S  BRAIN DAMAGE
      66                    
      67                             .GLOBAL         P1_INITS, P2_INITS, E_INITS
      68                             .GLOBAL         P_FORK
      69                    
      70                             .GLOBAL         CHK_CMOS
      71                    *
      72                    *        THIS MODULE
      73                    *
      74                             .GLOBAL         Y_CORR, RES_SCRL, P_SCRIPT, X_PL_SA3
      75                             .GLOBAL         P1_SPRAY, P2_SPRAY, E_BRUSH, SC_CRAM
      76                             .GLOBAL         SPR_CHAR, BINBCD, BCDBIN
      77                             .GLOBAL         SPR_GPAL, SPR_FPAL 
      78                    
      79 00000000                    .BSS            SPR_PAL,16        ;GLOBAL FOR SPRAY PAINTERS
      80                    
      81 00000000                    .TEXT
      82                    *
      83                    *     ROM STRUCTURE FOR A GIVEN PAINTBRUSH:
      84                    *
      85                    
      86              0000  WIDTH    EQU     0                      ;WORD   WIDTH IN BYTES
      87              0010  HEIGHT   EQU     WIDTH+WORD_SIZE        ;WORD   HEIGHT IN BYTES
      88              0020  DW       EQU     HEIGHT+WORD_SIZE       ;LONG   ADD TO CENTER FOR PLOTTING (NEGATIVE)
      89              0040  DH       EQU     DW+LONG_SIZE           ;LONG
      90              0060  UNIT_V   EQU     DH+LONG_SIZE           ;WORD   UNIT VECTOR SQUARED (2 BIT FRAC.)
      91              0070  S_DATA   EQU     UNIT_V+WORD_SIZE       ;WIDTH*HIGHT DATA BYTES.
      92                    *
      93                    *     RAM PARAMETERS FOR A SPRAY OPERATION:
      94                    *
      95                    *        for re-entrancy these offset from PDATA in process store
      96                    *
      97                    
      98              0060  SPR_POINTER      EQU     PDATA                  ;LONG   POINTER TO BRUSH BEING USED.
      99              0080  SPR_PALETTE      EQU     SPR_POINTER+LONG_SIZE  ;WORD   6 BITS SAYS WHICH PALETTE
     100              0090  SPR_SCALER       EQU     SPR_PALETTE+WORD_SIZE  ;WORD   6 BIT FRACTION
     101              00a0  SPR_X            EQU     SPR_SCALER+WORD_SIZE   ;LONG   X POSITION  12 bit fraction
     102              00c0  SPR_Y            EQU     SPR_X+LONG_SIZE        ;LONG   Y POSITION  12 bit fraction
     103              00e0  SPR_XV           EQU     SPR_Y+LONG_SIZE        ;LONG   X VELOCITY  Aligned to position
     104              0100  SPR_YV           EQU     SPR_XV+LONG_SIZE       ;LONG   Y VELOCITY
     105              0120  SPR_SCRIPT       EQU     SPR_YV+LONG_SIZE       ;LONG   CURRENT SCRIPT POINTER
     106              0140  SPR_Y_BASE       EQU     SPR_SCRIPT+LONG_SIZE   ;LONG   Y BASE FOR OUR MESSAGE
     107              0160  SPR_Y_SCROLL     EQU     SPR_Y_BASE+LONG_SIZE   ;LONG   CURRENT SCROLL POSITION
     108              0180  SPR_FIGURE       EQU     SPR_Y_SCROLL+LONG_SIZE ;LONG   Pointer to vectors in current figure.
     109              01a0  SPR_SLEEP        EQU     SPR_FIGURE+LONG_SIZE   ;WORD   SLEEP PER BLOT (8 BIT FRACTION)
     110              01b0  SPR_DIVIDER      EQU     SPR_SLEEP+WORD_SIZE    ;WORD   COUNT DOWN FRAMES TILL SLEEP
     111              01c0  SPR_COL_BASE     EQU     SPR_DIVIDER+WORD_SIZE  ;WORD   BASE COLOR IN PALLATE 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    3

     112                                                                    ;          DIVIDES 32 EVENLY.
     113              01d0  SPR_COL_MAX      EQU     SPR_COL_BASE+WORD_SIZE ;WORD   BASE+32.  MAX COLOR ENTRY
     114              01e0  SPR_BLOB_ROUT    EQU     SPR_COL_MAX+WORD_SIZE  ;LONG   ROUTINE TO CALL TO SPRAY BLOT
     115              0200  SPR_FUZZ_FLAG    EQU     SPR_BLOB_ROUT+LONG_SIZE ;WORD  NON ZERO SAYS ADD FUZZ
     116                    *                         FOR WALL SPRAYING, ITS A MASK FOR WHICH BITS TO KEEP
     117                    *                         FOR SPRAY ON BLACK, HIGH BYTE IS BASE.  LOW
     118                    *                                BYTE IS MASK FOR RANDY-NUM.
     119                    *
     120                    *        HSTD OUTPUT DATA MUST CO-EXIST WITH SPRAY DATA IN
     121                    *        PROCESS STORE AREA
     122                    *
     123              0210  HSTD_POINTER     EQU     SPR_FUZZ_FLAG+WORD_SIZE  ;WORD TABLE OFFSET OF NEXT ENTRY
     124              0220  HSTD_TABLE       EQU     HSTD_POINTER+WORD_SIZE   ;LONG POINTER TO TABLE BEING USED
     125                    
     126 00000000       20           .STRING         "  NNAARRCC    --    CCOOPPYYRRIIGGHHTT  11998888  "  
     127 00000190       57           .STRING         "WWIILLLLIIAAMMSS  EELLEECCTTRROONNIICCSS  "
     128 000002e0       47           .STRING         "GGAAMMEESS  IINNCC..    AALLLL  RRIIGGHHTTSS"
     129 00000440       20           .STRING         "  RREESSEERRVVEEDD..  "
     130 000004f0       20           .STRING         "  --EEPPJJ  --GGNNPP  --TTRRAA  --LLEEDD  --JJEEHH  "
     131 00000690       20           .STRING         "  --JJRRNN  --MMLL  --GGWWSS  --LLIINN  --AALL  "
     132 00000810       20           .STRING         "  --BBLLSS  --MMLL  --TTJJEE  --DDTTWW  --RRMMGG  "
     133 000009a0       20           .STRING         "  --WWBBDD  --JJBB  --JJRRHH  --DDPP  --JJPP  "
     134 00000b10                    .EVEN
     135                    
     136 00000b10           HSTDTAB
     137 00000b10     0d3f           CALLR   RES_SCRL
         00000b20     017e  
     138 00000b30     5600           CLR     A0
     139 00000b40     0580           MOVE    A0,@DISPLAYON,W    ; TURN OFF DMA
         00000b50 00000000! 
     140 00000b70     0d5f           CALLA   DMAQWAIT           ; WAIT FOR DMA TO BE DONE (IF IN MOTION)
         00000b80 00000000! 
     141 00000ba0     c080           JAUC    OUTPUT_HSTDS
         00000bb0 00000bd0' 
     142                    
     143                    **************************************************************************
     144                    *                                                                        *
     145                    *          OUTPUT HIGH SCORE TABLE                                       *
     146                    *                                                                        *
     147                    **************************************************************************
     148                    *
     149                    *        HSTD TABLE MUST BE OK BEFORE WE WOULD DO THIS PAGE.
     150                    *
     151 00000bd0           OUTPUT_HSTDS
     152 00000bd0     0d3f           CALLR   SPR_GPAL                  ;GET A PALETTE FOR SPRAYING
         00000be0     02b0  
     153 00000bf0     0d3f           CALLR   RES_SCRL                  ;RESET SCROLLING DATA
         00000c00     0170  
     154                    
     155 00000c10     09e8           MOVI    ALL_TAB,A8                ;THIS IS THE TABLE WE'RE INTERESTED IN
         00000c20 00000000! 
     156 00000c40     b30d           MOVE    A8,*A13(HSTD_TABLE),L     ;PUT IN PROCESS AREA
         00000c50     0220  
     157 00000c60     0d5f           CALLA   VAL_TAB
         00000c70 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    4

     158 00000c90     c800           JRC     TABLE_DOA
         00000ca0     0081  
     159                    
     160 00000cb0     0d5f           CALLA   CLR_SCRN             ;CLEAR OUT THE SCREEN
         00000cc0 00000000! 
     161                    
     162 00000ce0                    JSRP    DRAW_BORDER
     163                    
     164 00000d50     09e4           MOVI    HIGHEST_NARCS,A4     ;FIRST PUT PUT TITLE SECTION.
         00000d60 00014c20' 
     165 00000d80                    JSRP    P_SCRIPT
     166                    
     167 00000df0     09e7           MOVI    SCROLL_PROCESS,A7
         00000e00 00002450' 
     168                    
     169 00000e20     0d5f           CALLA   P_FORK               ;FORK THE NEW PROCESS
         00000e30 00000000! 
     170 00000e50     ca66           JRZ     TABLE_DOA            ;CAN'T GET A PROCESS.....EXIT NOW!
     171                    
     172 00000e60     0d3f           CALLR   COPY_PDATA_AREA      ;PASS HIM OUR SPR_SCALER!
         00000e70     043b  
     173                    
     174 00000e80     09e1           MOVI    ALL_TIME_SPRAY_START*STRUCT_Y_UNIT,A1
         00000e90 000e0000  
     175 00000eb0     b22d           MOVE    A1,*A13(SPR_Y),L     ;THIS IS WHERE WE WILL SPRAY FROM!
         00000ec0     00c0  
     176                    
     177 00000ed0     1820           MOVK    1,A0
     178 00000ee0     b00d           MOVE    A0,*A13(HSTD_POINTER),W   ;ENTRY 1
         00000ef0     0210  
     179 00000f00     0d3f           CALLR   SET_X_FOR_ENTRY           ;SET SCALER AND X COORDINATE
         00000f10     0387  
     180                    
     181                    **************************************************************************
     182                    *                                                                        *
     183                    *          CLR     A0                                                    *
     184                    *          MOVE    A0,@TAB_NUM,W              ;COUNT ENTRIES...AFTER 3RD *
     185                    *                                                                        *
     186                    **************************************************************************
     187                                                               ;SPEED UP THE DRAW RATE
     188 00000f20                    JSRP    SPRAY_A_TABLE
     189                    *
     190                    *        HIGHEST TABLE IS FINISHED.....NOW WE NEED TO PAINT THE
     191                    *        "TODAY'S TOP 5" TITLE.  HYPER THE Y TO THE CORRECT BASE
     192                    *
     193                    
     194 00000f90     09e0           MOVI    TODAYS_Y_HYPER,A0         ;THIS IS THE DISTANCE TO SKIP IT
         00000fa0 00078000  
     195 00000fc0                    JSRP    HYPER_Y                   ;MOVE THE Y AND WAIT FOR IT TO GET IN RANGE
     196                    *
     197                    *        ALL TIME DONE....NOW ADD ON TODAYS
     198                    *
     199 00001030     09e8           MOVI    TOD_TAB,A8           ;THIS IS THE TABLE WE'RE INTERESTED IN
         00001040 00000000! 
     200 00001060     b30d           MOVE    A8,*A13(HSTD_TABLE),L     ;PUT IN PROCESS AREA
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    5

         00001070     0220  
     201 00001080     0d5f           CALLA   VAL_TAB            ;TODAY TABLE DEAD
         00001090 00000000! 
     202 000010b0     c840           JRC     TABLE_DOA
     203                    
     204 000010c0     09e4           MOVI    TOP_TODAY,A4               ;FIRST PUT PUT TITLE SECTION.
         000010d0 00014f28' 
     205 000010f0                    JSRP    P_SCRIPT
     206                    
     207 00001160     09e0           MOVI    TOP5_Y_HYPER,A0            ;PUSH UP THE Y AND WAIT
         00001170 00064000  
     208 00001190                    JSRP    HYPER_Y
     209                    
     210 00001200     09e4           MOVI    TOP_5,A4
         00001210 000151a8' 
     211 00001230                    JSRP    P_SCRIPT
     212                    
     213 000012a0     09e0           MOVI    ENTRY_Y_HYPER,A0           ;MOVE DOWN FOR 1ST TABLE ENTRY
         000012b0 00050000  
     214 000012d0                    JSRP    HYPER_Y
     215                    *
     216                    *        TODAY'S TOP 5 MESSAGE COMPLETE....NOW PRINT THE TOP 5 PLAYERS
     217                    *
     218 00001340     1820           MOVK    1,A0
     219 00001350     b00d           MOVE    A0,*A13(HSTD_POINTER),W   ;ENTRY 1
         00001360     0210  
     220 00001370     0d3f           CALLR   SET_X_FOR_ENTRY           ;SET SCALER AND X COORDINATE
         00001380     0340  
     221                    
     222 00001390                    JSRP    WAIT_A_TABLE
     223 00001400                    JSRP    WAIT_FOR_SCROLL            ;WAIT TILL ITS IN POSITION
     224                    
     225 00001470                    SLEEP   180H                       ;LET EM LOOK
     226                    
     227                    **************************************************************************
     228                    *                                                                        *
     229                    *          MOVI    6,A0                                                  *
     230                    *          MOVE    A0,@SCRL_GO,W                                         *
     231                    *          MOVE    A0,@SCRL_DIV,W                                        *
     232                    *                                                                        *
     233                    *          MOVE    *A13(SPR_PALETTE),A0,W    ;GET OUR PALETTE NUMBER     *
     234                    *          CALLR   POINT_AT_PALETTE          ;MAKE A0 A POINTER          *
     235                    *          MOVE    A0,@FADE_RAM,L            ;PASS THE POINTER           *
     236                    *          MOVI    START_FADE,A0                                         *
     237                    *          MOVE    A0,@SCRL_FRC,W            ;START THE FADE             *
     238                    *                                                                        *
     239                    *          SLEEP    120H                                                 *
     240                    *                                                                        *
     241                    *                                                                        *
     242                    **************************************************************************
     243 000014c0           TABLE_DOA
     244 000014c0     b5a0           MOVE    *A13(PROCID),A0,W    ;GET OUR ID
         000014d0     0020  
     245 000014e0     09e1           MOVI    0FFFFH,A1
         000014f0 0000ffff  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    6

     246 00001510     0d5f           CALLA   KILALL               ;KILL ANY OTHERS IN CASE OF BAD TABLE
         00001520 00000000! 
     247                    
     248 00001540     5600           CLR     A0
     249 00001550     0580           MOVE    A0,@SCRL_FRC,W       ;IN CASE BAD PATH COMES THROUGH...
         00001560 00000000! 
     250                    *                                     ;TURN OFF THE SCROLLER!
     251                    
     252 00001580     0d3f           CALLR   SPR_FPAL             ;FREE UP THE SPRAYER PALETTE
         00001590     0223  
     253 000015a0                    RETP                         ;RETURN TO SENDER!
     254                    
     255                    **************************************************************************
     256                    *                                                                        *
     257                    *          SPRAY_A_TABLE                                                 *
     258                    *          WAIT_A_TABLE                                                  *
     259                    *                                                                        *
     260                    *          THIS IS CALLED TO SPRAY OUT ALL THE ENTRIES OF THE            *
     261                    *          CURRENT TABLE.                                                *
     262                    *                                                                        *
     263                    **************************************************************************
     264 000015d0           SPRAY_A_TABLE
     265 000015d0           PAINT_NEXT_ENTRY
     266 000015d0                    JSRP    DO_ENTRY                  ;PRINT OUT THIS ENTRY!
     267                    
     268 00001640     0d3f           CALLR   ENTRY_IN_A7               ;GET A8 SET.
         00001650     0372  
     269 00001660     b501           MOVE    *A8(TB_VISIBLE),A1,W      ;GET NUMBER WE'RE PLOTTING
         00001670     0030  
     270 00001680     4820           CMP     A1,A0                     ;ARE WE THERE?
     271 00001690     c803           JRLO    NOT_DUN_YET               ;NOPE
     272 000016a0                    RETP                              ;ALL DONE...RETURN
     273                    
     274 000016d0           NOT_DUN_YET
     275 000016d0     1020           INC     A0                        ;PUSH TO NEXT ONE.
     276 000016e0     b00d           MOVE    A0,*A13(HSTD_POINTER),W   ;PUT BACK IN PROCESS STORE
         000016f0     0210  
     277 00001700     0d3f           CALLR   SET_X_FOR_ENTRY           ;SET SCALER AND X COORDINATE
         00001710     0307  
     278 00001720     0d3f           CALLR   ADJUST_Y_OVER_A0          ;MOVE TO PLACE TO SPRAY NEXT
         00001730     032c  
     279                    *
     280                    *        NOW WE KEEP CORRECTING Y FOR SCROLL, AND START TO
     281                    *        PAINT AGAIN WHEN OUR Y GETS HIGH ENOUGH TO STAY ON SCREEN
     282                    *
     283 00001740           WAIT_A_TABLE
     284 00001740                    JSRP    WAIT_FOR_Y
     285 000017b0     c0e1           JRUC    PAINT_NEXT_ENTRY          ;READY TO PAINT...GO!
     286                    
     287                    
     288 000017c0     b7a1  HYPER_Y  MOVE    *A13(SPR_Y),A1,L          ;GET Y
         000017d0     00c0  
     289 000017e0     4001           ADD     A0,A1
     290 000017f0     b22d           MOVE    A1,*A13(SPR_Y),L          ;ITS NOW WHERE WE NEED IT
         00001800     00c0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    7

     291 00001810     0300           JRUC    WAIT_FOR_Y                ;NOW WAIT FOR Y IN RANGE
     292                    
     293                    **************************************************************************
     294                    *                                                                        *
     295                    *          WAIT_FOR_Y                                                    *
     296                    *                                                                        *
     297                    *          This is called by the high score table sprayers.              *
     298                    *          It waits for its base Y to get into visible territory         *
     299                    *          before allowing spraying.  The current Y is stored in         *
     300                    *          SPR_Y.  It updates the current y to the screen based          *
     301                    *          on the scrolling data stored at Y_CORR.  SPR_Y_SCROLL         *
     302                    *          is the processes own version to track how much movement       *
     303                    *          has occurred since the last update.                           *
     304                    *                                                                        *
     305                    **************************************************************************
     306                    
     307 00001820           WAIT_FOR_Y
     308 00001820                    SLEEP   1
     309 00001860     b7ae           MOVE    *A13(SPR_Y_SCROLL),A14,L    ;GET CURRENT SCROLLING COORDINATE
         00001870     0160  
     310 00001880     07aa           MOVE    @Y_CORR,A10,L                ;GET THE ONE INDICATED BY IRQ
         00001890 00000000! 
     311                    
     312 000018b0     454e           SUB     A10,A14                   ;THIS IS NEGATIVE OF THE OFFSET
     313 000018c0     03ae           NEG     A14                       ;TURN IT POSITIVE (OUR OFFSET)
     314                    
     315 000018d0     b34d           MOVE    A10,*A13(SPR_Y_SCROLL),L  ;STORE THIS BACK AS OUR DISTANCE
         000018e0     0160  
     316                    
     317 000018f0     b7a8           MOVE    *A13(SPR_Y),A8,L          ;GET Y FOR CURRENT BLOB
         00001900     00c0  
     318 00001910     41c8           ADD     A14,A8                    ;ADD CORRECTION
     319 00001920     b30d           MOVE    A8,*A13(SPR_Y),L          ;STORE IT BACK
         00001930     00c0  
     320                    
     321 00001940     0b68           CMPI    Y_TO_DRAW*STRUCT_Y_UNIT,A8    ;ARE WE HIGH ENOUGH
         00001950 ffe91fff  
     322 00001970     c3ea           JRHI    WAIT_FOR_Y                    ;not yet....wait some more
     323                    
     324 00001980                    RETP
     325                    
     326                    *
     327                    *        THIS IS THE PASTELLY TABLE FROM ROBOTRON'S HSTD
     328                    *        TABLE
     329                    *
     330                    *INIT_BORDER_PALETTE
     331                    *         MMTM    SP,A0,A1,A2,A3
     332                    *         CALLR   POINT_AT_PALETTE          ;POINT AT REQUESTED PALETTE
     333                    *         MOVI    COLTAB,A1
     334                    *IBP1     MOVB    *A1,A2                    ;FETCH A BYTE
     335                    *         CALLR   A2_FROM_ROBO_PALETTE      ;TURN FROM ROBO PALETTE TO NARC
     336                    *         MOVE    A2,*A0+                   ;WRITE OUT THE BYTE
     337                    *         ADDI    BYTE_SIZE,A1
     338                    *         CMPI    CT_END,A1                 ;END OF TABLE?
     339                    *         JRLO    IBP1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    8

     340                    *       MMFM    SP,A0,A1,A2,A3
     341                    *       RETS
     342                    *
     343                    *A2_FROM_ROBO_PALETTE
     344                    *         MMTM    SP,A3,A4
     345                    *         ANDI    BYTE_MASK,A2              ;KEEP BYTE
     346                    *         MOVE    A2,A3                     ;REDS IN A3
     347                    *         ANDI    7,A3                      ;KEEP REDS
     348                    *         SLL     12,A3                     ;MOVE REDS FROM UNITS TO HIGH
     349                    *         MOVE    A2,A4                     ;GREENS IN A4
     350                    *         ANDI    38H,A4                    ;MASK JUST GREEN
     351                    *         SLL     4,A4                      ;GREENS SET
     352                    *         ADD     A4,A3                     ;ADD GREENS TO RED
     353                    *         ANDI    0C0H,A2                   ;MASK BLUES
     354                    *         SRL     3,A2                      ;SHIFT TO POSITION
     355                    *         ADD     A3,A2                     ;A2 HAS THE COLOR WORD
     356                    *       MMFM    SP,A3,A4
     357                    *       RETS
     358                    *
     359                    *COLTAB .BYTE    000H                  ;BACKY IS COLOR ZERO
     360                    *       .BYTE    037H,02FH,027H,01FH,017H,047H,047H,087H
     361                    *       .BYTE    087H,0C7H,0C7H,0C6H,0C5H,0CCH,0CBH,0CAH
     362                    *       .BYTE    0C0H,0D0H,098H,038H,033H
     363                    *CT_END   
     364                    
     365                    **************************************************************************
     366                    *                                                                        *
     367                    *          DRAW_BORDER                                                   *
     368                    *                                                                        *
     369                    *          THIS IS CALLED TO CREATE THE BORDER FOR THE "HIGHEST          *
     370                    *          SCORES FRAME.                                                 *
     371                    *                                                                        *
     372                    **************************************************************************
     373              00e0  FIRST_BORDER_COLOR       EQU     0E0H
     374              00e8  LAST_BORDER_COLOR        EQU     0E8H
     375                    
     376              0000  RING_MIN_X    EQU     0
     377              0000  RING_MIN_Y    EQU     0
     378              0200  RING_MAX_X    EQU     512
     379              0190  RING_MAX_Y    EQU     400
     380                    
     381              000c  RINGS    EQU     12                   ;12 RINGS OF 2 STRIPES ON BORDER
     382                    
     383 000019b0           DRAW_BORDER
     384 000019b0     5663           CLR     A3              ;PALETTE 0
     385                    *         MOVE    A3,A0           ;GET PALETTE READY FOR SETUP.
     386                    *         CALLR   INIT_BORDER_PALETTE   ;SET THE PALETTE!
     387 000019c0     5600           CLR     A0              ;START WITH RING 0
     388                    
     389 000019d0     09c8           MOVI    FIRST_BORDER_COLOR,A8          ;THIS IS COLOR MIN
         000019e0     00e0  
     390 000019f0     09c7           MOVI    RING_MAX_Y,A7                  ;Y EXTENT OF BORDER.
         00001a00     0190  
     391 00001a10     5729           CLR     A9                             ;A9 IS Y OFFSET FOR DRAW RING
     392                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE    9

     393 00001a20           BORDER_LOOP
     394 00001a20     4d01           MOVE    A8,A1           ;USE CURRENT COLOR
     395 00001a30     0d3f           CALLR   NEXT_IN_A8
         00001a40     000c  
     396 00001a50     4d02           MOVE    A8,A2           ;NEXT IN A2
     397 00001a60     0d3f           CALLR   NEXT_IN_A8
         00001a70     0009  
     398 00001a80     0d3f           CALLR   DRAW_RING
         00001a90     001f  
     399 00001aa0     1020           INC     A0              ;SET FOR NEXT RING
     400 00001ab0     0b40           CMPI    RINGS,A0           ;DO 20 RINGS.
         00001ac0     fff3  
     401 00001ad0     c2f4           JRLS    BORDER_LOOP
     402 00001ae0                    RETP
     403                    
     404 00001b10           NEXT_IN_A8
     405 00001b10     1028           INC     A8
     406 00001b20     0b48           CMPI    LAST_BORDER_COLOR,A8      ;ARE WE IN RANGE
         00001b30     ff17  
     407 00001b40     c202           JRLS    NIA1                      ;YEP
     408                    
     409 00001b50     09c8           MOVI    FIRST_BORDER_COLOR,A8
         00001b60     00e0  
     410 00001b70     0960  NIA1     RETS
     411                    
     412                    **************************************************************************
     413                    *                                                                        *
     414                    *          EXTRA_RING                                                    *
     415                    *                                                                        *
     416                    *          THIS IS CALLED TO ADD THE EXTRA RING WHICH WILL BE SCROLLED   *
     417                    *          THROUGH THE BACKGROUND.                                       *
     418                    *                                                                        *
     419                    **************************************************************************
     420 00001b80           EXTRA_RING
     421 00001b80     098f           MMTM    SP,A0,A1,A2,A3,A9
         00001b90     f040  
     422 00001ba0     09c0           MOVI    RINGS+1,A0      ;RING D
         00001bb0     000d  
     423 00001bc0     09c1           MOVI    0E8H,A1         ;OUTER RING
         00001bd0     00e8  
     424 00001be0     09c2           MOVI    0E0H,A2         ;INNER RING
         00001bf0     00e0  
     425 00001c00     5663           CLR     A3              ;PALETTE ZERO
     426 00001c10     09c7           MOVI    RING_MAX_Y,A7                  ;Y EXTENT OF BORDER.
         00001c20     0190  
     427 00001c30     5729           CLR     A9                             ;NO Y OFFSET OF THIS RING
     428 00001c40     0d3f           CALLR   DRAW_RING
         00001c50     0003  
     429 00001c60     09af          MMFM    SP,A0,A1,A2,A3,A9
         00001c70     020f  
     430 00001c80     0960          RETS
     431                    
     432                    **************************************************************************
     433                    *                                                                        *
     434                    *          DRAW_RING                                                     *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   10

     435                    *                                                                        *
     436                    *          THIS IS CALLED TO DRAW A RING AROUND THE SCREEN BASED         *
     437                    *          ON A0.                                                        *
     438                    *                                                                        *
     439                    *          A0 IS THE RING NUMBER.  THE OUTERMOST RING IS ZERO.           *
     440                    *          A RING IS 2 PIXELS HIGH AND 2 PIXELS WIDE.                    *
     441                    *                                                                        *
     442                    *          THE "OUTER" BYTE TO USE IS PASSED IN A1                       *
     443                    *                                                                        *
     444                    *          THE "INNER" BYTE TO USE IS PASSED IN A2                       *
     445                    *                                                                        *
     446                    *          THE PALETTE NUMBER TO USE IS IN A3.                           *
     447                    *                                                                        *
     448                    *          The y-max to be used is passed in A7                          *
     449                    *                                                                        *
     450                    *          A Y OFFSET IS PASSED IN A9.  THIS DISPLACES WHOLE RING        *
     451                    *          VERTICALLY                                                    *
     452                    *                                                                        *
     453                    *          THIS IS RING 0.                                               *
     454                    *                                                                        *
     455                    *          0000000000000000000000000000000000000000                      *
     456                    *          1111111111111111111111111111111111111111                      *
     457                    *          01                             MAX-1 MAX                      *
     458                    *          01                             MAX-1 MAX                      *
     459                    *          01                             MAX-1 MAX                      *
     460                    *          MAX-1 MAX-1 MAX-1 MAX-1 MAX-1 MAX-1  MAX                      *
     461                    *          MAX   MAX   MAX   MAX   MAX   MAX    MAX                      *
     462                    *                                                                        *
     463                    *          THIS IS RING 1.                                               *
     464                    *                                                                        *
     465                    *          22222222222222222222222222222222222222222                     *
     466                    *          33333333333333333333333333333333333333333                     *
     467                    *          23                            MAX-3 MAX-2                     *
     468                    *          23                            MAX-3 MAX-2                     *
     469                    *          23                            MAX-3 MAX-2                     *
     470                    *          MAX-3 MAX-3 MAX-3 MAX-3 MAX-3 MAX-3 MAX-3                     *
     471                    *          MAX-2 MAX-2 MAX-2 MAX-2 MAX-2 MAX-2 MAX-2                     *
     472                    *                                                                        *
     473                    **************************************************************************
     474                    
     475 00001c90           DRAW_RING
     476 00001c90     098f           MMTM    SP,A1,A2,A3,A4,A5,A6
         00001ca0     7e00  
     477                    
     478 00001cb0     0583           MOVE    A3,@CMAPSEL,W        ;SET THE PALETTE PASSED
         00001cc0 01a80080  
     479                    
     480 00001ce0     0d3f           CALLR   X_COUNT_IN_A3        ;GET THE COUNT FOR X IN A3
         00001cf0     0047  
     481 00001d00     4c04           MOVE    A0,A4                ;GET THE RING NUMBER
     482 00001d10     2424           SLL     1,A4                 ;DOUBLE FOR OFFSET
     483 00001d20     0b04           ADDI    RING_MIN_X,A4             ;ADD TO LEFT EDGE PARAMETER
         00001d30     0000  
     484 00001d40     2464           SLL     3,A4                 ;SHIFT TO X POSITION.
     485 00001d50     4c05           MOVE    A0,A5                ;GET FOR Y
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   11

     486 00001d60     2425           SLL     1,A5                 ;DOUBLE FOR OFFSET
     487 00001d70     0b05           ADDI    RING_MIN_Y,A5
         00001d80     0000  
     488 00001d90     4125           ADD     A9,A5                ;ADD IN VERTICAL OFFSET
     489 00001da0     2585           SLL     12,A5                ;DOUBLE AND SHIFT TO Y COORDINATE
     490 00001db0     40a4           ADD     A5,A4                ;A4 NOW POINTS AT PLACE TO STORE
     491                    
     492 00001dc0     4c25           MOVE    A1,A5                ;COPY OUTSIDE PIX
     493 00001dd0     2501           SLL     8,A1
     494 00001de0     40a1           ADD     A5,A1                ;NOW WE HAVE DOUBLE OUTSIDES IN A1
     495                    
     496 00001df0     4c45           MOVE    A2,A5                ;NOW WE HAVE DOUBLE INSIDES IN A2
     497 00001e00     2502           SLL     8,A2
     498 00001e10     40a2           ADD     A5,A2
     499                    
     500 00001e20           DR1:
     501 00001e20     b044           MOVE    A2,*A4(SCREEN_PITCH*BYTE_SIZE),W    ;INSIDE IN ROW 2
         00001e30     1000  
     502 00001e40     9024           MOVE    A1,*A4+,W                 ;OUTSIDE IN ROW 1
     503 00001e50     3c83           DSJS    A3,DR1                    ;LOOP TILL THEY'RE ALL DONE
     504                    
     505 00001e60     0b04           ADDI    (SCREEN_PITCH*BYTE_SIZE)-WORD_SIZE,A4  ;CORRECT TO 1 ROW DOWN
         00001e70     0ff0  
     506 00001e80     0d3f           CALLR   Y_COUNT_IN_A3
         00001e90     003a  
     507                    *
     508                    *        NOW WE NEED <INSIDE><OUTSIDE> PACKED INTO A WORD
     509                    *
     510 00001ea0     4c26           MOVE    A1,A6                     ;INSIDE
     511 00001eb0     0b86           ANDI    0FF00H,A6                 ;HOLD HIGH OF INSIDE
         00001ec0 ffff00ff  
     512 00001ee0     4c45           MOVE    A2,A5                     ;OUTSIDE
     513 00001ef0     0b85           ANDI    0FFH,A5
         00001f00 ffffff00  
     514 00001f20     40c5           ADD     A6,A5                     ;A5 HAS THE WORD
     515                    
     516 00001f30     80a4  DR2      MOVE    A5,*A4,W                  ;STORE IN THIS ROW
     517 00001f40     0b04           ADDI    (SCREEN_PITCH*BYTE_SIZE),A4
         00001f50     1000  
     518 00001f60     3c83           DSJS    A3,DR2                    ;LOOP TILL THEY'RE ALL DONE
     519                    
     520 00001f70     8024           MOVE    A1,*A4,W                  ;GET LOWER RIGHT CORNER IN
     521 00001f80     0be4           SUBI    (SCREEN_PITCH*BYTE_SIZE)+WORD_SIZE,A4  ;MOVE POINTER
         00001f90     efef  
     522                    
     523 00001fa0     0d3f           CALLR   X_COUNT_IN_A3             ;RELOAD X COUNT
         00001fb0     001b  
     524 00001fc0     1423           DEC     A3                        ;1 LESS WORD TO LEAVE LOWER RIGHT OK
     525                    
     526 00001fd0     b024  DR3      MOVE    A1,*A4(SCREEN_PITCH*BYTE_SIZE),W    ;OUTER COLOR IN NEXT ROW
         00001fe0     1000  
     527 00001ff0     8044           MOVE    A2,*A4,W                  ;INNER COLOR IN THIS ROW
     528 00002000     0be4           SUBI    WORD_SIZE,A4              ;POINT AT PREVIOUS WORD
         00002010     ffef  
     529 00002020     3cc3           DSJS    A3,DR3                    ;LOOP TILL THEY'RE ALL DONE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   12

     530                    
     531 00002030     0b04           ADDI    WORD_SIZE,A4              ;MOVE BACK TO BORDER 1 UP
         00002040     0010  
     532 00002050     0d3f           CALLR   Y_COUNT_IN_A3
         00002060     001d  
     533                    *
     534                    *        NOW WE NEED <OUTSIDE><INSIDE> PACKED INTO A WORD
     535                    *
     536 00002070     4c46           MOVE    A2,A6                     ;OUTSIDE
     537 00002080     0b86           ANDI    0FF00H,A6                 ;HOLD HIGH OF INSIDE
         00002090 ffff00ff  
     538 000020b0     4c25           MOVE    A1,A5                     ;INSIDE
     539 000020c0     0b85           ANDI    0FFH,A5
         000020d0 ffffff00  
     540 000020f0     40c5           ADD     A6,A5                     ;A5 HAS THE WORD
     541                    
     542 00002100     80a4  DR4      MOVE    A5,*A4,W                  ;STORE IN THIS ROW
     543 00002110     0be4           SUBI    (SCREEN_PITCH*BYTE_SIZE),A4
         00002120     efff  
     544 00002130     3c83           DSJS    A3,DR4                    ;LOOP TILL THEY'RE ALL DONE
     545 00002140     09af          MMFM    SP,A1,A2,A3,A4,A5,A6
         00002150     007e  
     546 00002160     0960          RETS
     547                    
     548 00002170           X_COUNT_IN_A3
     549 00002170     098f           MMTM    SP,A5
         00002180     0400  
     550 00002190     09c3           MOVI    RING_MAX_X,A3             ;FIND HOW MANY TO DO.
         000021a0     0200  
     551 000021b0     0be3           SUBI    RING_MIN_X,A3             ;THIS IS AREA SPANNED
         000021c0     ffff  
     552 000021d0     4c05           MOVE    A0,A5                ;GET RING NUMBER
     553 000021e0     2445           SLL     2,A5                 ;2X FOR 2 WIDE....2X FOR LEFT AND RIGHT SIDE
     554 000021f0     44a3           SUB     A5,A3                ;THIS IS NUMBER OF PIXELS TO DRAW
     555 00002200     2fe3           SRL     1,A3                 ;THIS IS NUMBER OF WORDS.
     556 00002210     09af          MMFM    SP,A5
         00002220     0020  
     557 00002230     0960          RETS
     558                    
     559 00002240           Y_COUNT_IN_A3
     560 00002240     098f           MMTM    SP,A5
         00002250     0400  
     561 00002260     4ce3           MOVE    A7,A3                ;FIND HOW MANY TO DO.
     562 00002270     0be3           SUBI    RING_MIN_Y,A3        ;THIS IS AREA SPANNED
         00002280     ffff  
     563 00002290     4c05           MOVE    A0,A5                ;GET RING NUMBER
     564 000022a0     2445           SLL     2,A5                 ;2X FOR 2 WIDE....2X FOR LEFT AND RIGHT SIDE
     565 000022b0     44a3           SUB     A5,A3                ;THIS IS NUMBER OF PIXELS TO DRAW
     566 000022c0     0be3           SUBI    2,A3                 ;DON'T TOUCH OUTSIDE LINES IN Y
         000022d0     fffd  
     567 000022e0     09af          MMFM    SP,A5
         000022f0     0020  
     568 00002300     0960          RETS
     569                    
     570 00002310           RES_SCRL
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   13

     571 00002310     098f           MMTM    SP,A1
         00002320     4000  
     572 00002330     5621           CLR     A1
     573 00002340     0581           MOVE    A1,@SCRL_FRC,W  ;THIS KEEPS INTERRUPTS OUT!
         00002350 00000000! 
     574 00002370     0781           MOVE    A1,@Y_CORR,L   ;TRASH ANY ACCUMULATION
         00002380 00000000! 
     575 000023a0     b22d           MOVE    A1,*A13(SPR_Y_SCROLL),L        ;LINE THIS UP WITH OUR PROCESS
         000023b0     0160  
     576 000023c0     0581           MOVE    A1,@SCRL_DIV,W        ;TURN OFF SCROLLER  
         000023d0 00000000! 
     577 000023f0     0581           MOVE    A1,@SCRL_GO,W         ;AND ANY RESIDUAL ACTIVITY
         00002400 00000000! 
     578 00002420     09af          MMFM    SP,A1
         00002430     0002  
     579 00002440     0960          RETS
     580                    
     581                    **************************************************************************
     582                    *                                                                        *
     583                    *          SCROLL_PROCESS                                                *
     584                    *                                                                        *
     585                    *          THIS PROCESS DOES SCROLLING AND TRANSITION CONTROL            *
     586                    *          DURING THE HIGH SCORE TABLE SPRAY PAINTING.                   *
     587                    *                                                                        *
     588                    *          THE FOLLOWING DATA IS MAINTAINED IN ITS PROCESS AREA:         *
     589                    *                                                                        *
     590                    **************************************************************************
     591                    *
     592                    *        THE FOLLOWING DATA IS PUT IN THE PROCESS AREA
     593                    *        OF THE SCROLLER.  THE SCROLLER STARTS WITH
     594                    *        AN EXACT COPY OF THE DATA AREA OF THE MASTER
     595                    *        TABLE PROCESS.  THE RELEVANT DATA IS AT
     596                    *        SPR_SCALER AND HSTD_TABLE.  THIS DATA
     597                    *        IS DESINED TO FIT IN BETWEEN!
     598                    *
     599              00a0  SP_NUM_AT_TOP    EQU     SPR_SCALER+WORD_SIZE        ;WORD - TABLE OFFSET OF
     600                    *                                                            NEXT TO HIT THE TOP
     601              00b0  SP_CURRENT_TOP   EQU     SP_NUM_AT_TOP+WORD_SIZE     ;WORD - SCROLL Y
     602              00c0  SP_RING_OFFSET   EQU     SP_CURRENT_TOP+WORD_SIZE    ;WORD - Y OFFSET NEXT RING!
     603              00d0  SP_BOXES         EQU     SP_RING_OFFSET+WORD_SIZE    ;WORD - NUMBER OF BOXES (SAFETY)
     604              00e0  SP_BOX_ON_LAST   EQU     SP_BOXES+WORD_SIZE          ;WORD - NON-ZERO IF BOX DRAWN ON LAST ENTRY
     605              00f0  SP_END_LOCAL     EQU     SP_BOX_ON_LAST+WORD_SIZE
     606                    
     607                             .IF     SP_END_LOCAL>HSTD_TABLE
     608                                     XXX             SP_ STRUCUTURE OVERFLOW
     609                             .ENDIF
     610                    
     611 00002450           SCROLL_PROCESS
     612 00002450                    SLEEP   INITIAL_SCROLL_DELAY
     613 000024a0     09c0           MOVI    SCROLL_TOP1,A0
         000024b0     001a  
     614 000024c0     0580           MOVE    A0,@SCRL_SRT,W
         000024d0 00000000! 
     615 000024f0     09c0           MOVI    SCROLL_BOT,A0                 
         00002500     0174  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   14

     616 00002510     0580           MOVE    A0,@SCRL_END,W                
         00002520 00000000! 
     617 00002540     09c0           MOVI    2000H,A0                  ;SCROLL UP 2 PIXELS
         00002550     2000  
     618 00002560     0580           MOVE    A0,@SCRL_DIR,W
         00002570 00000000! 
     619 00002590     09c0           MOVI    2,A0                      ;EVERY 2 FRAMES
         000025a0     0002  
     620 000025b0     0580           MOVE    A0,@SCRL_DIV,W            
         000025c0 00000000! 
     621 000025e0     0580           MOVE    A0,@SCRL_GO,W             ;MUST DO THIS ONCE TO START IT!
         000025f0 00000000! 
     622                    *
     623                    *        ABOVE IS STEADY STUFF FOR SCROLLING
     624                    *
     625 00002610     09c3           MOVI    DIST_1_TO_TOP,A3           ;THIS GETS #1 SCORE TO THE TOP!
         00002620     0049  
     626 00002630                    JSRP    WAIT_FOR_A3
     627                    *
     628                    *        NUMBER 1 JUST HIT THE TOP.  WE NEED TO MOVE THE SCROLL
     629                    *        BAR AND ADD THE WHITE LINE.
     630                    *
     631 000026a0     5729           CLR     A9                         ;A9 SPECIFIES Y OFFSET OF BOX
     632 000026b0     0d3f           CALLR   SCORE_BOX
         000026c0     00b2  
     633                    
     634 000026d0     09c0           MOVI    SCROLL_TOP2,A0            ;NOW MOVE SCROLL TOP TO KEEP HIGH SCORE
         000026e0     005e  
     635 000026f0     b00d           MOVE    A0,*A13(SP_CURRENT_TOP),W  ;SAVE WHERE WE'RE SCROLLING FROM
         00002700     00b0  
     636 00002710     0580           MOVE    A0,@SCRL_SRT,W
         00002720 00000000! 
     637                    
     638 00002740     09c0           MOVI    2,A0
         00002750     0002  
     639 00002760     b00d           MOVE    A0,*A13(SP_NUM_AT_TOP),W  ;INDICATE NUMBER 2 IS CURRENT SCORE AT TOP!
         00002770     00a0  
     640                    
     641 00002780     5600           CLR     A0                        ;INDICATE OFFSET FOR CURRENT RING IS ZERO
     642 00002790     b00d           MOVE    A0,*A13(SP_RING_OFFSET),W ;PUT IN PROCESS AREA
         000027a0     00c0  
     643 000027b0     b00d           MOVE    A0,*A13(SP_BOXES),W       ;NO BOXES YET
         000027c0     00d0  
     644 000027d0     b00d           MOVE    A0,*A13(SP_BOX_ON_LAST),W ;NO BOX ON LAST ENTRY
         000027e0     00e0  
     645                    *
     646                    *        NOW WE NEED TO SCROLL UP 1 SCORE AT A TIME AND EACH TIME A
     647                    *        SCORE HITS THE SCROLL BAR FRAME, WE FRAME IT IF NECESSARY!
     648                    *
     649                    *        AT THIS POINT IN THE CODE...THE SCORE INDICATED BY SP_NUM_AT_TOP
     650                    *        IS IN POSITION.....CHECK TO SEE IF IT SHOULD BE BOXXED!
     651                    *
     652 000027f0           NEXT_NAME_AT_TOP
     653 000027f0     b5a0           MOVE    *A13(SP_NUM_AT_TOP),A0,W       ;THIS IS ONE WE NEED TO CHECK
         00002800     00a0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   15

     654 00002810     0d3f           CALLR   FETCH_SCORE_A0                 ;GET THIS SCORE IN A1
         00002820     024c  
     655                    
     656 00002830     4c22           MOVE    A1,A2                          ;SAVE THE CURRENT SCORE
     657 00002840     1020           INC     A0                             ;POINT AT NEXT SCORE
     658 00002850     0d3f           CALLR   FETCH_SCORE_A0                 ;IF ITS IDENTICAL THEN CURRENT
         00002860     0248  
     659 00002870     4822           CMP     A1,A2                          ;CAN'T BE JUST ENTERED!
     660 00002880     ca2a           JREQ    DONT_BOX                       ;IT IS...DON'T BOX THIS ONE!
     661                    
     662 00002890     0d5f           CALLA   A2_CHECK                       ;DOES A2 MATCH EITHER PLAYER?
         000028a0 00000000! 
     663 000028c0     cb26           JRNZ    DONT_BOX                       ;NOPE....SORRY!
     664                    *
     665                    *        WE NEED TO BOX THE CURRENT ENTRY!
     666                    *
     667 000028d0     b5a0           MOVE    *A13(SP_BOXES),A0,W        ;GET NUMBER OF BOXES OUT THERE
         000028e0     00d0  
     668 000028f0     0b40           CMPI    2,A0
         00002900     fffd  
     669 00002910     c921           JRHS    DONT_BOX                   ;TOO MANY BOXES.....EXIT
     670                    
     671 00002920     1020           INC     A0
     672 00002930     b00d           MOVE    A0,*A13(SP_BOXES),W        ;CHALK IT
         00002940     00d0  
     673                    
     674 00002950     0d3f           CALLR   GET_INTEGRAL_LINES         ;NUMBER OF LINES PER ENTRY IN A3
         00002960     0056  
     675                    
     676 00002970     b5a9           MOVE    *A13(SP_RING_OFFSET),A9,W     ;GET CURRENT RING DROP OFFSET
         00002980     00c0  
     677 00002990     4069           ADD     A3,A9                     ;NEXT RING DROPS BY THIS  
     678 000029a0     b12d           MOVE    A9,*A13(SP_RING_OFFSET),W ;SAVE FOR NEXT BOX.
         000029b0     00c0  
     679                              
     680 000029c0     0d3f           CALLR   SCORE_BOX                 ;THIS BOXES THE SCORE...NOW MOVE SCROLL POINT                
         000029d0     0081  
     681                    *
     682                    *        IF WE DRAW A BOX AROUND THE LAST ENTRY, WE NEED TO KNOW TO
     683                    *        SCROLL THE BOXES EARLIER!
     684                    *
     685                    
     686 000029e0     b5a1           MOVE    *A13(SP_NUM_AT_TOP),A1,W       ;THIS IS ONE WE NEED TO CHECK
         000029f0     00a0  
     687 00002a00     0b41           CMPI    ALL_TIME_VISIBLE,A1            ;DON'T COUNT BOX AROUND LAST ONE!
         00002a10     ffeb  
     688 00002a20     cb02           JRNZ    NOT_LAST_ENTRY
     689                    
     690 00002a30     b02d           MOVE    A1,*A13(SP_BOX_ON_LAST),W      ;SET FLAG....
         00002a40     00e0  
     691                    *
     692                    *        NOW CHANGE THE SCORLL POINT STUFF GOES UNDER THE BOX
     693                    *        A3 GOT SMASHED......GET A NEW VERSION
     694                    *
     695 00002a50           NOT_LAST_ENTRY
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   16

     696 00002a50     0d3f           CALLR   GET_INTEGRAL_LINES        ;THIS GETS LINE COUNT IN A3 
         00002a60     0046  
     697 00002a70     b5a0           MOVE    *A13(SP_CURRENT_TOP),A0,W  ;SAVE WHERE WE'RE SCROLLING FROM
         00002a80     00b0  
     698 00002a90     4060           ADD     A3,A0
     699 00002aa0     0580           MOVE    A0,@SCRL_SRT,W
         00002ab0 00000000! 
     700 00002ad0     b00d           MOVE    A0,*A13(SP_CURRENT_TOP),W  ;AND PUT BACK IN PROCESS AREA.
         00002ae0     00b0  
     701                    
     702 00002af0     0d3f           CALLR   NEXT_ON_TOP                ;NOW, NEXT ENT IS AT "NEW" TOP
         00002b00     005f  
     703 00002b10     cbcd           JRNZ    NEXT_NAME_AT_TOP           ;NOW CHECK IF IT NEEDS A BOX.
     704                    
     705 00002b20     c012           JRUC    LAST_ENT_ON_TOP            ;STAGE REST OF JOB!
     706                    *
     707                    *        IT IS TIME TO SCROLL FROM THE "CURRENT" ENTRY UP TO THE
     708                    *        "NEXT" ENTRY.
     709                    *
     710 00002b30     0d3f  DONT_BOX CALLR   NEXT_ON_TOP               ;MOVE TO NEXT NUMBER
         00002b40     005b  
     711 00002b50     ca0f           JRZ     LAST_ENT_ON_TOP           ;NO MORE TO SCROLL.
     712                    *
     713                    *        WE NEED TO MOVE UP BY ONE ENTRY.......LETS TRIGGER THE SCROLL.
     714                    *
     715 00002b60                    JSRP    PSYCHO_CHECK              ;SEE IF ITS TIME FOR BACKGROUND
     716 00002bd0                    JSRP    WAIT_FOR_A3               ;NOW WAIT FOR THE SCORE TO HIT!
     717                    
     718 00002c40     c0ba           JRUC    NEXT_NAME_AT_TOP          ;ITS THERE...CHECK FOR BOX!
     719                    *
     720                    *        ALL TIME TABLE IS DONE....
     721                    *
     722 00002c50           LAST_ENT_ON_TOP
     723                    *
     724                    *        NOW......UNLESS SP_BOX_ON_LAST IS NON-ZERO, THE LAST ENTRY
     725                    *        IS BETWEEN THE LAST BOX AND THE PSYCHO BACKGROUND.
     726                    *        WE NEED TO SCROLL ENOUGH TO JOIN THESE.
     727                    *
     728 00002c50     b5a0           MOVE    *A13(SP_BOX_ON_LAST),A0,W      ;SKIP THE JOIN?
         00002c60     00e0  
     729 00002c70     cb0a           JRNZ    BOX_ON_LAST                    ;YEP...JUST SCROLL JOIN AMOUNT
     730                    
     731 00002c80     0d3f           CALLR   GET_INTEGRAL_LINES             ;FETCH THE LINES PER ENTRY
         00002c90     0023  
     732 00002ca0     2fe3           SRL     1,A3                           ;2 LINES AT A TIME
     733 00002cb0                    JSRP    WAIT_FOR_A3                    ;SCROLL THIS MANY LINES
     734                    *
     735                    *        NOW CHANGE SCROLL TOP BACK TO TOP TO SCROLL SCORE(S) OFF
     736                    *
     737 00002d20           BOX_ON_LAST
     738 00002d20     09c0           MOVI    SCROLL_TOP3,A0            ;NOW MOVE SCROLL TOP TO KEEP HIGH SCORE
         00002d30     001a  
     739 00002d40     0580           MOVE    A0,@SCRL_SRT,W
         00002d50 00000000! 
     740                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   17

     741                    *        AT THIS POINT WE HAVE JOINED THE BACKGROUND TO THE BOTTOM
     742                    *        BOX.  HOWEVER, WHERE WE ARE ON THE SCREEN DEPENDS ON HOW
     743                    *        MANY BOXES ARE THERE.  WE NEED TO SCROLL 1 SCORE HEIGHT 
     744                    *        FOR EACH OF THE 2 POSSIBLE EXTRA BOXES.
     745                    *
     746 00002d70     b5a0           MOVE    *A13(SP_BOXES),A0,W        ;GET NUMBER OF BOXES OUT THERE
         00002d80     00d0  
     747 00002d90     ca0b           JRZ     NO_EXTRA_BOXES             ;NONE THERE....RESUME
     748                    
     749 00002da0     0d3f           CALLR   GET_INTEGRAL_LINES         ;FETCH THE LINES PER ENTRY
         00002db0     0011  
     750 00002dc0     2fe3           SRL     1,A3                       ;2 LINES AT A TIME
     751 00002dd0     5e03           MPYU    A0,A3                      ;TIMES EXTRA BOXES!
     752 00002de0                    JSRP    WAIT_FOR_A3                ;SCROLL THIS MUCH EXTRA
     753                    
     754 00002e50           NO_EXTRA_BOXES
     755 00002e50     09c3           MOVI    FINAL_SCROLL,A3
         00002e60     0094  
     756 00002e70     0583           MOVE    A3,@SCRL_FRC,W             ;THIS IS NUMBER OF FRAMES TO SCROLL
         00002e80 00000000! 
     757                    
     758 00002ea0     c080           JAUC    SUCIDE                     ;THAT'S ALL OUR WORK
         00002eb0 00000000! 
     759                    
     760                    **************************************************************************
     761                    *                                                                        *
     762                    *          GET_INTEGRAL_LINES                                            *
     763                    *                                                                        *
     764                    *          RETURN NUMBER OF VERTICAL LINES PER ENTRY IN A3.              *
     765                    *                                                                        *
     766                    **************************************************************************
     767 00002ed0           GET_INTEGRAL_LINES
     768 00002ed0     0d3f           CALLR   GET_LINES_PER_ENTRY       ;THIS GETS 12 BIT FRAC VERSION
         00002ee0     01c5  
     769 00002ef0     2f43           SRL     6,A3                      ;THIS MAKES IT INTEGRAL LINES
     770 00002f00     0960           RETS
     771                    
     772                    **************************************************************************
     773                    *                                                                        *
     774                    *          PSYCHO_CHECK                                                  *
     775                    *                                                                        *
     776                    *          This is called to check if its time to start the              *
     777                    *          psycho background.  If its not psycho time we return          *
     778                    *          the frame count for 1 entry in a3  (it will scroll that       *
     779                    *          much).  If it is psycho time, we scroll enough frames         *
     780                    *          till we should hit it, then we hit it, then we return         *
     781                    *          the balance of the scroll for this entry.                     *
     782                    *                                                                        *
     783                    **************************************************************************
     784 00002f10           PSYCHO_CHECK
     785 00002f10     0d3f           CALLR   GET_LINES_PER_ENTRY       ;THIS GETS LINE COUNT IN A3 
         00002f20     01c1  
     786 00002f30     2f23           SRL     7,A3                      ;6 BIT FRAC....AND DIVIDE BY 2
     787                    *
     788                    *        A3 HAS THE NUMBER OF DOUBLE LINES TO SCROLL.
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   18

     789                    *
     790 00002f40     b5a0           MOVE    *A13(SP_NUM_AT_TOP),A0,W  ;GET THE NUMBER WE'RE GOING TO
         00002f50     00a0  
     791 00002f60     b5a1           MOVE    *A13(SP_BOXES),A1,W       ;REMOVE NUMBER OF BOXES.
         00002f70     00d0  
     792 00002f80     4420           SUB     A1,A0
     793 00002f90     0b40           CMPI    PSYCHO_BOX_NUMBER,A0      ;IS THIS TIME?
         00002fa0     ffee  
     794 00002fb0     cb11           JRNZ    PSYCHO_EXIT
     795                    *
     796                    *        BETWEEN THIS ENTRY AND THE NEXT.
     797                    *
     798 00002fc0     4c68           MOVE    A3,A8                     ;PUT WHOLE COUNT IN A8
     799 00002fd0     09c0           MOVI    PSYCHO_FRACTION,A0        ;THIS IS AMOUNT TO SCROLL FIRST
         00002fe0     000b  
     800 00002ff0     4408           SUB     A0,A8                     ;REMOVE THIS (FOR REMAINDER)
     801                    
     802 00003000     0580           MOVE    A0,@SCRL_FRC,W            ;THIS IS NUMBER OF FRAMES TO SCROLL
         00003010 00000000! 
     803 00003030                    JSRP    WAIT_FOR_SCROLL           ;NOW WAIT FOR THE PERFECT MOMENT
     804                    
     805 000030a0     4d03           MOVE    A8,A3                     ;RETURN THE EXTRA FRACTION
     806                    
     807                            .IF INTRLACE = 0
     808 000030b0     0d3f           CALLR   EXTRA_RING                ;DRAW THE RING THAT CAUSES THE NOISE!
         000030c0     feab  
     809                            .ENDIF
     810                    
     811 000030d0           PSYCHO_EXIT
     812 000030d0                    RETP                              ;RETURN TO CALLER
     813                    
     814                    **************************************************************************
     815                    *                                                                        *
     816                    *          NEXT_ON_TOP                                                   *
     817                    *                                                                        *
     818                    *          THIS IS CALLED TO STEP THE "CURRENT SCORE ON TOP"             *
     819                    *          (AT SP_NUM_AT_TOP) BY ONE AND CHECK TO SEE IF                 *
     820                    *          THE NEXT ONE IS OUT OF VISIBLE RANGE.                         *
     821                    *                                                                        *
     822                    *          .EQ. MEANS WE'RE DONE                                         *
     823                    *          .NE. MEANS KEEP GOING                                         *
     824                    *                                                                        *
     825                    **************************************************************************
     826 00003100           NEXT_ON_TOP
     827 00003100     098f           MMTM    SP,A1
         00003110     4000  
     828 00003120     b5a1           MOVE    *A13(SP_NUM_AT_TOP),A1,W  ;GET THE ONE ON TOP
         00003130     00a0  
     829 00003140     0b41           CMPI    ALL_TIME_VISIBLE,A1       ;IS THIS THE LAST?
         00003150     ffeb  
     830 00003160     c802           JRLO    NEX_CON                   ;THERE'S ROOM FOR MORE
     831                    
     832 00003170     5621           CLR     A1                        ;SET .EQ.
     833 00003180     c003           JRUC    NO_NEXT                   ;ANE RETURN
     834                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   19

     835 00003190           NEX_CON
     836 00003190     1021           INC     A1                        ;KICK TO NEXT
     837 000031a0     b02d           MOVE    A1,*A13(SP_NUM_AT_TOP),W  ;AND PUT BACK
         000031b0     00a0  
     838 000031c0           NO_NEXT
     839 000031c0     09af          MMFM    SP,A1
         000031d0     0002  
     840 000031e0     0960          RETS
     841                    
     842                    **************************************************************************
     843                    *                                                                        *
     844                    *          SCORE_BOX                                                     *
     845                    *                                                                        *
     846                    *          THIS IS CALLED TO ADD THE WHITE RING AROUND THE SCORE AT THE  *
     847                    *          TOP OF THE SCREEN.  THE VERTICAL OFFSET (IN Y LINE UNITS)     *
     848                    *          IS PASSED IN A9.                                              *
     849                    *                                                                        *
     850                    **************************************************************************
     851 000031f0           SCORE_BOX
     852 000031f0     09c0           MOVI    RINGS+3,A0       ;leave a 2 unit border
         00003200     000f  
     853 00003210     09c7           MOVI    SCORE_BOX_Y,A7   ;THIS SETS BOX HEIGHT
         00003220     007c  
     854                    *
     855                    *        THIS IS THE BOX AROUND NUMBER 1
     856                    *
     857 00003230           MINI_RING_1
     858 00003230     09c1           MOVI    0F5H,A1         ;USE BRIGHT COLOR FOR BOX.
         00003240     00f5  
     859 00003250     4c22           MOVE    A1,A2
     860 00003260     5663           CLR     A3              ;PALETTE ZERO
     861 00003270     0d3f           CALLR   DRAW_RING
         00003280     fea0  
     862                    
     863 00003290     1020           INC     A0
     864 000032a0     0b40           CMPI    RINGS+5,A0
         000032b0     ffee  
     865 000032c0     c8f6           JRLO    MINI_RING_1
     866 000032d0     0960           RETS
     867                    
     868                    **************************************************************************
     869                    *                                                                        *
     870                    *          WAIT_FOR_SCROLL                                               *
     871                    *                                                                        *
     872                    *          HOLD CONTROL TILL REQUESTED SCROLLING IS COMPLETED.           *
     873                    *                                                                        *
     874                    **************************************************************************
     875 000032e0           WAIT_FOR_A3
     876 000032e0     0583           MOVE    A3,@SCRL_FRC,W             ;STORE A3 AS THE SCROLL
         000032f0 00000000! 
     877 00003310           WAIT_FOR_SCROLL
     878 00003310           TL1      SLEEP   1
     879 00003350     05a0           MOVE    @SCRL_FRC,A0,W             ;WAIT FOR NUMBER 1 TO GET THERE
         00003360 00000000! 
     880 00003380     cbf8           JRNE    TL1
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   20

     881 00003390                    RETP
     882                    **************************************************************************
     883                    *                                                                        *
     884                    *          P_SCRIPT                                                *
     885                    *                                                                        *
     886                    *          THIS IS CALLED WITH A SCRIPT POINTER IN A4.  IT               *
     887                    *          PAINTS BASED ON THE SCRIPTED COMMANDS.                        *
     888                    *                                                                        *
     889                    *          THE FOLLOWING COMMANDS EXIST FOR SCRIPTS:                     *
     890                    *                                                                        *
     891                    *             SET COLOR FOR BLACK DRAW (FOLLOWED BY COLOR BYTE           *
     892                    *             SET COLOR FOR WALL DRAW  (LONG POINTER TO PALETTE DATA     *
     893                    *             SAVE IN PROCESS STORE    (SKIP BYTE IF NEC. THEN OPERANDS) *
     894                    *                          BRUSH                                         *
     895                    *                          NEW COLOR                                     *
     896                    *                          SCALE FACTOR                                  *
     897                    *                          FUZZ FACTOR                                   *
     898                    *                          X    (CURSOR)                                 *
     899                    *                          Y                                             *
     900                    *                          DRAWING RATE (SLEEP)                          *
     901                    *                          NUMBER WIDTH (MULTI DIGIT NUM-NUMS)           *
     902                    *             OUTPUT SCORE IN A0 (AT CURSOR).  (NO OPERAND)              *
     903                    *             OUTPUT (SPRAY) CHARCTER.         (OPERAND IN 2ND BYTE)     *
     904                    *             CALL "SUBROUTINE"                (SKIP BYTE IF NEC.)       *
     905                    *             END OF SCRIPT                    (NO OPERAND               *
     906                    *                                                                        *
     907                    *                     SCRIPT IS "BYTE" ORIENTED.  FOLLOWING WORD AND     *
     908                    *                     LONGWORD OPERANDS WILL BE AFTER A "SKIPPED"        *
     909                    *                     BYTE IF THE OPCODE BYTE IS ON A WORD BOUNDARY.     *
     910                    *                     IF OPCODE BYTE ADDRESS ENDS IN "8" THEN            *
     911                    *                     WORD AND LONG WORD OPERANDS FOLLOW IMMEDIATELY.    *
     912                    *                                                                        *
     913                    *                     THIS SOFTWARE WILL POSSIBLY BE USED FOR AUDITS     *
     914                    *                     ETC. IN WHICH CASE 1 BYTE PER CHAR IN MESSAGE      *
     915                    *                     WILL USE GENUINE ASCII DATA                        *
     916                    *                                                                        *
     917                    **************************************************************************
     918                    
     919 000033c0           P_SCRIPT
     920 000033c0           SCRIPT_RET
     921 000033c0     0d3f           CALLR   BYTE_FETCH     ;FETCH AN OPERAND BYTE
         000033d0     0257  
     922 000033e0     0b41           CMPI    LAST_OPERATOR,A1 ;IS IT IN RANGE
         000033f0     fff0  
     923 00003400     c203           JRLS    SCRIPT_IN_RANGE
     924                    
     925 00003410           SPURIOUS_END
     926                             .IF DEBUG
     927                                JRUC   $                         ;HANG IN DEVELOPMENT
     928                             .ENDIF
     929                    
     930 00003410           SCRIPT_DONE
     931 00003410                    RETP                                ;RETURN IF THIS HAPPENS IN FIELD!
     932                    
     933 00003440           SCRIPT_IN_RANGE
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   21

     934 00003440     24a1           SLL     5,A1                        ;MAKE IT OFFSET INTO TABLE
     935 00003450     cafb           JRZ     SCRIPT_DONE                 ;THAT'S ALL FOLKS
     936 00003460     0b21           ADDI    SCRIPT_VECTORS,A1           ;NOW WE POINT AT ROUTINE TO USE
         00003470 000034f0' 
     937 00003490     8621           MOVE    *A1,A1,L                    ;FETCH THE ROUTINE
     938                    *
     939                    *        THIS IS THE "JSRP" MACRO CODED IN LINE
     940                    *
     941 000034a0     09e7           MOVI    SCRIPT_RET,A7   ;JUST LOAD UP RETURN ADDRESS
         000034b0 000033c0' 
     942 000034d0     a2ec          MOVE    A7,-*A12,L      ;PUSH RET ADDR
     943 000034e0     0161          JUMP    A1              ;DO THE "JSRP"
     944                    
     945 000034f0           SCRIPT_VECTORS
     946 000034f0 00003410'          .LONG   SPURIOUS_END         ;0 SHOULD BE GRABBED BEFORE VECTOR 
     947 00003510 00003900'          .LONG   DO_COL_FOR_BLACK
     948 00003530 00003990'          .LONG   DO_COL_FOR_WALL
     949 00003550 00003ac0'          .LONG   DO_SPRAY_SCORE
     950 00003570 00004f70'          .LONG   DO_SUBROUTINE
     951 00003590 00005060'          .LONG   DO_WORD
     952 000035b0 000050d0'          .LONG   DO_LONG
     953 000035d0 00005820'          .LONG   DO_SPRAY_CHARACTER
     954 000035f0 00005850'          .LONG   DO_SPRAY_CHAR_A0
     955 00003610 00005140'          .LONG   DO_FORK
     956 00003630 00005560'          .LONG   DO_SLEEP
     957 00003650 00003af0'          .LONG   DO_ENTRY
     958 00003670 00005610'          .LONG   DO_BLACK_BLOB
     959 00003690 00005690'          .LONG   DO_WALL_BLOB
     960 000036b0 00003880'          .LONG   DO_GPAL              ;SET OUR PALETTE TO GLOBAL
     961 000036d0 00003a20'          .LONG   DO_DY                ;DELTA Y
     962                    
     963                    **************************************************************************
     964                    *                                                                        *
     965                    *          SPR_GPAL                                                      *
     966                    *                                                                        *
     967                    *          THIS IS CALLED TO ALLOCATE A GLOBAL PALETTE FOR               *
     968                    *          SPRAY PAINTING.                                               *
     969                    *                                                                        *
     970                    **************************************************************************
     971 000036f0     098f  SPR_GPAL MMTM    SP,A0
         00003700     8000  
     972 00003710     09e0           MOVI    BRUSH_ROM,A0              ;INITIALIZE W/ GARBAGE
         00003720 000083a0' 
     973 00003740     0d5f           CALLA   GETFPAL
         00003750 00000000! 
     974 00003770     0580           MOVE    A0,@SPR_PAL,W              ;STORE PALETTE IN MEMORY
         00003780 00000000- 
     975 000037a0     09af          MMFM    SP,A0
         000037b0     0001  
     976 000037c0     0960          RETS
     977                    
     978 000037d0     098f  SPR_FPAL MMTM    SP,A0
         000037e0     8000  
     979 000037f0     05a0           MOVE    @SPR_PAL,A0,W
         00003800 00000000- 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   22

     980 00003820     0d5f           CALLA   FREEPAL                   ;FREE UP THE SPRAY PALETTE
         00003830 00000000! 
     981 00003850     09af          MMFM    SP,A0
         00003860     0001  
     982 00003870     0960          RETS
     983                    
     984 00003880     05a0  DO_GPAL  MOVE    @SPR_PAL,A0,W             ;GET GLOBAL PALETTE
         00003890 00000000- 
     985 000038b0     b00d           MOVE    A0,*A13(SPR_PALETTE),W    ;STORE IN PROCESS AREA
         000038c0     0080  
     986 000038d0                    RETP                              ;AND RETURN
     987                    
     988                    **************************************************************************
     989                    *                                                                        *
     990                    *          DO_COL_FOR_BLACK                                              *
     991                    *                                                                        *
     992                    *          THIS ASSUMES PROCESS CONTAINS PALETTE NUMBER.                 *
     993                    *          (SET IN ASSEMBLY BEFORE INVOKING SCRIPT OR USING              *
     994                    *          A "DO_WORD" SCRIPT COMMAND)                                   *
     995                    *                                                                        *
     996                    **************************************************************************
     997 00003900           DO_COL_FOR_BLACK
     998 00003900     0d3f           CALLR   BYTE_FETCH                ;FETCH NEXT BYTE IN A1
         00003910     0203  
     999 00003920     b5a0           MOVE    *A13(SPR_PALETTE),A0,W    ;GET THE CURRENT PALETTE IN A0
         00003930     0080  
    1000 00003940     0d3f           CALLR   PALETTE_FOR_BLACK_SPRAY   ;SET FOR SPRAY ON BLACK
         00003950     0431  
    1001 00003960                    RETP
    1002                    
    1003 00003990           DO_COL_FOR_WALL
    1004 00003990     0d3f           CALLR   LONG_FETCH                ;SETUP TABLE FOR PALETTE
         000039a0     0208  
    1005 000039b0     b5a0           MOVE    *A13(SPR_PALETTE),A0,W    ;GET THE CURRENT PALETTE IN A0
         000039c0     0080  
    1006 000039d0     0d3f           CALLR   PALETTE_FOR_WALL_SPRAY
         000039e0     0439  
    1007 000039f0                    RETP
    1008                    
    1009                    **************************************************************************
    1010                    *                                                                        *
    1011                    *          DO_DY                                                         *
    1012                    *                                                                        *
    1013                    *          THIS IS FOLLOWED BY A LONG WORD THAT MODIFIES THE             *
    1014                    *          CURRENT Y COORDINATE.  IT IS ADDED TO THE LONG                *
    1015                    *          WORD Y POSITION.                                              *
    1016                    *                                                                        *
    1017                    **************************************************************************
    1018 00003a20           DO_DY
    1019 00003a20     0d3f           CALLR   LONG_FETCH                ;GET DELTA
         00003a30     01ff  
    1020 00003a40     b7a0           MOVE    *A13(SPR_Y),A0,L          ;GET Y
         00003a50     00c0  
    1021 00003a60     4020           ADD     A1,A0                     ;ADD DELTA
    1022 00003a70     b20d           MOVE    A0,*A13(SPR_Y),L          ;AND WE'RE DONE!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   23

         00003a80     00c0  
    1023 00003a90                    RETP
    1024                    
    1025                    **************************************************************************
    1026                    *                                                                        *
    1027                    *          DO_SPRAY_SCORE                                                *
    1028                    *                                                                        *
    1029                    *          THIS IS CALLED WITH A0 CONTAINING AN 8 DIGIT NUMBER           *
    1030                    *          TO BE SPRAYED (USING SETUP PARAMETERS) AT THE CURRENT         *
    1031                    *          POSITION.  IT IS TO BE LEAD ZERO BLANKED AND COMMAS           *
    1032                    *          ADDED AT THE APPROPRIATE POSITION.  BEWARE THAT               *
    1033                    *          DRAW_FIGURE SLEEPS, THUS STATE DATA MUST BE KEPT IN           *
    1034                    *          THE PROCESS AREA.                                             *
    1035                    *                                                                        *
    1036                    **************************************************************************
    1037 00003ac0           DO_SPRAY_SCORE
    1038 00003ac0                    RETP                         ;WE'LL DO THIS LATER
    1039                    
    1040                    **************************************************************************
    1041                    *                                                                        *
    1042                    *          DO_ENTRY                                                      *
    1043                    *                                                                        *
    1044                    *          THIS IS CALLED TO SPRAY THE "CURRENT ENTRY" IN THE            *
    1045                    *          "CURRENT" HSTD WITH THE "CURRENT" PARAMETERS SETUP.           *
    1046                    *                                                                        *
    1047                    **************************************************************************
    1048                    *
    1049                    *        THE ENTRY IS PRINTED FROM X=0 IN THE FOLLOWING FORM:
    1050                    *
    1051                    *                  12) <MARGIN_1> LED <MARGIN_2> SCORE
    1052                    *
    1053                    *        THE MARGINS ARE SCALED ACCORDING TO THE CURRENT SCALER.
    1054                    *
    1055                    *
    1056 00003af0           DO_ENTRY
    1057 00003af0     b5a0           MOVE    *A13(HSTD_POINTER),A0,W   ;GET THE CURRENT ENTRY NUMBER
         00003b00     0210  
    1058 00003b10     0d3f           CALLR   BINBCD                    ;TURN A0 INTO BCD
         00003b20     0097  
    1059 00003b30     0d3f           CALLR   LEAD_BLANKING_ON          ;ESTABLISH LEAD BLANKING.
         00003b40     0132  
    1060 00003b50     2700           SLL     24,A0                     ;PUT IT ON TOP OF WORK
    1061 00003b60     0d3f           CALLR   GENERATE_NUMBER_STEP      ;GENERATE TENS, STEP FIXED AMOUNT
         00003b70     0059  
    1062                    *
    1063                    *        NOTE THAT GENERATE_NUMBER_STEP AUTOMATICALLY SHIFTS
    1064                    *        NEXT NIBBLE TO THE TOP OF A0
    1065                    *
    1066 00003b80     0d3f           CALLR   GENERATE_NUMBER_STEP
         00003b90     0057  
    1067                    
    1068 00003ba0     09c0           MOVI    RIGHT_PAREN,A0            ;PRINT RIGHT PAREN STEP ITS SIZE
         00003bb0     0029  
    1069 00003bc0     0d3f           CALLR   GENERATE_CHAR_STEP
         00003bd0     006b  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   24

    1070                    
    1071 00003be0     09c3           MOVI    MARGIN_1,A3               ;GET 1ST MARGIN
         00003bf0     0040  
    1072 00003c00     0d3f           CALLR   X_PL_SA3           ;AND MOVE X ACCORDINGLY.
         00003c10     0127  
    1073                    
    1074 00003c20     0d3f           CALLR   ENTRY_IN_A7               ;GET OUR ENTRY POINTER IN A7
         00003c30     0114  
    1075 00003c40     0b07           ADDI    HS_INITS,A7               ;POINT AT FIRST INITIAL
         00003c50     0040  
    1076                    *
    1077                    *        NOW FIND A FINAL SPOT FOR X AFTER 3 INITIALS
    1078                    *
    1079 00003c60     b7a2           MOVE    *A13(SPR_X),A2,L          ;GET CURRENT X
         00003c70     00a0  
    1080                    
    1081 00003c80     0d3f           CALLR   NUMBER_WIDTH              ;GET THE FULL SCALE WIDTH OF NUMBERS
         00003c90     0816  
    1082 00003ca0     1884           MOVK    NUM_INITS+1,A4
    1083 00003cb0     5e83           MPYU    A4,A3                     ;4 INITIALS WILL CONTAIN IT
    1084 00003cc0     0d3f           CALLR   X_PL_SA3           ;MOVE OUR X FOR THE DIGITS WIDTH.
         00003cd0     011b  
    1085 00003ce0     b7a3           MOVE    *A13(SPR_X),A3,L          ;GET RESULTING X
         00003cf0     00a0  
    1086                    
    1087 00003d00     b24d           MOVE    A2,*A13(SPR_X),L          ;PUT BACK CURRENT X
         00003d10     00a0  
    1088 00003d20     098f           MMTM    SP,A3                     ;PUSH THE X BEYOND THE INITIALS
         00003d30     1000  
    1089                    
    1090 00003d40     09c1           MOVI    NUM_INITS,A1              ;THIS IS NUMBER OF INITIALS
         00003d50     0003  
    1091                    
    1092 00003d60           SPR_INIT_LOOP
    1093 00003d60     0d5f           CALLA   RC_BYTEI        ;FETCH THE LETTER
         00003d70 00000000! 
    1094 00003d90     0d3f           CALLR   GENERATE_CHAR_STEP        ;GENERATE IS PRINT...AND STEP ITS WIDTH
         00003da0     004e  
    1095                    
    1096 00003db0     3cc1           DSJS    A1,SPR_INIT_LOOP          ;DO THIS FOR EACH LETTER
    1097                    
    1098 00003dc0     09af          MMFM    SP,A3                     ;GET RESULTING X
         00003dd0     0008  
    1099 00003de0     b26d           MOVE    A3,*A13(SPR_X),L          ;PUT IT OUT
         00003df0     00a0  
    1100                    
    1101 00003e00     09c3           MOVI    MARGIN_2,A3               ;GET 2ND MARGIN
         00003e10     0000  
    1102 00003e20     0d3f           CALLR   X_PL_SA3           ;AND MOVE X ACCORDINGLY.
         00003e30     0105  
    1103                    
    1104 00003e40     0d3f           CALLR   ENTRY_IN_A7               ;GET OUR ENTRY POINTER IN A7
         00003e50     00f2  
    1105 00003e60     0d5f           CALLA   GET_HSCR
         00003e70 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   25

    1106 00003e90     4c20           MOVE    A1,A0                     ;MOVE NUMBER TO A0
    1107 00003ea0     0d3f           CALLR   LEAD_BLANKING_ON          ;THIS IS THE WAY WE SPRAY THE SCORE
         00003eb0     00fb  
    1108 00003ec0     0d3f           CALLR   GENERATE_NUMBER_STEP2     ;PUT OUT 2 NUMBERS
         00003ed0     0021  
    1109 00003ee0     0d3f           CALLR   GENERATE_COMMA
         00003ef0     000d  
    1110 00003f00     0d3f           CALLR   GENERATE_NUMBER_STEP3
         00003f10     001b  
    1111 00003f20     0d3f           CALLR   GENERATE_COMMA
         00003f30     0009  
    1112 00003f40     0d3f           CALLR   GENERATE_NUMBER_STEP     
         00003f50     001b  
    1113 00003f60     0d3f           CALLR   LEAD_BLANKING_OFF
         00003f70     00ed  
    1114 00003f80     0d3f           CALLR   GENERATE_NUMBER_STEP2
         00003f90     0015  
    1115 00003fa0                    RETP
    1116                    
    1117                    **************************************************************************
    1118                    *                                                                        *
    1119                    *          GENERATE_COMMA                                                *
    1120                    *                                                                        *
    1121                    *          THIS IS CALLE TO DRAW THE COMMAS.  THE X IS SET.              *
    1122                    *          WE MUST OBEY BLANKING AS TO WHETHER OR NOT TO                 *
    1123                    *          DO THE DRAWING.                                               *
    1124                    *                                                                        *
    1125                    *                                                                        *
    1126                    **************************************************************************
    1127 00003fd0           GENERATE_COMMA
    1128 00003fd0     098f           MMTM    SP,A8
         00003fe0     0080  
    1129 00003ff0     0d3f           CALLR   LEAD_BLANKING_TEST   ;IS BLANKING ON?
         00004000     00e2  
    1130 00004010     ca04           JRZ     GC1                  ;YEP...GENERATE NOTHING!
    1131                    
    1132 00004020     09c8           MOVI    ASCII_COMMA,A8
         00004030     002c  
    1133 00004040     0d3f           CALLR   CLONE_OURSELVES      ;GET A CLONE FOR US 
         00004050     012b  
    1134                    
    1135 00004060     0d3f  GC1      CALLR   COMMA_WIDTH          ;GET THE WIDTH USED FOR A COMMA
         00004070     07de  
    1136 00004080     0d3f           CALLR   X_PL_SA3      ;SCALE BY OUR FACTOR AND PUSH X BY AMOUNT
         00004090     00df  
    1137 000040a0     09af          MMFM    SP,A8
         000040b0     0100  
    1138 000040c0     0960          RETS
    1139                    
    1140                    **************************************************************************
    1141                    *                                                                        *
    1142                    *          GENERATE_NUMBER_STEP                                          *
    1143                    *                                                                        *
    1144                    *          THIS IS CALLED TO OUTPUT THE NUMBER IN THE HIGH               *
    1145                    *          NIBBLE OF A0.  LEAD BLANKING (A5) IS TO BE TAKEN              *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   26

    1146                    *          INTO ACCOUNT.  WHETHER OR NOT ANYTHING IS OUTPUT              *
    1147                    *          (BY A FORKED PROCESS), THIS SHOULD MOVE THE                   *
    1148                    *          CURRENT PROCESS'S X CURSOR FORWARD BY THE                     *
    1149                    *          FIXED SCALED CHARACTER WIDTH FOR THE CHARACTER SET.           *
    1150                    *                                                                        *
    1151                    *          ALSO...THIS RETURNS A0 ROTATED TO THE NEXT POSISION.          *
    1152                    *                                                                        *
    1153                    **************************************************************************
    1154 000040d0           GENERATE_NUMBER_STEP3
    1155 000040d0     0d3f           CALLR   GENERATE_NUMBER_STEP
         000040e0     0002  
    1156 000040f0           GENERATE_NUMBER_STEP2
    1157 000040f0     0d3f           CALLR   GENERATE_NUMBER_STEP
         00004100     0000  
    1158 00004110           GENERATE_NUMBER_STEP
    1159 00004110     098f           MMTM    SP,A8,A3
         00004120     1080  
    1160 00004130     3080           RL      4,A0            ;ROTATE INTO LOW NIBBLE
    1161 00004140     4c08           MOVE    A0,A8           ;COPY INTO A3
    1162 00004150     0b88           ANDI    0FH,A8          ;SAVE THE LOW NIBBLE
         00004160 fffffff0  
    1163 00004180     cb03           JRNZ    BL_DUN          ;BLANKING OVER...
    1164                    *
    1165                    *        ITS ZERO...CHECK BLANKING
    1166                    *
    1167 00004190     0d3f           CALLR   LEAD_BLANKING_TEST   ;IS BLANKING ON?
         000041a0     00c8  
    1168 000041b0     ca06           JREQ    BL_DIG               ;YEP..BLANK THE DIGIT
    1169                    
    1170 000041c0     0d3f  BL_DUN   CALLR   LEAD_BLANKING_OFF    ;TURN OFF LEAD BLANKING
         000041d0     00c7  
    1171 000041e0     0b08           ADDI    30H,A8               ;MAKE ASCII
         000041f0     0030  
    1172 00004200     0d3f           CALLR   CLONE_OURSELVES      ;GET A CLONE FOR US 
         00004210     010f  
    1173                    
    1174 00004220     0d3f  BL_DIG   CALLR   NUMBER_WIDTH         ;GET THE FIXED WIDTH FOR NUMBERS
         00004230     07bc  
    1175 00004240     0d3f           CALLR   X_PL_SA3      ;SCALE BY OUR FACTOR AND PUSH X BY AMOUNT
         00004250     00c3  
    1176 00004260     09af          MMFM    SP,A8,A3
         00004270     0108  
    1177 00004280     0960          RETS
    1178                    
    1179                    **************************************************************************
    1180                    *                                                                        *
    1181                    *          GENERATE_CHAR_STEP                                            *
    1182                    *                                                                        *
    1183                    *          This is called to fork to a process to spray a letter.        *
    1184                    *          The letter is in the low byte of A0.  This should             *
    1185                    *          immediately update the SPR_X of the current process           *
    1186                    *          by the width of the character.                                *
    1187                    *                                                                        *
    1188                    **************************************************************************
    1189 00004290           GENERATE_CHAR_STEP
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   27

    1190 00004290     098f           MMTM    SP,A8,A3
         000042a0     1080  
    1191 000042b0     4c08           MOVE    A0,A8                ;MOVE THE CHARACTER TO PASS TO ROUTINE
    1192 000042c0     0d3f           CALLR   CLONE_OURSELVES      ;GET A CLONE FOR US 
         000042d0     0103  
    1193 000042e0     0d3f           CALLR   FETCH_FIGURE_PTR     ;GET POINTER TO FIGURE LIST IN A4
         000042f0     07b9  
    1194 00004300     0d3f           CALLR   GET_X_OFFSET         ;GET X OFFSET FOR CHARACTER IN A3
         00004310     0005  
    1195 00004320     0d3f           CALLR   X_PL_SA3      ;SCALE BY OUR FACTOR AND PUSH X BY AMOUNT
         00004330     00b5  
    1196 00004340     09af          MMFM    SP,A8,A3
         00004350     0108  
    1197 00004360     0960          RETS
    1198                    
    1199                    **************************************************************************
    1200                    *                                                                        *
    1201                    *          GET_X_OFFSET                                                  *
    1202                    *                                                                        *
    1203                    *          THIS IS CALLED TO DETERMINE THE POSITIVE X DISTANCE           *
    1204                    *          TRAVERSED BY THE FIGURE (CHARCTER) POINTER TO BY              *
    1205                    *          A4...RETURN THE RESULT IN A3.                                 *
    1206                    *                                                                        *
    1207                    **************************************************************************
    1208 00004370           GET_X_OFFSET
    1209 00004370     098f           MMTM    SP,A4,A5
         00004380     0c00  
    1210 00004390     5663           CLR     A3                   ;TALLY UP TOTAL X OFFSET IN A3
    1211 000043a0           GEN_C_2
    1212 000043a0     9485           MOVE    *A4+,A5,W            ;FETCH A WORD
    1213 000043b0     0b65           CMPI    END_EXTENDED,A5      ;END OF CHAR?
         000043c0 00007ffe  
    1214 000043e0     ca08           JREQ    GEN_C_1
    1215                    
    1216 000043f0     0b65           CMPI    HIDDEN_EXTENDED,A5   ;HIDDEN?
         00004400 00007fff  
    1217 00004420     caf7           JREQ    GEN_C_2              ;JUST SKIP THE OPCODE...FETCH X NOW
    1218                    
    1219 00004430     40a3           ADD     A5,A3                ;ACCUMULATE X
    1220 00004440     0b04           ADDI    WORD_SIZE,A4         ;PUSH BEYOND THE Y COORDINATE
         00004450     0010  
    1221 00004460     c0f3           JRUC    GEN_C_2
    1222                    
    1223 00004470           GEN_C_1
    1224 00004470     09af          MMFM    SP,A4,A5             ;A3 NOW HAS WIDTH
         00004480     0030  
    1225 00004490     0960          RETS
    1226                    
    1227                    **************************************************************************
    1228                    *                                                                        *
    1229                    *          BINBCD                                                        *
    1230                    *                                                                        *
    1231                    *          CONVERT BINARY NUMBER IN A0 TO BCD.                           *
    1232                    *                                                                        *
    1233                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   28

    1234 000044a0     098f  BINBCD   MMTM    SP,A1,A2,A3,A4,A5
         000044b0     7c00  
    1235 000044c0     0b60           CMPI    99999999,A0               ;ARE WE TOO BIG?
         000044d0 fa0a1f00  
    1236 000044f0     c204           JRLS    BBIR                      ;IN RANGE
    1237 00004500     09e0           MOVI    99999999H,A0              ;RETURN THE LARGEST NUMBER WE HAVE!
         00004510 99999999  
    1238 00004530     c00d           JRUC    BB_RET
    1239                    
    1240 00004540     09c1  BBIR     MOVI    10,A1                     ;ALWAYS DIVIDE BY A0
         00004550     000a  
    1241 00004560     56a5           CLR     A5                        ;ACCUMULATE RESULT IN A5
    1242 00004570     5684           CLR     A4                        ;A4 HAS CURRENT SHIFT COUNT
    1243 00004580     4c03           MOVE    A0,A3                     ;<A2><A3> HAS NUMERATOR
    1244 00004590           DO_BCD_AGAIN
    1245 00004590     5642           CLR     A2
    1246 000045a0     5a22           DIVU    A1,A2                     ;A2 HAS LEFTOVER...A3 HAS CURRENT DIGIT
    1247 000045b0     6283           SLL     A4,A3                     ;SHIFT IT CORRECT NUMBER OF TIMES
    1248 000045c0     4065           ADD     A3,A5                     ;ADD IT INTO RESULT REG
    1249 000045d0     1084           ADDK    4,A4                      ;ADD 4 TO SHIFT COUNT
    1250 000045e0     4c43           MOVE    A2,A3                     ;REFRESH NUMERATOR
    1251 000045f0     cbf9           JRNZ    DO_BCD_AGAIN
    1252                    
    1253 00004600     4ca0           MOVE    A5,A0                     ;PUT OUT RESULT
    1254 00004610     09af  BB_RET  MMFM    SP,A1,A2,A3,A4,A5
         00004620     003e  
    1255 00004630     0960          RETS
    1256                    
    1257                    **************************************************************************
    1258                    *                                                                        *
    1259                    *          BCDBIN                                                        *
    1260                    *                                                                        *
    1261                    *          THIS TURNS A BCD NUMBER (IN A0) INTO A BINARY                 *
    1262                    *          NUMBER.                                                       *
    1263                    *                                                                        *
    1264                    **************************************************************************
    1265 00004640     098f  BCDBIN   MMTM    SP,A1,A2,A3,A4,A5       ;WORK REGGIES.
         00004650     7c00  
    1266 00004660     5642           CLR     A2                      ;ACCUMULATE IN A2
    1267 00004670     09c3           MOVI    1,A3                    ;CURRENT FACTOR IS 1.
         00004680     0001  
    1268 00004690     09c4           MOVI    10,A4                   ;SAVE SOME MOVI INSTS LATER
         000046a0     000a  
    1269 000046b0     09c5           MOVI    16,A5                   ;DIVIDE IT DOWN BY 16 AT A TIME
         000046c0     0010  
    1270 000046d0     4c01  BCBLOOP  MOVE    A0,A1                   ;DIVIDEND IN <A0><A1>
    1271 000046e0     ca06           JRZ     BCBDONE                 ;ALL UNITS EXHAUSTED!
    1272 000046f0     5600           CLR     A0
    1273 00004700     5aa0           DIVU    A5,A0                   ;DIVIDE BY 10H...(REMAINDER IN A1)
    1274 00004710     5e61           MPYU    A3,A1                   ;TIMES POSITION FACTOR
    1275 00004720     4022           ADD     A1,A2                   ;INTO ACCUMULATION REGISTER
    1276 00004730     5e83           MPYU    A4,A3                   ;NEXT DIGIT IS WORTH 10 TIMES THIS ONE
    1277 00004740     c0f8           JRUC    BCBLOOP
    1278                    
    1279 00004750     4c40  BCBDONE  MOVE    A2,A0                   ;RETURN RESULT IN A0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   29

    1280 00004760     09af          MMFM    SP,A1,A2,A3,A4,A5       ;WORK REGGIES.
         00004770     003e  
    1281 00004780     0960          RETS
    1282                    
    1283                    **************************************************************************
    1284                    *                                                                        *
    1285                    *          SET_X_FOR_ENTRY                                               *
    1286                    *                                                                        *
    1287                    *          THIS ROUTINE IS CALLED TO SETUP THE X LOCATION AND            *
    1288                    *          SCALER VALUE FOR THE CURRENT ENTRY BEING SPRAYED.             *
    1289                    *                                                                        *
    1290                    *          IF THE SIZE GETS SMALLER AS YOU GO DOWN, THIS                 *
    1291                    *          ROUTINE WILL BE RESPONSIBLE.                                  *
    1292                    *                                                                        *
    1293                    *          A2 = ZERO FOR ALL TIME                                        *
    1294                    *               NE FOR TODAYS                                            *
    1295                    *                                                                        *
    1296                    **************************************************************************
    1297 00004790           SET_X_FOR_ENTRY
    1298 00004790     098f           MMTM    SP,A0,A1,A2,A3,A4,A5         
         000047a0     fc00  
    1299 000047b0     0b40           CMPI    1,A0                 ;NUMBER 1?
         000047c0     fffe  
    1300 000047d0     cb03           JRNE    NXAT                 ;NOPE
    1301                    
    1302 000047e0     09c0           MOVI    SPRAY_WHITE,A0       ;NUMBER 1 IN WHITE
         000047f0     0007  
    1303 00004800     c008           JRUC    NUM_1                ;DO IT!
    1304                    
    1305 00004810     0b80  NXAT     ANDI    3,A0                 ;USE 4 DIFFERENT COLORS
         00004820 fffffffc  
    1306 00004840     2480           SLL     4,A0                 ;INDEX TO WORD TABLE
    1307 00004850     0b20           ADDI    COLOR_TAB,A0
         00004860 00004cb0' 
    1308 00004880     8400           MOVE    *A0,A0,W             ;FETCH THE COLOR
    1309 00004890     0d3f  NUM_1    CALLR   SET_SPRAY_COLOR      ;CHANGE THE COLOR WITHOUT TOUCHING RAM!
         000048a0     0399  
    1310                    
    1311 000048b0     09e4           MOVI    HSTD_ENTRY,A4        ;JSRP IN MIDDLE IS OK IF PROCESS SCRIPT DOESN'T SLEEP!
         000048c0 000152f8' 
    1312 000048e0                    JSRP    P_SCRIPT       
    1313                    
    1314                    **************************************************************************
    1315                    *                                                                        *
    1316                    *          MOVE    @TAB_NUM,A4,W           ;GET NUMBER DONE              *
    1317                    *          INC     A4                   ;THIS MAKES ONE MORE             *
    1318                    *          MOVE    A4,@TAB_NUM,W                                         *
    1319                    *                                                                        *
    1320                    *          CMPI    3,A4                 ;1ST 3 ONLY                      *
    1321                    *          JRHI    NOT_F_3                                               *
    1322                    *                                                                        *
    1323                    *          MOVI    FIRST_THREE,A4                                        *
    1324                    *          JSRP    P_SCRIPT                                              *
    1325                    *                                                                        *
    1326                    * NOT_F_3                                                                *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   30

    1327                    *                                                                        *
    1328                    **************************************************************************
    1329 00004950     0d3f           CALLR   TODAY_P              ;TODAYS?
         00004960     002a  
    1330 00004970     cb05           JRNE    NOT_TOD_X            ;NOPE
    1331                    
    1332 00004980     09e0           MOVI    X_MARGIN_TODAYS,A0   ;THEN SHIFT X LEFT A LITTLE!
         00004990 0001a000  
    1333 000049b0     b20d           MOVE    A0,*A13(SPR_X),L
         000049c0     00a0  
    1334                    
    1335 000049d0           NOT_TOD_X
    1336 000049d0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5         
         000049e0     003f  
    1337 000049f0     0960          RETS
    1338                    
    1339                    **************************************************************************
    1340                    *                                                                        *
    1341                    *          ADJUST_Y_OVER_A0                                              *
    1342                    *                                                                        *
    1343                    *          THIS IS CALLED TO ADJUST OUR CURRENT Y COORDINATE             *
    1344                    *          TO DRAW FOR THE NEXT ENTRY.  IF THE ENTRY SIZE CHANGES        *
    1345                    *          ALONG THE WAY THIS WILL HAVE TO BE A VARIABLE AMOUNT,         *
    1346                    *          HOWEVER, SINCE THE ABOVE ROUTINE CHANGES THE SCALER           *
    1347                    *          BEFORE WE ARE CALLED, WE WILL PROBABLY BE OK TO               *
    1348                    *          REMAIN FIXED.                                                 *
    1349                    *                                                                        *
    1350                    **************************************************************************
    1351 00004a00           ADJUST_Y_OVER_A0
    1352 00004a00     098f           MMTM    SP,A2,A3
         00004a10     3000  
    1353                    
    1354 00004a20     0d3f           CALLR   GET_LINES_PER_ENTRY
         00004a30     0010  
    1355                    
    1356 00004a40     0d3f           CALLR   TODAY_P              ;TODAYS?
         00004a50     001b  
    1357 00004a60     cb04           JRNE    NOT_TOD_Y            ;NOPE
    1358                    
    1359 00004a70     09c2           MOVI    TODAY_Y_SCALER,A2    ;LARGER Y JUMP
         00004a80     0048  
    1360 00004a90     5e43           MPYU    A2,A3                ;EXTRA FACTOR FOR TODAYS
    1361 00004aa0     c001           JRUC    TOD_Y
    1362                    
    1363 00004ab0           NOT_TOD_Y
    1364 00004ab0     24c3           SLL     6,A3                  ;ALIGN W/ 12 BIT FRACTION
    1365 00004ac0           TOD_Y
    1366 00004ac0     b7a2           MOVE    *A13(SPR_Y),A2,L      
         00004ad0     00c0  
    1367 00004ae0     4043           ADD     A2,A3
    1368 00004af0     b26d           MOVE    A3,*A13(SPR_Y),L      ;THIS ADJUST Y
         00004b00     00c0  
    1369 00004b10     09af          MMFM    SP,A2,A3
         00004b20     000c  
    1370 00004b30     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   31

    1371                    
    1372                    **************************************************************************
    1373                    *                                                                        *
    1374                    *          GET_LINES_PER_ENTRY                                           *
    1375                    *                                                                        *
    1376                    *          THIS RETURNS A Y DISTANCE BETWEEN ENTRIES.  IT IS             *
    1377                    *          IN Y UNITS WITH A 6 BIT FRACTION.                             *
    1378                    *                                                                        *
    1379                    **************************************************************************
    1380 00004b40           GET_LINES_PER_ENTRY
    1381 00004b40     098f           MMTM    SP,A2
         00004b50     2000  
    1382 00004b60     0d3f           CALLR   NUMBER_HEIGHT        ;GET THE HEIGHT FOR CHAR SET IN A3
         00004b70     072b  
    1383 00004b80     b5a2           MOVE    *A13(SPR_SCALER),A2,W ;GET SCALING FACTOR
         00004b90     0090  
    1384 00004ba0     5e43           MPYU    A2,A3                 ;SCALE THIS TO OUR RELEVANCY
    1385 00004bb0     0b83           ANDI    0FFFFFFC0H,A3         ;ZERO FRACTION TO ALIGN SCROLLER
         00004bc0 0000003f  
    1386 00004be0     09af          MMFM    SP,A2
         00004bf0     0004  
    1387 00004c00     0960          RETS
    1388                    **************************************************************************
    1389                    *                                                                        *
    1390                    *          TODAY_P                                                       *
    1391                    *                                                                        *
    1392                    *          ARE WE WORKING ON TODAY'S TABLE?                              *
    1393                    *                                                                        *
    1394                    *          .EQ.   YES                                                    *
    1395                    *          .NE.   NO                                                     *
    1396                    *                                                                        *
    1397                    **************************************************************************
    1398 00004c10           TODAY_P:
    1399 00004c10     098f           MMTM    SP,A4
         00004c20     0800  
    1400 00004c30     b7a4           MOVE    *A13(HSTD_TABLE),A4,L     ;GET TABLE
         00004c40     0220  
    1401 00004c50     0b64           CMPI    TOD_TAB,A4           ;IS IT TODAYS?
         00004c60 ffffffff! 
    1402 00004c80     09af          MMFM    SP,A4
         00004c90     0010  
    1403 00004ca0     0960          RETS
    1404                    
    1405 00004cb0     0004  COLOR_TAB:       .WORD   SPRAY_RED
    1406 00004cc0     0003                   .WORD   SPRAY_CYAN
    1407 00004cd0     0005                   .WORD   SPRAY_VIOLET
    1408 00004ce0     0006                   .WORD   SPRAY_YELLOW
    1409                    
    1410                    **************************************************************************
    1411                    *                                                                        *
    1412                    *          FETCH_SCORE_A0                                                *
    1413                    *                                                                        *
    1414                    *          THIS IS CALLED TO GET THE SCORE FROM THE CURRENT TABLE        *
    1415                    *          AT OFFSET A0.  IT IS RETURNED IN A1.                          *
    1416                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   32

    1417                    **************************************************************************
    1418 00004cf0           FETCH_SCORE_A0
    1419 00004cf0     b7a8           MOVE    *A13(HSTD_TABLE),A8,L     ;GET POINTER FROM PROCESS AREA
         00004d00     0220  
    1420 00004d10     0d5f           CALLA   ROM_PTRS                  ;GET SYSTEM READY TO ACCESS THIS ONE
         00004d20 00000000! 
    1421 00004d40     0d5f           CALLA   GET_HSCR                  ;NOW FETCH THE SCORE IN A1.
         00004d50 00000000! 
    1422 00004d70     0960           RETS
    1423                    
    1424 00004d80           ENTRY_IN_A7
    1425 00004d80     b7a8           MOVE    *A13(HSTD_TABLE),A8,L     ;POINTER FOR TABLE TO USE
         00004d90     0220  
    1426 00004da0     0d5f           CALLA   ROM_PTRS        ;SETUP STUFF
         00004db0 00000000! 
    1427 00004dd0     b5a0           MOVE    *A13(HSTD_POINTER),A0,W   ;THIS IS THE ENTRY NUMBER
         00004de0     0210  
    1428 00004df0     0d5f           CALLA   PT_ENTRY            ;POINT A7 AT ENTRY
         00004e00 00000000! 
    1429 00004e20     0960          RETS
    1430                    
    1431 00004e30           LEAD_BLANKING_TEST
    1432 00004e30     4ca5           MOVE    A5,A5
    1433 00004e40     0960           RETS
    1434                    
    1435 00004e50           LEAD_BLANKING_OFF
    1436 00004e50     1825           MOVK    1,A5
    1437 00004e60     0960           RETS
    1438                    
    1439 00004e70           LEAD_BLANKING_ON
    1440 00004e70     56a5           CLR     A5
    1441 00004e80     0960          RETS
    1442                    
    1443 00004e90           X_PL_SA3
    1444 00004e90     098f           MMTM    SP,A2
         00004ea0     2000  
    1445 00004eb0     b5a2           MOVE    *A13(SPR_SCALER),A2,W     ;GET THE SCALING MULTIPLIER
         00004ec0     0090  
    1446 00004ed0     5e43           MPYU    A2,A3                     ;6 BIT FRACTION IN A3
    1447 00004ee0     24c3           SLL     6,A3                      ;NOW ITS ALIGNED WITH X UNIT
    1448 00004ef0     b7a2           MOVE    *A13(SPR_X),A2,L          ;GET X COORDINATE
         00004f00     00a0  
    1449 00004f10     4043           ADD     A2,A3                     ;ADD SCALED VALUE
    1450 00004f20     b26d           MOVE    A3,*A13(SPR_X),L          ;AND PUT BACK
         00004f30     00a0  
    1451 00004f40     09af          MMFM    SP,A2
         00004f50     0004  
    1452 00004f60     0960          RETS
    1453                    
    1454                    **************************************************************************
    1455                    *                                                                        *
    1456                    *          DO_SUBROUTINE                                                 *
    1457                    *                                                                        *
    1458                    *          THIS IS CALLED TO DO A SCRIPT AS A SUBROUTINE.                *
    1459                    *          IT PUSHES THE CURRENT A4 ON THE PROCESS STACK                 *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   33

    1460                    *          AND THEN INVOKES THE SCRIPT PROCESSOR RECURSIVELY.            *
    1461                    *                                                                        *
    1462                    **************************************************************************
    1463 00004f70           DO_SUBROUTINE
    1464 00004f70     0d3f           CALLR   LONG_FETCH           ;GET THE "SUBROUTINE" ARGUMENT
         00004f80     00aa  
    1465 00004f90     a28c          MOVE    A4,-*A12,L              ;PUSH RESULTING POINTER
    1466 00004fa0     4c24           MOVE    A1,A4                ;MAKE WHAT WE FETCHED THE CURRENT POINTER
    1467 00004fb0                    JSRP    P_SCRIPT       ;PROCESS THE SCRIPT REQUESTED
    1468 00005020     9784           MOVE    *A12+,A4,L           ;POP THE CALLER'S POINTER
    1469 00005030                    RETP                         ;AND RETURN TO MAIN LOOP!
    1470                    
    1471                    **************************************************************************
    1472                    *                                                                        *
    1473                    *          DO_WORD                                                       *
    1474                    *                                                                        *
    1475                    *          THIS IS CALLED TO STORE A WORD INTO THE PROCESS AREA.         *
    1476                    *          FIRST COMES THE OFFSET (WORD) FOLLOWED BY THE WORD            *
    1477                    *          DATA.  THIS IS USED TO CHANGE ATTRIBUTES IN A                 *
    1478                    *          SCRIPT.                                                       *
    1479                    *                                                                        *
    1480                    **************************************************************************
    1481 00005060     0d3f  DO_WORD: CALLR   ALIGN_W           ;MAKE SURE WE'RE WORD ALIGNED
         00005070     0074  
    1482 00005080     0d3f           CALLR   STORE_WORD
         00005090     00e1  
    1483 000050a0                    RETP
    1484                    
    1485 000050d0     0d3f  DO_LONG: CALLR   ALIGN_W           
         000050e0     006d  
    1486 000050f0     0d3f           CALLR   STORE_LONG
         00005100     00df  
    1487 00005110                    RETP
    1488                    
    1489                    **************************************************************************
    1490                    *                                                                        *
    1491                    *          DO_FORK                                                       *
    1492                    *                                                                        *
    1493                    *          THIS IS CALLED TO FORK OFF TO ANOTHER SCRIPT.                 *
    1494                    *          IT WILL SPAWN A NEW PROCESS WHICH EXECUTES THE                *
    1495                    *          SCRIPT AND KILLS ITSELF.  ONLY THE ORIGINAL                   *
    1496                    *          SCRIPT WILL RETURN TO THE CALLER (ASYNCHRONOUSLY).            *
    1497                    *          THE ENTIRE PDATA AREA WILL BE COPIED FROM THE                 *
    1498                    *          CREATING PROCESS TO THE SPAWNED OFF PROCESS.                  *
    1499                    *                                                                        *
    1500                    **************************************************************************
    1501 00005140           DO_FORK
    1502 00005140     0d3f           CALLR   LONG_FETCH           ;GET THE ROUTINE TO USE.
         00005150     008d  
    1503 00005160     4c28           MOVE    A1,A8                ;PASS SCRIPT POINTER IN A8
    1504 00005170     09e7           MOVI    DUMMY_FORK,A7        ;START IT AS FORKER
         00005180 00005710' 
    1505 000051a0     0d5f           CALLA   P_FORK               ;MAKE THE PROCESS
         000051b0 00000000! 
    1506 000051d0     ca02           JRZ     FORK_X               ;NO PROCCIES EXIT!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   34

    1507                    
    1508 000051e0     0d3f           CALLR   COPY_PDATA_AREA
         000051f0     0003  
    1509                    
    1510 00005200           FORK_X   RETP                         ;FORK IS COMPLETE!
    1511                    
    1512                    **************************************************************************
    1513                    *                                                                        *
    1514                    *          COPY_PDATA_AREA                                               *
    1515                    *                                                                        *
    1516                    *          COPY ENTIRE PDATA AREA FROM CREATING PROCESS (A13)            *
    1517                    *          TO NEWLY CREATED PROCESS (A0)                                 *
    1518                    *                                                                        *
    1519                    **************************************************************************
    1520 00005230           COPY_PDATA_AREA
    1521 00005230     098f           MMTM    SP,A5,A6
         00005240     0600  
    1522 00005250     4da5           MOVE    A13,A5               ;COPY PROCESS POINTER
    1523 00005260     0b05           ADDI    PDATA,A5             ;POINT AT PDATA
         00005270     0060  
    1524 00005280     0b00           ADDI    PDATA,A0
         00005290     0060  
    1525 000052a0     09c6           MOVI    (PSDATA-PDATA)/WORD_SIZE,A6
         000052b0     0024  
    1526 000052c0           DO_F_1
    1527 000052c0     98a0           MOVE    *A5+,*A0+,W          ;COPY TO HIS PROCESS AREA.
    1528 000052d0     3c46           DSJS    A6,DO_F_1
    1529 000052e0     09af          MMFM    SP,A5,A6
         000052f0     0060  
    1530 00005300     0960          RETS
    1531                    
    1532 00005310           CLONE_OURSELVES
    1533 00005310     098f           MMTM    SP,A0,A1,A7             ;SAVE THE STUFF WE PASS
         00005320     c100  
    1534 00005330     09e7           MOVI    HSTD_FORK,A7        ;START IT AS FORKER
         00005340 00005410' 
    1535 00005360     b5a1           MOVE    *A13(PROCID),A1,W    ;PASS OUR ID TO FORKED PROCESS
         00005370     0020  
    1536 00005380     0d5f           CALLA   GETPRC               ;MAKE THE PROCESS
         00005390 00000000! 
    1537 000053b0     ca02           JRZ     NO_ONE_HOME          ;NO PROCCIES EXIT!
    1538                    
    1539 000053c0     0d3f           CALLR   COPY_PDATA_AREA
         000053d0     ffe5  
    1540 000053e0           NO_ONE_HOME
    1541 000053e0     09af          MMFM    SP,A0,A1,A7             ;SAVE THE STUFF WE PASS
         000053f0     0083  
    1542 00005400     0960          RETS
    1543                    
    1544 00005410           HSTD_FORK
    1545 00005410     0b48           CMPI    ASCII_COMMA,A8       ;IS THIS A COMMA?
         00005420     ffd3  
    1546 00005430     cb04           JRNE    HSTD_F1
    1547                    
    1548 00005440                    SLEEP   01EH                 ;POP IT IN LAST!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   35

    1549                    
    1550 00005480           HSTD_F1
    1551 00005480     4d00           MOVE    A8,A0                ;WE ARE SETUP TO SPRAY
    1552 00005490     0b80           ANDI    BYTE_MASK,A0         ;JUST IN CASE
         000054a0 ffffff00  
    1553                             
    1554 000054c0                    JSRP    DO_SPRAY_CHAR_A0     ;DO THE JOB
    1555 00005530     c080           JAUC    SUCIDE               ;THEN DIE
         00005540 00000000! 
    1556                    
    1557                    **************************************************************************
    1558                    *                                                                        *
    1559                    *          DO_SLEEP                                                      *
    1560                    *                                                                        *
    1561                    *          ONE BYTE ARGUEMENT FOLLOWING IS SLEEP TIME.                   *
    1562                    *                                                                        *
    1563                    **************************************************************************
    1564 00005560     0d3f  DO_SLEEP CALLR   BYTE_FETCH
         00005570     003d  
    1565 00005580     4c20          MOVE    A1,A0
    1566 00005590     4c88           MOVE    A4,A8           ;MAKE POINTER HEARTY
    1567 000055a0     0d5f          CALLA   PRCSLP
         000055b0 00000000! 
    1568 000055d0     4d04           MOVE    A8,A4           ;PUT POINTER BACK
    1569 000055e0                    RETP
    1570                    
    1571 00005610           DO_BLACK_BLOB
    1572 00005610     09e0           MOVI    PLOT_ON_BLACK,A0     ;THIS IS THE "PLOT BLOB" ROUTINE FOR BLACK 
         00005620 00007240' 
    1573 00005640     b20d           MOVE    A0,*A13(SPR_BLOB_ROUT),L  ;PUT IT OUT THERE.
         00005650     01e0  
    1574 00005660                   RETP
    1575                    
    1576 00005690           DO_WALL_BLOB
    1577 00005690     09e0           MOVI    PLOT_BLOB,A0         ;THIS IS THE "PLOT BLOB" ROUTINE FOR WALLS 
         000056a0 00007230' 
    1578 000056c0     b20d           MOVE    A0,*A13(SPR_BLOB_ROUT),L  ;PUT IT OUT THERE.
         000056d0     01e0  
    1579 000056e0                   RETP
    1580                    
    1581                    **************************************************************************
    1582                    *                                                                        *
    1583                    *          DUMMY_FORK                                                    *
    1584                    *                                                                        *
    1585                    *          THIS IS THE ACTUAL PROCESS THAT RUNS AFTER A FORK.            *
    1586                    *          A8 CONTAINS THE NEW SCRIPT POINTER.                           *
    1587                    *                                                                        *
    1588                    *          RUN THE SCRIPT THEN DIE!                                      *
    1589                    *                                                                        *
    1590                    **************************************************************************
    1591 00005710           DUMMY_FORK
    1592 00005710     4d04           MOVE    A8,A4                ;MOVE TO SCRIPT POINTER
    1593 00005720                    JSRP    P_SCRIPT       ;PROCESS THE SCRIPT
    1594 00005790     c080           JAUC    SUCIDE               ;AND DIE!
         000057a0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   36

    1595                    
    1596 000057c0           ALIGN_W:
    1597 000057c0     0b04           ADDI    0FH,A4               ;IF IT ENDS IN OTHER THAN ZERO..KICK TO 
         000057d0     000f  
    1598                    *                                     ;NEXT WORD
    1599 000057e0     0b84           ANDI    0FFFFFFF0H,A4        ;AND MASK FRACTIONAL WORD
         000057f0 0000000f  
    1600 00005810     0960           RETS
    1601                    
    1602                    **************************************************************************
    1603                    *                                                                        *
    1604                    *          DO_CHARACTER                                                  *
    1605                    *                                                                        *
    1606                    *          THIS IS CALLED TO SPRAY OUT THE CHARACTER (ASCII)             *
    1607                    *          THAT FOLLOWS IN THE SCRIPT.                                   *
    1608                    *                                                                        *
    1609                    **************************************************************************
    1610 00005820           DO_SPRAY_CHARACTER
    1611 00005820     0d3f           CALLR   BYTE_FETCH
         00005830     0011  
    1612 00005840     4c20           MOVE    A1,A0           ;MOVE TO A0
    1613                    
    1614 00005850           DO_SPRAY_CHAR_A0
    1615 00005850           SPR_CHAR
    1616 00005850     b28d           MOVE    A4,*A13(SPR_SCRIPT),L  ;SAVE CURRENT SCRIPT POINTER
         00005860     0120  
    1617 00005870     0d3f           CALLR   FETCH_FIGURE_PTR       ;TURN A0 INTO A FIGURE POINTER
         00005880     0660  
    1618 00005890                    JSRP    DRAW_FIGURE            ;DRAW THE FIGURE
    1619 00005900     b7a4           MOVE    *A13(SPR_SCRIPT),A4,L  ;RESTORE SCRIPT POINTER
         00005910     0120  
    1620 00005920                    RETP                           ;AND RETURN TO SENDER
    1621                    
    1622                    **************************************************************************
    1623                    *                                                                        *
    1624                    *                 BYTE_FETCH  WORD_FETCH  LONG_FETCH                     *
    1625                    *                                                                        *
    1626                    *          THESE ARE USED TO FETCH SCRIPTING DATA OFF OF A4.             *
    1627                    *          BYTE_FETCH FETCHES A BYTE AT THE CURRENT LOCATION             *
    1628                    *          INTO A1 AND INCREMENTS A4 BY THE BYTE QUANTITY.               *
    1629                    *                                                                        *
    1630                    *          WORD_FETCH FIRST ALIGNS A4 TO THE NEXT WORD, THEN             *
    1631                    *          GETS THE WORD INTO A1 AND INCREMENTS A4 TO POINT              *
    1632                    *          BEYOND THE WORD.                                              *
    1633                    *                                                                        *
    1634                    *          LONG_FETCH BEHAVES SIMILARLY TO BYTE_FETCH.                   *
    1635                    *                                                                        *
    1636                    **************************************************************************
    1637 00005950           BYTE_FETCH
    1638 00005950     8e81           MOVB    *A4,A1               ;FETCH THE BYTE
    1639 00005960     0b81           ANDI    BYTE_MASK,A1         ;KEEP ONLY THE BYTE
         00005970 ffffff00  
    1640 00005990     0b04           ADDI    BYTE_SIZE,A4         ;BUMP POINTER
         000059a0     0008  
    1641 000059b0     0960           RETS
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   37

    1642                    
    1643 000059c0           WORD_FETCH
    1644 000059c0     0d3f           CALLR   ALIGN_W           ;FIRST ALIGN TO WORD IF NECESSARY
         000059d0     ffde  
    1645 000059e0     9481           MOVE    *A4+,A1,W            ;MOVE IN A WORD
    1646 000059f0     0b81           ANDI    WORD_MASK,A1         ;MASK TO KEEP WORD.
         00005a00 ffff0000  
    1647 00005a20     0960           RETS                         ;AND RETURN
    1648                    
    1649 00005a30           LONG_FETCH
    1650 00005a30     0d3f           CALLR   ALIGN_W           ;FIRST ALIGN TO WORD IF NECESSARY
         00005a40     ffd7  
    1651 00005a50     9681           MOVE    *A4+,A1,L            ;MOVE IN A LONG WORD
    1652 00005a60     0960           RETS                         ;AND RETURN
    1653                    
    1654                    **************************************************************************
    1655                    *                                                                        *
    1656                    *          DRAW_FIGURE                                                   *
    1657                    *                                                                        *
    1658                    *          This is called to draw a complete figure.  A pointer          *
    1659                    *          to the figure descriptor is passed in A4.  The X              *
    1660                    *          and Y, are in the process area as is the brush pointer,       *
    1661                    *          palette, and scaler.  This routine keeps its pointer          *
    1662                    *          in  SPR_FIGURE in the process area.                           *
    1663                    *                                                                        *
    1664                    *          The structure is simply a vector list:                        *
    1665                    *                                                                        *
    1666                    *                   1st word:      8000   next 2 vects are hidden        *
    1667                    *                                  8001   end of figure                  *
    1668                    *                                                                        *
    1669                    *                  else            DX                                    *
    1670                    *                                                                        *
    1671                    *                  2nd word:       DY                                    *
    1672                    *                                                                        *
    1673                    **************************************************************************
    1674                    
    1675              8000  HIDDEN           EQU     8000H
    1676              8001  END_OF_FIGURE    EQU     8001H
    1677              8002  WORD_IMMEDIATE   EQU     8002H
    1678              8003  LONG_IMMEDIATE   EQU     8003H
    1679          ffff8000  HIDDEN_EXTENDED  EQU     0FFFF8000H
    1680          ffff8001  END_EXTENDED     EQU     0FFFF8001H
    1681          ffff8002  WORD_EXTENDED    EQU     0FFFF8002H
    1682          ffff8003  LONG_EXTENDED    EQU     0FFFF8003H
    1683                    
    1684 00005a70           DRAW_FIGURE:
    1685 00005a70     b7a1           MOVE    *A13(SPR_Y),A1,L        ;GET THE Y AT FIGURE START
         00005a80     00c0  
    1686 00005a90     b22d           MOVE    A1,*A13(SPR_Y_BASE),L   ;SAVE SO BOTTOM DOESN'T WALK
         00005aa0     0140  
    1687                    
    1688 00005ab0           DO_NEXT_LINE:
    1689 00005ab0     9481           MOVE    *A4+,A1,W       ;FETCH FIRST WORD
    1690 00005ac0     0b41           CMPI    END_EXTENDED,A1 ;END?
         00005ad0     7ffe  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   38

    1691 00005ae0     ca2f           JREQ    FIGURE_DONE     ;YEP...RETURN
    1692                    
    1693 00005af0     0b41           CMPI    HIDDEN_EXTENDED,A1        ;HIDDEN?
         00005b00     7fff  
    1694 00005b10     ca1b           JREQ    DO_HIDDEN       ;YEP...DO IT
    1695                    
    1696 00005b20     0b41           CMPI    WORD_EXTENDED,A1
         00005b30     7ffd  
    1697 00005b40     cb03           JRNE    NOT_WE
    1698                    *
    1699                    *        WORD EXTENDED.......OP,OFFSET,WORD
    1700                    *
    1701                    *        STORE WORD AT OFFSET FROM A13
    1702                    *
    1703 00005b50     0d3f           CALLR   STORE_WORD
         00005b60     0034  
    1704 00005b70     c0f3           JRUC    DO_NEXT_LINE          ;AND WE'RE DONE
    1705                    
    1706 00005b80     0b41  NOT_WE:  CMPI    LONG_EXTENDED,A1
         00005b90     7ffc  
    1707 00005ba0     cb03           JRNE    NOT_OP
    1708                    
    1709                    *
    1710                    *        LONG EXTENDED.......OP,OFFSET,LONGWORD
    1711                    *
    1712                    *        STORE LONGWORD AT OFFSET FROM A13
    1713                    *
    1714 00005bb0     0d3f           CALLR   STORE_LONG
         00005bc0     0033  
    1715 00005bd0     c0ed           JRUC    DO_NEXT_LINE          ;AND WE'RE DONE
    1716                    
    1717 00005be0           NOT_OP:
    1718 00005be0     9482           MOVE    *A4+,A2,W              ;FETCH DY
    1719 00005bf0     b5a0           MOVE    *A13(SPR_SLEEP),A0,W   ;LOAD UP SLEEP TIME
         00005c00     01a0  
    1720 00005c10     b28d           MOVE    A4,*A13(SPR_FIGURE),L  ;SAVE FIGURE POINTER
         00005c20     0180  
    1721 00005c30                    JSRP    DRAW_SCALED_VECTOR     ;DRAW THIS VECTOR
    1722 00005ca0     b7a4           MOVE    *A13(SPR_FIGURE),A4,L  ;GET BACK FIGURE POINTER
         00005cb0     0180  
    1723 00005cc0     c0de           JRUC    DO_NEXT_LINE
    1724                    
    1725 00005cd0           DO_HIDDEN:
    1726 00005cd0     9481           MOVE    *A4+,A1,W            ;GET DX FOR HIDDEN LINE
    1727 00005ce0     9482           MOVE    *A4+,A2,W            ;GET DY FOR HIDDEN LINE
    1728 00005cf0     0d3f           CALLR   SCALE_DX_DY          ;SCALE THESE BY OUR CURRENT SCALER
         00005d00     0148  
    1729                    
    1730 00005d10     b7a3           MOVE    *A13(SPR_X),A3,L
         00005d20     00a0  
    1731 00005d30     24c1           SLL     6,A1                 ;ALIGN 6 BIT FRACTION TO 12 BIT FRACTION 
    1732 00005d40     4023           ADD     A1,A3                ;FINAL X POSITION 
    1733 00005d50     b26d           MOVE    A3,*A13(SPR_X),L     ;STORE IT BACK
         00005d60     00a0  
    1734                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   39

    1735 00005d70     b7a3           MOVE    *A13(SPR_Y),A3,L
         00005d80     00c0  
    1736 00005d90     24c2           SLL     6,A2                 ;12 BIT FRACTION MAKES THIS Y VELOCITY
    1737 00005da0     4043           ADD     A2,A3                ;FINAL Y POSITION 
    1738 00005db0     b26d           MOVE    A3,*A13(SPR_Y),L     ;STORE IT BACK
         00005dc0     00c0  
    1739 00005dd0     c0cd           JRUC    DO_NEXT_LINE
    1740                    
    1741 00005de0           FIGURE_DONE:         
    1742 00005de0     b7a1           MOVE    *A13(SPR_Y_BASE),A1,L   ;RESTORE BASE FROM FIGURE START
         00005df0     0140  
    1743 00005e00     b22d           MOVE    A1,*A13(SPR_Y),L        
         00005e10     00c0  
    1744                    
    1745 00005e20                    RETP
    1746                    
    1747 00005e50           GET_PTR_IN_A1:
    1748 00005e50     9481           MOVE    *A4+,A1,W
    1749 00005e60     0b81           ANDI    0FFFFH,A1       ;MAKE SURE SIGN EXTEND DOESN'T SCREW US
         00005e70 ffff0000  
    1750 00005e90     41a1           ADD     A13,A1          ;ADD BASE POINTER
    1751 00005ea0     0960           RETS
    1752                    
    1753 00005eb0           STORE_WORD
    1754 00005eb0     0d3f           CALLR   GET_PTR_IN_A1         ; THIS GETS OUR POINTER
         00005ec0     fff8  
    1755 00005ed0     9482           MOVE    *A4+,A2,W             ; GET LONG WORD IN A2
    1756 00005ee0     8041           MOVE    A2,*A1,W              ; STORE THE WORD
    1757 00005ef0     0960           RETS
    1758                    
    1759 00005f00           STORE_LONG
    1760 00005f00     0d3f           CALLR   GET_PTR_IN_A1         ; THIS GETS OUR POINTER
         00005f10     fff3  
    1761 00005f20     9682           MOVE    *A4+,A2,L             ; GET LONG WORD IN A2
    1762 00005f30     8241           MOVE    A2,*A1,L              ; STORE THE LONGWORD
    1763 00005f40     0960           RETS
    1764                    
    1765                    **************************************************************************
    1766                    *                                                                        *
    1767                    *          DRAW_SCALED_VECTOR                                            *
    1768                    *                                                                        *
    1769                    *          Routine is called to spray on 1 vector.  It takes             *
    1770                    *          the following parameters:                                     *
    1771                    *                                                                        *
    1772                    *          A0 = sleep time between blots. (0 for no sleep)               *
    1773                    *          A1 = X_VECT   Letter vector (full scale) (SIGNED TO 32 BITS)  *
    1774                    *          A2 = Y_VECT                                                   *
    1775                    *                                                                        *
    1776                    *          The scaler (to turn vector from full scale to current         *
    1777                    *          scale is in the process store area.  So it the                *
    1778                    *          X coordinate, Y coordinate  paintbrush and                    *
    1779                    *          palette #.                                                    *
    1780                    *                                                                        *
    1781                    *          The X_VECT is 16 bit signed.  Distance is pixels for letters  *
    1782                    *          that are screen high.....smaller letters are scaled down.     *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   40

    1783                    *                                                                        *
    1784                    *          The Scaler is a 6 bit binary unsigned fraction.  This         *
    1785                    *          scales down the letters to the sizes used.                    *
    1786                    *                                                                        *
    1787                    *          The Scaler is multiplied by X_VECT giving us                  *
    1788                    *          X_DIST which is the total X distance in pixels for the        *
    1789                    *          screen plotted vector.  X_DIST is signed and has              *
    1790                    *          a 6 bit binary fraction.                                      *
    1791                    *                                                                        *
    1792                    *                                2    2    2                             *
    1793                    *          By using the formula X  + Y  = R ,  we find the total         *
    1794                    *          length squared of the whole vector.                           *
    1795                    *                                                                        *
    1796                    *                               2         2                              *
    1797                    *                         X_DIST  + Y_DIST   = R2                        *
    1798                    *                                                                        *
    1799                    *          This provides us with unsigned R2......an unsigned            *
    1800                    *          number with a 12 bit fraction which is the square of          *
    1801                    *          the distance.                                                 *
    1802                    *                                                                        *
    1803                    *          By dividing by the square of the unit length (provided        *
    1804                    *          by the brush descriptor) we get the square of the             *
    1805                    *          # of frames to divide the vector by.  By looking              *
    1806                    *          up in a table, we get the frame count.                        *
    1807                    *                                                                        *
    1808                    *          We then X_DIST and Y_DIST by this count to get the            *
    1809                    *          X and Y velocity per frame.  We spray the                     *
    1810                    *          "frame count" times.                                          *
    1811                    *                                                                        *
    1812                    **************************************************************************
    1813 00005f50           DRAW_SCALED_VECTOR:
    1814 00005f50     0d3f           CALLR   SCALE_DX_DY
         00005f60     0122  
    1815                    
    1816 00005f70           DRAW_ABSOLUTE_VECTOR:
    1817 00005f70     4c09           MOVE    A0,A9               ;A9 = SLEEP REGGIE
    1818                    
    1819 00005f80     b7aa           MOVE    *A13(SPR_X),A10,L
         00005f90     00a0  
    1820 00005fa0     4c23           MOVE    A1,A3
    1821 00005fb0     24c3           SLL     6,A3                 ;ALIGN 6 BIT FRACTION TO 12 BIT FRACTION 
    1822 00005fc0     406a           ADD     A3,A10               ;FINAL X POSITION = A10
    1823                    
    1824 00005fd0     b7ab           MOVE    *A13(SPR_Y),A11,L
         00005fe0     00c0  
    1825 00005ff0     4c43           MOVE    A2,A3
    1826 00006000     24c3           SLL     6,A3                 ;12 BIT FRACTION MAKES THIS Y VELOCITY
    1827 00006010     406b           ADD     A3,A11               ;FINAL Y POSITION = A11
    1828                    
    1829 00006020     b7a3           MOVE    *A13(SPR_Y_BASE),A3,L   ;GET THE CURRENT Y-BASE
         00006030     0140  
    1830 00006040     a26c           MOVE    A3,-*A12,L              ;PUSH IT ON STACK.....
    1831                    *                                        ;WHEN WE'RE DONE THIS WILL
    1832                    *                                        ;TELL US HOW HIGH THE SCREEN SCROLLED.
    1833                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   41

    1834                    *                                    ;F=6       ;A1 = SIGNED X_DIST
    1835 00006050     4c23           MOVE    A1,A3                          ;X_DIST
    1836 00006060     5c63           MPYS    A3,A3               ;F=12      ;X_DIST*X_DIST (UNSIGNED)
    1837 00006070     4c64           MOVE    A3,A4                          ;X_DIST*X_DIST IN A4 (UNSIGNED)
    1838                    
    1839 00006080     4c43           MOVE    A2,A3                          ;A2 = SIGNED Y_DIST
    1840 00006090     5c63           MPYS    A3,A3               ;F=12      ;Y_DIST*Y_DIST
    1841 000060a0     4083           ADD     A4,A3               ;F=12      ;A3 = R_SQUARED
    1842 000060b0     b7a4           MOVE    *A13(SPR_POINTER),A4,L         ;GET BRUSH POINTER
         000060c0     0060  
    1843 000060d0     b484           MOVE    *A4(UNIT_V),A4,W      ;GET UNIT V SQUARED  (2 BIT FRAC)
         000060e0     0060  
    1844                    
    1845 000060f0     5a83           DIVU    A4,A3               ;F=10      ;A7 = SQUARE OF STEPS IN A7
    1846 00006100     0b03           ADDI    200H,A3                        ;ROUND 10 BITS 
         00006110     0200  
    1847 00006120     2ec3           SRL     10,A3                ;THIS IS NOW STEPS SQUARED.
    1848                                                         
    1849 00006130     0d3f           CALLR   SQUARE_ROOT_OF_A3    ;FIND THE SQUARE ROOT OF A3
         00006140     006f  
    1850 00006150     4c63           MOVE    A3,A3                ;ZERO?
    1851 00006160     cb01           JRNZ    NOT_ZERO
    1852 00006170     1823           MOVK    1,A3                 ;THEN USE 1 BLOT
    1853                    *
    1854                    *        NOW     A1 = X_DIST (SIGNED W/ 6 BIT FRACTION)
    1855                    *                A2 = Y_DIST (SIGNED W/ 6 BIT FRACTION)
    1856                    *                A3 = NUMBER OF BLOTS TO PAINT.
    1857                    *
    1858 00006180           NOT_ZERO:
    1859 00006180     5861           DIVS    A3,A1                ;A1 = DX PER BLOT W/ 6 BIT FRAC.
    1860 00006190     4c45           MOVE    A2,A5                ;USE ODD REGGIE
    1861 000061a0     5865           DIVS    A3,A5                ;A5 = DX PER BLOT W/ 6 BIT FRAC.
    1862                    
    1863 000061b0     24c1           SLL     6,A1                 ;ALIGN 6 BIT FRACTION TO 12 BIT FRACTION 
    1864 000061c0     24c5           SLL     6,A5                 ;12 BIT FRACTION MAKES THIS Y VELOCITY
    1865                    
    1866 000061d0     b22d           MOVE    A1,*A13(SPR_XV),L    ;STORE VELOCITY
         000061e0     00e0  
    1867 000061f0     b2ad           MOVE    A5,*A13(SPR_YV),L    ;STORE VELOCITY
         00006200     0100  
    1868                    
    1869 00006210     4c68           MOVE    A3,A8                ;COUNT FRAMES IN RESTORABLE REGGIE
    1870                    
    1871 00006220           LINE_LOOP:
    1872 00006220     4d20           MOVE    A9,A0                ;REFRESH SLEEP TIMER
    1873 00006230     ca1e           JRZ     CHECK_TIMER          ;IT SAYS FAST AS POSSIBLE!
    1874 00006240     cf13           JRNN    NORMAL_SLEEP
    1875                    *
    1876                    *        IF THIS NUMBER APPEARS NEGATIVE, WE ARE TRYING TO 
    1877                    *        SHARE WITH THE DISPLAY SYSTEM.
    1878                    *
    1879                    *        THE FORM OF THIS SLEEP REQUEST IS:
    1880                    *
    1881                    *           1XXX XXXX FFFF SSSS
    1882                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   42

    1883                    *        WHICH MEANS TO DRAW FFFF FRAMES, THEN SLEEP
    1884                    *        FOR SSSS TIME.
    1885                    *
    1886 00006250     2f80           SRL     4,A0                   ;MOVE FFFF TO LOW POINT
    1887 00006260     0b80           ANDI    0FH,A0                 ;KEEP FFFF ONLY
         00006270 fffffff0  
    1888 00006290     b5a3           MOVE    *A13(SPR_DIVIDER),A3,W ;GET THE DIVIDER
         000062a0     01b0  
    1889 000062b0     1023           INC     A3                     ;COUNT FRAMES DRAWN!
    1890 000062c0     b06d           MOVE    A3,*A13(SPR_DIVIDER),W  ;PUT IT BACK
         000062d0     01b0  
    1891 000062e0     4803           CMP     A0,A3                    ;HAVE WE DRAWN ENOUGH?
    1892 000062f0     c81a           JRLO    SKIP_SLEEP               ;NOPE DRAW ANOTHER!
    1893                    
    1894 00006300     5663           CLR     A3
    1895 00006310     b06d           MOVE    A3,*A13(SPR_DIVIDER),W  ;ZERO OUT FOR NEXT SET!
         00006320     01b0  
    1896 00006330     4d20           MOVE    A9,A0                    ;GET SLEEP TIME BACK IN A0
    1897 00006340     0b80           ANDI    0FH,A0                    ;TIME ONLY
         00006350 fffffff0  
    1898 00006370     c00f           JRUC    SLEEP_NOW                 ;NOW SLEEP THAT MANY FRAMES.
    1899                    
    1900 00006380           NORMAL_SLEEP
    1901 00006380     b5a3           MOVE    *A13(SPR_DIVIDER),A3,W  ;GET ACCUMULATED FRACTION
         00006390     01b0  
    1902 000063a0     0b83           ANDI    0FFH,A3                 ;MASK FRACTIONAL PART HERE
         000063b0 ffffff00  
    1903 000063d0     4060           ADD     A3,A0                   ;ADD ACCUM TO AMOUNT TO DO
    1904 000063e0     b00d           MOVE    A0,*A13(SPR_DIVIDER),W  ;PUT "FRACTION" BACK OUT
         000063f0     01b0  
    1905                    
    1906 00006400     2f00           SRL     8,A0                 ;NOW LOOK AT SLEEP UNITS.
    1907 00006410     cb05           JRNZ    SLEEP_NOW            ;ITS TIME TO SLEEP
    1908                    *
    1909                    *        NOT YET TIME TO SLEEP
    1910                    *        CHECK TO SEE IF TIMER HIT......IF SO....SLEEP NOW
    1911                    *
    1912                    *        THIS IS PARAMTER OF ZERO...ONLY SLEEP WHEN REST
    1913                    *        OF SYSTEM IS DUE TO RUN
    1914                    *
    1915 00006420           CHECK_TIMER:
    1916 00006420     05a1           MOVE    @TIMER,A1,W            ;NO SLEEP.....ARE WE RIPE FOR A LOOP?
         00006430 00000000! 
    1917 00006450     ca04           JRZ     SKIP_SLEEP           ;NOPE.....KEEP BLOBBING
    1918                    
    1919 00006460     1820           MOVK    1,A0                 ;SLEEP 1 FRAME! (LET SYS GO)
    1920                    
    1921 00006470           SLEEP_NOW:
    1922 00006470     0d5f          CALLA   PRCSLP               ;DO THE SLEEP
         00006480 00000000! 
    1923                    
    1924 000064a0           SKIP_SLEEP:
    1925 000064a0     0d3f           CALLR   UPDATE_POSITION      ;SET NEW POSITIONS
         000064b0     0025  
    1926                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   43

    1927 000064c0     b7a3           MOVE    *A13(SPR_BLOB_ROUT),A3,L
         000064d0     01e0  
    1928 000064e0     0d3f           CALLR   DMA_INTERFACE        ;HARD WAIT FOR SYSTEM!
         000064f0     0011  
    1929 00006500     0923           CALL    A3                   ;CALL THE PLOT_BLOB ROUTINE!
    1930 00006510     0d3f           CALLR   DMA_END              ;TURN DISPLAY SYS BACK ON IF NEC.
         00006520     001a  
    1931                    
    1932 00006530     0d88           DSJ     A8,LINE_LOOP
         00006540     ffcd  
    1933                    
    1934 00006550     9788           MOVE    *A12+,A8,L           ;FETCH ORIGINAL Y_BASE
    1935 00006560     b7a9           MOVE    *A13(SPR_Y_BASE),A9,L   ;GET CURRENT Y_BASE
         00006570     0140  
    1936 00006580     4509           SUB     A8,A9                   ;THIS IS HOW MUCH IT MOVED!
    1937 00006590     412b           ADD     A9,A11                  ;MOVE IT IN OUR EXPECTED DESTINATION
    1938                    
    1939 000065a0     b34d           MOVE    A10,*A13(SPR_X),L
         000065b0     00a0  
    1940 000065c0     b36d           MOVE    A11,*A13(SPR_Y),L
         000065d0     00c0  
    1941                    
    1942 000065e0                    RETP                         ;THATS ALL WE WROTE!
    1943                    
    1944                    **************************************************************************
    1945                    *                                                                        *
    1946                    *          DMA_INTERFACE                                                 *
    1947                    *                                                                        *
    1948                    *          THIS IS CALLED TO SYNC UP WITH THE DISPLAY SYSTEM             *
    1949                    *          WHEN SPRAYING IS DONE TO ENTER INITIALS.                      *
    1950                    *                                                                        *
    1951                    *          IT IS A PROCESS THAT DOES A *HARD* WAIT TILL                  *
    1952                    *          THE SYSTEM SAY GO.                                            *
    1953                    *                                                                        *
    1954                    **************************************************************************
    1955 00006610           DMA_INTERFACE
    1956                    *
    1957                    *        WE CAN USE ANY REGGIES A0-A7 EXCEPT A3
    1958                    *
    1959 00006610     05a0           MOVE    @DISPLAYON,A0,W           ;IS DISPLAY SYSTEM RUNNING?
         00006620 00000000! 
    1960 00006640     ca07           JRZ     NO_DMA                    ;NO....ZERO IN A0 CHECKED ON RETURN!
    1961                    *
    1962                    *        DMA IS RUNNING
    1963                    *
    1964 00006650     5621           CLR     A1                        ;TURN OFF DISPLAY SYSTEM
    1965 00006660     0581           MOVE    A1,@DISPLAYON,W           ;THIS DOES IT
         00006670 00000000! 
    1966                    *
    1967                    *        THIS WILL WAIT AND RETURN TO OUR CALLER!
    1968                    *
    1969 00006690     c080           JAUC    DMAQWAIT                  ;WAIT FOR DMA TO BE DONE (IF IN MOTION)
         000066a0 00000000! 
    1970                    *
    1971 000066c0           NO_DMA
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   44

    1972 000066c0     0960           RETS                              ;RETURN W/ A0 = 0
    1973                    *
    1974                    *        NOTE THAT OUR A0 IS HELD TO TURN THE DISPLAY SYSTEM BACK ON!
    1975                    *
    1976                    **************************************************************************
    1977                    *                                                                        *
    1978                    *          DMA_END                                                       *
    1979                    *                                                                        *
    1980                    *          THIS IS CALLED AFTER BLOB TO TURN OBJECT SYSTEM BACK ON       *
    1981                    *          IF NECESSARY.                                                 *
    1982                    *                                                                        *
    1983                    *          A0 HAS THE "DISPLAYON" VALUE FROM WHEN WE WERE CALLED.        *
    1984                    *                                                                        *
    1985                    **************************************************************************
    1986 000066d0           DMA_END
    1987 000066d0     0580           MOVE    A0,@DISPLAYON,W           ;PUT THE VALUE BACK
         000066e0 00000000! 
    1988 00006700     0960           RETS                              ;AND RETURN TO OUR CALLER
    1989                    **************************************************************************
    1990                    **************************************************************************
    1991                    **************************************************************************
    1992 00006710           UPDATE_POSITION
    1993 00006710     098f           MMTM    SP,A0,A1
         00006720     c000  
    1994 00006730     b7a0           MOVE    *A13(SPR_X),A0,L
         00006740     00a0  
    1995 00006750     b7a1           MOVE    *A13(SPR_XV),A1,L
         00006760     00e0  
    1996 00006770     4001           ADD     A0,A1
    1997 00006780     b22d           MOVE    A1,*A13(SPR_X),L
         00006790     00a0  
    1998                    
    1999 000067a0     b7a0           MOVE    *A13(SPR_Y),A0,L
         000067b0     00c0  
    2000 000067c0     b7a1           MOVE    *A13(SPR_YV),A1,L
         000067d0     0100  
    2001 000067e0     4001           ADD     A0,A1
    2002 000067f0     b22d           MOVE    A1,*A13(SPR_Y),L
         00006800     00c0  
    2003 00006810     09af          MMFM    SP,A0,A1
         00006820     0003  
    2004 00006830     0960          RETS
    2005                    
    2006                    **************************************************************************
    2007                    *                                                                        *
    2008                    *          SQUARE_ROOT_OF_A3                                             *
    2009                    *                                                                        *
    2010                    *          THIS ROUTINE MUST FIND THE SQUARE ROOT OF A3.                 *
    2011                    *                                                                        *
    2012                    *          CURRENTLY WE INTEND TO SUPPORT UP TO 100 JUMPS...             *
    2013                    *          THEREFORE A3 IS VALID TO 10000.                               *
    2014                    *                                                                        *
    2015                    *          SINCE WE ARE GRAFFITI ARTISTS....WE'LL GO WITH                *
    2016                    *          ROUNDING UP.                                                  *
    2017                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   45

    2018                    **************************************************************************
    2019 00006840           SQUARE_ROOT_OF_A3
    2020 00006840     098f           MMTM    SP,A0,A1,A2,A4,A5,A6,A7
         00006850     ef00  
    2021 00006860     4c63           MOVE    A3,A3           ;ZERO AS INPUT?
    2022 00006870     ca26           JREQ    SQR_EXIT        ;RETURN ZERO
    2023 00006880     09e5           MOVI    SQUARE_TABLE,A5 ;BASE OF TABLE 
         00006890 00006b20' 
    2024 000068b0     5600           CLR     A0              ;LAST LOW ONE
    2025 000068c0     09c2           MOVI    101*16,A2       ;LAST HIGH ONE (TABLE IS WORDS!)
         000068d0     0650  
    2026 000068e0     09c1           MOVI    50*16,A1        ;START IN THE MIDDLE
         000068f0     0320  
    2027                    
    2028 00006900           NEXT_TRY:
    2029 00006900     4ca6           MOVE    A5,A6           ;COPY TABLE BASE
    2030 00006910     4026           ADD     A1,A6           ;FORM POINTER TO WORD
    2031 00006920     84c7           MOVE    *A6,A7,W        ;GET THE WORD
    2032 00006930     4867           CMP     A3,A7           ;ARE WE BIGGER OR SMALLER
    2033 00006940     c90b           JRHS    TOO_HIGH        ;TABLE NUMBER IS HIGHER
    2034                    *
    2035                    *        A7 (TABLE) IS LOWER THAN OUR NUMBER 
    2036                    *
    2037 00006950     b4c7           MOVE    *A6(WORD_SIZE),A7,W      ;SEE IF ONE AFTER IT IS HIGHER
         00006960     0010  
    2038 00006970     4867           CMP     A3,A7
    2039 00006980     c912           JRHS    RETURN_A1_PLUS_1
    2040                    
    2041 00006990     4c20           MOVE    A1,A0                     ;MOVE US TO A0....WE HAVE NEW LOW BOUND
    2042 000069a0     4041           ADD     A2,A1                     ;AVERAGE A1 AND A2
    2043 000069b0     2fe1           SRL     1,A1                      ;
    2044 000069c0     0b81           ANDI    0FFFFFFF0H,A1             ;AND POINT AT NEAREST WORD.
         000069d0 0000000f  
    2045 000069f0     c0f0           JRUC    NEXT_TRY
    2046                    *
    2047                    *        THE ONE WE POINT AT IS HIGHER
    2048                    *
    2049 00006a00           TOO_HIGH:
    2050 00006a00     b4c7           MOVE    *A6(-WORD_SIZE),A7,W      ;SEE IF ONE BEFORE IT IS LOWER
         00006a10     fff0  
    2051 00006a20     4867           CMP     A3,A7
    2052 00006a30     c808           JRLO    RETURN_A                  ;ONE BEFORE IS LOWER..RETURN THIS ONE
    2053                    
    2054 00006a40     4c22           MOVE    A1,A2                     ;WE DON'T NEED TO GO HIGHER THAN HERE
    2055 00006a50     4001           ADD     A0,A1                     ;AVERAGE WITH LOW MINIMUM.
    2056 00006a60     2fe1           SRL     1,A1                      ;
    2057 00006a70     0b81           ANDI    0FFFFFFF0H,A1             ;AND POINT AT NEAREST WORD.
         00006a80 0000000f  
    2058 00006aa0     c0e5           JRUC    NEXT_TRY
    2059                    
    2060 00006ab0           RETURN_A1_PLUS_1:
    2061 00006ab0     1201           ADDK    WORD_SIZE,A1
    2062 00006ac0           RETURN_A:
    2063 00006ac0     2f81           SRL     4,A1
    2064 00006ad0     4c23           MOVE    A1,A3
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   46

    2065 00006ae0           SQR_EXIT:
    2066 00006ae0     09af          MMFM    SP,A0,A1,A2,A4,A5,A6,A7
         00006af0     00f7  
    2067 00006b00     0960          RETS
    2068                    
    2069                             .INCLUDE        "NARCSQT.ASM"           ;TABLE OF SQUARES
    2070                    
    2071                    **************************************************************************
    2072                    *                                                                        *
    2073                    *          SCALE_DX_DY                                                   *
    2074                    *                                                                        *
    2075                    *          THIS IS CALLED TO SCALE AN X AND Y (SIGNED) VECTOR            *
    2076                    *          BY THE CURRENT PROCESSES DRAWING SCALER.                      *
    2077                    *                                                                        *
    2078                    **************************************************************************
    2079 00007190           SCALE_DX_DY:
    2080 00007190     098f           MMTM    SP,A3
         000071a0     1000  
    2081 000071b0     b5a3           MOVE    *A13(SPR_SCALER),A3,W          ;A3=SCALER....6 BITS..ZERO EXT.
         000071c0     0090  
    2082 000071d0     5c61           MPYS    A3,A1                          ;A1 = SCALED VECTOR X_DIST
    2083 000071e0     5c43           MPYS    A2,A3                          ;A3 = SCALED VECTOR Y_DIST
    2084 000071f0     4c62           MOVE    A3,A2                          ;A2 = SCALED VECTOR Y_DIST
    2085 00007200     09af          MMFM    SP,A3
         00007210     0008  
    2086 00007220     0960          RETS
    2087                    
    2088                    **************************************************************************
    2089                    *                                                                        *
    2090                    *          PLOT_BLOB                                                     *
    2091                    *                                                                        *
    2092                    *          THIS IS THE BASIC SPRAY PAINT PRIMITIVE.  IT PLOTS A          *
    2093                    *          BLOB FOR THE CALLING PROCESS.  IT ASSUMES THE FOLLOWING       *
    2094                    *          IS ALL SETUP:                                                 *
    2095                    *                                                                        *
    2096                    *          BRUSH           (STORED IN PROCESS  [SET_BRUSH])              *
    2097                    *          PALETTE NUMBER  (STORED IN PROCESS  [SET_SPRAY_PALETTE])      *
    2098                    *          PALETTE         (DATA IN ABOVE PALETTE [SETUP_PALETTE])       *
    2099                    *          SPRAY COLOR     (DATA IN PROCESS    [SET_SPRAY_COLOR])        *
    2100                    *          X COORDINATE    (IN PROCESS)                                  *
    2101                    *          Y COORDINATE    (IN PROCESS)                                  *
    2102                    *                                                                        *
    2103                    *          THIS ALGORITHMICALLY ADDS THE CURRENT BRUSH'S COLOR UNITS     *
    2104                    *          AROUND THE CENTER OF THE PROVIDED X AND Y.                    *
    2105                    *                                                                        *
    2106                    *          X AND Y ARE SPECIFIED AS FOLLOWS:                             *
    2107                    *                                                                        *
    2108                    *                  0000 0000 000Y YYYY YYYY XXXX XXXX X000               *
    2109                    *                                                                        *
    2110                    *          THIS PROVIDES THE SCREEN CENTER.  THE X COORDINATE            *
    2111                    *          IS A LONG WORD WITH DATA IN BITS 3-11.  THE Y COORDINATE      *
    2112                    *          IS A LONG WORD WITH DATA IN BITS 12-20.                       *
    2113                    *          THE BITS THAT ARE NOT SIGNIFICANT TO THE PARTICULAR           *
    2114                    *          COMPONENT DO NOT NEED TO BE CLEARED OUT AS THEY               *
    2115                    *          WILL BE MASKED WHEN THE COMPONENTS ARE COMBINED.              *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   47

    2116                    *                                                                        *
    2117                    **************************************************************************
    2118                    
    2119                    **************************************************************************
    2120                    *                                                                        *
    2121                    *          GO_RIGHT                                                      *
    2122                    *                                                                        *
    2123                    *          THIS IS A MACRO FOR MAIN LOOP IN PLOB_BLOB.                   *
    2124                    *          THE FIRST ARGUEMENT CONTAINS 2 BYTES OF                       *
    2125                    *          DATA FOR 2 CONSECUTIVE PIXELS.  THE HIGH                      *
    2126                    *          PIX INFO (BITS 8-15) SHOULD END UP IN THE                     *
    2127                    *          LOW 8 BITS OF THIS REGGIE.                                    *
    2128                    *                                                                        *
    2129                    *          THE SECOND ARGUMENT IS WHERE THE LOW PIXIE                    *
    2130                    *          INFO SHOULD END UP.                                           *
    2131                    *                                                                        *
    2132                    **************************************************************************
    2133                    GO_RIGHT:   $MACRO   R1,R2
    2134                                MOVE     :R1:,:R2:        ;COPY BOTH PIXIE
    2135                                SLL      16,:R1:
    2136                                SRL      24,:R1:           ;1ST REGGIE GET HIGH..SHIFT IT DOWN
    2137                                SLL      24,:R2:          ;MASK OFF HIGH 24 BITS
    2138                                SRL      24,:R2:
    2139                                $ENDM 
    2140                    
    2141 00007230           PLOT_BLOB:
    2142 00007230     0960           RETS
    2143                    
    2144                    *         MMTM    SP,B2,B3,B4,B5
    2145                    *         MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12
    2146                    *
    2147                    *         MOVE    *A13(SPR_POINTER),A6,L    ;A6 = ROM STRUCT POINTER
    2148                    *         MOVE    *A6(WIDTH),A1,W                 ;WIDTH OF BRUSH
    2149                    *         SRL     1,A1                      ;WIDTH OF BRUSH IN -WORDS-
    2150                    *         MOVE    A1,B4                   ;***B4 = WIDTH OF BRUSH IN -WORDS-
    2151                    *         MOVE    *A6(HEIGHT),A2,W                 ;HEIGHT OF BRUSH
    2152                    *         MOVE    A2,B3                   ;***B3 = HEIGHT OF BRUSH
    2153                    **
    2154                    **        NOW WE NEED TO GO FROM CURRENT COORDINATE TO UPPER LEFT OF
    2155                    **        BRUSH
    2156                    **
    2157                    *         MOVE    *A6(DW),A3,L                 ;DX IN A3
    2158                    *         MOVE    *A13(SPR_X),A4,L          ;GET X
    2159                    *         SRL     9,A4                      ;MOVE X TO SCREEN COORDINATE
    2160                    *         ADD     A4,A3                     ;ADD IT INTO DX (A3)
    2161                    *         ANDI    EVEN_X_MASK,A3            ;UPPER LEFT X
    2162                    *
    2163                    *         MOVE    *A6(DH),A4,L                 ;DY IN A4
    2164                    **                                        ;***A6 = BRUSH DATA POINTER
    2165                    *         MOVE    *A13(SPR_Y),A5,L          ;GET Y
    2166                    *         ADD     A5,A4                     ;ADD IT INTO A4
    2167                    *         ANDI    Y_MASK,A4                 ;UPPER LEFT Y IN A4
    2168                    *         ADD     A4,A3                   ;***A3 = UPPER LEFT SCREEN POINTER
    2169                    *         CMPI    PLOT_MAX,A3            ;ARE WE ON SCREEN?
    2170                    *         JAHS    BLOB_OFF_SCREEN           ;NOPE....EXIT
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   48

    2171                    *
    2172                    *         MOVE    *A13(SPR_PALETTE),A4,W  ;***A4=PALETTE NUMBER FOR LOW PIX
    2173                    *         ANDI    BYTE_MASK,A4              ;KEEP LOW PIECE
    2174                    *         MOVE    A3,A2                     ;SAVE ROW START IN A2
    2175                    *
    2176                    *         MOVE    A4,A5                     ;COPY PALETTE TO A5
    2177                    *         SLL     8,A5                      ;DUPLICATE INTO HIGH BYTE
    2178                    *         ADD     A4,A5                     ;ADD LOW BACK IN
    2179                    *         MOVE    A5,@CMAPSEL,W             ;THIS MAKES SURE OUR WRITE USE OUR PAL
    2180                    *
    2181                    *         MOVE    *A13(SPR_FUZZ_FLAG),A1,W  ;GET FUZZ PARAMETER
    2182                    *         MOVE    A1,B2                     ;KEEP FUZZ PAR IN B2
    2183                    *         ANDI    0FFH,B2                   ;KEEP ONLY A BYTE
    2184                    *
    2185                    *         ADDI    S_DATA,A6                 ;POINT AT THE DATA
    2186                    *
    2187                    *         MOVK    8,A1                      ;CONSTANTS DEFINED AS SHOWN
    2188                    *         MOVK    16,A9
    2189                    *         MOVK    24,A10
    2190                    *
    2191                    **
    2192                    **        AT THIS POINT:
    2193                    **
    2194                    **        A0   RANDOM #'S FETCHED HERE.
    2195                    **
    2196                    **        A6 = ROM BRUSH POINTER
    2197                    **        A2 = BEGINNING OF ROW SCREEN POINTER
    2198                    **        A3 = SCREEN POINTER
    2199                    **
    2200                    **        B2 = NON ZERO FOR FUZZING
    2201                    **        B3 = HEIGHT COUNTER
    2202                    **        B4 = ROW SIZE
    2203                    **        B5 = ROW COUNTER
    2204                    **
    2205                    **        A4 = PRIMARY COLOR SCRATCH REG
    2206                    **        A5 = 2 BIT COLOR SCRATCH REG
    2207                    **        
    2208                    **
    2209                    **        A1  = CONSTANT 8....ONCE PRIMARY REACHES 8, 2NDARY CANT BE 3
    2210                    **        A9  = CONSTANT 16...ONCE PRIMARY REACHES 16, 2NDARY CANT BE 2
    2211                    **        A10 = CONSTANT 24...ONCE PRIMARY REACHES 24, 2NDARY TURNED OFF.
    2212                    **                                                    3RD TURNED OFF.
    2213                    **
    2214                    ***************************************************************************
    2215                    **                                                                        *
    2216                    **          THIS IS THE BASIC PROCESSING LOOP                             *
    2217                    **                                                                        *
    2218                    ***************************************************************************
    2219                    *
    2220                    *NEW_ROW_LOOP:
    2221                    *         MOVE    B4,B5                     ;REFRESH ROW COUNTER
    2222                    *         CALLA   RANDOM                     ;GET RANDOM NUMBER IN A0 EACH WORD
    2223                    *
    2224                    *FINISH_ROW_LOOP:
    2225                    *         MOVE    *A6+,A7,W                 ;FETCH 2 BRUSH BYTES
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   49

    2226                    *         JRNE    WORK_TO_DO
    2227                    *         ADDI    WORD_SIZE,A3              ;BOTH DATA ZERO,
    2228                    *         JAUC    LOOP_BOT                  ;KICK THE SCREEN POINTER
    2229                    *
    2230                    **                                          ;**A7,A8..A7 = HIGH PIX A8 = LOW PIX
    2231                    *WORK_TO_DO:
    2232                    *       PUSHST
    2233                    *       DINT
    2234                    *         MOVE    @Y_CORR,A12,L       ;GET ANY CORRECTION
    2235                    *         JRZ     NO_Y_COR                 ;NOTHIN THERE
    2236                    *
    2237                    *         CLR     A8                        ;AND LETS ZERO OUT THE CORRECTION RAM
    2238                    *         MOVE    A8,@Y_CORR,L
    2239                    *       POPST
    2240                    *
    2241                    *         ADD     A12,A3                    ;FACTOR IN THE CORRECTION
    2242                    *         ADD     A10,A2                    ;ALSO TO THE "ROW REMEMBER"
    2243                    *         MOVE    *A13(SPR_Y_BASE),A8,L     ;GET Y BASE FOR CURRENT OP
    2244                    *         ADD     A12,A8                    ;ADD CORRECTION
    2245                    *         MOVE    A8,*A13(SPR_Y_BASE),L     ;STORE IT BACK
    2246                    *
    2247                    *         MOVE    *A13(SPR_Y),A8,L          ;GET Y FOR CURRENT BLOB
    2248                    *         ADD     A12,A8                    ;ADD CORRECTION
    2249                    *         MOVE    A8,*A13(SPR_Y),L          ;STORE IT BACK
    2250                    *
    2251                    *         JRUC    NO_Y_COR3                 ;DON'T POP AGAIN
    2252                    *
    2253                    *NO_Y_COR
    2254                    *       POPST
    2255                    *NO_Y_COR3
    2256                    *
    2257                    *         GO_RIGHT A7,A8                    ;SHIFT THE A DOWN...MASK THE B
    2258                    *
    2259                    *         MOVE    *A3,A11         ;***A11 = DATA FROM SCREEN
    2260                    *         GO_RIGHT A11,A12        ;***A11,A12  A11 = HIGH PIX  A12 = LOW PIX
    2261                    **
    2262                    **
    2263                    **        NOW....WE HAVE:
    2264                    **
    2265                    **        HIGH PIXEL                   LOW PIXEL
    2266                    **        A7  = NEW DATA                A8  = NEW DATA
    2267                    **        A11 = SCREEN DATA             A12 = SCREEN DATA
    2268                    **
    2269                    **        NOW....GET SPRAY IN A4   2NDARY IN A5   THIRD IN A11
    2270                    *
    2271                    *         MOVE    A7,A7                ;NO DATA?
    2272                    *         JREQ    DO_LOW_PIX           ;THEN SKIP PROCESSING.
    2273                    *
    2274                    *         CMPI    5,A7                 ;IS HIGH PIXEL SMALL?
    2275                    *         JRHI    HIGH_1
    2276                    *
    2277                    *         RL      2,A0                 ;CHECK A RANDY BIT
    2278                    *         JRC     DO_LOW_PIX           ;SKIP 3/4 THE TIME
    2279                    *         JRN     DO_LOW_PIX
    2280                    *
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   50

    2281                    *HIGH_1:
    2282                    *         MOVE    A11,A4               ;COPY SCREEN DATA DOWN
    2283                    *         SRL     3,A4
    2284                    *
    2285                    *         JRNZ    NO_FUDGE_1           ;PIX HAS DATA...NO FUZZ                                 
    2286                    *         MOVE    B2,A5                ;FUZZING IN PROGRESS?
    2287                    *         JRZ     NO_FUDGE_1           ;NOPE
    2288                    *         RL      8,A0                 ;BRING A0 AROUND 8 TIMES         
    2289                    *         MOVE    A0,A11                                                
    2290                    *         AND     A5,A11               ;MASK DOWN BY FUDGE MASK            
    2291                    *         MOVE    A11,A4               ;COPY SCREEN DATA DOWN           
    2292                    *         SRL     3,A4                                                  
    2293                    *                                                                       
    2294                    *NO_FUDGE_1:
    2295                    *         MOVE    A11,A5
    2296                    *         SLL     29,A5
    2297                    *         SRL     30,A5                ;BITS 1 AND 2
    2298                    *
    2299                    *         SLL     31,A11               ;KEEP 3RD COLOR IN DESTINATION REG
    2300                    *         SRL     31,A11               ;BIT 0 
    2301                    *
    2302                    *         ADD     A7,A4                ;ADD IN NEW COLOR
    2303                    *         CMPI    31,A4                ;MAXED OUT?
    2304                    *         JRLS    HIGH_0               ;NO
    2305                    *         MOVK    31,A4                ;SET TO MAX
    2306                    *
    2307                    *HIGH_0:
    2308                    *         CMP     A1,A4                ;ARE WE IN RANGE TO STOP 2ND FROM 3?
    2309                    *         JRLO    HIGH_2               ;NO
    2310                    *
    2311                    *         CMPI    3,A5                 ;IS 2ND AT 3?
    2312                    *         JRLO    HIGH_2               ;NOPE...LEAVE IT
    2313                    *
    2314                    *         DEC     A5                   ;TAKE 1 AWAY
    2315                    *
    2316                    *HIGH_2:  CMP     A9,A4                ;ARE WE IN RANGE TO STOP 2ND FROM 2?
    2317                    *         JRLO    HIGH_3               ;NO
    2318                    *
    2319                    *         CMPI    2,A5
    2320                    *         JRLO    HIGH_3
    2321                    *
    2322                    *         DEC     A5
    2323                    *
    2324                    *HIGH_3:  CMP     A10,A4                ;ARE WE IN RANGE TO KILL ALL OTHERS?
    2325                    *         JRLO    HIGH_4
    2326                    *         CLR     A5
    2327                    *         CLR     A11                   ;TRASH OUT 3RD COLOR
    2328                    *
    2329                    *HIGH_4:  SLL     3,A4
    2330                    *         SLL     1,A5
    2331                    *         ADD     A4,A11
    2332                    *         ADD     A5,A11
    2333                    **
    2334                    **        HIGH BYTE DONE.....WORK ON LOW BYTE
    2335                    **
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   51

    2336                    *DO_LOW_PIX:
    2337                    *
    2338                    *         MOVE    A8,A8                ;NO DATA?
    2339                    *         JREQ    PUT_PIX_OUT          ;THEN SKIP PROCESSING.
    2340                    *
    2341                    *         CMPI    5,A8                 ;IS LOW PIXEL SMALL?
    2342                    *         JRHI    LOW_1
    2343                    *
    2344                    *         RL      2,A0                 ;CHECK A RANDY BIT
    2345                    *         JRC     PUT_PIX_OUT          ;SKIP 3/4 THE TIME
    2346                    *         JRN     PUT_PIX_OUT  
    2347                    *
    2348                    *LOW_1:
    2349                    *         MOVE    A12,A4               ;COPY SCREEN DATA DOWN
    2350                    *         SRL     3,A4
    2351                    *
    2352                    *         JRNZ    NO_FUDGE_2           ;PIX HAS DATA...NO FUZZ                                 
    2353                    *         MOVE    B2,A5                ;FUZZING IN PROGRESS?
    2354                    *         JRZ     NO_FUDGE_2           ;NOPE
    2355                    *
    2356                    *         RL      8,A0                 ;BRING A0 AROUND 8 TIMES         
    2357                    *         MOVE    A0,A12                                                
    2358                    *         AND     A5,A12               ;MASK DOWN BY FUZZ MASK             
    2359                    *         MOVE    A12,A4               ;COPY SCREEN DATA DOWN           
    2360                    *         SRL     3,A4                                                  
    2361                    *                                                                       
    2362                    *NO_FUDGE_2:
    2363                    *         MOVE    A12,A5
    2364                    *         SLL     29,A5
    2365                    *         SRL     30,A5                ;BITS 1 AND 2
    2366                    *
    2367                    *         SLL     31,A12
    2368                    *         SRL     31,A12               ;BIT 0 
    2369                    *
    2370                    *         ADD     A8,A4                ;ADD IN NEW COLOR
    2371                    *         CMPI    31,A4                ;MAXED OUT?
    2372                    *         JRLS    LOW_0                ;NO
    2373                    *         MOVK    31,A4                ;SET TO MAX
    2374                    *
    2375                    *LOW_0:
    2376                    *         CMP     A1,A4                ;ARE WE IN RANGE TO STOP 2ND FROM 3?
    2377                    *         JRLO    LOW_2                ;NO
    2378                    *
    2379                    *         CMPI    3,A5                 ;IS 2ND AT 3?
    2380                    *         JRLO    LOW_2                ;NOPE...LEAVE IT
    2381                    *
    2382                    *         DEC     A5                   ;TAKE 1 AWAY
    2383                    *
    2384                    *LOW_2:   CMP     A9,A4                ;ARE WE IN RANGE TO STOP 2ND FROM 2?
    2385                    *         JRLO    LOW_3                ;NO
    2386                    *
    2387                    *         CMPI    2,A5
    2388                    *         JRLO    LOW_3
    2389                    *
    2390                    *         DEC     A5
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   52

    2391                    *
    2392                    *LOW_3:   CMP     A10,A4                ;ARE WE IN RANGE TO KILL ALL OTHERS?
    2393                    *         JRLO    LOW_4
    2394                    *         CLR     A5
    2395                    *         CLR     A12                   ;TRASH OUT THAT COLOR
    2396                    *
    2397                    *LOW_4:   SLL     3,A4
    2398                    *         SLL     1,A5
    2399                    *         ADD     A4,A12
    2400                    *         ADD     A5,A12
    2401                    *
    2402                    *PUT_PIX_OUT:
    2403                    **
    2404                    **        A11,A12 HAVE THE PIXEL DATA
    2405                    **
    2406                    *         SLL     8,A11           ;SHIFT HIGH DATA
    2407                    *         ADD     A12,A11         ;NOW WE HAVE BOTH PIXIES TO WRITE
    2408                    *         MOVE    A11,*A3+,W      ;PUT THE PIXIES BACK ON THE SCREEN!
    2409                    *
    2410                    *LOOP_BOT:
    2411                    *         DSJ     B5,FINISH_ROW_LOOP  ;1 MORE WORD IN THIS ROW DONE!
    2412                    *         ADDI    SCREEN_X_UNIT*SCREEN_PITCH,A2     ;GET TO NEXT ROW
    2413                    *         MOVE    A2,A3
    2414                    *         DSJ     B3,NEW_ROW_LOOP     ;DECREMENT COLUMN COUNT 
    2415                    *
    2416                    *BLOB_OFF_SCREEN:
    2417                    *       MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12
    2418                    *         MMFM    SP,B2,B3,B4,B5
    2419                    *       RETS
    2420                    
    2421 00007240           PLOT_ON_BLACK:
    2422 00007240     099f           MMTM    SP,B2,B3,B4,B5
         00007250     3c00  
    2423 00007260     098f           MMTM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A14
         00007270     fffa  
    2424                    
    2425 00007280     b7a6           MOVE    *A13(SPR_POINTER),A6,L    ;A6 = ROM STRUCT POINTER
         00007290     0060  
    2426 000072a0     b4c1           MOVE    *A6(WIDTH),A1,W                 ;WIDTH OF BRUSH
         000072b0     0000  
    2427 000072c0     2fe1           SRL     1,A1                      ;WIDTH OF BRUSH IN -WORDS-
    2428 000072d0     4e24           MOVE    A1,B4                   ;***B4 = WIDTH OF BRUSH IN -WORDS-
    2429 000072e0     b4c2           MOVE    *A6(HEIGHT),A2,W                 ;HEIGHT OF BRUSH
         000072f0     0010  
    2430 00007300     4e43           MOVE    A2,B3                   ;***B3 = HEIGHT OF BRUSH
    2431                    *
    2432                    *        NOW WE NEED TO GO FROM CURRENT COORDINATE TO UPPER LEFT OF
    2433                    *        BRUSH
    2434                    *
    2435 00007310     b6c3           MOVE    *A6(DW),A3,L                 ;DX IN A3
         00007320     0020  
    2436 00007330     b7a4           MOVE    *A13(SPR_X),A4,L          ;GET X
         00007340     00a0  
    2437 00007350     2ee4           SRL     9,A4                      ;MOVE X TO SCREEN COORDINATE
    2438 00007360     4083           ADD     A4,A3                     ;ADD IT INTO A3
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   53

    2439 00007370     0b83           ANDI    EVEN_X_MASK,A3            ;UPPER LEFT X
         00007380 fffff007  
    2440                    
    2441 000073a0     b6c4           MOVE    *A6(DH),A4,L                 ;DY IN A4
         000073b0     0040  
    2442                    *                                        ;***A6 = BRUSH DATA POINTER
    2443 000073c0     b7a5           MOVE    *A13(SPR_Y),A5,L          ;GET Y
         000073d0     00c0  
    2444 000073e0     40a4           ADD     A5,A4                     ;ADD IT INTO A4
    2445 000073f0     0b84           ANDI    Y_MASK,A4                 ;UPPER LEFT Y IN A4
         00007400 ffe00fff  
    2446 00007420     4083           ADD     A4,A3                   ;***A3 = UPPER LEFT SCREEN POINTER
    2447 00007430     0b63           CMPI    PLOT_MAX,A3            ;ARE WE ON SCREEN?
         00007440 ffe91fff  
    2448 00007460     c980           JAHS    BLOB_OFF_SCREEN1           ;NOPE....EXIT
         00007470 00007bf0' 
    2449                    
    2450 00007490     b5a4           MOVE    *A13(SPR_PALETTE),A4,W  ;***A4=PALETTE NUMBER FOR LOW PIX
         000074a0     0080  
    2451 000074b0     0b84           ANDI    BYTE_MASK,A4              ;KEEP LOW PIECE
         000074c0 ffffff00  
    2452 000074e0     4c62           MOVE    A3,A2                     ;SAVE ROW START IN A2
    2453                    
    2454 000074f0     4c85           MOVE    A4,A5                     ;COPY PALETTE TO A5
    2455 00007500     2505           SLL     8,A5                      ;DUPLICATE INTO HIGH BYTE
    2456 00007510     4085           ADD     A4,A5                     ;ADD LOW BACK IN
    2457 00007520     0585           MOVE    A5,@CMAPSEL,W             ;THIS MAKES SURE OUR WRITE USE OUR PAL
         00007530 01a80080  
    2458                    
    2459 00007550     b5a1           MOVE    *A13(SPR_FUZZ_FLAG),A1,W  ;GET FUZZ PARAMETER
         00007560     0200  
    2460 00007570     4c29           MOVE    A1,A9                     ;COPY FOR BASE
    2461 00007580     0b81           ANDI    0FFH,A1                   ;KEEP MASK IN A1
         00007590 ffffff00  
    2462 000075b0     2f09           SRL     8,A9                      ;SHIFT BASE DOWN
    2463 000075c0     0b89           ANDI    0FFH,A9                   ;AND KEEP IT ONLY
         000075d0 ffffff00  
    2464                    
    2465 000075f0     0b06           ADDI    S_DATA,A6                 ;POINT AT THE DATA
         00007600     0070  
    2466                    
    2467 00007610     b5a4           MOVE    *A13(SPR_COL_BASE),A4,W     ;RANGE FOR SPRAY COLOR
         00007620     01c0  
    2468 00007630     b5a5           MOVE    *A13(SPR_COL_MAX),A5,W
         00007640     01d0  
    2469                    
    2470 00007650     b7ae           MOVE    *A13(SPR_Y_SCROLL),A14,L    ;KEEP CURRENT Y HERE
         00007660     0160  
    2471                    
    2472                    *
    2473                    *        AT THIS POINT:
    2474                    *
    2475                    *        A0   RANDOM #'S FETCHED HERE.
    2476                    *
    2477                    *        A6 = ROM BRUSH POINTER
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   54

    2478                    *        A2 = BEGINNING OF ROW SCREEN POINTER
    2479                    *        A3 = SCREEN POINTER
    2480                    *
    2481                    *        B2 = AVAILABLE
    2482                    *        B3 = HEIGHT COUNTER
    2483                    *        B4 = ROW SIZE
    2484                    *        B5 = ROW COUNTER
    2485                    *
    2486                    *        A4 = COLOR BASE
    2487                    *        A5 = COLOR MAX
    2488                    *        
    2489                    *        A1 FUZZ MASK
    2490                    *        A9 FUZZ BASE
    2491                    *        A10 available
    2492                    *        A14 = SCROLLING_Y_POSITION
    2493                    *
    2494                    **************************************************************************
    2495                    *                                                                        *
    2496                    *          THIS IS THE BASIC PROCESSING LOOP                             *
    2497                    *                                                                        *
    2498                    **************************************************************************
    2499                    
    2500 00007670           NEW_ROW_LOOP1:
    2501 00007670     4c95           MOVE    B4,B5                     ;REFRESH ROW COUNTER
    2502 00007680     0d5f           CALLA   RANDOM
         00007690 00000000! 
    2503                    
    2504 000076b0           FINISH_ROW_LOOP1:
    2505 000076b0     94c7           MOVE    *A6+,A7,W                 ;FETCH 2 BRUSH BYTES
    2506 000076c0     cb05           JRNE    WORK_TO_DO1
    2507 000076d0     0b03           ADDI    WORD_SIZE,A3              ;BOTH DATA ZERO,
         000076e0     0010  
    2508 000076f0     c080           JAUC    LOOP_BOT1                  ;KICK THE SCREEN POINTER
         00007700 00007b60' 
    2509                    
    2510                    *                                          ;**A7,A8..A7 = HIGH PIX A8 = LOW PIX
    2511 00007720           WORK_TO_DO1:
    2512 00007720     07aa           MOVE    @Y_CORR,A10,L             ;GET ANY CORRECTION
         00007730 00000000! 
    2513 00007750     494e           CMP     A10,A14                   ;THIS IS NEGATIVE OF THE OFFSET
    2514 00007760     ca0f           JRZ     NO_Y_COR1                 ;NO CORRECTION....CONTINUE
    2515                    
    2516 00007770     454e           SUB     A10,A14                   ;REMOVE THIS AMOUNT
    2517 00007780     03ae           NEG     A14                       ;TURN IT POSITIVE (OUR OFFSET)
    2518                    
    2519 00007790     41c3           ADD     A14,A3                    ;FACTOR IN THE CORRECTION
    2520 000077a0     41c2           ADD     A14,A2                    ;ALSO TO THE "ROW REMEMBER"
    2521 000077b0     b7a8           MOVE    *A13(SPR_Y_BASE),A8,L     ;GET Y BASE FOR CURRENT OP
         000077c0     0140  
    2522 000077d0     41c8           ADD     A14,A8                    ;ADD CORRECTION
    2523 000077e0     b30d           MOVE    A8,*A13(SPR_Y_BASE),L     ;STORE IT BACK
         000077f0     0140  
    2524                    
    2525 00007800     b7a8           MOVE    *A13(SPR_Y),A8,L          ;GET Y FOR CURRENT BLOB
         00007810     00c0  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   55

    2526 00007820     41c8           ADD     A14,A8                    ;ADD CORRECTION
    2527 00007830     b30d           MOVE    A8,*A13(SPR_Y),L          ;STORE IT BACK
         00007840     00c0  
    2528                    
    2529 00007850     4d4e           MOVE    A10,A14                   ;MAKE THIS OUR CURRENT POSITION
    2530                    
    2531 00007860           NO_Y_COR1
    2532 00007860                    GO_RIGHT A7,A8                    ;SHIFT THE A DOWN...MASK THE B
    2533                    
    2534 000078b0     846b           MOVE    *A3,A11,W       ;***A11 = DATA FROM SCREEN
    2535 000078c0                    GO_RIGHT A11,A12        ;***A11,A12  A11 = HIGH PIX  A12 = LOW PIX
    2536                    *
    2537                    *
    2538                    *        NOW....WE HAVE:
    2539                    *
    2540                    *        HIGH PIXEL                   LOW PIXEL
    2541                    *        A7  = NEW DATA                A8  = NEW DATA
    2542                    *        A11 = SCREEN DATA             A12 = SCREEN DATA
    2543                    *
    2544                    *        NOW....GET SPRAY IN A4   2NDARY IN A5   THIRD IN A11
    2545                    
    2546 00007910     4ce7           MOVE    A7,A7                 ;NO DATA?
    2547 00007920     ca0f           JREQ    DO_LOW_PIX1           ;THEN SKIP PROCESSING.
    2548                    
    2549 00007930     0b47           CMPI    5,A7                  ;IS NEW DATA SMALL?
         00007940     fffa  
    2550 00007950     c303           JRHI    HIGH_11
    2551                    
    2552 00007960     3040           RL      2,A0                 ;CHECK A RANDY BIT
    2553 00007970     c80a           JRC     DO_LOW_PIX1           ;SKIP 3/4 THE TIME
    2554 00007980     ce09           JRN     DO_LOW_PIX1
    2555                    
    2556 00007990           HIGH_11:
    2557 00007990     488b           CMP     A4,A11                ;ARE WE IN RANGE?
    2558 000079a0     c802           JRLO    NO_DATA_1             ;PIX VALUE TOO LOW....START FRESH
    2559 000079b0     48ab           CMP     A5,A11                ;ARE WE TOO HIGH?
    2560 000079c0     c201           JRLS    NO_FUDGE_11           ;ITS IN OUR RANGE!
    2561                    *
    2562                    *        SCREEN DATA HAD NO SPRAY COLOR....WE EITHER NEED TO ESTABLISH
    2563                    *        DATA IN THE SPRAY RANGE, OR PLOT A FUZZ VALUE. 
    2564                    *
    2565                    
    2566 000079d0           NO_DATA_1:
    2567 000079d0     4c8b           MOVE    A4,A11               ;LOAD NO COLOR IN OUR RANGE FOR NO_FUDGE_11
    2568                    *         MOVE    A1,A14               ;COPY FUZZ MASK
    2569                    *         JRZ     NO_FUDGE_11          ;NO FUZZING......SKIP FUZZ
    2570                    *
    2571                    *         RL      8,A0                 ;BRING A0 AROUND 8 TIMES FOR NEW RANDY        
    2572                    *         AND     A0,A14               ;RANDOM MASK IN A14                                 
    2573                    *         ADD     A9,A14               ;ADD IN THE FUZZ BASE
    2574                    *         MOVE    A14,A11              ;THIS IS THE PIX....LEAVE IN REGGIE AND SKIP
    2575                    *
    2576                    *        Now add the brush compenent at this point
    2577                    *
    2578 000079e0           NO_FUDGE_11:
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   56

    2579 000079e0     40eb           ADD     A7,A11               ;ADD IN THE COLOR TO WHAT'S THERE
    2580 000079f0     48ab           CMP     A5,A11               ;ARE WE BEYOND MAX?
    2581 00007a00     c201           JRLS    DO_LOW_PIX1          ;NOPE CONTINUE
    2582 00007a10     4cab           MOVE    A5,A11               ;SET TO MAX.
    2583                    
    2584                    *
    2585                    *        HIGH BYTE DONE.....WORK ON LOW BYTE
    2586                    *
    2587 00007a20           DO_LOW_PIX1:
    2588 00007a20     4d08           MOVE    A8,A8                ;NO DATA?
    2589 00007a30     ca0f           JREQ    PUT_PIX_OUT1          ;THEN SKIP PROCESSING.
    2590                    
    2591 00007a40     0b48           CMPI    5,A8                 ;IS LOW PIXEL SMALL?
         00007a50     fffa  
    2592 00007a60     c303           JRHI    LOW_11
    2593                    
    2594 00007a70     3040           RL      2,A0                 ;CHECK A RANDY BIT
    2595 00007a80     c80a           JRC     PUT_PIX_OUT1          ;SKIP 3/4 THE TIME
    2596 00007a90     ce09           JRN     PUT_PIX_OUT1  
    2597                    
    2598 00007aa0           LOW_11:
    2599 00007aa0     488c           CMP     A4,A12                ;ARE WE IN RANGE?
    2600 00007ab0     c802           JRLO    LOW_DATA_1             ;PIX VALUE TOO LOW....START FRESH
    2601 00007ac0     48ac           CMP     A5,A12                ;ARE WE TOO HIGH?
    2602 00007ad0     c201           JRLS    LOW_FUDGE_11           ;ITS IN OUR RANGE!
    2603                    *
    2604                    *        SCREEN DATA HAD NO SPRAY COLOR....WE EITHER NEED TO ESTABLISH
    2605                    *        DATA IN THE SPRAY RANGE, OR PLOT A FUZZ VALUE. 
    2606                    *
    2607                    
    2608 00007ae0           LOW_DATA_1:
    2609 00007ae0     4c8c           MOVE    A4,A12               ;LOAD NO COLOR IN OUR RANGE FOR NO_FUDGE_11
    2610                    *         MOVE    A1,A14               ;COPY FUZZ MASK
    2611                    *         JRZ     LOW_FUDGE_11          ;NO FUZZING......SKIP FUZZ
    2612                    
    2613                    *         RL      8,A0                 ;BRING A0 AROUND 8 TIMES FOR NEW RANDY        
    2614                    *         AND     A0,A14               ;RANDOM MASK IN A14                                 
    2615                    *         ADD     A9,A14               ;ADD IN THE FUZZ BASE
    2616                    *         MOVE    A14,A12              ;THIS IS THE PIX....LEAVE IN REGGIE AND SKIP
    2617                    *
    2618                    *        Now add the brush compenent at this point
    2619                    *
    2620 00007af0           LOW_FUDGE_11:
    2621 00007af0     410c           ADD     A8,A12               ;ADD IN THE COLOR TO WHAT'S THERE
    2622 00007b00     48ac           CMP     A5,A12               ;ARE WE BEYOND MAX?
    2623 00007b10     c201           JRLS    PUT_PIX_OUT1          ;NOPE CONTINUE
    2624 00007b20     4cac           MOVE    A5,A12               ;SET TO MAX.
    2625                    
    2626 00007b30           PUT_PIX_OUT1:
    2627                    *
    2628                    *        A11,A12 HAVE THE PIXEL DATA
    2629                    *
    2630 00007b30     250b           SLL     8,A11           ;SHIFT HIGH DATA
    2631 00007b40     418b           ADD     A12,A11         ;NOW WE HAVE BOTH PIXIES TO WRITE
    2632 00007b50     9163           MOVE    A11,*A3+,W      ;PUT THE PIXIES BACK ON THE SCREEN!
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   57

    2633                    
    2634 00007b60           LOOP_BOT1:
    2635 00007b60     0d95           DSJ     B5,FINISH_ROW_LOOP1  ;1 MORE WORD IN THIS ROW DONE!
         00007b70     ffb3  
    2636 00007b80     0b02           ADDI    SCREEN_X_UNIT*SCREEN_PITCH,A2     ;GET TO NEXT ROW
         00007b90     1000  
    2637 00007ba0     4c43           MOVE    A2,A3
    2638 00007bb0     0d93           DSJ     B3,NEW_ROW_LOOP1     ;DECREMENT COLUMN COUNT 
         00007bc0     ffaa  
    2639                    
    2640 00007bd0     b3cd           MOVE    A14,*A13(SPR_Y_SCROLL),L    ;UPDATE OUR SCROLL POSITION.
         00007be0     0160  
    2641                    
    2642 00007bf0           BLOB_OFF_SCREEN1:
    2643 00007bf0     09af          MMFM    SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A14
         00007c00     5fff  
    2644 00007c10     09bf           MMFM    SP,B2,B3,B4,B5
         00007c20     003c  
    2645 00007c30     0960          RETS
    2646                    
    2647                    **************************************************************************
    2648                    *                                                                        *
    2649                    *          SET_BRUSH                                                     *
    2650                    *                                                                        *
    2651                    *          THIS IS CALLED TO SET A PARTICULAR BRUSH TO BE                *
    2652                    *          USED FOR SPRAYING.  THE BRUSH IS DEFINED BY                   *
    2653                    *          A POINTER TO A ROM BRUSH STRUCTURE.  THIS IS                  *
    2654                    *          PASSED AS A LONG WORD IN A0.                                  *
    2655                    *                                                                        *
    2656                    **************************************************************************
    2657 00007c40           SET_BRUSH:
    2658 00007c40     b20d           MOVE    A0,*A13(SPR_POINTER),L    ;STORE POINTER TO BRUSH IN PAREA
         00007c50     0060  
    2659 00007c60     0960           RETS
    2660                    
    2661                    **************************************************************************
    2662                    *                                                                        *
    2663                    *          PALETTE_FOR_BLACK_SPRAY                                       *
    2664                    *                                                                        *
    2665                    *          THIS IS CALLED TO INITIALIZE SPRAY ON BLACK FOR THE           *
    2666                    *          CURRENT PROCESS.   IT TAKES A0 = PALETTE NUMBER.              *
    2667                    *                                      A1 = SPRAY COLOR 0-7              *
    2668                    *                                                                        *
    2669                    *          IT INITIALIZES THE A0 PALETTE, SETS PROCESS AREA              *
    2670                    *          TO USE THAT PALETTE, AND PARAMETERS FOR                       *
    2671                    *          SPECIFIED COLOR.  IT ALSO SETS UP A POINTER TO                *
    2672                    *          THE PLOT_BLOB ROUTINE FOR SPRAY ON BLACK.                     *
    2673                    *                                                                        *
    2674                    **************************************************************************
    2675 00007c70           PALETTE_FOR_BLACK_SPRAY
    2676 00007c70     098f           MMTM    SP,A0
         00007c80     8000  
    2677 00007c90     0d3f           CALLR   SET_SPRAY_PALETTE        ;SET THE PALETTE FOR PROCESS USE
         00007ca0     001b  
    2678 00007cb0     0d3f           CALLR   SETUP_PALETTE_SPR_ON_BLACK
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   58

         00007cc0     002e  
    2679                    
    2680 00007cd0     4c20           MOVE    A1,A0                ;COPY COLOR TO A0
    2681 00007ce0     0d3f           CALLR   SET_SPRAY_COLOR      ;SETUP PROCESS FOR THIS COLOR
         00007cf0     0054  
    2682                    
    2683 00007d00     09e0           MOVI    PLOT_ON_BLACK,A0     ;THIS IS THE "PLOT BLOB" ROUTINE FOR BLACK 
         00007d10 00007240' 
    2684 00007d30     b20d           MOVE    A0,*A13(SPR_BLOB_ROUT),L  ;PUT IT OUT THERE.
         00007d40     01e0  
    2685 00007d50     09af          MMFM    SP,A0
         00007d60     0001  
    2686 00007d70     0960          RETS
    2687                    
    2688                    **************************************************************************
    2689                    *                                                                        *
    2690                    *          PALETTE_FOR_WALL_SPRAY                                        *
    2691                    *                                                                        *
    2692                    *          THIS IS CALLED FOR SPRAYING OVER BACKGROUND.  THE             *
    2693                    *          PALETTE NUMBER TO USE IS IN A0.  THE ROM TABLE                *
    2694                    *          TO INITIALIZE THE PALETTE IS IN A1.  IT ALSO SETS             *
    2695                    *          THE BLOB ROUTINE TO THE  SPRAY ON WALL HANDLER.               *
    2696                    *                                                                        *
    2697                    **************************************************************************
    2698 00007d80           PALETTE_FOR_WALL_SPRAY
    2699 00007d80     098f           MMTM    SP,A0
         00007d90     8000  
    2700 00007da0     0d3f           CALLR   SET_SPRAY_PALETTE    ;SET THE PALETTE FOR THIS SPRAY PROC.
         00007db0     000a  
    2701 00007dc0     0d3f           CALLR   SETUP_PALETTE        ;INITIALIZE PALETTE 0 FOR SPRAYING.
         00007dd0     0012  
    2702                    
    2703 00007de0     09e0           MOVI    PLOT_BLOB,A0         ;THIS IS THE "PLOT BLOB" ROUTINE FOR WALLS 
         00007df0 00007230' 
    2704 00007e10     b20d           MOVE    A0,*A13(SPR_BLOB_ROUT),L  ;PUT IT OUT THERE.
         00007e20     01e0  
    2705 00007e30     09af          MMFM    SP,A0
         00007e40     0001  
    2706 00007e50     0960          RETS
    2707                    
    2708                    **************************************************************************
    2709                    *                                                                        *
    2710                    *          SET_SPRAY_PALETTE                                             *
    2711                    *                                                                        *
    2712                    *          THIS IS CALLED WITH THE 6 BIT PALETTE TO SETUP FOR            *
    2713                    *          SPRAYING.  THE LOW WORD OF A0 CONTAINS THE PALETTE            *
    2714                    *          NUMBER.                                                       *
    2715                    *                                                                        *
    2716                    **************************************************************************
    2717 00007e60           SET_SPRAY_PALETTE:
    2718 00007e60     098f           MMTM    SP,A0
         00007e70     8000  
    2719 00007e80     0b80           ANDI    MAX_PAL_MASK,A0              ;MASK DOWN TO 6 BITS
         00007e90 ffffffc0  
    2720 00007eb0     b00d           MOVE    A0,*A13(SPR_PALETTE),W   ;INDICATE WHICH PALETTE WE'RE USING
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   59

         00007ec0     0080  
    2721 00007ed0     09af          MMFM    SP,A0
         00007ee0     0001  
    2722 00007ef0     0960          RETS
    2723                    
    2724                    **************************************************************************
    2725                    *                                                                        *
    2726                    *          SETUP_PALETTE                                                 *
    2727                    *                                                                        *
    2728                    *          THIS IS CALLED WITH A PALETTE NUMBER IN A0.  IT               *
    2729                    *          SETS UP THAT PALETTE FOR THE SPRAY PAINTER.                   *
    2730                    *                                                                        *
    2731                    *          A1 POINTS TO ROM TABLE DEFINING PALETTE.                      *
    2732                    *                                                                        *
    2733                    *          THIS IS FOR WALL PAINTING ONLY                                *
    2734                    *                                                                        *
    2735                    *          A1 GETS BASE OF TABLE TO SETUP.                               *
    2736                    *                                                                        *
    2737                    **************************************************************************
    2738 00007f00           SETUP_PALETTE:
    2739 00007f00     098f           MMTM    SP,A0,A1,A2
         00007f10     e000  
    2740 00007f20     0d3f           CALLR   POINT_AT_PALETTE          ;POINT A0 AT PALETTE
         00007f30     0028  
    2741 00007f40     09c2           MOVI    256,A2                    ;COUNT 256 TICKS
         00007f50     0100  
    2742 00007f60           SP1:
    2743 00007f60     9820           MOVE    *A1+,*A0+,W               ;COPY A BYTE
    2744 00007f70     3c42           DSJS    A2,SP1
    2745 00007f80     09af          MMFM    SP,A0,A1,A2
         00007f90     0007  
    2746 00007fa0     0960          RETS
    2747                    
    2748                    **************************************************************************
    2749                    *                                                                        *
    2750                    *          SETUP_PALETTE_SPR_ON_BLACK                                    *
    2751                    *                                                                        *
    2752                    *          THIS IS CALLED WITH A PALETTE NUMBER IN A0.  IT               *
    2753                    *          SETS UP THAT PALETTE FOR THE SPRAY PAINTER.                   *
    2754                    *                                                                        *
    2755                    **************************************************************************
    2756 00007fb0           SETUP_PALETTE_SPR_ON_BLACK:
    2757 00007fb0     098f           MMTM    SP,A0,A1,A2,A3,A4
         00007fc0     f800  
    2758                    *
    2759                    *        TRY AND WAIT FOR BEAM HERE!
    2760                    *
    2761                    
    2762 00007fd0           WAIT_FOR_BEAM
    2763 00007fd0     05a1           MOVE    @VCOUNT,A1,W              ;GET THE VERTICAL COUNTER
         00007fe0 c00001d0  
    2764 00008000     0b41           CMPI    8,A1                      ;DO IT WHEN THE BEAM IS HIGH!
         00008010     fff7  
    2765 00008020     c207           JRLS    BEAM_ME_UP_SCOTTY
    2766                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   60

    2767 00008030     05a1           MOVE    @TIMER,A1,W               ;GET ELAPSED TIME
         00008040 00000000! 
    2768 00008060     0b41           CMPI    20,A1                     ;ARE WE HANGING?
         00008070     ffeb  
    2769 00008080     c8f4           JRLO    WAIT_FOR_BEAM
    2770 00008090     0300           NOP                               ;PLACE FOR BREAKPOINT TO CHECK TIMEOUT!
    2771                    
    2772 000080a0           BEAM_ME_UP_SCOTTY
    2773 000080a0     0d3f           CALLR   POINT_AT_PALETTE
         000080b0     0010  
    2774                    
    2775 000080c0     09e1           MOVI    SPRAY_COL_TABLE,A1        ;POINT AT COLOR TABLE
         000080d0 00008320' 
    2776                    
    2777 000080f0           SET_P2:
    2778 000080f0     9422           MOVE    *A1+,A2,W                 ;GET COLOR COMBINATION
    2779                    
    2780 00008100     5684           CLR     A4                        ;ACCUMULATE THE COLOR IN A4
    2781 00008110     1803           MOVK    32,A3                     ;COUNT THE 32 COLORS
    2782                    
    2783 00008120           SET_P1:
    2784 00008120     9080           MOVE    A4,*A0+,W                 ;PUT THE CURRENT COLOR OUT
    2785 00008130     4044           ADD     A2,A4                     ;ADD SOME COLOR
    2786 00008140     3c63           DSJS    A3,SET_P1                 ;DO 32
    2787                    
    2788 00008150     0b61           CMPI    SPRAY_COL_END,A1          ;HAVE WE GOTTEN ALL THE COLORS?
         00008160 ffff7c5f' 
    2789 00008180     c8f6           JRLO    SET_P2
    2790 00008190     09af          MMFM    SP,A0,A1,A2,A3,A4
         000081a0     001f  
    2791 000081b0     0960          RETS
    2792                    
    2793 000081c0           POINT_AT_PALETTE
    2794 000081c0     0b80           ANDI    MAX_PAL_MASK,A0           ;MASK DOWN TO 6 BITS
         000081d0 ffffffc0  
    2795 000081f0     2580           SLL     LOG_PAL_SIZE,A0           ;FORM POINTER TO BASE OF PALETTE
    2796 00008200     0b20           ADDI    COLRAM,A0                 ;NOW A0 POINTS AT PALETTE BASE
         00008210 01800000  
    2797 00008230     0960           RETS
    2798                    
    2799                    **************************************************************************
    2800                    *                                                                        *
    2801                    *          SET_SPRAY_COLOR                                               *
    2802                    *                                                                        *
    2803                    *          THIS IS CALLED TO SET THE CURRENT SPRAY COLOR.                *
    2804                    *          IT IS FOR SPRAYING ON BLACK ONLY!                             *
    2805                    *          IT IS STORED IN THE CURRENT PROCESS STORE AREA.               *
    2806                    *          A0 HAS THE 3 BIT QUANTITY.                                    *
    2807                    *                                                                        *
    2808                    **************************************************************************
    2809 00008240           SET_SPRAY_COLOR:
    2810 00008240     098f           MMTM    SP,A0
         00008250     8000  
    2811 00008260     0b80           ANDI    SPRAY_NUM_MASK,A0    ;MASK TO BITS THAT COUNT
         00008270 fffffff8  
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   61

    2812 00008290     24a0           SLL     5,A0                 ;32 PALETTE COLORS PER SPRAY COLOR
    2813 000082a0     b00d           MOVE    A0,*A13(SPR_COL_BASE),W  ;MINIMUM FROM OUR CAN
         000082b0     01c0  
    2814 000082c0     13e0           ADDK    31,A0                    ;MAXIMUM COLOR
    2815 000082d0     b00d           MOVE    A0,*A13(SPR_COL_MAX),W   ;MAX FROM OUR CAN
         000082e0     01d0  
    2816 000082f0     09af          MMFM    SP,A0
         00008300     0001  
    2817 00008310     0960          RETS
    2818                    
    2819                    **************************************************************************
    2820                    *                                                                        *
    2821                    *          SPRAY_COL_TABLE                                               *
    2822                    *                                                                        *
    2823                    *          THIS IS THE SPRAYPAINT TABLE FOR BLACK BACKGROUND             *
    2824                    *          SPRAYPAINT.  IT GIVES THE ATTRIBUTES FOR THE SPRAY COLORS.    *
    2825                    *                                                                        *
    2826                    **************************************************************************
    2827 00008320           SPRAY_COL_TABLE:
    2828 00008320     0000           .WORD   0                              ;SPRAY WORD 0 = BLACK
    2829 00008330     0001           .WORD   ONE_BLUE                       ;           1 = BLUE
    2830 00008340     0020           .WORD   ONE_GREEN                      ;           2 = GREEN
    2831 00008350     0021           .WORD   ONE_GREEN+ONE_BLUE             ;           3 = YELLOW
    2832 00008360     0400           .WORD   ONE_RED                        ;           4 = RED
    2833 00008370     0401           .WORD   ONE_RED+ONE_BLUE               ;           5 = VIOLET
    2834 00008380     0420           .WORD   ONE_RED+ONE_GREEN              ;           6 = ORANGE
    2835 00008390     0421           .WORD   ONE_RED+ONE_GREEN+ONE_BLUE     ;           7 = WHITE
    2836 000083a0           SPRAY_COL_END:
    2837                    
    2838                    
    2839                    **************************************************************************
    2840                    *                                                                        *
    2841                    * SP_PAL2:         ;THIS MAKES SP_PAL2 A VALID NARC PALETTE (FOR WALL ET *
    2842                    *          .WORD            256                                          *
    2843                    * GREEN_PAL_TABLE:                                                       *
    2844                    *          .INCLUDE        "SP_PAL2.ASM"           ;USE GREEN SPRAY CAN  *
    2845                    *                                                                        *
    2846                    **************************************************************************
    2847                    *
    2848                    *        THE LABEL BRUSH_ROM IS USED TO "INITIALIZE" THE
    2849                    *        SPRAY PALETTE.  IT MUST POINT ANYWHERE IN
    2850                    *        ROM SPACE.  THE PALETTE WILL LATER BE ALGORITHMICALLY
    2851                    *        SETUP.
    2852                    *
    2853              83a0' BRUSH_ROM        EQU     $
    2854                    
    2855 000083a0           SIZE_6
    2856 000083a0     000c     .word    0CH,0BH
    2857 000083c0 ffffffd0     .LONG    -((0CH/2)*SCREEN_X_UNIT)
    2858 000083e0 ffffb000     .LONG    -((0BH/2)*SCREEN_Y_UNIT)
    2859 00008400     0030     .WORD    30H
    2860 00008410           I_S_6_25:
    2861 00008410       00     .byte    000H,000H,000H,000H,005H,005H,005H,000H,000H,000H,000H,0
    2862 00008470       00     .byte    000H,000H,005H,00CH,00CH,00EH,00CH,00CH,005H,000H,000H,0
    2863 000084d0       00     .byte    000H,005H,00CH,00EH,011H,011H,011H,00EH,00CH,005H,000H,0
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   62

    2864 00008530       00     .byte    000H,00CH,00EH,013H,013H,015H,013H,013H,00EH,00CH,000H,0
    2865 00008590       05     .byte    005H,00CH,011H,013H,015H,015H,015H,013H,011H,00CH,005H,0
    2866 000085f0       05     .byte    005H,00EH,011H,015H,015H,016H,015H,015H,011H,00EH,005H,0
    2867 00008650       05     .byte    005H,00CH,011H,013H,015H,015H,015H,013H,011H,00CH,005H,0
    2868 000086b0       00     .byte    000H,00CH,00EH,013H,013H,015H,013H,013H,00EH,00CH,000H,0
    2869 00008710       00     .byte    000H,005H,00CH,00EH,011H,011H,011H,00EH,00CH,005H,000H,0
    2870 00008770       00     .byte    000H,000H,005H,00CH,00CH,00EH,00CH,00CH,005H,000H,000H,0
    2871 000087d0       00     .byte    000H,000H,000H,000H,005H,005H,005H,000H,000H,000H,000H,0
    2872                    
    2873 00008830           MEDIUM_1:         
    2874 00008830     0014     .word    014H,013H
    2875 00008850 ffffffb0     .LONG    -((014H/2)*SCREEN_X_UNIT)
    2876 00008870 ffff7000     .LONG    -((013H/2)*SCREEN_Y_UNIT)
    2877 00008890     0024     .WORD    6*6
    2878                    
    2879 000088a0           I_S_10_12:
    2880 000088a0       00     .byte    00H,00H,00H,00H,00H,00H,00H,00H,00H,02H,00H,00H,00H,00H,00H,00H
    2881 00008920       00     .byte    00H,00H,00H,0
    2882 00008940       00     .byte    00H,00H,00H,00H,00H,02H,02H,02H,02H,02H,02H,02H,02H,02H,00H,00H
    2883 000089c0       00     .byte    00H,00H,00H,0
    2884 000089e0       00     .byte    00H,00H,00H,00H,02H,02H,04H,04H,04H,04H,04H,04H,04H,02H,02H,00H
    2885 00008a60       00     .byte    00H,00H,00H,0
    2886 00008a80       00     .byte    00H,00H,00H,02H,04H,04H,06H,06H,06H,06H,06H,06H,06H,04H,04H,02H
    2887 00008b00       00     .byte    00H,00H,00H,0
    2888 00008b20       00     .byte    00H,00H,02H,04H,04H,06H,06H,06H,07H,07H,07H,06H,06H,06H,04H,04H
    2889 00008ba0       02     .byte    02H,00H,00H,0
    2890 00008bc0       00     .byte    00H,02H,02H,04H,06H,06H,07H,07H,08H,08H,08H,07H,07H,06H,06H,04H
    2891 00008c40       02     .byte    02H,02H,00H,0
    2892 00008c60       00     .byte    00H,02H,04H,06H,06H,07H,08H,08H,08H,09H,08H,08H,08H,07H,06H,06H
    2893 00008ce0       04     .byte    04H,02H,00H,0
    2894 00008d00       00     .byte    00H,02H,04H,06H,06H,07H,08H,09H,09H,09H,09H,09H,08H,07H,06H,06H
    2895 00008d80       04     .byte    04H,02H,00H,0
    2896 00008da0       00     .byte    00H,02H,04H,06H,07H,08H,08H,09H,09H,09H,09H,09H,08H,08H,07H,06H
    2897 00008e20       04     .byte    04H,02H,00H,0
    2898 00008e40       02     .byte    02H,02H,04H,06H,07H,08H,09H,09H,09H,09H,09H,09H,09H,08H,07H,06H
    2899 00008ec0       04     .byte    04H,02H,02H,0
    2900 00008ee0       00     .byte    00H,02H,04H,06H,07H,08H,08H,09H,09H,09H,09H,09H,08H,08H,07H,06H
    2901 00008f60       04     .byte    04H,02H,00H,0
    2902 00008f80       00     .byte    00H,02H,04H,06H,06H,07H,08H,09H,09H,09H,09H,09H,08H,07H,06H,06H
    2903 00009000       04     .byte    04H,02H,00H,0
    2904 00009020       00     .byte    00H,02H,04H,06H,06H,07H,08H,08H,08H,09H,08H,08H,08H,07H,06H,06H
    2905 000090a0       04     .byte    04H,02H,00H,0
    2906 000090c0       00     .byte    00H,02H,02H,04H,06H,06H,07H,07H,08H,08H,08H,07H,07H,06H,06H,04H
    2907 00009140       02     .byte    02H,02H,00H,0
    2908 00009160       00     .byte    00H,00H,02H,04H,04H,06H,06H,06H,07H,07H,07H,06H,06H,06H,04H,04H
    2909 000091e0       02     .byte    02H,00H,00H,0
    2910 00009200       00     .byte    00H,00H,00H,02H,04H,04H,06H,06H,06H,06H,06H,06H,06H,04H,04H,02H
    2911 00009280       00     .byte    00H,00H,00H,0
    2912 000092a0       00     .byte    00H,00H,00H,00H,02H,02H,04H,04H,04H,04H,04H,04H,04H,02H,02H,00H
    2913 00009320       00     .byte    00H,00H,00H,0
    2914 00009340       00     .byte    00H,00H,00H,00H,00H,02H,02H,02H,02H,02H,02H,02H,02H,02H,00H,00H
    2915 000093c0       00     .byte    00H,00H,00H,0
    2916 000093e0       00     .byte    00H,00H,00H,00H,00H,00H,00H,00H,00H,02H,00H,00H,00H,00H,00H,00H
    2917 00009460       00     .byte    00H,00H,00H,0
    2918                    
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   63

    2919 00009480           BIG_BRUSH_1:         
    2920 00009480     001a     .word    01AH,019H
    2921 000094a0 ffffff98     .LONG    -((1AH/2)*SCREEN_X_UNIT)
    2922 000094c0 ffff4000     .LONG    -((19H/2)*SCREEN_Y_UNIT)
    2923 000094e0     0100     .word    (8*2)*(8*2)         ;SQUARE OF SPRAY LENGTH W/ 2 BIT FRAC.
    2924                    
    2925 000094f0       00     .byte    000H,000H,000H,000H,000H,000H,000H,000H,001H,002H,002H,003H,003H,003H,002H,002H
    2926 00009570       01     .byte    001H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    2927 000095c0       00     .byte    000H,000H,000H,000H,000H,000H,001H,002H,004H,004H,005H,005H,006H,005H,005H,004H
    2928 00009640       04     .byte    004H,002H,001H,000H,000H,000H,000H,000H,000H,000H
    2929 00009690       00     .byte    000H,000H,000H,000H,000H,002H,004H,005H,006H,007H,008H,008H,008H,008H,008H,007H
    2930 00009710       06     .byte    006H,005H,004H,002H,000H,000H,000H,000H,000H,000H
    2931 00009760       00     .byte    000H,000H,000H,000H,003H,004H,006H,008H,009H,00AH,00AH,00BH,00BH,00BH,00AH,00AH
    2932 000097e0       09     .byte    009H,008H,006H,004H,003H,000H,000H,000H,000H,000H
    2933 00009830       00     .byte    000H,000H,000H,003H,005H,007H,008H,00AH,00BH,00CH,00CH,00DH,00DH,00DH,00CH,00CH
    2934 000098b0       0b     .byte    00BH,00AH,008H,007H,005H,003H,000H,000H,000H,000H
    2935 00009900       00     .byte    000H,000H,002H,004H,007H,009H,00AH,00CH,00DH,00EH,00EH,00FH,00FH,00FH,00EH,00EH
    2936 00009980       0d     .byte    00DH,00CH,00AH,009H,007H,004H,002H,000H,000H,000H
    2937 000099d0       00     .byte    000H,001H,004H,006H,008H,00AH,00CH,00DH,00EH,00FH,011H,011H,011H,011H,011H,00FH
    2938 00009a50       0e     .byte    00EH,00DH,00CH,00AH,008H,006H,004H,001H,000H,000H
    2939 00009aa0       00     .byte    000H,002H,005H,008H,00AH,00CH,00DH,00FH,011H,011H,013H,013H,013H,013H,013H,011H
    2940 00009b20       11     .byte    011H,00FH,00DH,00CH,00AH,008H,005H,002H,000H,000H
    2941 00009b70       01     .byte    001H,004H,006H,009H,00BH,00DH,00EH,011H,011H,013H,014H,014H,014H,014H,014H,013H
    2942 00009bf0       11     .byte    011H,011H,00EH,00DH,00BH,009H,006H,004H,001H,000H
    2943 00009c40       02     .byte    002H,004H,007H,00AH,00CH,00EH,00FH,011H,013H,014H,015H,015H,015H,015H,015H,014H
    2944 00009cc0       13     .byte    013H,011H,00FH,00EH,00CH,00AH,007H,004H,002H,000H
    2945 00009d10       02     .byte    002H,005H,008H,00AH,00CH,00EH,011H,013H,014H,015H,015H,016H,016H,016H,015H,015H
    2946 00009d90       14     .byte    014H,013H,011H,00EH,00CH,00AH,008H,005H,002H,000H
    2947 00009de0       03     .byte    003H,005H,008H,00BH,00DH,00FH,011H,013H,014H,015H,016H,016H,016H,016H,016H,015H
    2948 00009e60       14     .byte    014H,013H,011H,00FH,00DH,00BH,008H,005H,003H,000H
    2949 00009eb0       03     .byte    003H,006H,008H,00BH,00DH,00FH,011H,013H,014H,015H,016H,016H,018H,016H,016H,015H
    2950 00009f30       14     .byte    014H,013H,011H,00FH,00DH,00BH,008H,006H,003H,000H
    2951 00009f80       03     .byte    003H,005H,008H,00BH,00DH,00FH,011H,013H,014H,015H,016H,016H,016H,016H,016H,015H
    2952 0000a000       14     .byte    014H,013H,011H,00FH,00DH,00BH,008H,005H,003H,000H
    2953 0000a050       02     .byte    002H,005H,008H,00AH,00CH,00EH,011H,013H,014H,015H,015H,016H,016H,016H,015H,015H
    2954 0000a0d0       14     .byte    014H,013H,011H,00EH,00CH,00AH,008H,005H,002H,000H
    2955 0000a120       02     .byte    002H,004H,007H,00AH,00CH,00EH,00FH,011H,013H,014H,015H,015H,015H,015H,015H,014H
    2956 0000a1a0       13     .byte    013H,011H,00FH,00EH,00CH,00AH,007H,004H,002H,000H
    2957 0000a1f0       01     .byte    001H,004H,006H,009H,00BH,00DH,00EH,011H,011H,013H,014H,014H,014H,014H,014H,013H
    2958 0000a270       11     .byte    011H,011H,00EH,00DH,00BH,009H,006H,004H,001H,000H
    2959 0000a2c0       00     .byte    000H,002H,005H,008H,00AH,00CH,00DH,00FH,011H,011H,013H,013H,013H,013H,013H,011H
    2960 0000a340       11     .byte    011H,00FH,00DH,00CH,00AH,008H,005H,002H,000H,000H
    2961 0000a390       00     .byte    000H,001H,004H,006H,008H,00AH,00CH,00DH,00EH,00FH,011H,011H,011H,011H,011H,00FH
    2962 0000a410       0e     .byte    00EH,00DH,00CH,00AH,008H,006H,004H,001H,000H,000H
    2963 0000a460       00     .byte    000H,000H,002H,004H,007H,009H,00AH,00CH,00DH,00EH,00EH,00FH,00FH,00FH,00EH,00EH
    2964 0000a4e0       0d     .byte    00DH,00CH,00AH,009H,007H,004H,002H,000H,000H,000H
    2965 0000a530       00     .byte    000H,000H,000H,003H,005H,007H,008H,00AH,00BH,00CH,00CH,00DH,00DH,00DH,00CH,00CH
    2966 0000a5b0       0b     .byte    00BH,00AH,008H,007H,005H,003H,000H,000H,000H,000H
    2967 0000a600       00     .byte    000H,000H,000H,000H,003H,004H,006H,008H,009H,00AH,00AH,00BH,00BH,00BH,00AH,00AH
    2968 0000a680       09     .byte    009H,008H,006H,004H,003H,000H,000H,000H,000H,000H
    2969 0000a6d0       00     .byte    000H,000H,000H,000H,000H,002H,004H,005H,006H,007H,008H,008H,008H,008H,008H,007H
    2970 0000a750       06     .byte    006H,005H,004H,002H,000H,000H,000H,000H,000H,000H
    2971 0000a7a0       00     .byte    000H,000H,000H,000H,000H,000H,001H,002H,004H,004H,005H,005H,006H,005H,005H,004H
    2972 0000a820       04     .byte    004H,002H,001H,000H,000H,000H,000H,000H,000H,000H
    2973 0000a870       00     .byte    000H,000H,000H,000H,000H,000H,000H,000H,001H,002H,002H,003H,003H,003H,002H,002H
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   64

    2974 0000a8f0       01     .byte    001H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    2975                    
    2976 0000a940           BIG_ERASER:         
    2977 0000a940     001a     .word    01AH,019H
    2978 0000a960 ffffff98     .LONG    -((1AH/2)*SCREEN_X_UNIT)
    2979 0000a980 ffff4000     .LONG    -((19H/2)*SCREEN_Y_UNIT)
    2980 0000a9a0     0100     .word    (8*2)*(8*2)         ;SQUARE OF SPRAY LENGTH W/ 2 BIT FRAC.
    2981                    
    2982 0000a9b0       00     .byte    000H,000H,000H,000H,000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H
    2983 0000aa30       10     .byte    010H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    2984 0000aa80       00     .byte    000H,000H,000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    2985 0000ab00       10     .byte    010H,010H,010H,000H,000H,000H,000H,000H,000H,000H
    2986 0000ab50       00     .byte    000H,000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    2987 0000abd0       10     .byte    010H,010H,010H,010H,000H,000H,000H,000H,000H,000H
    2988 0000ac20       00     .byte    000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    2989 0000aca0       10     .byte    010H,010H,010H,010H,010H,000H,000H,000H,000H,000H
    2990 0000acf0       00     .byte    000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    2991 0000ad70       10     .byte    010H,010H,010H,010H,010H,010H,000H,000H,000H,000H
    2992 0000adc0       00     .byte    000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    2993 0000ae40       10     .byte    010H,010H,010H,010H,010H,010H,010H,000H,000H,000H
    2994 0000ae90       00     .byte    000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,011H,011H,011H,011H,011H,010H
    2995 0000af10       10     .byte    010H,010H,010H,010H,010H,010H,010H,010H,000H,000H
    2996 0000af60       00     .byte    000H,010H,010H,010H,010H,010H,010H,010H,011H,011H,013H,013H,013H,013H,013H,011H
    2997 0000afe0       11     .byte    011H,010H,010H,010H,010H,010H,010H,010H,000H,000H
    2998 0000b030       10     .byte    010H,010H,010H,010H,010H,010H,010H,011H,011H,013H,014H,014H,014H,014H,014H,013H
    2999 0000b0b0       11     .byte    011H,011H,010H,010H,010H,010H,010H,010H,010H,000H
    3000 0000b100       10     .byte    010H,010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,015H,015H,015H,015H,014H
    3001 0000b180       13     .byte    013H,011H,010H,010H,010H,010H,010H,010H,010H,000H
    3002 0000b1d0       10     .byte    010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,015H,016H,016H,016H,015H,015H
    3003 0000b250       14     .byte    014H,013H,011H,010H,010H,010H,010H,010H,010H,000H
    3004 0000b2a0       10     .byte    010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,016H,016H,016H,016H,016H,015H
    3005 0000b320       14     .byte    014H,013H,011H,010H,010H,010H,010H,010H,010H,000H
    3006 0000b370       10     .byte    010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,016H,016H,018H,016H,016H,015H
    3007 0000b3f0       14     .byte    014H,013H,011H,010H,010H,010H,010H,010H,010H,000H
    3008 0000b440       10     .byte    010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,016H,016H,016H,016H,016H,015H
    3009 0000b4c0       14     .byte    014H,013H,011H,010H,010H,010H,010H,010H,010H,000H
    3010 0000b510       10     .byte    010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,015H,016H,016H,016H,015H,015H
    3011 0000b590       14     .byte    014H,013H,011H,010H,010H,010H,010H,010H,010H,000H
    3012 0000b5e0       10     .byte    010H,010H,010H,010H,010H,010H,010H,011H,013H,014H,015H,015H,015H,015H,015H,014H
    3013 0000b660       13     .byte    013H,011H,010H,010H,010H,010H,010H,010H,010H,000H
    3014 0000b6b0       10     .byte    010H,010H,010H,010H,010H,010H,010H,011H,011H,013H,014H,014H,014H,014H,014H,013H
    3015 0000b730       11     .byte    011H,011H,010H,010H,010H,010H,010H,010H,010H,000H
    3016 0000b780       00     .byte    000H,010H,010H,010H,010H,010H,010H,010H,011H,011H,013H,013H,013H,013H,013H,011H
    3017 0000b800       11     .byte    011H,010H,010H,010H,010H,010H,010H,010H,000H,000H
    3018 0000b850       00     .byte    000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,011H,011H,011H,011H,011H,010H
    3019 0000b8d0       10     .byte    010H,010H,010H,010H,010H,010H,010H,010H,000H,000H
    3020 0000b920       00     .byte    000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    3021 0000b9a0       10     .byte    010H,010H,010H,010H,010H,010H,010H,000H,000H,000H
    3022 0000b9f0       00     .byte    000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    3023 0000ba70       10     .byte    010H,010H,010H,010H,010H,010H,000H,000H,000H,000H
    3024 0000bac0       00     .byte    000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    3025 0000bb40       10     .byte    010H,010H,010H,010H,010H,000H,000H,000H,000H,000H
    3026 0000bb90       00     .byte    000H,000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
    3027 0000bc10       10     .byte    010H,010H,010H,010H,000H,000H,000H,000H,000H,000H
    3028 0000bc60       00     .byte    000H,000H,000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H,010H,010H
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   65

    3029 0000bce0       10     .byte    010H,010H,010H,000H,000H,000H,000H,000H,000H,000H
    3030 0000bd30       00     .byte    000H,000H,000H,000H,000H,000H,000H,000H,010H,010H,010H,010H,010H,010H,010H,010H
    3031 0000bdb0       10     .byte    010H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    3032                    
    3033                    **************************************************************************
    3034                    *                                                                        *
    3035                    *          THESE ARE THE ROUTINES FOR THE NARCSPR1 CHARACTER             *
    3036                    *          SET.  THEY ARE INCLUDED HERE SO THAT THE                      *
    3037                    *          CALLR DETECTOR WON'T CONSIDER CALLR TO THESE AN               *
    3038                    *          ERROR.                                                        *
    3039                    *                                                                        *
    3040                    **************************************************************************
    3041 0000be00           NUMBER_WIDTH
    3042 0000be00     09c3           MOVI    160,A3
         0000be10     00a0  
    3043 0000be20     0960           RETS
    3044                    
    3045 0000be30           NUMBER_HEIGHT                                                          
    3046 0000be30     09c3           MOVI    352,A3                                                
         0000be40     0160  
    3047 0000be50     0960           RETS                                                          
    3048                                                                                           
    3049 0000be60           COMMA_WIDTH                                                            
    3050 0000be60     09c3           MOVI    50,A3
         0000be70     0032  
    3051 0000be80     0960           RETS
    3052                    
    3053                    **************************************************************************
    3054                    *                                                                        *
    3055                    *          FETCH_FIGURE_PTR                                              *
    3056                    *                                                                        *
    3057                    *          THIS IS CALLED OUT OF THE SCRIPT PROCESSOR EACH               *
    3058                    *          TIME A CHARATER NEEDS TO BE DRAWN.  A0 CONTAINS               *
    3059                    *          THE BYTE (ASCII) TO BE DRAWN.  WE NEED TO                     *
    3060                    *          RETURN IN A4 A POINTER TO THE CHARACTER SCRIPT.               *
    3061                    *                                                                        *
    3062                    **************************************************************************
    3063 0000be90           FETCH_FIGURE_PTR
    3064 0000be90     0be0           SUBI    SPACE,A0             ;WE MUST BE SPACE OR GREATER
         0000bea0     ffdf  
    3065 0000beb0     c904           JRNC    FETCH_FIG_1          ;CONTINUE
    3066                    
    3067 0000bec0           BAD_ASCII
    3068                             .IF DEBUG
    3069                                JRUC   $                         ;HANG IN DEVELOPMENT
    3070                             .ENDIF
    3071                    
    3072 0000bec0     09e4           MOVI    LET_SPACE,A4                ;GIVE BACK A SPACE IN RELEASE
         0000bed0 000145d0' 
    3073 0000bef0     0960           RETS                                ;AND RETURN
    3074                    
    3075 0000bf00           FETCH_FIG_1
    3076 0000bf00     0b40           CMPI    UNDERSCORE-SPACE,A0         ;ARE WE BEYOND UNDERSCORE?
         0000bf10     ffc0  
    3077 0000bf20     c3f9           JRHI    BAD_ASCII
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   66

    3078                    
    3079 0000bf30     24a0           SLL     5,A0                        ;EACH LETTER IS A LONG WORD
    3080 0000bf40     09e4           MOVI    SPRAY_1_TABLE,A4
         0000bf50 0000bfa0' 
    3081 0000bf70     4004           ADD     A0,A4                       ;A4 POINTS AT OUR POINTER
    3082 0000bf80     8684           MOVE    *A4,A4,L                    ;LOAD UP THE POINTER
    3083 0000bf90     0960           RETS
    3084                    
    3085                             .INCLUDE        "NARCSPR1.ASM"  ;1ST CHARACTER SET
    3086                    
    3087              000b  TABLE_SCALER     EQU     11                ;SIZE OF INITIALS AND SCORES
    3088                    
    3089 00014c20           HIGHEST_NARCS S_GPAL                            ;USE GLOBAL PALETTE
    3090 00014c28                    S_BRUSH            MEDIUM_1
    3091 00014c60                    S_COLOR            SPRAY_WHITE    ;THIS INITIALIZES PALETTE ECT.
    3092 00014c70                    S_SCALER           20
    3093                    *         S_Y                50H
    3094 00014ca0                    S_Y                6AH
    3095 00014ce0                    S_RATE             00H
    3096 00014d10                    S_X                50H
    3097 00014d50                    S_CHAR          'H'                                           
    3098 00014d60                    S_CHAR          'I'                                           
    3099 00014d70                    S_CHAR          'G'                                           
    3100 00014d80                    S_CHAR          'H'                                           
    3101 00014d90                    S_CHAR          'E'                                           
    3102 00014da0                    S_CHAR          'S'                                           
    3103 00014db0                    S_CHAR          'T'                                           
    3104                    
    3105 00014dc0                    S_X             88H
    3106 00014e00                    S_Y             0A2H
    3107 00014e40                    S_NEW_C         SPRAY_RED
    3108                    
    3109 00014ea0                    S_CHAR          'N'                                           
    3110 00014eb0                    S_CHAR          'A'                                           
    3111 00014ec0                    S_CHAR          'R'                                           
    3112 00014ed0                    S_CHAR          'C'                                           
    3113 00014ee0                    S_CHAR          'S'                                           
    3114                    
    3115 00014ef0                    S_SCALER         TABLE_SCALER             ;SETUP FOR BOX SPACING!
    3116 00014f20                    S_END
    3117                    
    3118 00014f28           TOP_TODAY S_ON_BLK
    3119 00014f30                    S_GPAL                            ;USE GLOBAL PALETTE
    3120 00014f38                    S_BRUSH            MEDIUM_1
    3121 00014f70                    S_NEW_C            SPRAY_WHITE
    3122 00014fd0                    S_SCALER           20
    3123 00015000                    S_RATE             40H
    3124 00015030                    S_X                48H
    3125                    
    3126 00015070                    S_CHAR          'T'                                           
    3127 00015080                    S_CHAR          'O'                                           
    3128 00015090                    S_DY            -2000H
    3129 000150c0                    S_CHAR          'D'                                           
    3130 000150d0                    S_CHAR          'A'                                           
    3131 000150e0                    S_DY            -3000H
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   67

    3132 00015110                    S_CHAR          'Y'                                           
    3133 00015120                    S_CHAR          27H          ;APOSTROPHE                                 
    3134 00015130                    S_DY            3000H
    3135 00015160                    S_CHAR          'S'                                           
    3136 00015170                    S_DY            2000H        ;COMPENSATE AT END FOR REST
    3137 000151a0                    S_END
    3138                    
    3139 000151a8           TOP_5    S_X             80H
    3140 000151e0                    S_NEW_C         SPRAY_VIOLET
    3141                    
    3142 00015240                    S_CHAR          'T'                                           
    3143 00015250                    S_CHAR          'O'                                           
    3144 00015260                    S_DY            -4000H
    3145 00015290                    S_CHAR          'P'                                           
    3146 000152a0                    S_CHAR          ' '                                           
    3147 000152b0                    S_DY            4000H             ;COMPENSATE AT END FOR REST
    3148 000152e0                    S_CHAR          '5'                                           
    3149 000152f0                    S_END
    3150                    
    3151 000152f8           HSTD_ENTRY  S_RATE             100H                ;NOT LIGHT SPEED ON THIS
    3152 00015320                    S_X                LEFT_MARGIN_X
    3153 00015360                    S_BRUSH            SIZE_6
    3154 000153a0                    S_SCALER           TABLE_SCALER
    3155 000153d0                    S_END
    3156                    
    3157                    **************************************************************************
    3158                    *                                                                        *
    3159                    * FIRST_THREE                                                            *
    3160                    *          S_RATE          300H                                          *
    3161                    *          S_END                                                         *
    3162                    *                                                                        *
    3163                    **************************************************************************
    3164                    *
    3165                    *        ENTER INITIALS STUFF
    3166                    *
    3167 000153d8           SC_CRAM  S_ON_BLK
    3168 000153e0                    S_GPAL                            ;USE GLOBAL PALETTE
    3169 000153e8                    S_COLOR         SPRAY_RED
    3170 000153f8                    S_END
    3171                    
    3172 00015400           P1_SPRAY S_ON_BLK
    3173 00015408                    S_GPAL                            ;USE GLOBAL PALETTE
    3174 00015410                    S_BRUSH            BIG_BRUSH_1
    3175 00015450                    S_NEW_C            P1_SCOL        ;THIS INITIALIZES PALETTE ECT.
    3176 000154b0                    S_SCALER           14H
    3177 000154e0                    S_Y                110H
    3178 00015520                    S_RATE             8033H              ;3 BLOTS EVERY 3 FRAMES
    3179 00015550                    S_X                24H
    3180 00015590                    S_END                                  ;SETUP FOR SPRAY ECHO
    3181                    
    3182 00015598           P2_SPRAY S_GPAL                            ;USE GLOBAL PALETTE
    3183 000155a0                    S_ON_BLK
    3184 000155a8                    S_BRUSH            BIG_BRUSH_1
    3185 000155e0                    S_NEW_C            P2_SCOL    ;THIS INITIALIZES PALETTE ECT.
    3186 00015640                    S_SCALER           14H
TMS340 COFF Macro Assembler Version 6.10     Sat Apr 10 02:20:01 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

 <<< HIGH SCORE TABLE AND SPRAY PAINTING -Led >>>                    PAGE   68

    3187 00015670                    S_Y                110H
    3188 000156b0                    S_RATE             8033H              ;3 BLOTS EVERY 3 FRAMES
    3189 000156e0                    S_X                118H
    3190 00015720                    S_END                                  ;SETUP FOR SPRAY ECHO
    3191                    
    3192 00015728           E_BRUSH  S_NEW_C         SPRAY_BLACK
    3193 00015780                    S_BRUSH         BIG_ERASER
    3194 000157c0                    S_END
    3195                    
    3196                    *****************************************************************************
    3197 000157d0                    .EVEN                             ;AFTER BYTE BLOCK WE EVEN IT OUT!
    3198                    *****************************************************************************
    3199                    
    3200                    
    3201                    
    3202                    
    3203                             .END

 No Errors,  No Warnings
